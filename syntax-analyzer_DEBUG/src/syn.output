Grammar

    0 $accept: program $end

    1 program: lst_declarations
    2        | %empty

    3 lst_declarations: declaration lst_declarations
    4                 | declaration

    5 declaration: func_declaration
    6            | var_declaration
    7            | error

    8 $@1: %empty

    9 func_declaration: unq_declaration $@1 '(' params ')' '{' block_commands '}'

   10 var_declaration: unq_declaration ';'

   11 $@2: %empty

   12 unq_declaration: type $@2 ID

   13 params: %empty
   14       | lst_parameters

   15 lst_parameters: parameter ',' lst_parameters
   16               | parameter

   17 parameter: unq_declaration

   18 lst_params: %empty
   19           | lst_calling_params

   20 lst_calling_params: operation ',' lst_calling_params
   21                   | operation

   22 block_commands: command block_commands
   23               | %empty

   24 command: var_declaration
   25        | conditional_stmt
   26        | return_stmt
   27        | init_variable
   28        | iteration
   29        | input
   30        | output
   31        | '{' block_commands '}'
   32        | operation ';'

   33 conditional_stmt: IF_STMT '(' operation ')' command
   34                 | IF_STMT '(' operation ')' command ELSE_STMT command

   35 return_stmt: RETURN_STM operation ';'

   36 init_variable: init_stmt ';'

   37 iteration: FOR_STMT '(' loop_condition ')' command

   38 loop_condition: init_stmt ';' operation ';' update_stmt

   39 init_stmt: ID '=' operation

   40 update_stmt: init_stmt
   41            | %empty

   42 output: OUTPUT_WRITE '(' operation ')' ';'
   43       | OUTPUT_WRITELN '(' operation ')' ';'
   44       | OUTPUT_WRITE '(' STRING ')' ';'
   45       | OUTPUT_WRITELN '(' STRING ')' ';'

   46 input: INPUT_READ '(' expression ')' ';'

   47 func_calling: ID '(' lst_params ')'

   48 expression: func_calling
   49           | ID
   50           | const
   51           | single_operation

   52 const: number
   53      | NIL_CNST

   54 number: NUM_INT
   55       | NUM_FLOAT

   56 type: type_lst
   57     | type_number

   58 type_lst: type_number T_LIST

   59 type_number: T_INT
   60            | T_FLOAT

   61 operation: binary_operation

   62 binary_operation: arith_binary
   63                 | lst_binary
   64                 | binary_operation relation_operator expression
   65                 | binary_operation log_operator expression

   66 single_operation: arith_single
   67                 | lst_single
   68                 | '!' expression

   69 arith_binary: arith_binary '+' expression
   70             | arith_binary '-' expression
   71             | arith_binary '*' expression
   72             | arith_binary '/' expression
   73             | expression

   74 arith_single: '+' expression
   75             | '-' expression

   76 lst_single: '%' expression
   77           | '?' expression

   78 lst_binary: expression FILTER expression
   79           | expression MAP expression
   80           | expression ':' expression

   81 log_operator: AND
   82             | OR

   83 relation_operator: GREATER
   84                  | GREATER_EQ
   85                  | LESS
   86                  | LESS_EQ
   87                  | EQUAL
   88                  | NOT_EQ


Terminals, with rules where they appear

    $end (0) 0
    '!' <token> (33) 68
    '%' <token> (37) 76
    '(' <token> (40) 9 33 34 37 42 43 44 45 46 47
    ')' <token> (41) 9 33 34 37 42 43 44 45 46 47
    '*' <token> (42) 71
    '+' <token> (43) 69 74
    ',' <token> (44) 15 20
    '-' <token> (45) 70 75
    '/' <token> (47) 72
    ':' <token> (58) 80
    ';' <token> (59) 10 32 35 36 38 42 43 44 45 46
    '=' <token> (61) 39
    '?' <token> (63) 77
    '{' <token> (123) 9 31
    '}' <token> (125) 9 31
    error (256) 7
    NUM_INT <token> (258) 54
    NUM_FLOAT <token> (259) 55
    STRING <token> (260) 44 45
    NIL_CNST <token> (261) 53
    ID <token> (262) 12 39 47 49
    RETURN_STM <token> (263) 35
    T_INT <token> (264) 59
    T_FLOAT <token> (265) 60
    T_LIST <token> (266) 58
    IF_STMT <token> (267) 33 34
    ELSE_STMT <token> (268) 34
    FOR_STMT <token> (269) 37
    OUTPUT_WRITE <token> (270) 42 44
    OUTPUT_WRITELN <token> (271) 43 45
    INPUT_READ <token> (272) 46
    AND <token> (273) 81
    OR <token> (274) 82
    GREATER <token> (275) 83
    GREATER_EQ <token> (276) 84
    LESS <token> (277) 85
    LESS_EQ <token> (278) 86
    EQUAL <token> (279) 87
    NOT_EQ <token> (280) 88
    FILTER <token> (281) 78
    MAP <token> (282) 79


Nonterminals, with rules where they appear

    $accept (43)
        on left: 0
    program <node> (44)
        on left: 1 2
        on right: 0
    lst_declarations <node> (45)
        on left: 3 4
        on right: 1 3
    declaration <node> (46)
        on left: 5 6 7
        on right: 3 4
    func_declaration <node> (47)
        on left: 9
        on right: 5
    $@1 (48)
        on left: 8
        on right: 9
    var_declaration <node> (49)
        on left: 10
        on right: 6 24
    unq_declaration <node> (50)
        on left: 12
        on right: 9 10 17
    $@2 (51)
        on left: 11
        on right: 12
    params (52)
        on left: 13 14
        on right: 9
    lst_parameters <node> (53)
        on left: 15 16
        on right: 14 15
    parameter <node> (54)
        on left: 17
        on right: 15 16
    lst_params (55)
        on left: 18 19
        on right: 47
    lst_calling_params (56)
        on left: 20 21
        on right: 19 20
    block_commands <node> (57)
        on left: 22 23
        on right: 9 22 31
    command <node> (58)
        on left: 24 25 26 27 28 29 30 31 32
        on right: 22 33 34 37
    conditional_stmt <node> (59)
        on left: 33 34
        on right: 25
    return_stmt <node> (60)
        on left: 35
        on right: 26
    init_variable <node> (61)
        on left: 36
        on right: 27
    iteration <node> (62)
        on left: 37
        on right: 28
    loop_condition <node> (63)
        on left: 38
        on right: 37
    init_stmt <node> (64)
        on left: 39
        on right: 36 38 40
    update_stmt <node> (65)
        on left: 40 41
        on right: 38
    output <node> (66)
        on left: 42 43 44 45
        on right: 30
    input <node> (67)
        on left: 46
        on right: 29
    func_calling <node> (68)
        on left: 47
        on right: 48
    expression <node> (69)
        on left: 48 49 50 51
        on right: 46 64 65 68 69 70 71 72 73 74 75 76 77 78 79 80
    const <node> (70)
        on left: 52 53
        on right: 50
    number <node> (71)
        on left: 54 55
        on right: 52
    type <node> (72)
        on left: 56 57
        on right: 12
    type_lst <node> (73)
        on left: 58
        on right: 56
    type_number <node> (74)
        on left: 59 60
        on right: 57 58
    operation <node> (75)
        on left: 61
        on right: 20 21 32 33 34 35 38 39 42 43
    binary_operation <node> (76)
        on left: 62 63 64 65
        on right: 61 64 65
    single_operation <node> (77)
        on left: 66 67 68
        on right: 51
    arith_binary <node> (78)
        on left: 69 70 71 72 73
        on right: 62 69 70 71 72
    arith_single <node> (79)
        on left: 74 75
        on right: 66
    lst_single <node> (80)
        on left: 76 77
        on right: 67
    lst_binary <node> (81)
        on left: 78 79 80
        on right: 63
    log_operator <node> (82)
        on left: 81 82
        on right: 65
    relation_operator <node> (83)
        on left: 83 84 85 86 87 88
        on right: 64


State 0

    0 $accept: . program $end

    error    shift, and go to state 1
    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    $end  reduce using rule 2 (program)

    program           go to state 4
    lst_declarations  go to state 5
    declaration       go to state 6
    func_declaration  go to state 7
    var_declaration   go to state 8
    unq_declaration   go to state 9
    type              go to state 10
    type_lst          go to state 11
    type_number       go to state 12


State 1

    7 declaration: error .

    $end     reduce using rule 7 (declaration)
    error    reduce using rule 7 (declaration)
    T_INT    reduce using rule 7 (declaration)
    T_FLOAT  reduce using rule 7 (declaration)


State 2

   59 type_number: T_INT .

    ID      reduce using rule 59 (type_number)
    T_LIST  reduce using rule 59 (type_number)


State 3

   60 type_number: T_FLOAT .

    ID      reduce using rule 60 (type_number)
    T_LIST  reduce using rule 60 (type_number)


State 4

    0 $accept: program . $end

    $end  shift, and go to state 13


State 5

    1 program: lst_declarations .

    $end  reduce using rule 1 (program)


State 6

    3 lst_declarations: declaration . lst_declarations
    4                 | declaration .

    error    shift, and go to state 1
    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    $end  reduce using rule 4 (lst_declarations)

    lst_declarations  go to state 14
    declaration       go to state 6
    func_declaration  go to state 7
    var_declaration   go to state 8
    unq_declaration   go to state 9
    type              go to state 10
    type_lst          go to state 11
    type_number       go to state 12


State 7

    5 declaration: func_declaration .

    $end     reduce using rule 5 (declaration)
    error    reduce using rule 5 (declaration)
    T_INT    reduce using rule 5 (declaration)
    T_FLOAT  reduce using rule 5 (declaration)


State 8

    6 declaration: var_declaration .

    $end     reduce using rule 6 (declaration)
    error    reduce using rule 6 (declaration)
    T_INT    reduce using rule 6 (declaration)
    T_FLOAT  reduce using rule 6 (declaration)


State 9

    9 func_declaration: unq_declaration . $@1 '(' params ')' '{' block_commands '}'
   10 var_declaration: unq_declaration . ';'

    ';'  shift, and go to state 15

    '('  reduce using rule 8 ($@1)

    $@1  go to state 16


State 10

   12 unq_declaration: type . $@2 ID

    ID  reduce using rule 11 ($@2)

    $@2  go to state 17


State 11

   56 type: type_lst .

    ID  reduce using rule 56 (type)


State 12

   57 type: type_number .
   58 type_lst: type_number . T_LIST

    T_LIST  shift, and go to state 18

    ID  reduce using rule 57 (type)


State 13

    0 $accept: program $end .

    $default  accept


State 14

    3 lst_declarations: declaration lst_declarations .

    $end  reduce using rule 3 (lst_declarations)


State 15

   10 var_declaration: unq_declaration ';' .

    $end     reduce using rule 10 (var_declaration)
    error    reduce using rule 10 (var_declaration)
    T_INT    reduce using rule 10 (var_declaration)
    T_FLOAT  reduce using rule 10 (var_declaration)


State 16

    9 func_declaration: unq_declaration $@1 . '(' params ')' '{' block_commands '}'

    '('  shift, and go to state 19


State 17

   12 unq_declaration: type $@2 . ID

    ID  shift, and go to state 20


State 18

   58 type_lst: type_number T_LIST .

    ID  reduce using rule 58 (type_lst)


State 19

    9 func_declaration: unq_declaration $@1 '(' . params ')' '{' block_commands '}'

    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    ')'  reduce using rule 13 (params)

    unq_declaration  go to state 21
    params           go to state 22
    lst_parameters   go to state 23
    parameter        go to state 24
    type             go to state 151
    type_lst         go to state 11
    type_number      go to state 12


State 20

   12 unq_declaration: type $@2 ID .

    '('  reduce using rule 12 (unq_declaration)
    ';'  reduce using rule 12 (unq_declaration)


State 21

   17 parameter: unq_declaration .

    ')'  reduce using rule 17 (parameter)
    ','  reduce using rule 17 (parameter)


State 22

    9 func_declaration: unq_declaration $@1 '(' params . ')' '{' block_commands '}'

    ')'  shift, and go to state 25


State 23

   14 params: lst_parameters .

    ')'  reduce using rule 14 (params)


State 24

   15 lst_parameters: parameter . ',' lst_parameters
   16               | parameter .

    ','  shift, and go to state 26

    ')'  reduce using rule 16 (lst_parameters)


State 25

    9 func_declaration: unq_declaration $@1 '(' params ')' . '{' block_commands '}'

    '{'  shift, and go to state 27


State 26

   15 lst_parameters: parameter ',' . lst_parameters

    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    unq_declaration  go to state 21
    lst_parameters   go to state 28
    parameter        go to state 24
    type             go to state 151
    type_lst         go to state 11
    type_number      go to state 12


State 27

    9 func_declaration: unq_declaration $@1 '(' params ')' '{' . block_commands '}'

    NUM_INT         shift, and go to state 29
    NUM_FLOAT       shift, and go to state 30
    NIL_CNST        shift, and go to state 31
    ID              shift, and go to state 32
    RETURN_STM      shift, and go to state 33
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 34
    FOR_STMT        shift, and go to state 35
    OUTPUT_WRITE    shift, and go to state 36
    OUTPUT_WRITELN  shift, and go to state 37
    INPUT_READ      shift, and go to state 38
    '{'             shift, and go to state 39
    '+'             shift, and go to state 40
    '-'             shift, and go to state 41
    '%'             shift, and go to state 42
    '?'             shift, and go to state 43
    '!'             shift, and go to state 44

    '}'  reduce using rule 23 (block_commands)

    var_declaration   go to state 45
    unq_declaration   go to state 46
    block_commands    go to state 47
    command           go to state 48
    conditional_stmt  go to state 49
    return_stmt       go to state 50
    init_variable     go to state 51
    iteration         go to state 52
    init_stmt         go to state 53
    output            go to state 54
    input             go to state 55
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 152
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 60
    binary_operation  go to state 61
    single_operation  go to state 62
    arith_binary      go to state 63
    arith_single      go to state 64
    lst_single        go to state 65
    lst_binary        go to state 66


State 28

   15 lst_parameters: parameter ',' lst_parameters .

    ')'  reduce using rule 15 (lst_parameters)


State 29

   54 number: NUM_INT .

    ';'         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)
    '+'         reduce using rule 54 (number)
    '-'         reduce using rule 54 (number)
    '*'         reduce using rule 54 (number)
    '/'         reduce using rule 54 (number)
    FILTER      reduce using rule 54 (number)
    MAP         reduce using rule 54 (number)
    ':'         reduce using rule 54 (number)


State 30

   55 number: NUM_FLOAT .

    ';'         reduce using rule 55 (number)
    AND         reduce using rule 55 (number)
    OR          reduce using rule 55 (number)
    GREATER     reduce using rule 55 (number)
    GREATER_EQ  reduce using rule 55 (number)
    LESS        reduce using rule 55 (number)
    LESS_EQ     reduce using rule 55 (number)
    EQUAL       reduce using rule 55 (number)
    NOT_EQ      reduce using rule 55 (number)
    '+'         reduce using rule 55 (number)
    '-'         reduce using rule 55 (number)
    '*'         reduce using rule 55 (number)
    '/'         reduce using rule 55 (number)
    FILTER      reduce using rule 55 (number)
    MAP         reduce using rule 55 (number)
    ':'         reduce using rule 55 (number)


State 31

   53 const: NIL_CNST .

    ';'         reduce using rule 53 (const)
    AND         reduce using rule 53 (const)
    OR          reduce using rule 53 (const)
    GREATER     reduce using rule 53 (const)
    GREATER_EQ  reduce using rule 53 (const)
    LESS        reduce using rule 53 (const)
    LESS_EQ     reduce using rule 53 (const)
    EQUAL       reduce using rule 53 (const)
    NOT_EQ      reduce using rule 53 (const)
    '+'         reduce using rule 53 (const)
    '-'         reduce using rule 53 (const)
    '*'         reduce using rule 53 (const)
    '/'         reduce using rule 53 (const)
    FILTER      reduce using rule 53 (const)
    MAP         reduce using rule 53 (const)
    ':'         reduce using rule 53 (const)


State 32

   39 init_stmt: ID . '=' operation
   47 func_calling: ID . '(' lst_params ')'
   49 expression: ID .

    '('  shift, and go to state 67
    '='  shift, and go to state 68

    ';'         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)
    '+'         reduce using rule 49 (expression)
    '-'         reduce using rule 49 (expression)
    '*'         reduce using rule 49 (expression)
    '/'         reduce using rule 49 (expression)
    FILTER      reduce using rule 49 (expression)
    MAP         reduce using rule 49 (expression)
    ':'         reduce using rule 49 (expression)


State 33

   35 return_stmt: RETURN_STM . operation ';'

    NUM_INT    shift, and go to state 29
    NUM_FLOAT  shift, and go to state 30
    NIL_CNST   shift, and go to state 31
    ID         shift, and go to state 69
    '+'        shift, and go to state 40
    '-'        shift, and go to state 41
    '%'        shift, and go to state 42
    '?'        shift, and go to state 43
    '!'        shift, and go to state 44

    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    operation         go to state 70
    binary_operation  go to state 61
    single_operation  go to state 62
    arith_binary      go to state 63
    arith_single      go to state 64
    lst_single        go to state 65
    lst_binary        go to state 66


State 34

   33 conditional_stmt: IF_STMT . '(' operation ')' command
   34                 | IF_STMT . '(' operation ')' command ELSE_STMT command

    '('  shift, and go to state 71


State 35

   37 iteration: FOR_STMT . '(' loop_condition ')' command

    '('  shift, and go to state 72


State 36

   42 output: OUTPUT_WRITE . '(' operation ')' ';'
   44       | OUTPUT_WRITE . '(' STRING ')' ';'

    '('  shift, and go to state 73


State 37

   43 output: OUTPUT_WRITELN . '(' operation ')' ';'
   45       | OUTPUT_WRITELN . '(' STRING ')' ';'

    '('  shift, and go to state 74


State 38

   46 input: INPUT_READ . '(' expression ')' ';'

    '('  shift, and go to state 75


State 39

   31 command: '{' . block_commands '}'

    NUM_INT         shift, and go to state 29
    NUM_FLOAT       shift, and go to state 30
    NIL_CNST        shift, and go to state 31
    ID              shift, and go to state 32
    RETURN_STM      shift, and go to state 33
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 34
    FOR_STMT        shift, and go to state 35
    OUTPUT_WRITE    shift, and go to state 36
    OUTPUT_WRITELN  shift, and go to state 37
    INPUT_READ      shift, and go to state 38
    '{'             shift, and go to state 39
    '+'             shift, and go to state 40
    '-'             shift, and go to state 41
    '%'             shift, and go to state 42
    '?'             shift, and go to state 43
    '!'             shift, and go to state 44

    '}'  reduce using rule 23 (block_commands)

    var_declaration   go to state 45
    unq_declaration   go to state 46
    block_commands    go to state 76
    command           go to state 48
    conditional_stmt  go to state 49
    return_stmt       go to state 50
    init_variable     go to state 51
    iteration         go to state 52
    init_stmt         go to state 53
    output            go to state 54
    input             go to state 55
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 152
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 60
    binary_operation  go to state 61
    single_operation  go to state 62
    arith_binary      go to state 63
    arith_single      go to state 64
    lst_single        go to state 65
    lst_binary        go to state 66


State 40

   74 arith_single: '+' . expression

    NUM_INT    shift, and go to state 29
    NUM_FLOAT  shift, and go to state 30
    NIL_CNST   shift, and go to state 31
    ID         shift, and go to state 69
    '+'        shift, and go to state 40
    '-'        shift, and go to state 41
    '%'        shift, and go to state 42
    '?'        shift, and go to state 43
    '!'        shift, and go to state 44

    func_calling      go to state 56
    expression        go to state 77
    const             go to state 58
    number            go to state 59
    single_operation  go to state 62
    arith_single      go to state 64
    lst_single        go to state 65


State 41

   75 arith_single: '-' . expression

    NUM_INT    shift, and go to state 29
    NUM_FLOAT  shift, and go to state 30
    NIL_CNST   shift, and go to state 31
    ID         shift, and go to state 69
    '+'        shift, and go to state 40
    '-'        shift, and go to state 41
    '%'        shift, and go to state 42
    '?'        shift, and go to state 43
    '!'        shift, and go to state 44

    func_calling      go to state 56
    expression        go to state 78
    const             go to state 58
    number            go to state 59
    single_operation  go to state 62
    arith_single      go to state 64
    lst_single        go to state 65


State 42

   76 lst_single: '%' . expression

    NUM_INT    shift, and go to state 29
    NUM_FLOAT  shift, and go to state 30
    NIL_CNST   shift, and go to state 31
    ID         shift, and go to state 69
    '+'        shift, and go to state 40
    '-'        shift, and go to state 41
    '%'        shift, and go to state 42
    '?'        shift, and go to state 43
    '!'        shift, and go to state 44

    func_calling      go to state 56
    expression        go to state 79
    const             go to state 58
    number            go to state 59
    single_operation  go to state 62
    arith_single      go to state 64
    lst_single        go to state 65


State 43

   77 lst_single: '?' . expression

    NUM_INT    shift, and go to state 29
    NUM_FLOAT  shift, and go to state 30
    NIL_CNST   shift, and go to state 31
    ID         shift, and go to state 69
    '+'        shift, and go to state 40
    '-'        shift, and go to state 41
    '%'        shift, and go to state 42
    '?'        shift, and go to state 43
    '!'        shift, and go to state 44

    func_calling      go to state 56
    expression        go to state 80
    const             go to state 58
    number            go to state 59
    single_operation  go to state 62
    arith_single      go to state 64
    lst_single        go to state 65


State 44

   68 single_operation: '!' . expression

    NUM_INT    shift, and go to state 29
    NUM_FLOAT  shift, and go to state 30
    NIL_CNST   shift, and go to state 31
    ID         shift, and go to state 69
    '+'        shift, and go to state 40
    '-'        shift, and go to state 41
    '%'        shift, and go to state 42
    '?'        shift, and go to state 43
    '!'        shift, and go to state 44

    func_calling      go to state 56
    expression        go to state 81
    const             go to state 58
    number            go to state 59
    single_operation  go to state 62
    arith_single      go to state 64
    lst_single        go to state 65


State 45

   24 command: var_declaration .

    NUM_INT         reduce using rule 24 (command)
    NUM_FLOAT       reduce using rule 24 (command)
    NIL_CNST        reduce using rule 24 (command)
    ID              reduce using rule 24 (command)
    RETURN_STM      reduce using rule 24 (command)
    T_INT           reduce using rule 24 (command)
    T_FLOAT         reduce using rule 24 (command)
    IF_STMT         reduce using rule 24 (command)
    FOR_STMT        reduce using rule 24 (command)
    OUTPUT_WRITE    reduce using rule 24 (command)
    OUTPUT_WRITELN  reduce using rule 24 (command)
    INPUT_READ      reduce using rule 24 (command)
    '{'             reduce using rule 24 (command)
    '}'             reduce using rule 24 (command)
    '+'             reduce using rule 24 (command)
    '-'             reduce using rule 24 (command)
    '%'             reduce using rule 24 (command)
    '?'             reduce using rule 24 (command)
    '!'             reduce using rule 24 (command)


State 46

   10 var_declaration: unq_declaration . ';'

    ';'  shift, and go to state 153


State 47

    9 func_declaration: unq_declaration $@1 '(' params ')' '{' block_commands . '}'

    '}'  shift, and go to state 82


State 48

   22 block_commands: command . block_commands

    NUM_INT         shift, and go to state 29
    NUM_FLOAT       shift, and go to state 30
    NIL_CNST        shift, and go to state 31
    ID              shift, and go to state 32
    RETURN_STM      shift, and go to state 33
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 34
    FOR_STMT        shift, and go to state 35
    OUTPUT_WRITE    shift, and go to state 36
    OUTPUT_WRITELN  shift, and go to state 37
    INPUT_READ      shift, and go to state 38
    '{'             shift, and go to state 39
    '+'             shift, and go to state 40
    '-'             shift, and go to state 41
    '%'             shift, and go to state 42
    '?'             shift, and go to state 43
    '!'             shift, and go to state 44

    '}'  reduce using rule 23 (block_commands)

    var_declaration   go to state 45
    unq_declaration   go to state 46
    block_commands    go to state 83
    command           go to state 48
    conditional_stmt  go to state 49
    return_stmt       go to state 50
    init_variable     go to state 51
    iteration         go to state 52
    init_stmt         go to state 53
    output            go to state 54
    input             go to state 55
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 152
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 60
    binary_operation  go to state 61
    single_operation  go to state 62
    arith_binary      go to state 63
    arith_single      go to state 64
    lst_single        go to state 65
    lst_binary        go to state 66


State 49

   25 command: conditional_stmt .

    NUM_INT         reduce using rule 25 (command)
    NUM_FLOAT       reduce using rule 25 (command)
    NIL_CNST        reduce using rule 25 (command)
    ID              reduce using rule 25 (command)
    RETURN_STM      reduce using rule 25 (command)
    T_INT           reduce using rule 25 (command)
    T_FLOAT         reduce using rule 25 (command)
    IF_STMT         reduce using rule 25 (command)
    FOR_STMT        reduce using rule 25 (command)
    OUTPUT_WRITE    reduce using rule 25 (command)
    OUTPUT_WRITELN  reduce using rule 25 (command)
    INPUT_READ      reduce using rule 25 (command)
    '{'             reduce using rule 25 (command)
    '}'             reduce using rule 25 (command)
    '+'             reduce using rule 25 (command)
    '-'             reduce using rule 25 (command)
    '%'             reduce using rule 25 (command)
    '?'             reduce using rule 25 (command)
    '!'             reduce using rule 25 (command)


State 50

   26 command: return_stmt .

    NUM_INT         reduce using rule 26 (command)
    NUM_FLOAT       reduce using rule 26 (command)
    NIL_CNST        reduce using rule 26 (command)
    ID              reduce using rule 26 (command)
    RETURN_STM      reduce using rule 26 (command)
    T_INT           reduce using rule 26 (command)
    T_FLOAT         reduce using rule 26 (command)
    IF_STMT         reduce using rule 26 (command)
    FOR_STMT        reduce using rule 26 (command)
    OUTPUT_WRITE    reduce using rule 26 (command)
    OUTPUT_WRITELN  reduce using rule 26 (command)
    INPUT_READ      reduce using rule 26 (command)
    '{'             reduce using rule 26 (command)
    '}'             reduce using rule 26 (command)
    '+'             reduce using rule 26 (command)
    '-'             reduce using rule 26 (command)
    '%'             reduce using rule 26 (command)
    '?'             reduce using rule 26 (command)
    '!'             reduce using rule 26 (command)


State 51

   27 command: init_variable .

    NUM_INT         reduce using rule 27 (command)
    NUM_FLOAT       reduce using rule 27 (command)
    NIL_CNST        reduce using rule 27 (command)
    ID              reduce using rule 27 (command)
    RETURN_STM      reduce using rule 27 (command)
    T_INT           reduce using rule 27 (command)
    T_FLOAT         reduce using rule 27 (command)
    IF_STMT         reduce using rule 27 (command)
    FOR_STMT        reduce using rule 27 (command)
    OUTPUT_WRITE    reduce using rule 27 (command)
    OUTPUT_WRITELN  reduce using rule 27 (command)
    INPUT_READ      reduce using rule 27 (command)
    '{'             reduce using rule 27 (command)
    '}'             reduce using rule 27 (command)
    '+'             reduce using rule 27 (command)
    '-'             reduce using rule 27 (command)
    '%'             reduce using rule 27 (command)
    '?'             reduce using rule 27 (command)
    '!'             reduce using rule 27 (command)


State 52

   28 command: iteration .

    NUM_INT         reduce using rule 28 (command)
    NUM_FLOAT       reduce using rule 28 (command)
    NIL_CNST        reduce using rule 28 (command)
    ID              reduce using rule 28 (command)
    RETURN_STM      reduce using rule 28 (command)
    T_INT           reduce using rule 28 (command)
    T_FLOAT         reduce using rule 28 (command)
    IF_STMT         reduce using rule 28 (command)
    FOR_STMT        reduce using rule 28 (command)
    OUTPUT_WRITE    reduce using rule 28 (command)
    OUTPUT_WRITELN  reduce using rule 28 (command)
    INPUT_READ      reduce using rule 28 (command)
    '{'             reduce using rule 28 (command)
    '}'             reduce using rule 28 (command)
    '+'             reduce using rule 28 (command)
    '-'             reduce using rule 28 (command)
    '%'             reduce using rule 28 (command)
    '?'             reduce using rule 28 (command)
    '!'             reduce using rule 28 (command)


State 53

   36 init_variable: init_stmt . ';'

    ';'  shift, and go to state 84


State 54

   30 command: output .

    NUM_INT         reduce using rule 30 (command)
    NUM_FLOAT       reduce using rule 30 (command)
    NIL_CNST        reduce using rule 30 (command)
    ID              reduce using rule 30 (command)
    RETURN_STM      reduce using rule 30 (command)
    T_INT           reduce using rule 30 (command)
    T_FLOAT         reduce using rule 30 (command)
    IF_STMT         reduce using rule 30 (command)
    FOR_STMT        reduce using rule 30 (command)
    OUTPUT_WRITE    reduce using rule 30 (command)
    OUTPUT_WRITELN  reduce using rule 30 (command)
    INPUT_READ      reduce using rule 30 (command)
    '{'             reduce using rule 30 (command)
    '}'             reduce using rule 30 (command)
    '+'             reduce using rule 30 (command)
    '-'             reduce using rule 30 (command)
    '%'             reduce using rule 30 (command)
    '?'             reduce using rule 30 (command)
    '!'             reduce using rule 30 (command)


State 55

   29 command: input .

    NUM_INT         reduce using rule 29 (command)
    NUM_FLOAT       reduce using rule 29 (command)
    NIL_CNST        reduce using rule 29 (command)
    ID              reduce using rule 29 (command)
    RETURN_STM      reduce using rule 29 (command)
    T_INT           reduce using rule 29 (command)
    T_FLOAT         reduce using rule 29 (command)
    IF_STMT         reduce using rule 29 (command)
    FOR_STMT        reduce using rule 29 (command)
    OUTPUT_WRITE    reduce using rule 29 (command)
    OUTPUT_WRITELN  reduce using rule 29 (command)
    INPUT_READ      reduce using rule 29 (command)
    '{'             reduce using rule 29 (command)
    '}'             reduce using rule 29 (command)
    '+'             reduce using rule 29 (command)
    '-'             reduce using rule 29 (command)
    '%'             reduce using rule 29 (command)
    '?'             reduce using rule 29 (command)
    '!'             reduce using rule 29 (command)


State 56

   48 expression: func_calling .

    ';'         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)
    '+'         reduce using rule 48 (expression)
    '-'         reduce using rule 48 (expression)
    '*'         reduce using rule 48 (expression)
    '/'         reduce using rule 48 (expression)
    FILTER      reduce using rule 48 (expression)
    MAP         reduce using rule 48 (expression)
    ':'         reduce using rule 48 (expression)


State 57

   73 arith_binary: expression .
   78 lst_binary: expression . FILTER expression
   79           | expression . MAP expression
   80           | expression . ':' expression

    FILTER  shift, and go to state 85
    MAP     shift, and go to state 86
    ':'     shift, and go to state 87

    ';'         reduce using rule 73 (arith_binary)
    AND         reduce using rule 73 (arith_binary)
    OR          reduce using rule 73 (arith_binary)
    GREATER     reduce using rule 73 (arith_binary)
    GREATER_EQ  reduce using rule 73 (arith_binary)
    LESS        reduce using rule 73 (arith_binary)
    LESS_EQ     reduce using rule 73 (arith_binary)
    EQUAL       reduce using rule 73 (arith_binary)
    NOT_EQ      reduce using rule 73 (arith_binary)
    '+'         reduce using rule 73 (arith_binary)
    '-'         reduce using rule 73 (arith_binary)
    '*'         reduce using rule 73 (arith_binary)
    '/'         reduce using rule 73 (arith_binary)


State 58

   50 expression: const .

    ';'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)
    FILTER      reduce using rule 50 (expression)
    MAP         reduce using rule 50 (expression)
    ':'         reduce using rule 50 (expression)


State 59

   52 const: number .

    ';'         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)
    '+'         reduce using rule 52 (const)
    '-'         reduce using rule 52 (const)
    '*'         reduce using rule 52 (const)
    '/'         reduce using rule 52 (const)
    FILTER      reduce using rule 52 (const)
    MAP         reduce using rule 52 (const)
    ':'         reduce using rule 52 (const)


State 60

   32 command: operation . ';'

    ';'  shift, and go to state 88


State 61

   61 operation: binary_operation .
   64 binary_operation: binary_operation . relation_operator expression
   65                 | binary_operation . log_operator expression

    AND         shift, and go to state 89
    OR          shift, and go to state 90
    GREATER     shift, and go to state 91
    GREATER_EQ  shift, and go to state 92
    LESS        shift, and go to state 93
    LESS_EQ     shift, and go to state 94
    EQUAL       shift, and go to state 95
    NOT_EQ      shift, and go to state 96

    ';'  reduce using rule 61 (operation)

    log_operator       go to state 97
    relation_operator  go to state 98


State 62

   51 expression: single_operation .

    ';'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)
    FILTER      reduce using rule 51 (expression)
    MAP         reduce using rule 51 (expression)
    ':'         reduce using rule 51 (expression)


State 63

   62 binary_operation: arith_binary .
   69 arith_binary: arith_binary . '+' expression
   70             | arith_binary . '-' expression
   71             | arith_binary . '*' expression
   72             | arith_binary . '/' expression

    '+'  shift, and go to state 99
    '-'  shift, and go to state 100
    '*'  shift, and go to state 101
    '/'  shift, and go to state 102

    ';'         reduce using rule 62 (binary_operation)
    AND         reduce using rule 62 (binary_operation)
    OR          reduce using rule 62 (binary_operation)
    GREATER     reduce using rule 62 (binary_operation)
    GREATER_EQ  reduce using rule 62 (binary_operation)
    LESS        reduce using rule 62 (binary_operation)
    LESS_EQ     reduce using rule 62 (binary_operation)
    EQUAL       reduce using rule 62 (binary_operation)
    NOT_EQ      reduce using rule 62 (binary_operation)


State 64

   66 single_operation: arith_single .

    ';'         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)
    '+'         reduce using rule 66 (single_operation)
    '-'         reduce using rule 66 (single_operation)
    '*'         reduce using rule 66 (single_operation)
    '/'         reduce using rule 66 (single_operation)
    FILTER      reduce using rule 66 (single_operation)
    MAP         reduce using rule 66 (single_operation)
    ':'         reduce using rule 66 (single_operation)


State 65

   67 single_operation: lst_single .

    ';'         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)
    '+'         reduce using rule 67 (single_operation)
    '-'         reduce using rule 67 (single_operation)
    '*'         reduce using rule 67 (single_operation)
    '/'         reduce using rule 67 (single_operation)
    FILTER      reduce using rule 67 (single_operation)
    MAP         reduce using rule 67 (single_operation)
    ':'         reduce using rule 67 (single_operation)


State 66

   63 binary_operation: lst_binary .

    ';'         reduce using rule 63 (binary_operation)
    AND         reduce using rule 63 (binary_operation)
    OR          reduce using rule 63 (binary_operation)
    GREATER     reduce using rule 63 (binary_operation)
    GREATER_EQ  reduce using rule 63 (binary_operation)
    LESS        reduce using rule 63 (binary_operation)
    LESS_EQ     reduce using rule 63 (binary_operation)
    EQUAL       reduce using rule 63 (binary_operation)
    NOT_EQ      reduce using rule 63 (binary_operation)


State 67

   47 func_calling: ID '(' . lst_params ')'

    NUM_INT    shift, and go to state 154
    NUM_FLOAT  shift, and go to state 155
    NIL_CNST   shift, and go to state 156
    ID         shift, and go to state 157
    '+'        shift, and go to state 158
    '-'        shift, and go to state 159
    '%'        shift, and go to state 160
    '?'        shift, and go to state 161
    '!'        shift, and go to state 162

    ')'  reduce using rule 18 (lst_params)

    lst_params          go to state 103
    lst_calling_params  go to state 104
    func_calling        go to state 163
    expression          go to state 164
    const               go to state 165
    number              go to state 166
    operation           go to state 105
    binary_operation    go to state 167
    single_operation    go to state 168
    arith_binary        go to state 169
    arith_single        go to state 170
    lst_single          go to state 171
    lst_binary          go to state 172


State 68

   39 init_stmt: ID '=' . operation

    NUM_INT    shift, and go to state 29
    NUM_FLOAT  shift, and go to state 30
    NIL_CNST   shift, and go to state 31
    ID         shift, and go to state 69
    '+'        shift, and go to state 40
    '-'        shift, and go to state 41
    '%'        shift, and go to state 42
    '?'        shift, and go to state 43
    '!'        shift, and go to state 44

    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    operation         go to state 106
    binary_operation  go to state 61
    single_operation  go to state 62
    arith_binary      go to state 63
    arith_single      go to state 64
    lst_single        go to state 65
    lst_binary        go to state 66


State 69

   47 func_calling: ID . '(' lst_params ')'
   49 expression: ID .

    '('  shift, and go to state 67

    ';'         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)
    '+'         reduce using rule 49 (expression)
    '-'         reduce using rule 49 (expression)
    '*'         reduce using rule 49 (expression)
    '/'         reduce using rule 49 (expression)
    FILTER      reduce using rule 49 (expression)
    MAP         reduce using rule 49 (expression)
    ':'         reduce using rule 49 (expression)


State 70

   35 return_stmt: RETURN_STM operation . ';'

    ';'  shift, and go to state 107


State 71

   33 conditional_stmt: IF_STMT '(' . operation ')' command
   34                 | IF_STMT '(' . operation ')' command ELSE_STMT command

    NUM_INT    shift, and go to state 173
    NUM_FLOAT  shift, and go to state 174
    NIL_CNST   shift, and go to state 175
    ID         shift, and go to state 176
    '+'        shift, and go to state 177
    '-'        shift, and go to state 178
    '%'        shift, and go to state 179
    '?'        shift, and go to state 180
    '!'        shift, and go to state 181

    func_calling      go to state 182
    expression        go to state 183
    const             go to state 184
    number            go to state 185
    operation         go to state 108
    binary_operation  go to state 186
    single_operation  go to state 187
    arith_binary      go to state 188
    arith_single      go to state 189
    lst_single        go to state 190
    lst_binary        go to state 191


State 72

   37 iteration: FOR_STMT '(' . loop_condition ')' command

    ID  shift, and go to state 109

    loop_condition  go to state 110
    init_stmt       go to state 111


State 73

   42 output: OUTPUT_WRITE '(' . operation ')' ';'
   44       | OUTPUT_WRITE '(' . STRING ')' ';'

    NUM_INT    shift, and go to state 173
    NUM_FLOAT  shift, and go to state 174
    STRING     shift, and go to state 112
    NIL_CNST   shift, and go to state 175
    ID         shift, and go to state 176
    '+'        shift, and go to state 177
    '-'        shift, and go to state 178
    '%'        shift, and go to state 179
    '?'        shift, and go to state 180
    '!'        shift, and go to state 181

    func_calling      go to state 182
    expression        go to state 183
    const             go to state 184
    number            go to state 185
    operation         go to state 113
    binary_operation  go to state 186
    single_operation  go to state 187
    arith_binary      go to state 188
    arith_single      go to state 189
    lst_single        go to state 190
    lst_binary        go to state 191


State 74

   43 output: OUTPUT_WRITELN '(' . operation ')' ';'
   45       | OUTPUT_WRITELN '(' . STRING ')' ';'

    NUM_INT    shift, and go to state 173
    NUM_FLOAT  shift, and go to state 174
    STRING     shift, and go to state 114
    NIL_CNST   shift, and go to state 175
    ID         shift, and go to state 176
    '+'        shift, and go to state 177
    '-'        shift, and go to state 178
    '%'        shift, and go to state 179
    '?'        shift, and go to state 180
    '!'        shift, and go to state 181

    func_calling      go to state 182
    expression        go to state 183
    const             go to state 184
    number            go to state 185
    operation         go to state 115
    binary_operation  go to state 186
    single_operation  go to state 187
    arith_binary      go to state 188
    arith_single      go to state 189
    lst_single        go to state 190
    lst_binary        go to state 191


State 75

   46 input: INPUT_READ '(' . expression ')' ';'

    NUM_INT    shift, and go to state 192
    NUM_FLOAT  shift, and go to state 193
    NIL_CNST   shift, and go to state 194
    ID         shift, and go to state 195
    '+'        shift, and go to state 196
    '-'        shift, and go to state 197
    '%'        shift, and go to state 198
    '?'        shift, and go to state 199
    '!'        shift, and go to state 200

    func_calling      go to state 201
    expression        go to state 116
    const             go to state 202
    number            go to state 203
    single_operation  go to state 204
    arith_single      go to state 205
    lst_single        go to state 206


State 76

   31 command: '{' block_commands . '}'

    '}'  shift, and go to state 117


State 77

   74 arith_single: '+' expression .

    ';'         reduce using rule 74 (arith_single)
    AND         reduce using rule 74 (arith_single)
    OR          reduce using rule 74 (arith_single)
    GREATER     reduce using rule 74 (arith_single)
    GREATER_EQ  reduce using rule 74 (arith_single)
    LESS        reduce using rule 74 (arith_single)
    LESS_EQ     reduce using rule 74 (arith_single)
    EQUAL       reduce using rule 74 (arith_single)
    NOT_EQ      reduce using rule 74 (arith_single)
    '+'         reduce using rule 74 (arith_single)
    '-'         reduce using rule 74 (arith_single)
    '*'         reduce using rule 74 (arith_single)
    '/'         reduce using rule 74 (arith_single)
    FILTER      reduce using rule 74 (arith_single)
    MAP         reduce using rule 74 (arith_single)
    ':'         reduce using rule 74 (arith_single)


State 78

   75 arith_single: '-' expression .

    ';'         reduce using rule 75 (arith_single)
    AND         reduce using rule 75 (arith_single)
    OR          reduce using rule 75 (arith_single)
    GREATER     reduce using rule 75 (arith_single)
    GREATER_EQ  reduce using rule 75 (arith_single)
    LESS        reduce using rule 75 (arith_single)
    LESS_EQ     reduce using rule 75 (arith_single)
    EQUAL       reduce using rule 75 (arith_single)
    NOT_EQ      reduce using rule 75 (arith_single)
    '+'         reduce using rule 75 (arith_single)
    '-'         reduce using rule 75 (arith_single)
    '*'         reduce using rule 75 (arith_single)
    '/'         reduce using rule 75 (arith_single)
    FILTER      reduce using rule 75 (arith_single)
    MAP         reduce using rule 75 (arith_single)
    ':'         reduce using rule 75 (arith_single)


State 79

   76 lst_single: '%' expression .

    ';'         reduce using rule 76 (lst_single)
    AND         reduce using rule 76 (lst_single)
    OR          reduce using rule 76 (lst_single)
    GREATER     reduce using rule 76 (lst_single)
    GREATER_EQ  reduce using rule 76 (lst_single)
    LESS        reduce using rule 76 (lst_single)
    LESS_EQ     reduce using rule 76 (lst_single)
    EQUAL       reduce using rule 76 (lst_single)
    NOT_EQ      reduce using rule 76 (lst_single)
    '+'         reduce using rule 76 (lst_single)
    '-'         reduce using rule 76 (lst_single)
    '*'         reduce using rule 76 (lst_single)
    '/'         reduce using rule 76 (lst_single)
    FILTER      reduce using rule 76 (lst_single)
    MAP         reduce using rule 76 (lst_single)
    ':'         reduce using rule 76 (lst_single)


State 80

   77 lst_single: '?' expression .

    ';'         reduce using rule 77 (lst_single)
    AND         reduce using rule 77 (lst_single)
    OR          reduce using rule 77 (lst_single)
    GREATER     reduce using rule 77 (lst_single)
    GREATER_EQ  reduce using rule 77 (lst_single)
    LESS        reduce using rule 77 (lst_single)
    LESS_EQ     reduce using rule 77 (lst_single)
    EQUAL       reduce using rule 77 (lst_single)
    NOT_EQ      reduce using rule 77 (lst_single)
    '+'         reduce using rule 77 (lst_single)
    '-'         reduce using rule 77 (lst_single)
    '*'         reduce using rule 77 (lst_single)
    '/'         reduce using rule 77 (lst_single)
    FILTER      reduce using rule 77 (lst_single)
    MAP         reduce using rule 77 (lst_single)
    ':'         reduce using rule 77 (lst_single)


State 81

   68 single_operation: '!' expression .

    ';'         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)
    '+'         reduce using rule 68 (single_operation)
    '-'         reduce using rule 68 (single_operation)
    '*'         reduce using rule 68 (single_operation)
    '/'         reduce using rule 68 (single_operation)
    FILTER      reduce using rule 68 (single_operation)
    MAP         reduce using rule 68 (single_operation)
    ':'         reduce using rule 68 (single_operation)


State 82

    9 func_declaration: unq_declaration $@1 '(' params ')' '{' block_commands '}' .

    $end     reduce using rule 9 (func_declaration)
    error    reduce using rule 9 (func_declaration)
    T_INT    reduce using rule 9 (func_declaration)
    T_FLOAT  reduce using rule 9 (func_declaration)


State 83

   22 block_commands: command block_commands .

    '}'  reduce using rule 22 (block_commands)


State 84

   36 init_variable: init_stmt ';' .

    NUM_INT         reduce using rule 36 (init_variable)
    NUM_FLOAT       reduce using rule 36 (init_variable)
    NIL_CNST        reduce using rule 36 (init_variable)
    ID              reduce using rule 36 (init_variable)
    RETURN_STM      reduce using rule 36 (init_variable)
    T_INT           reduce using rule 36 (init_variable)
    T_FLOAT         reduce using rule 36 (init_variable)
    IF_STMT         reduce using rule 36 (init_variable)
    FOR_STMT        reduce using rule 36 (init_variable)
    OUTPUT_WRITE    reduce using rule 36 (init_variable)
    OUTPUT_WRITELN  reduce using rule 36 (init_variable)
    INPUT_READ      reduce using rule 36 (init_variable)
    '{'             reduce using rule 36 (init_variable)
    '}'             reduce using rule 36 (init_variable)
    '+'             reduce using rule 36 (init_variable)
    '-'             reduce using rule 36 (init_variable)
    '%'             reduce using rule 36 (init_variable)
    '?'             reduce using rule 36 (init_variable)
    '!'             reduce using rule 36 (init_variable)


State 85

   78 lst_binary: expression FILTER . expression

    NUM_INT    shift, and go to state 207
    NUM_FLOAT  shift, and go to state 208
    NIL_CNST   shift, and go to state 209
    ID         shift, and go to state 210
    '+'        shift, and go to state 211
    '-'        shift, and go to state 212
    '%'        shift, and go to state 213
    '?'        shift, and go to state 214
    '!'        shift, and go to state 215

    func_calling      go to state 216
    expression        go to state 118
    const             go to state 217
    number            go to state 218
    single_operation  go to state 219
    arith_single      go to state 220
    lst_single        go to state 221


State 86

   79 lst_binary: expression MAP . expression

    NUM_INT    shift, and go to state 207
    NUM_FLOAT  shift, and go to state 208
    NIL_CNST   shift, and go to state 209
    ID         shift, and go to state 210
    '+'        shift, and go to state 211
    '-'        shift, and go to state 212
    '%'        shift, and go to state 213
    '?'        shift, and go to state 214
    '!'        shift, and go to state 215

    func_calling      go to state 216
    expression        go to state 119
    const             go to state 217
    number            go to state 218
    single_operation  go to state 219
    arith_single      go to state 220
    lst_single        go to state 221


State 87

   80 lst_binary: expression ':' . expression

    NUM_INT    shift, and go to state 207
    NUM_FLOAT  shift, and go to state 208
    NIL_CNST   shift, and go to state 209
    ID         shift, and go to state 210
    '+'        shift, and go to state 211
    '-'        shift, and go to state 212
    '%'        shift, and go to state 213
    '?'        shift, and go to state 214
    '!'        shift, and go to state 215

    func_calling      go to state 216
    expression        go to state 120
    const             go to state 217
    number            go to state 218
    single_operation  go to state 219
    arith_single      go to state 220
    lst_single        go to state 221


State 88

   32 command: operation ';' .

    NUM_INT         reduce using rule 32 (command)
    NUM_FLOAT       reduce using rule 32 (command)
    NIL_CNST        reduce using rule 32 (command)
    ID              reduce using rule 32 (command)
    RETURN_STM      reduce using rule 32 (command)
    T_INT           reduce using rule 32 (command)
    T_FLOAT         reduce using rule 32 (command)
    IF_STMT         reduce using rule 32 (command)
    FOR_STMT        reduce using rule 32 (command)
    OUTPUT_WRITE    reduce using rule 32 (command)
    OUTPUT_WRITELN  reduce using rule 32 (command)
    INPUT_READ      reduce using rule 32 (command)
    '{'             reduce using rule 32 (command)
    '}'             reduce using rule 32 (command)
    '+'             reduce using rule 32 (command)
    '-'             reduce using rule 32 (command)
    '%'             reduce using rule 32 (command)
    '?'             reduce using rule 32 (command)
    '!'             reduce using rule 32 (command)


State 89

   81 log_operator: AND .

    NUM_INT    reduce using rule 81 (log_operator)
    NUM_FLOAT  reduce using rule 81 (log_operator)
    NIL_CNST   reduce using rule 81 (log_operator)
    ID         reduce using rule 81 (log_operator)
    '+'        reduce using rule 81 (log_operator)
    '-'        reduce using rule 81 (log_operator)
    '%'        reduce using rule 81 (log_operator)
    '?'        reduce using rule 81 (log_operator)
    '!'        reduce using rule 81 (log_operator)


State 90

   82 log_operator: OR .

    NUM_INT    reduce using rule 82 (log_operator)
    NUM_FLOAT  reduce using rule 82 (log_operator)
    NIL_CNST   reduce using rule 82 (log_operator)
    ID         reduce using rule 82 (log_operator)
    '+'        reduce using rule 82 (log_operator)
    '-'        reduce using rule 82 (log_operator)
    '%'        reduce using rule 82 (log_operator)
    '?'        reduce using rule 82 (log_operator)
    '!'        reduce using rule 82 (log_operator)


State 91

   83 relation_operator: GREATER .

    NUM_INT    reduce using rule 83 (relation_operator)
    NUM_FLOAT  reduce using rule 83 (relation_operator)
    NIL_CNST   reduce using rule 83 (relation_operator)
    ID         reduce using rule 83 (relation_operator)
    '+'        reduce using rule 83 (relation_operator)
    '-'        reduce using rule 83 (relation_operator)
    '%'        reduce using rule 83 (relation_operator)
    '?'        reduce using rule 83 (relation_operator)
    '!'        reduce using rule 83 (relation_operator)


State 92

   84 relation_operator: GREATER_EQ .

    NUM_INT    reduce using rule 84 (relation_operator)
    NUM_FLOAT  reduce using rule 84 (relation_operator)
    NIL_CNST   reduce using rule 84 (relation_operator)
    ID         reduce using rule 84 (relation_operator)
    '+'        reduce using rule 84 (relation_operator)
    '-'        reduce using rule 84 (relation_operator)
    '%'        reduce using rule 84 (relation_operator)
    '?'        reduce using rule 84 (relation_operator)
    '!'        reduce using rule 84 (relation_operator)


State 93

   85 relation_operator: LESS .

    NUM_INT    reduce using rule 85 (relation_operator)
    NUM_FLOAT  reduce using rule 85 (relation_operator)
    NIL_CNST   reduce using rule 85 (relation_operator)
    ID         reduce using rule 85 (relation_operator)
    '+'        reduce using rule 85 (relation_operator)
    '-'        reduce using rule 85 (relation_operator)
    '%'        reduce using rule 85 (relation_operator)
    '?'        reduce using rule 85 (relation_operator)
    '!'        reduce using rule 85 (relation_operator)


State 94

   86 relation_operator: LESS_EQ .

    NUM_INT    reduce using rule 86 (relation_operator)
    NUM_FLOAT  reduce using rule 86 (relation_operator)
    NIL_CNST   reduce using rule 86 (relation_operator)
    ID         reduce using rule 86 (relation_operator)
    '+'        reduce using rule 86 (relation_operator)
    '-'        reduce using rule 86 (relation_operator)
    '%'        reduce using rule 86 (relation_operator)
    '?'        reduce using rule 86 (relation_operator)
    '!'        reduce using rule 86 (relation_operator)


State 95

   87 relation_operator: EQUAL .

    NUM_INT    reduce using rule 87 (relation_operator)
    NUM_FLOAT  reduce using rule 87 (relation_operator)
    NIL_CNST   reduce using rule 87 (relation_operator)
    ID         reduce using rule 87 (relation_operator)
    '+'        reduce using rule 87 (relation_operator)
    '-'        reduce using rule 87 (relation_operator)
    '%'        reduce using rule 87 (relation_operator)
    '?'        reduce using rule 87 (relation_operator)
    '!'        reduce using rule 87 (relation_operator)


State 96

   88 relation_operator: NOT_EQ .

    NUM_INT    reduce using rule 88 (relation_operator)
    NUM_FLOAT  reduce using rule 88 (relation_operator)
    NIL_CNST   reduce using rule 88 (relation_operator)
    ID         reduce using rule 88 (relation_operator)
    '+'        reduce using rule 88 (relation_operator)
    '-'        reduce using rule 88 (relation_operator)
    '%'        reduce using rule 88 (relation_operator)
    '?'        reduce using rule 88 (relation_operator)
    '!'        reduce using rule 88 (relation_operator)


State 97

   65 binary_operation: binary_operation log_operator . expression

    NUM_INT    shift, and go to state 207
    NUM_FLOAT  shift, and go to state 208
    NIL_CNST   shift, and go to state 209
    ID         shift, and go to state 210
    '+'        shift, and go to state 211
    '-'        shift, and go to state 212
    '%'        shift, and go to state 213
    '?'        shift, and go to state 214
    '!'        shift, and go to state 215

    func_calling      go to state 216
    expression        go to state 121
    const             go to state 217
    number            go to state 218
    single_operation  go to state 219
    arith_single      go to state 220
    lst_single        go to state 221


State 98

   64 binary_operation: binary_operation relation_operator . expression

    NUM_INT    shift, and go to state 207
    NUM_FLOAT  shift, and go to state 208
    NIL_CNST   shift, and go to state 209
    ID         shift, and go to state 210
    '+'        shift, and go to state 211
    '-'        shift, and go to state 212
    '%'        shift, and go to state 213
    '?'        shift, and go to state 214
    '!'        shift, and go to state 215

    func_calling      go to state 216
    expression        go to state 122
    const             go to state 217
    number            go to state 218
    single_operation  go to state 219
    arith_single      go to state 220
    lst_single        go to state 221


State 99

   69 arith_binary: arith_binary '+' . expression

    NUM_INT    shift, and go to state 222
    NUM_FLOAT  shift, and go to state 223
    NIL_CNST   shift, and go to state 224
    ID         shift, and go to state 225
    '+'        shift, and go to state 226
    '-'        shift, and go to state 227
    '%'        shift, and go to state 228
    '?'        shift, and go to state 229
    '!'        shift, and go to state 230

    func_calling      go to state 231
    expression        go to state 123
    const             go to state 232
    number            go to state 233
    single_operation  go to state 234
    arith_single      go to state 235
    lst_single        go to state 236


State 100

   70 arith_binary: arith_binary '-' . expression

    NUM_INT    shift, and go to state 222
    NUM_FLOAT  shift, and go to state 223
    NIL_CNST   shift, and go to state 224
    ID         shift, and go to state 225
    '+'        shift, and go to state 226
    '-'        shift, and go to state 227
    '%'        shift, and go to state 228
    '?'        shift, and go to state 229
    '!'        shift, and go to state 230

    func_calling      go to state 231
    expression        go to state 124
    const             go to state 232
    number            go to state 233
    single_operation  go to state 234
    arith_single      go to state 235
    lst_single        go to state 236


State 101

   71 arith_binary: arith_binary '*' . expression

    NUM_INT    shift, and go to state 222
    NUM_FLOAT  shift, and go to state 223
    NIL_CNST   shift, and go to state 224
    ID         shift, and go to state 225
    '+'        shift, and go to state 226
    '-'        shift, and go to state 227
    '%'        shift, and go to state 228
    '?'        shift, and go to state 229
    '!'        shift, and go to state 230

    func_calling      go to state 231
    expression        go to state 125
    const             go to state 232
    number            go to state 233
    single_operation  go to state 234
    arith_single      go to state 235
    lst_single        go to state 236


State 102

   72 arith_binary: arith_binary '/' . expression

    NUM_INT    shift, and go to state 222
    NUM_FLOAT  shift, and go to state 223
    NIL_CNST   shift, and go to state 224
    ID         shift, and go to state 225
    '+'        shift, and go to state 226
    '-'        shift, and go to state 227
    '%'        shift, and go to state 228
    '?'        shift, and go to state 229
    '!'        shift, and go to state 230

    func_calling      go to state 231
    expression        go to state 126
    const             go to state 232
    number            go to state 233
    single_operation  go to state 234
    arith_single      go to state 235
    lst_single        go to state 236


State 103

   47 func_calling: ID '(' lst_params . ')'

    ')'  shift, and go to state 127


State 104

   19 lst_params: lst_calling_params .

    ')'  reduce using rule 19 (lst_params)


State 105

   20 lst_calling_params: operation . ',' lst_calling_params
   21                   | operation .

    ','  shift, and go to state 128

    ')'  reduce using rule 21 (lst_calling_params)


State 106

   39 init_stmt: ID '=' operation .

    ';'  reduce using rule 39 (init_stmt)


State 107

   35 return_stmt: RETURN_STM operation ';' .

    NUM_INT         reduce using rule 35 (return_stmt)
    NUM_FLOAT       reduce using rule 35 (return_stmt)
    NIL_CNST        reduce using rule 35 (return_stmt)
    ID              reduce using rule 35 (return_stmt)
    RETURN_STM      reduce using rule 35 (return_stmt)
    T_INT           reduce using rule 35 (return_stmt)
    T_FLOAT         reduce using rule 35 (return_stmt)
    IF_STMT         reduce using rule 35 (return_stmt)
    FOR_STMT        reduce using rule 35 (return_stmt)
    OUTPUT_WRITE    reduce using rule 35 (return_stmt)
    OUTPUT_WRITELN  reduce using rule 35 (return_stmt)
    INPUT_READ      reduce using rule 35 (return_stmt)
    '{'             reduce using rule 35 (return_stmt)
    '}'             reduce using rule 35 (return_stmt)
    '+'             reduce using rule 35 (return_stmt)
    '-'             reduce using rule 35 (return_stmt)
    '%'             reduce using rule 35 (return_stmt)
    '?'             reduce using rule 35 (return_stmt)
    '!'             reduce using rule 35 (return_stmt)


State 108

   33 conditional_stmt: IF_STMT '(' operation . ')' command
   34                 | IF_STMT '(' operation . ')' command ELSE_STMT command

    ')'  shift, and go to state 129


State 109

   39 init_stmt: ID . '=' operation

    '='  shift, and go to state 68


State 110

   37 iteration: FOR_STMT '(' loop_condition . ')' command

    ')'  shift, and go to state 130


State 111

   38 loop_condition: init_stmt . ';' operation ';' update_stmt

    ';'  shift, and go to state 131


State 112

   44 output: OUTPUT_WRITE '(' STRING . ')' ';'

    ')'  shift, and go to state 132


State 113

   42 output: OUTPUT_WRITE '(' operation . ')' ';'

    ')'  shift, and go to state 133


State 114

   45 output: OUTPUT_WRITELN '(' STRING . ')' ';'

    ')'  shift, and go to state 134


State 115

   43 output: OUTPUT_WRITELN '(' operation . ')' ';'

    ')'  shift, and go to state 135


State 116

   46 input: INPUT_READ '(' expression . ')' ';'

    ')'  shift, and go to state 136


State 117

   31 command: '{' block_commands '}' .

    NUM_INT         reduce using rule 31 (command)
    NUM_FLOAT       reduce using rule 31 (command)
    NIL_CNST        reduce using rule 31 (command)
    ID              reduce using rule 31 (command)
    RETURN_STM      reduce using rule 31 (command)
    T_INT           reduce using rule 31 (command)
    T_FLOAT         reduce using rule 31 (command)
    IF_STMT         reduce using rule 31 (command)
    FOR_STMT        reduce using rule 31 (command)
    OUTPUT_WRITE    reduce using rule 31 (command)
    OUTPUT_WRITELN  reduce using rule 31 (command)
    INPUT_READ      reduce using rule 31 (command)
    '{'             reduce using rule 31 (command)
    '}'             reduce using rule 31 (command)
    '+'             reduce using rule 31 (command)
    '-'             reduce using rule 31 (command)
    '%'             reduce using rule 31 (command)
    '?'             reduce using rule 31 (command)
    '!'             reduce using rule 31 (command)


State 118

   78 lst_binary: expression FILTER expression .

    ';'         reduce using rule 78 (lst_binary)
    AND         reduce using rule 78 (lst_binary)
    OR          reduce using rule 78 (lst_binary)
    GREATER     reduce using rule 78 (lst_binary)
    GREATER_EQ  reduce using rule 78 (lst_binary)
    LESS        reduce using rule 78 (lst_binary)
    LESS_EQ     reduce using rule 78 (lst_binary)
    EQUAL       reduce using rule 78 (lst_binary)
    NOT_EQ      reduce using rule 78 (lst_binary)


State 119

   79 lst_binary: expression MAP expression .

    ';'         reduce using rule 79 (lst_binary)
    AND         reduce using rule 79 (lst_binary)
    OR          reduce using rule 79 (lst_binary)
    GREATER     reduce using rule 79 (lst_binary)
    GREATER_EQ  reduce using rule 79 (lst_binary)
    LESS        reduce using rule 79 (lst_binary)
    LESS_EQ     reduce using rule 79 (lst_binary)
    EQUAL       reduce using rule 79 (lst_binary)
    NOT_EQ      reduce using rule 79 (lst_binary)


State 120

   80 lst_binary: expression ':' expression .

    ';'         reduce using rule 80 (lst_binary)
    AND         reduce using rule 80 (lst_binary)
    OR          reduce using rule 80 (lst_binary)
    GREATER     reduce using rule 80 (lst_binary)
    GREATER_EQ  reduce using rule 80 (lst_binary)
    LESS        reduce using rule 80 (lst_binary)
    LESS_EQ     reduce using rule 80 (lst_binary)
    EQUAL       reduce using rule 80 (lst_binary)
    NOT_EQ      reduce using rule 80 (lst_binary)


State 121

   65 binary_operation: binary_operation log_operator expression .

    ';'         reduce using rule 65 (binary_operation)
    AND         reduce using rule 65 (binary_operation)
    OR          reduce using rule 65 (binary_operation)
    GREATER     reduce using rule 65 (binary_operation)
    GREATER_EQ  reduce using rule 65 (binary_operation)
    LESS        reduce using rule 65 (binary_operation)
    LESS_EQ     reduce using rule 65 (binary_operation)
    EQUAL       reduce using rule 65 (binary_operation)
    NOT_EQ      reduce using rule 65 (binary_operation)


State 122

   64 binary_operation: binary_operation relation_operator expression .

    ';'         reduce using rule 64 (binary_operation)
    AND         reduce using rule 64 (binary_operation)
    OR          reduce using rule 64 (binary_operation)
    GREATER     reduce using rule 64 (binary_operation)
    GREATER_EQ  reduce using rule 64 (binary_operation)
    LESS        reduce using rule 64 (binary_operation)
    LESS_EQ     reduce using rule 64 (binary_operation)
    EQUAL       reduce using rule 64 (binary_operation)
    NOT_EQ      reduce using rule 64 (binary_operation)


State 123

   69 arith_binary: arith_binary '+' expression .

    ';'         reduce using rule 69 (arith_binary)
    AND         reduce using rule 69 (arith_binary)
    OR          reduce using rule 69 (arith_binary)
    GREATER     reduce using rule 69 (arith_binary)
    GREATER_EQ  reduce using rule 69 (arith_binary)
    LESS        reduce using rule 69 (arith_binary)
    LESS_EQ     reduce using rule 69 (arith_binary)
    EQUAL       reduce using rule 69 (arith_binary)
    NOT_EQ      reduce using rule 69 (arith_binary)
    '+'         reduce using rule 69 (arith_binary)
    '-'         reduce using rule 69 (arith_binary)
    '*'         reduce using rule 69 (arith_binary)
    '/'         reduce using rule 69 (arith_binary)


State 124

   70 arith_binary: arith_binary '-' expression .

    ';'         reduce using rule 70 (arith_binary)
    AND         reduce using rule 70 (arith_binary)
    OR          reduce using rule 70 (arith_binary)
    GREATER     reduce using rule 70 (arith_binary)
    GREATER_EQ  reduce using rule 70 (arith_binary)
    LESS        reduce using rule 70 (arith_binary)
    LESS_EQ     reduce using rule 70 (arith_binary)
    EQUAL       reduce using rule 70 (arith_binary)
    NOT_EQ      reduce using rule 70 (arith_binary)
    '+'         reduce using rule 70 (arith_binary)
    '-'         reduce using rule 70 (arith_binary)
    '*'         reduce using rule 70 (arith_binary)
    '/'         reduce using rule 70 (arith_binary)


State 125

   71 arith_binary: arith_binary '*' expression .

    ';'         reduce using rule 71 (arith_binary)
    AND         reduce using rule 71 (arith_binary)
    OR          reduce using rule 71 (arith_binary)
    GREATER     reduce using rule 71 (arith_binary)
    GREATER_EQ  reduce using rule 71 (arith_binary)
    LESS        reduce using rule 71 (arith_binary)
    LESS_EQ     reduce using rule 71 (arith_binary)
    EQUAL       reduce using rule 71 (arith_binary)
    NOT_EQ      reduce using rule 71 (arith_binary)
    '+'         reduce using rule 71 (arith_binary)
    '-'         reduce using rule 71 (arith_binary)
    '*'         reduce using rule 71 (arith_binary)
    '/'         reduce using rule 71 (arith_binary)


State 126

   72 arith_binary: arith_binary '/' expression .

    ';'         reduce using rule 72 (arith_binary)
    AND         reduce using rule 72 (arith_binary)
    OR          reduce using rule 72 (arith_binary)
    GREATER     reduce using rule 72 (arith_binary)
    GREATER_EQ  reduce using rule 72 (arith_binary)
    LESS        reduce using rule 72 (arith_binary)
    LESS_EQ     reduce using rule 72 (arith_binary)
    EQUAL       reduce using rule 72 (arith_binary)
    NOT_EQ      reduce using rule 72 (arith_binary)
    '+'         reduce using rule 72 (arith_binary)
    '-'         reduce using rule 72 (arith_binary)
    '*'         reduce using rule 72 (arith_binary)
    '/'         reduce using rule 72 (arith_binary)


State 127

   47 func_calling: ID '(' lst_params ')' .

    ';'         reduce using rule 47 (func_calling)
    AND         reduce using rule 47 (func_calling)
    OR          reduce using rule 47 (func_calling)
    GREATER     reduce using rule 47 (func_calling)
    GREATER_EQ  reduce using rule 47 (func_calling)
    LESS        reduce using rule 47 (func_calling)
    LESS_EQ     reduce using rule 47 (func_calling)
    EQUAL       reduce using rule 47 (func_calling)
    NOT_EQ      reduce using rule 47 (func_calling)
    '+'         reduce using rule 47 (func_calling)
    '-'         reduce using rule 47 (func_calling)
    '*'         reduce using rule 47 (func_calling)
    '/'         reduce using rule 47 (func_calling)
    FILTER      reduce using rule 47 (func_calling)
    MAP         reduce using rule 47 (func_calling)
    ':'         reduce using rule 47 (func_calling)


State 128

   20 lst_calling_params: operation ',' . lst_calling_params

    NUM_INT    shift, and go to state 154
    NUM_FLOAT  shift, and go to state 155
    NIL_CNST   shift, and go to state 156
    ID         shift, and go to state 157
    '+'        shift, and go to state 158
    '-'        shift, and go to state 159
    '%'        shift, and go to state 160
    '?'        shift, and go to state 161
    '!'        shift, and go to state 162

    lst_calling_params  go to state 137
    func_calling        go to state 163
    expression          go to state 164
    const               go to state 165
    number              go to state 166
    operation           go to state 105
    binary_operation    go to state 167
    single_operation    go to state 168
    arith_binary        go to state 169
    arith_single        go to state 170
    lst_single          go to state 171
    lst_binary          go to state 172


State 129

   33 conditional_stmt: IF_STMT '(' operation ')' . command
   34                 | IF_STMT '(' operation ')' . command ELSE_STMT command

    NUM_INT         shift, and go to state 29
    NUM_FLOAT       shift, and go to state 30
    NIL_CNST        shift, and go to state 31
    ID              shift, and go to state 32
    RETURN_STM      shift, and go to state 237
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 238
    FOR_STMT        shift, and go to state 239
    OUTPUT_WRITE    shift, and go to state 240
    OUTPUT_WRITELN  shift, and go to state 241
    INPUT_READ      shift, and go to state 242
    '{'             shift, and go to state 243
    '+'             shift, and go to state 40
    '-'             shift, and go to state 41
    '%'             shift, and go to state 42
    '?'             shift, and go to state 43
    '!'             shift, and go to state 44

    var_declaration   go to state 244
    unq_declaration   go to state 245
    command           go to state 138
    conditional_stmt  go to state 246
    return_stmt       go to state 247
    init_variable     go to state 248
    iteration         go to state 249
    init_stmt         go to state 250
    output            go to state 251
    input             go to state 252
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 152
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 253
    binary_operation  go to state 61
    single_operation  go to state 62
    arith_binary      go to state 63
    arith_single      go to state 64
    lst_single        go to state 65
    lst_binary        go to state 66


State 130

   37 iteration: FOR_STMT '(' loop_condition ')' . command

    NUM_INT         shift, and go to state 29
    NUM_FLOAT       shift, and go to state 30
    NIL_CNST        shift, and go to state 31
    ID              shift, and go to state 32
    RETURN_STM      shift, and go to state 33
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 34
    FOR_STMT        shift, and go to state 35
    OUTPUT_WRITE    shift, and go to state 36
    OUTPUT_WRITELN  shift, and go to state 37
    INPUT_READ      shift, and go to state 38
    '{'             shift, and go to state 39
    '+'             shift, and go to state 40
    '-'             shift, and go to state 41
    '%'             shift, and go to state 42
    '?'             shift, and go to state 43
    '!'             shift, and go to state 44

    var_declaration   go to state 45
    unq_declaration   go to state 46
    command           go to state 139
    conditional_stmt  go to state 49
    return_stmt       go to state 50
    init_variable     go to state 51
    iteration         go to state 52
    init_stmt         go to state 53
    output            go to state 54
    input             go to state 55
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 152
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 60
    binary_operation  go to state 61
    single_operation  go to state 62
    arith_binary      go to state 63
    arith_single      go to state 64
    lst_single        go to state 65
    lst_binary        go to state 66


State 131

   38 loop_condition: init_stmt ';' . operation ';' update_stmt

    NUM_INT    shift, and go to state 29
    NUM_FLOAT  shift, and go to state 30
    NIL_CNST   shift, and go to state 31
    ID         shift, and go to state 69
    '+'        shift, and go to state 40
    '-'        shift, and go to state 41
    '%'        shift, and go to state 42
    '?'        shift, and go to state 43
    '!'        shift, and go to state 44

    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    operation         go to state 140
    binary_operation  go to state 61
    single_operation  go to state 62
    arith_binary      go to state 63
    arith_single      go to state 64
    lst_single        go to state 65
    lst_binary        go to state 66


State 132

   44 output: OUTPUT_WRITE '(' STRING ')' . ';'

    ';'  shift, and go to state 141


State 133

   42 output: OUTPUT_WRITE '(' operation ')' . ';'

    ';'  shift, and go to state 142


State 134

   45 output: OUTPUT_WRITELN '(' STRING ')' . ';'

    ';'  shift, and go to state 143


State 135

   43 output: OUTPUT_WRITELN '(' operation ')' . ';'

    ';'  shift, and go to state 144


State 136

   46 input: INPUT_READ '(' expression ')' . ';'

    ';'  shift, and go to state 145


State 137

   20 lst_calling_params: operation ',' lst_calling_params .

    ')'  reduce using rule 20 (lst_calling_params)


State 138

   33 conditional_stmt: IF_STMT '(' operation ')' command .
   34                 | IF_STMT '(' operation ')' command . ELSE_STMT command

    ELSE_STMT  shift, and go to state 146

    NUM_INT         reduce using rule 33 (conditional_stmt)
    NUM_FLOAT       reduce using rule 33 (conditional_stmt)
    NIL_CNST        reduce using rule 33 (conditional_stmt)
    ID              reduce using rule 33 (conditional_stmt)
    RETURN_STM      reduce using rule 33 (conditional_stmt)
    T_INT           reduce using rule 33 (conditional_stmt)
    T_FLOAT         reduce using rule 33 (conditional_stmt)
    IF_STMT         reduce using rule 33 (conditional_stmt)
    FOR_STMT        reduce using rule 33 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 33 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 33 (conditional_stmt)
    INPUT_READ      reduce using rule 33 (conditional_stmt)
    '{'             reduce using rule 33 (conditional_stmt)
    '}'             reduce using rule 33 (conditional_stmt)
    '+'             reduce using rule 33 (conditional_stmt)
    '-'             reduce using rule 33 (conditional_stmt)
    '%'             reduce using rule 33 (conditional_stmt)
    '?'             reduce using rule 33 (conditional_stmt)
    '!'             reduce using rule 33 (conditional_stmt)


State 139

   37 iteration: FOR_STMT '(' loop_condition ')' command .

    NUM_INT         reduce using rule 37 (iteration)
    NUM_FLOAT       reduce using rule 37 (iteration)
    NIL_CNST        reduce using rule 37 (iteration)
    ID              reduce using rule 37 (iteration)
    RETURN_STM      reduce using rule 37 (iteration)
    T_INT           reduce using rule 37 (iteration)
    T_FLOAT         reduce using rule 37 (iteration)
    IF_STMT         reduce using rule 37 (iteration)
    FOR_STMT        reduce using rule 37 (iteration)
    OUTPUT_WRITE    reduce using rule 37 (iteration)
    OUTPUT_WRITELN  reduce using rule 37 (iteration)
    INPUT_READ      reduce using rule 37 (iteration)
    '{'             reduce using rule 37 (iteration)
    '}'             reduce using rule 37 (iteration)
    '+'             reduce using rule 37 (iteration)
    '-'             reduce using rule 37 (iteration)
    '%'             reduce using rule 37 (iteration)
    '?'             reduce using rule 37 (iteration)
    '!'             reduce using rule 37 (iteration)


State 140

   38 loop_condition: init_stmt ';' operation . ';' update_stmt

    ';'  shift, and go to state 147


State 141

   44 output: OUTPUT_WRITE '(' STRING ')' ';' .

    NUM_INT         reduce using rule 44 (output)
    NUM_FLOAT       reduce using rule 44 (output)
    NIL_CNST        reduce using rule 44 (output)
    ID              reduce using rule 44 (output)
    RETURN_STM      reduce using rule 44 (output)
    T_INT           reduce using rule 44 (output)
    T_FLOAT         reduce using rule 44 (output)
    IF_STMT         reduce using rule 44 (output)
    FOR_STMT        reduce using rule 44 (output)
    OUTPUT_WRITE    reduce using rule 44 (output)
    OUTPUT_WRITELN  reduce using rule 44 (output)
    INPUT_READ      reduce using rule 44 (output)
    '{'             reduce using rule 44 (output)
    '}'             reduce using rule 44 (output)
    '+'             reduce using rule 44 (output)
    '-'             reduce using rule 44 (output)
    '%'             reduce using rule 44 (output)
    '?'             reduce using rule 44 (output)
    '!'             reduce using rule 44 (output)


State 142

   42 output: OUTPUT_WRITE '(' operation ')' ';' .

    NUM_INT         reduce using rule 42 (output)
    NUM_FLOAT       reduce using rule 42 (output)
    NIL_CNST        reduce using rule 42 (output)
    ID              reduce using rule 42 (output)
    RETURN_STM      reduce using rule 42 (output)
    T_INT           reduce using rule 42 (output)
    T_FLOAT         reduce using rule 42 (output)
    IF_STMT         reduce using rule 42 (output)
    FOR_STMT        reduce using rule 42 (output)
    OUTPUT_WRITE    reduce using rule 42 (output)
    OUTPUT_WRITELN  reduce using rule 42 (output)
    INPUT_READ      reduce using rule 42 (output)
    '{'             reduce using rule 42 (output)
    '}'             reduce using rule 42 (output)
    '+'             reduce using rule 42 (output)
    '-'             reduce using rule 42 (output)
    '%'             reduce using rule 42 (output)
    '?'             reduce using rule 42 (output)
    '!'             reduce using rule 42 (output)


State 143

   45 output: OUTPUT_WRITELN '(' STRING ')' ';' .

    NUM_INT         reduce using rule 45 (output)
    NUM_FLOAT       reduce using rule 45 (output)
    NIL_CNST        reduce using rule 45 (output)
    ID              reduce using rule 45 (output)
    RETURN_STM      reduce using rule 45 (output)
    T_INT           reduce using rule 45 (output)
    T_FLOAT         reduce using rule 45 (output)
    IF_STMT         reduce using rule 45 (output)
    FOR_STMT        reduce using rule 45 (output)
    OUTPUT_WRITE    reduce using rule 45 (output)
    OUTPUT_WRITELN  reduce using rule 45 (output)
    INPUT_READ      reduce using rule 45 (output)
    '{'             reduce using rule 45 (output)
    '}'             reduce using rule 45 (output)
    '+'             reduce using rule 45 (output)
    '-'             reduce using rule 45 (output)
    '%'             reduce using rule 45 (output)
    '?'             reduce using rule 45 (output)
    '!'             reduce using rule 45 (output)


State 144

   43 output: OUTPUT_WRITELN '(' operation ')' ';' .

    NUM_INT         reduce using rule 43 (output)
    NUM_FLOAT       reduce using rule 43 (output)
    NIL_CNST        reduce using rule 43 (output)
    ID              reduce using rule 43 (output)
    RETURN_STM      reduce using rule 43 (output)
    T_INT           reduce using rule 43 (output)
    T_FLOAT         reduce using rule 43 (output)
    IF_STMT         reduce using rule 43 (output)
    FOR_STMT        reduce using rule 43 (output)
    OUTPUT_WRITE    reduce using rule 43 (output)
    OUTPUT_WRITELN  reduce using rule 43 (output)
    INPUT_READ      reduce using rule 43 (output)
    '{'             reduce using rule 43 (output)
    '}'             reduce using rule 43 (output)
    '+'             reduce using rule 43 (output)
    '-'             reduce using rule 43 (output)
    '%'             reduce using rule 43 (output)
    '?'             reduce using rule 43 (output)
    '!'             reduce using rule 43 (output)


State 145

   46 input: INPUT_READ '(' expression ')' ';' .

    NUM_INT         reduce using rule 46 (input)
    NUM_FLOAT       reduce using rule 46 (input)
    NIL_CNST        reduce using rule 46 (input)
    ID              reduce using rule 46 (input)
    RETURN_STM      reduce using rule 46 (input)
    T_INT           reduce using rule 46 (input)
    T_FLOAT         reduce using rule 46 (input)
    IF_STMT         reduce using rule 46 (input)
    FOR_STMT        reduce using rule 46 (input)
    OUTPUT_WRITE    reduce using rule 46 (input)
    OUTPUT_WRITELN  reduce using rule 46 (input)
    INPUT_READ      reduce using rule 46 (input)
    '{'             reduce using rule 46 (input)
    '}'             reduce using rule 46 (input)
    '+'             reduce using rule 46 (input)
    '-'             reduce using rule 46 (input)
    '%'             reduce using rule 46 (input)
    '?'             reduce using rule 46 (input)
    '!'             reduce using rule 46 (input)


State 146

   34 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT . command

    NUM_INT         shift, and go to state 29
    NUM_FLOAT       shift, and go to state 30
    NIL_CNST        shift, and go to state 31
    ID              shift, and go to state 32
    RETURN_STM      shift, and go to state 33
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 34
    FOR_STMT        shift, and go to state 35
    OUTPUT_WRITE    shift, and go to state 36
    OUTPUT_WRITELN  shift, and go to state 37
    INPUT_READ      shift, and go to state 38
    '{'             shift, and go to state 39
    '+'             shift, and go to state 40
    '-'             shift, and go to state 41
    '%'             shift, and go to state 42
    '?'             shift, and go to state 43
    '!'             shift, and go to state 44

    var_declaration   go to state 45
    unq_declaration   go to state 46
    command           go to state 148
    conditional_stmt  go to state 49
    return_stmt       go to state 50
    init_variable     go to state 51
    iteration         go to state 52
    init_stmt         go to state 53
    output            go to state 54
    input             go to state 55
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 152
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 60
    binary_operation  go to state 61
    single_operation  go to state 62
    arith_binary      go to state 63
    arith_single      go to state 64
    lst_single        go to state 65
    lst_binary        go to state 66


State 147

   38 loop_condition: init_stmt ';' operation ';' . update_stmt

    ID  shift, and go to state 254

    ')'  reduce using rule 41 (update_stmt)

    init_stmt    go to state 149
    update_stmt  go to state 150


State 148

   34 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT command .

    NUM_INT         reduce using rule 34 (conditional_stmt)
    NUM_FLOAT       reduce using rule 34 (conditional_stmt)
    NIL_CNST        reduce using rule 34 (conditional_stmt)
    ID              reduce using rule 34 (conditional_stmt)
    RETURN_STM      reduce using rule 34 (conditional_stmt)
    T_INT           reduce using rule 34 (conditional_stmt)
    T_FLOAT         reduce using rule 34 (conditional_stmt)
    IF_STMT         reduce using rule 34 (conditional_stmt)
    FOR_STMT        reduce using rule 34 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 34 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 34 (conditional_stmt)
    INPUT_READ      reduce using rule 34 (conditional_stmt)
    '{'             reduce using rule 34 (conditional_stmt)
    '}'             reduce using rule 34 (conditional_stmt)
    '+'             reduce using rule 34 (conditional_stmt)
    '-'             reduce using rule 34 (conditional_stmt)
    '%'             reduce using rule 34 (conditional_stmt)
    '?'             reduce using rule 34 (conditional_stmt)
    '!'             reduce using rule 34 (conditional_stmt)


State 149

   40 update_stmt: init_stmt .

    ')'  reduce using rule 40 (update_stmt)


State 150

   38 loop_condition: init_stmt ';' operation ';' update_stmt .

    ')'  reduce using rule 38 (loop_condition)


State 151

   12 unq_declaration: type . $@2 ID

    ID  reduce using rule 11 ($@2)

    $@2  go to state 255


State 152

   12 unq_declaration: type . $@2 ID

    ID  reduce using rule 11 ($@2)

    $@2  go to state 256


State 153

   10 var_declaration: unq_declaration ';' .

    NUM_INT         reduce using rule 10 (var_declaration)
    NUM_FLOAT       reduce using rule 10 (var_declaration)
    NIL_CNST        reduce using rule 10 (var_declaration)
    ID              reduce using rule 10 (var_declaration)
    RETURN_STM      reduce using rule 10 (var_declaration)
    T_INT           reduce using rule 10 (var_declaration)
    T_FLOAT         reduce using rule 10 (var_declaration)
    IF_STMT         reduce using rule 10 (var_declaration)
    FOR_STMT        reduce using rule 10 (var_declaration)
    OUTPUT_WRITE    reduce using rule 10 (var_declaration)
    OUTPUT_WRITELN  reduce using rule 10 (var_declaration)
    INPUT_READ      reduce using rule 10 (var_declaration)
    '{'             reduce using rule 10 (var_declaration)
    '}'             reduce using rule 10 (var_declaration)
    '+'             reduce using rule 10 (var_declaration)
    '-'             reduce using rule 10 (var_declaration)
    '%'             reduce using rule 10 (var_declaration)
    '?'             reduce using rule 10 (var_declaration)
    '!'             reduce using rule 10 (var_declaration)


State 154

   54 number: NUM_INT .

    ')'         reduce using rule 54 (number)
    ','         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)
    '+'         reduce using rule 54 (number)
    '-'         reduce using rule 54 (number)
    '*'         reduce using rule 54 (number)
    '/'         reduce using rule 54 (number)
    FILTER      reduce using rule 54 (number)
    MAP         reduce using rule 54 (number)
    ':'         reduce using rule 54 (number)


State 155

   55 number: NUM_FLOAT .

    ')'         reduce using rule 55 (number)
    ','         reduce using rule 55 (number)
    AND         reduce using rule 55 (number)
    OR          reduce using rule 55 (number)
    GREATER     reduce using rule 55 (number)
    GREATER_EQ  reduce using rule 55 (number)
    LESS        reduce using rule 55 (number)
    LESS_EQ     reduce using rule 55 (number)
    EQUAL       reduce using rule 55 (number)
    NOT_EQ      reduce using rule 55 (number)
    '+'         reduce using rule 55 (number)
    '-'         reduce using rule 55 (number)
    '*'         reduce using rule 55 (number)
    '/'         reduce using rule 55 (number)
    FILTER      reduce using rule 55 (number)
    MAP         reduce using rule 55 (number)
    ':'         reduce using rule 55 (number)


State 156

   53 const: NIL_CNST .

    ')'         reduce using rule 53 (const)
    ','         reduce using rule 53 (const)
    AND         reduce using rule 53 (const)
    OR          reduce using rule 53 (const)
    GREATER     reduce using rule 53 (const)
    GREATER_EQ  reduce using rule 53 (const)
    LESS        reduce using rule 53 (const)
    LESS_EQ     reduce using rule 53 (const)
    EQUAL       reduce using rule 53 (const)
    NOT_EQ      reduce using rule 53 (const)
    '+'         reduce using rule 53 (const)
    '-'         reduce using rule 53 (const)
    '*'         reduce using rule 53 (const)
    '/'         reduce using rule 53 (const)
    FILTER      reduce using rule 53 (const)
    MAP         reduce using rule 53 (const)
    ':'         reduce using rule 53 (const)


State 157

   47 func_calling: ID . '(' lst_params ')'
   49 expression: ID .

    '('  shift, and go to state 257

    ')'         reduce using rule 49 (expression)
    ','         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)
    '+'         reduce using rule 49 (expression)
    '-'         reduce using rule 49 (expression)
    '*'         reduce using rule 49 (expression)
    '/'         reduce using rule 49 (expression)
    FILTER      reduce using rule 49 (expression)
    MAP         reduce using rule 49 (expression)
    ':'         reduce using rule 49 (expression)


State 158

   74 arith_single: '+' . expression

    NUM_INT    shift, and go to state 154
    NUM_FLOAT  shift, and go to state 155
    NIL_CNST   shift, and go to state 156
    ID         shift, and go to state 157
    '+'        shift, and go to state 158
    '-'        shift, and go to state 159
    '%'        shift, and go to state 160
    '?'        shift, and go to state 161
    '!'        shift, and go to state 162

    func_calling      go to state 163
    expression        go to state 258
    const             go to state 165
    number            go to state 166
    single_operation  go to state 168
    arith_single      go to state 170
    lst_single        go to state 171


State 159

   75 arith_single: '-' . expression

    NUM_INT    shift, and go to state 154
    NUM_FLOAT  shift, and go to state 155
    NIL_CNST   shift, and go to state 156
    ID         shift, and go to state 157
    '+'        shift, and go to state 158
    '-'        shift, and go to state 159
    '%'        shift, and go to state 160
    '?'        shift, and go to state 161
    '!'        shift, and go to state 162

    func_calling      go to state 163
    expression        go to state 259
    const             go to state 165
    number            go to state 166
    single_operation  go to state 168
    arith_single      go to state 170
    lst_single        go to state 171


State 160

   76 lst_single: '%' . expression

    NUM_INT    shift, and go to state 154
    NUM_FLOAT  shift, and go to state 155
    NIL_CNST   shift, and go to state 156
    ID         shift, and go to state 157
    '+'        shift, and go to state 158
    '-'        shift, and go to state 159
    '%'        shift, and go to state 160
    '?'        shift, and go to state 161
    '!'        shift, and go to state 162

    func_calling      go to state 163
    expression        go to state 260
    const             go to state 165
    number            go to state 166
    single_operation  go to state 168
    arith_single      go to state 170
    lst_single        go to state 171


State 161

   77 lst_single: '?' . expression

    NUM_INT    shift, and go to state 154
    NUM_FLOAT  shift, and go to state 155
    NIL_CNST   shift, and go to state 156
    ID         shift, and go to state 157
    '+'        shift, and go to state 158
    '-'        shift, and go to state 159
    '%'        shift, and go to state 160
    '?'        shift, and go to state 161
    '!'        shift, and go to state 162

    func_calling      go to state 163
    expression        go to state 261
    const             go to state 165
    number            go to state 166
    single_operation  go to state 168
    arith_single      go to state 170
    lst_single        go to state 171


State 162

   68 single_operation: '!' . expression

    NUM_INT    shift, and go to state 154
    NUM_FLOAT  shift, and go to state 155
    NIL_CNST   shift, and go to state 156
    ID         shift, and go to state 157
    '+'        shift, and go to state 158
    '-'        shift, and go to state 159
    '%'        shift, and go to state 160
    '?'        shift, and go to state 161
    '!'        shift, and go to state 162

    func_calling      go to state 163
    expression        go to state 262
    const             go to state 165
    number            go to state 166
    single_operation  go to state 168
    arith_single      go to state 170
    lst_single        go to state 171


State 163

   48 expression: func_calling .

    ')'         reduce using rule 48 (expression)
    ','         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)
    '+'         reduce using rule 48 (expression)
    '-'         reduce using rule 48 (expression)
    '*'         reduce using rule 48 (expression)
    '/'         reduce using rule 48 (expression)
    FILTER      reduce using rule 48 (expression)
    MAP         reduce using rule 48 (expression)
    ':'         reduce using rule 48 (expression)


State 164

   73 arith_binary: expression .
   78 lst_binary: expression . FILTER expression
   79           | expression . MAP expression
   80           | expression . ':' expression

    FILTER  shift, and go to state 263
    MAP     shift, and go to state 264
    ':'     shift, and go to state 265

    ')'         reduce using rule 73 (arith_binary)
    ','         reduce using rule 73 (arith_binary)
    AND         reduce using rule 73 (arith_binary)
    OR          reduce using rule 73 (arith_binary)
    GREATER     reduce using rule 73 (arith_binary)
    GREATER_EQ  reduce using rule 73 (arith_binary)
    LESS        reduce using rule 73 (arith_binary)
    LESS_EQ     reduce using rule 73 (arith_binary)
    EQUAL       reduce using rule 73 (arith_binary)
    NOT_EQ      reduce using rule 73 (arith_binary)
    '+'         reduce using rule 73 (arith_binary)
    '-'         reduce using rule 73 (arith_binary)
    '*'         reduce using rule 73 (arith_binary)
    '/'         reduce using rule 73 (arith_binary)


State 165

   50 expression: const .

    ')'         reduce using rule 50 (expression)
    ','         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)
    FILTER      reduce using rule 50 (expression)
    MAP         reduce using rule 50 (expression)
    ':'         reduce using rule 50 (expression)


State 166

   52 const: number .

    ')'         reduce using rule 52 (const)
    ','         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)
    '+'         reduce using rule 52 (const)
    '-'         reduce using rule 52 (const)
    '*'         reduce using rule 52 (const)
    '/'         reduce using rule 52 (const)
    FILTER      reduce using rule 52 (const)
    MAP         reduce using rule 52 (const)
    ':'         reduce using rule 52 (const)


State 167

   61 operation: binary_operation .
   64 binary_operation: binary_operation . relation_operator expression
   65                 | binary_operation . log_operator expression

    AND         shift, and go to state 89
    OR          shift, and go to state 90
    GREATER     shift, and go to state 91
    GREATER_EQ  shift, and go to state 92
    LESS        shift, and go to state 93
    LESS_EQ     shift, and go to state 94
    EQUAL       shift, and go to state 95
    NOT_EQ      shift, and go to state 96

    ')'  reduce using rule 61 (operation)
    ','  reduce using rule 61 (operation)

    log_operator       go to state 266
    relation_operator  go to state 267


State 168

   51 expression: single_operation .

    ')'         reduce using rule 51 (expression)
    ','         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)
    FILTER      reduce using rule 51 (expression)
    MAP         reduce using rule 51 (expression)
    ':'         reduce using rule 51 (expression)


State 169

   62 binary_operation: arith_binary .
   69 arith_binary: arith_binary . '+' expression
   70             | arith_binary . '-' expression
   71             | arith_binary . '*' expression
   72             | arith_binary . '/' expression

    '+'  shift, and go to state 268
    '-'  shift, and go to state 269
    '*'  shift, and go to state 270
    '/'  shift, and go to state 271

    ')'         reduce using rule 62 (binary_operation)
    ','         reduce using rule 62 (binary_operation)
    AND         reduce using rule 62 (binary_operation)
    OR          reduce using rule 62 (binary_operation)
    GREATER     reduce using rule 62 (binary_operation)
    GREATER_EQ  reduce using rule 62 (binary_operation)
    LESS        reduce using rule 62 (binary_operation)
    LESS_EQ     reduce using rule 62 (binary_operation)
    EQUAL       reduce using rule 62 (binary_operation)
    NOT_EQ      reduce using rule 62 (binary_operation)


State 170

   66 single_operation: arith_single .

    ')'         reduce using rule 66 (single_operation)
    ','         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)
    '+'         reduce using rule 66 (single_operation)
    '-'         reduce using rule 66 (single_operation)
    '*'         reduce using rule 66 (single_operation)
    '/'         reduce using rule 66 (single_operation)
    FILTER      reduce using rule 66 (single_operation)
    MAP         reduce using rule 66 (single_operation)
    ':'         reduce using rule 66 (single_operation)


State 171

   67 single_operation: lst_single .

    ')'         reduce using rule 67 (single_operation)
    ','         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)
    '+'         reduce using rule 67 (single_operation)
    '-'         reduce using rule 67 (single_operation)
    '*'         reduce using rule 67 (single_operation)
    '/'         reduce using rule 67 (single_operation)
    FILTER      reduce using rule 67 (single_operation)
    MAP         reduce using rule 67 (single_operation)
    ':'         reduce using rule 67 (single_operation)


State 172

   63 binary_operation: lst_binary .

    ')'         reduce using rule 63 (binary_operation)
    ','         reduce using rule 63 (binary_operation)
    AND         reduce using rule 63 (binary_operation)
    OR          reduce using rule 63 (binary_operation)
    GREATER     reduce using rule 63 (binary_operation)
    GREATER_EQ  reduce using rule 63 (binary_operation)
    LESS        reduce using rule 63 (binary_operation)
    LESS_EQ     reduce using rule 63 (binary_operation)
    EQUAL       reduce using rule 63 (binary_operation)
    NOT_EQ      reduce using rule 63 (binary_operation)


State 173

   54 number: NUM_INT .

    ')'         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)
    '+'         reduce using rule 54 (number)
    '-'         reduce using rule 54 (number)
    '*'         reduce using rule 54 (number)
    '/'         reduce using rule 54 (number)
    FILTER      reduce using rule 54 (number)
    MAP         reduce using rule 54 (number)
    ':'         reduce using rule 54 (number)


State 174

   55 number: NUM_FLOAT .

    ')'         reduce using rule 55 (number)
    AND         reduce using rule 55 (number)
    OR          reduce using rule 55 (number)
    GREATER     reduce using rule 55 (number)
    GREATER_EQ  reduce using rule 55 (number)
    LESS        reduce using rule 55 (number)
    LESS_EQ     reduce using rule 55 (number)
    EQUAL       reduce using rule 55 (number)
    NOT_EQ      reduce using rule 55 (number)
    '+'         reduce using rule 55 (number)
    '-'         reduce using rule 55 (number)
    '*'         reduce using rule 55 (number)
    '/'         reduce using rule 55 (number)
    FILTER      reduce using rule 55 (number)
    MAP         reduce using rule 55 (number)
    ':'         reduce using rule 55 (number)


State 175

   53 const: NIL_CNST .

    ')'         reduce using rule 53 (const)
    AND         reduce using rule 53 (const)
    OR          reduce using rule 53 (const)
    GREATER     reduce using rule 53 (const)
    GREATER_EQ  reduce using rule 53 (const)
    LESS        reduce using rule 53 (const)
    LESS_EQ     reduce using rule 53 (const)
    EQUAL       reduce using rule 53 (const)
    NOT_EQ      reduce using rule 53 (const)
    '+'         reduce using rule 53 (const)
    '-'         reduce using rule 53 (const)
    '*'         reduce using rule 53 (const)
    '/'         reduce using rule 53 (const)
    FILTER      reduce using rule 53 (const)
    MAP         reduce using rule 53 (const)
    ':'         reduce using rule 53 (const)


State 176

   47 func_calling: ID . '(' lst_params ')'
   49 expression: ID .

    '('  shift, and go to state 272

    ')'         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)
    '+'         reduce using rule 49 (expression)
    '-'         reduce using rule 49 (expression)
    '*'         reduce using rule 49 (expression)
    '/'         reduce using rule 49 (expression)
    FILTER      reduce using rule 49 (expression)
    MAP         reduce using rule 49 (expression)
    ':'         reduce using rule 49 (expression)


State 177

   74 arith_single: '+' . expression

    NUM_INT    shift, and go to state 173
    NUM_FLOAT  shift, and go to state 174
    NIL_CNST   shift, and go to state 175
    ID         shift, and go to state 176
    '+'        shift, and go to state 177
    '-'        shift, and go to state 178
    '%'        shift, and go to state 179
    '?'        shift, and go to state 180
    '!'        shift, and go to state 181

    func_calling      go to state 182
    expression        go to state 273
    const             go to state 184
    number            go to state 185
    single_operation  go to state 187
    arith_single      go to state 189
    lst_single        go to state 190


State 178

   75 arith_single: '-' . expression

    NUM_INT    shift, and go to state 173
    NUM_FLOAT  shift, and go to state 174
    NIL_CNST   shift, and go to state 175
    ID         shift, and go to state 176
    '+'        shift, and go to state 177
    '-'        shift, and go to state 178
    '%'        shift, and go to state 179
    '?'        shift, and go to state 180
    '!'        shift, and go to state 181

    func_calling      go to state 182
    expression        go to state 274
    const             go to state 184
    number            go to state 185
    single_operation  go to state 187
    arith_single      go to state 189
    lst_single        go to state 190


State 179

   76 lst_single: '%' . expression

    NUM_INT    shift, and go to state 173
    NUM_FLOAT  shift, and go to state 174
    NIL_CNST   shift, and go to state 175
    ID         shift, and go to state 176
    '+'        shift, and go to state 177
    '-'        shift, and go to state 178
    '%'        shift, and go to state 179
    '?'        shift, and go to state 180
    '!'        shift, and go to state 181

    func_calling      go to state 182
    expression        go to state 275
    const             go to state 184
    number            go to state 185
    single_operation  go to state 187
    arith_single      go to state 189
    lst_single        go to state 190


State 180

   77 lst_single: '?' . expression

    NUM_INT    shift, and go to state 173
    NUM_FLOAT  shift, and go to state 174
    NIL_CNST   shift, and go to state 175
    ID         shift, and go to state 176
    '+'        shift, and go to state 177
    '-'        shift, and go to state 178
    '%'        shift, and go to state 179
    '?'        shift, and go to state 180
    '!'        shift, and go to state 181

    func_calling      go to state 182
    expression        go to state 276
    const             go to state 184
    number            go to state 185
    single_operation  go to state 187
    arith_single      go to state 189
    lst_single        go to state 190


State 181

   68 single_operation: '!' . expression

    NUM_INT    shift, and go to state 173
    NUM_FLOAT  shift, and go to state 174
    NIL_CNST   shift, and go to state 175
    ID         shift, and go to state 176
    '+'        shift, and go to state 177
    '-'        shift, and go to state 178
    '%'        shift, and go to state 179
    '?'        shift, and go to state 180
    '!'        shift, and go to state 181

    func_calling      go to state 182
    expression        go to state 277
    const             go to state 184
    number            go to state 185
    single_operation  go to state 187
    arith_single      go to state 189
    lst_single        go to state 190


State 182

   48 expression: func_calling .

    ')'         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)
    '+'         reduce using rule 48 (expression)
    '-'         reduce using rule 48 (expression)
    '*'         reduce using rule 48 (expression)
    '/'         reduce using rule 48 (expression)
    FILTER      reduce using rule 48 (expression)
    MAP         reduce using rule 48 (expression)
    ':'         reduce using rule 48 (expression)


State 183

   73 arith_binary: expression .
   78 lst_binary: expression . FILTER expression
   79           | expression . MAP expression
   80           | expression . ':' expression

    FILTER  shift, and go to state 278
    MAP     shift, and go to state 279
    ':'     shift, and go to state 280

    ')'         reduce using rule 73 (arith_binary)
    AND         reduce using rule 73 (arith_binary)
    OR          reduce using rule 73 (arith_binary)
    GREATER     reduce using rule 73 (arith_binary)
    GREATER_EQ  reduce using rule 73 (arith_binary)
    LESS        reduce using rule 73 (arith_binary)
    LESS_EQ     reduce using rule 73 (arith_binary)
    EQUAL       reduce using rule 73 (arith_binary)
    NOT_EQ      reduce using rule 73 (arith_binary)
    '+'         reduce using rule 73 (arith_binary)
    '-'         reduce using rule 73 (arith_binary)
    '*'         reduce using rule 73 (arith_binary)
    '/'         reduce using rule 73 (arith_binary)


State 184

   50 expression: const .

    ')'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)
    FILTER      reduce using rule 50 (expression)
    MAP         reduce using rule 50 (expression)
    ':'         reduce using rule 50 (expression)


State 185

   52 const: number .

    ')'         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)
    '+'         reduce using rule 52 (const)
    '-'         reduce using rule 52 (const)
    '*'         reduce using rule 52 (const)
    '/'         reduce using rule 52 (const)
    FILTER      reduce using rule 52 (const)
    MAP         reduce using rule 52 (const)
    ':'         reduce using rule 52 (const)


State 186

   61 operation: binary_operation .
   64 binary_operation: binary_operation . relation_operator expression
   65                 | binary_operation . log_operator expression

    AND         shift, and go to state 89
    OR          shift, and go to state 90
    GREATER     shift, and go to state 91
    GREATER_EQ  shift, and go to state 92
    LESS        shift, and go to state 93
    LESS_EQ     shift, and go to state 94
    EQUAL       shift, and go to state 95
    NOT_EQ      shift, and go to state 96

    ')'  reduce using rule 61 (operation)

    log_operator       go to state 281
    relation_operator  go to state 282


State 187

   51 expression: single_operation .

    ')'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)
    FILTER      reduce using rule 51 (expression)
    MAP         reduce using rule 51 (expression)
    ':'         reduce using rule 51 (expression)


State 188

   62 binary_operation: arith_binary .
   69 arith_binary: arith_binary . '+' expression
   70             | arith_binary . '-' expression
   71             | arith_binary . '*' expression
   72             | arith_binary . '/' expression

    '+'  shift, and go to state 283
    '-'  shift, and go to state 284
    '*'  shift, and go to state 285
    '/'  shift, and go to state 286

    ')'         reduce using rule 62 (binary_operation)
    AND         reduce using rule 62 (binary_operation)
    OR          reduce using rule 62 (binary_operation)
    GREATER     reduce using rule 62 (binary_operation)
    GREATER_EQ  reduce using rule 62 (binary_operation)
    LESS        reduce using rule 62 (binary_operation)
    LESS_EQ     reduce using rule 62 (binary_operation)
    EQUAL       reduce using rule 62 (binary_operation)
    NOT_EQ      reduce using rule 62 (binary_operation)


State 189

   66 single_operation: arith_single .

    ')'         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)
    '+'         reduce using rule 66 (single_operation)
    '-'         reduce using rule 66 (single_operation)
    '*'         reduce using rule 66 (single_operation)
    '/'         reduce using rule 66 (single_operation)
    FILTER      reduce using rule 66 (single_operation)
    MAP         reduce using rule 66 (single_operation)
    ':'         reduce using rule 66 (single_operation)


State 190

   67 single_operation: lst_single .

    ')'         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)
    '+'         reduce using rule 67 (single_operation)
    '-'         reduce using rule 67 (single_operation)
    '*'         reduce using rule 67 (single_operation)
    '/'         reduce using rule 67 (single_operation)
    FILTER      reduce using rule 67 (single_operation)
    MAP         reduce using rule 67 (single_operation)
    ':'         reduce using rule 67 (single_operation)


State 191

   63 binary_operation: lst_binary .

    ')'         reduce using rule 63 (binary_operation)
    AND         reduce using rule 63 (binary_operation)
    OR          reduce using rule 63 (binary_operation)
    GREATER     reduce using rule 63 (binary_operation)
    GREATER_EQ  reduce using rule 63 (binary_operation)
    LESS        reduce using rule 63 (binary_operation)
    LESS_EQ     reduce using rule 63 (binary_operation)
    EQUAL       reduce using rule 63 (binary_operation)
    NOT_EQ      reduce using rule 63 (binary_operation)


State 192

   54 number: NUM_INT .

    ')'  reduce using rule 54 (number)


State 193

   55 number: NUM_FLOAT .

    ')'  reduce using rule 55 (number)


State 194

   53 const: NIL_CNST .

    ')'  reduce using rule 53 (const)


State 195

   47 func_calling: ID . '(' lst_params ')'
   49 expression: ID .

    '('  shift, and go to state 287

    ')'  reduce using rule 49 (expression)


State 196

   74 arith_single: '+' . expression

    NUM_INT    shift, and go to state 192
    NUM_FLOAT  shift, and go to state 193
    NIL_CNST   shift, and go to state 194
    ID         shift, and go to state 195
    '+'        shift, and go to state 196
    '-'        shift, and go to state 197
    '%'        shift, and go to state 198
    '?'        shift, and go to state 199
    '!'        shift, and go to state 200

    func_calling      go to state 201
    expression        go to state 288
    const             go to state 202
    number            go to state 203
    single_operation  go to state 204
    arith_single      go to state 205
    lst_single        go to state 206


State 197

   75 arith_single: '-' . expression

    NUM_INT    shift, and go to state 192
    NUM_FLOAT  shift, and go to state 193
    NIL_CNST   shift, and go to state 194
    ID         shift, and go to state 195
    '+'        shift, and go to state 196
    '-'        shift, and go to state 197
    '%'        shift, and go to state 198
    '?'        shift, and go to state 199
    '!'        shift, and go to state 200

    func_calling      go to state 201
    expression        go to state 289
    const             go to state 202
    number            go to state 203
    single_operation  go to state 204
    arith_single      go to state 205
    lst_single        go to state 206


State 198

   76 lst_single: '%' . expression

    NUM_INT    shift, and go to state 192
    NUM_FLOAT  shift, and go to state 193
    NIL_CNST   shift, and go to state 194
    ID         shift, and go to state 195
    '+'        shift, and go to state 196
    '-'        shift, and go to state 197
    '%'        shift, and go to state 198
    '?'        shift, and go to state 199
    '!'        shift, and go to state 200

    func_calling      go to state 201
    expression        go to state 290
    const             go to state 202
    number            go to state 203
    single_operation  go to state 204
    arith_single      go to state 205
    lst_single        go to state 206


State 199

   77 lst_single: '?' . expression

    NUM_INT    shift, and go to state 192
    NUM_FLOAT  shift, and go to state 193
    NIL_CNST   shift, and go to state 194
    ID         shift, and go to state 195
    '+'        shift, and go to state 196
    '-'        shift, and go to state 197
    '%'        shift, and go to state 198
    '?'        shift, and go to state 199
    '!'        shift, and go to state 200

    func_calling      go to state 201
    expression        go to state 291
    const             go to state 202
    number            go to state 203
    single_operation  go to state 204
    arith_single      go to state 205
    lst_single        go to state 206


State 200

   68 single_operation: '!' . expression

    NUM_INT    shift, and go to state 192
    NUM_FLOAT  shift, and go to state 193
    NIL_CNST   shift, and go to state 194
    ID         shift, and go to state 195
    '+'        shift, and go to state 196
    '-'        shift, and go to state 197
    '%'        shift, and go to state 198
    '?'        shift, and go to state 199
    '!'        shift, and go to state 200

    func_calling      go to state 201
    expression        go to state 292
    const             go to state 202
    number            go to state 203
    single_operation  go to state 204
    arith_single      go to state 205
    lst_single        go to state 206


State 201

   48 expression: func_calling .

    ')'  reduce using rule 48 (expression)


State 202

   50 expression: const .

    ')'  reduce using rule 50 (expression)


State 203

   52 const: number .

    ')'  reduce using rule 52 (const)


State 204

   51 expression: single_operation .

    ')'  reduce using rule 51 (expression)


State 205

   66 single_operation: arith_single .

    ')'  reduce using rule 66 (single_operation)


State 206

   67 single_operation: lst_single .

    ')'  reduce using rule 67 (single_operation)


State 207

   54 number: NUM_INT .

    ';'         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)


State 208

   55 number: NUM_FLOAT .

    ';'         reduce using rule 55 (number)
    AND         reduce using rule 55 (number)
    OR          reduce using rule 55 (number)
    GREATER     reduce using rule 55 (number)
    GREATER_EQ  reduce using rule 55 (number)
    LESS        reduce using rule 55 (number)
    LESS_EQ     reduce using rule 55 (number)
    EQUAL       reduce using rule 55 (number)
    NOT_EQ      reduce using rule 55 (number)


State 209

   53 const: NIL_CNST .

    ';'         reduce using rule 53 (const)
    AND         reduce using rule 53 (const)
    OR          reduce using rule 53 (const)
    GREATER     reduce using rule 53 (const)
    GREATER_EQ  reduce using rule 53 (const)
    LESS        reduce using rule 53 (const)
    LESS_EQ     reduce using rule 53 (const)
    EQUAL       reduce using rule 53 (const)
    NOT_EQ      reduce using rule 53 (const)


State 210

   47 func_calling: ID . '(' lst_params ')'
   49 expression: ID .

    '('  shift, and go to state 293

    ';'         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)


State 211

   74 arith_single: '+' . expression

    NUM_INT    shift, and go to state 207
    NUM_FLOAT  shift, and go to state 208
    NIL_CNST   shift, and go to state 209
    ID         shift, and go to state 210
    '+'        shift, and go to state 211
    '-'        shift, and go to state 212
    '%'        shift, and go to state 213
    '?'        shift, and go to state 214
    '!'        shift, and go to state 215

    func_calling      go to state 216
    expression        go to state 294
    const             go to state 217
    number            go to state 218
    single_operation  go to state 219
    arith_single      go to state 220
    lst_single        go to state 221


State 212

   75 arith_single: '-' . expression

    NUM_INT    shift, and go to state 207
    NUM_FLOAT  shift, and go to state 208
    NIL_CNST   shift, and go to state 209
    ID         shift, and go to state 210
    '+'        shift, and go to state 211
    '-'        shift, and go to state 212
    '%'        shift, and go to state 213
    '?'        shift, and go to state 214
    '!'        shift, and go to state 215

    func_calling      go to state 216
    expression        go to state 295
    const             go to state 217
    number            go to state 218
    single_operation  go to state 219
    arith_single      go to state 220
    lst_single        go to state 221


State 213

   76 lst_single: '%' . expression

    NUM_INT    shift, and go to state 207
    NUM_FLOAT  shift, and go to state 208
    NIL_CNST   shift, and go to state 209
    ID         shift, and go to state 210
    '+'        shift, and go to state 211
    '-'        shift, and go to state 212
    '%'        shift, and go to state 213
    '?'        shift, and go to state 214
    '!'        shift, and go to state 215

    func_calling      go to state 216
    expression        go to state 296
    const             go to state 217
    number            go to state 218
    single_operation  go to state 219
    arith_single      go to state 220
    lst_single        go to state 221


State 214

   77 lst_single: '?' . expression

    NUM_INT    shift, and go to state 207
    NUM_FLOAT  shift, and go to state 208
    NIL_CNST   shift, and go to state 209
    ID         shift, and go to state 210
    '+'        shift, and go to state 211
    '-'        shift, and go to state 212
    '%'        shift, and go to state 213
    '?'        shift, and go to state 214
    '!'        shift, and go to state 215

    func_calling      go to state 216
    expression        go to state 297
    const             go to state 217
    number            go to state 218
    single_operation  go to state 219
    arith_single      go to state 220
    lst_single        go to state 221


State 215

   68 single_operation: '!' . expression

    NUM_INT    shift, and go to state 207
    NUM_FLOAT  shift, and go to state 208
    NIL_CNST   shift, and go to state 209
    ID         shift, and go to state 210
    '+'        shift, and go to state 211
    '-'        shift, and go to state 212
    '%'        shift, and go to state 213
    '?'        shift, and go to state 214
    '!'        shift, and go to state 215

    func_calling      go to state 216
    expression        go to state 298
    const             go to state 217
    number            go to state 218
    single_operation  go to state 219
    arith_single      go to state 220
    lst_single        go to state 221


State 216

   48 expression: func_calling .

    ';'         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)


State 217

   50 expression: const .

    ';'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)


State 218

   52 const: number .

    ';'         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)


State 219

   51 expression: single_operation .

    ';'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)


State 220

   66 single_operation: arith_single .

    ';'         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)


State 221

   67 single_operation: lst_single .

    ';'         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)


State 222

   54 number: NUM_INT .

    ';'         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)
    '+'         reduce using rule 54 (number)
    '-'         reduce using rule 54 (number)
    '*'         reduce using rule 54 (number)
    '/'         reduce using rule 54 (number)


State 223

   55 number: NUM_FLOAT .

    ';'         reduce using rule 55 (number)
    AND         reduce using rule 55 (number)
    OR          reduce using rule 55 (number)
    GREATER     reduce using rule 55 (number)
    GREATER_EQ  reduce using rule 55 (number)
    LESS        reduce using rule 55 (number)
    LESS_EQ     reduce using rule 55 (number)
    EQUAL       reduce using rule 55 (number)
    NOT_EQ      reduce using rule 55 (number)
    '+'         reduce using rule 55 (number)
    '-'         reduce using rule 55 (number)
    '*'         reduce using rule 55 (number)
    '/'         reduce using rule 55 (number)


State 224

   53 const: NIL_CNST .

    ';'         reduce using rule 53 (const)
    AND         reduce using rule 53 (const)
    OR          reduce using rule 53 (const)
    GREATER     reduce using rule 53 (const)
    GREATER_EQ  reduce using rule 53 (const)
    LESS        reduce using rule 53 (const)
    LESS_EQ     reduce using rule 53 (const)
    EQUAL       reduce using rule 53 (const)
    NOT_EQ      reduce using rule 53 (const)
    '+'         reduce using rule 53 (const)
    '-'         reduce using rule 53 (const)
    '*'         reduce using rule 53 (const)
    '/'         reduce using rule 53 (const)


State 225

   47 func_calling: ID . '(' lst_params ')'
   49 expression: ID .

    '('  shift, and go to state 299

    ';'         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)
    '+'         reduce using rule 49 (expression)
    '-'         reduce using rule 49 (expression)
    '*'         reduce using rule 49 (expression)
    '/'         reduce using rule 49 (expression)


State 226

   74 arith_single: '+' . expression

    NUM_INT    shift, and go to state 222
    NUM_FLOAT  shift, and go to state 223
    NIL_CNST   shift, and go to state 224
    ID         shift, and go to state 225
    '+'        shift, and go to state 226
    '-'        shift, and go to state 227
    '%'        shift, and go to state 228
    '?'        shift, and go to state 229
    '!'        shift, and go to state 230

    func_calling      go to state 231
    expression        go to state 300
    const             go to state 232
    number            go to state 233
    single_operation  go to state 234
    arith_single      go to state 235
    lst_single        go to state 236


State 227

   75 arith_single: '-' . expression

    NUM_INT    shift, and go to state 222
    NUM_FLOAT  shift, and go to state 223
    NIL_CNST   shift, and go to state 224
    ID         shift, and go to state 225
    '+'        shift, and go to state 226
    '-'        shift, and go to state 227
    '%'        shift, and go to state 228
    '?'        shift, and go to state 229
    '!'        shift, and go to state 230

    func_calling      go to state 231
    expression        go to state 301
    const             go to state 232
    number            go to state 233
    single_operation  go to state 234
    arith_single      go to state 235
    lst_single        go to state 236


State 228

   76 lst_single: '%' . expression

    NUM_INT    shift, and go to state 222
    NUM_FLOAT  shift, and go to state 223
    NIL_CNST   shift, and go to state 224
    ID         shift, and go to state 225
    '+'        shift, and go to state 226
    '-'        shift, and go to state 227
    '%'        shift, and go to state 228
    '?'        shift, and go to state 229
    '!'        shift, and go to state 230

    func_calling      go to state 231
    expression        go to state 302
    const             go to state 232
    number            go to state 233
    single_operation  go to state 234
    arith_single      go to state 235
    lst_single        go to state 236


State 229

   77 lst_single: '?' . expression

    NUM_INT    shift, and go to state 222
    NUM_FLOAT  shift, and go to state 223
    NIL_CNST   shift, and go to state 224
    ID         shift, and go to state 225
    '+'        shift, and go to state 226
    '-'        shift, and go to state 227
    '%'        shift, and go to state 228
    '?'        shift, and go to state 229
    '!'        shift, and go to state 230

    func_calling      go to state 231
    expression        go to state 303
    const             go to state 232
    number            go to state 233
    single_operation  go to state 234
    arith_single      go to state 235
    lst_single        go to state 236


State 230

   68 single_operation: '!' . expression

    NUM_INT    shift, and go to state 222
    NUM_FLOAT  shift, and go to state 223
    NIL_CNST   shift, and go to state 224
    ID         shift, and go to state 225
    '+'        shift, and go to state 226
    '-'        shift, and go to state 227
    '%'        shift, and go to state 228
    '?'        shift, and go to state 229
    '!'        shift, and go to state 230

    func_calling      go to state 231
    expression        go to state 304
    const             go to state 232
    number            go to state 233
    single_operation  go to state 234
    arith_single      go to state 235
    lst_single        go to state 236


State 231

   48 expression: func_calling .

    ';'         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)
    '+'         reduce using rule 48 (expression)
    '-'         reduce using rule 48 (expression)
    '*'         reduce using rule 48 (expression)
    '/'         reduce using rule 48 (expression)


State 232

   50 expression: const .

    ';'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)


State 233

   52 const: number .

    ';'         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)
    '+'         reduce using rule 52 (const)
    '-'         reduce using rule 52 (const)
    '*'         reduce using rule 52 (const)
    '/'         reduce using rule 52 (const)


State 234

   51 expression: single_operation .

    ';'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)


State 235

   66 single_operation: arith_single .

    ';'         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)
    '+'         reduce using rule 66 (single_operation)
    '-'         reduce using rule 66 (single_operation)
    '*'         reduce using rule 66 (single_operation)
    '/'         reduce using rule 66 (single_operation)


State 236

   67 single_operation: lst_single .

    ';'         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)
    '+'         reduce using rule 67 (single_operation)
    '-'         reduce using rule 67 (single_operation)
    '*'         reduce using rule 67 (single_operation)
    '/'         reduce using rule 67 (single_operation)


State 237

   35 return_stmt: RETURN_STM . operation ';'

    NUM_INT    shift, and go to state 29
    NUM_FLOAT  shift, and go to state 30
    NIL_CNST   shift, and go to state 31
    ID         shift, and go to state 69
    '+'        shift, and go to state 40
    '-'        shift, and go to state 41
    '%'        shift, and go to state 42
    '?'        shift, and go to state 43
    '!'        shift, and go to state 44

    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    operation         go to state 305
    binary_operation  go to state 61
    single_operation  go to state 62
    arith_binary      go to state 63
    arith_single      go to state 64
    lst_single        go to state 65
    lst_binary        go to state 66


State 238

   33 conditional_stmt: IF_STMT . '(' operation ')' command
   34                 | IF_STMT . '(' operation ')' command ELSE_STMT command

    '('  shift, and go to state 306


State 239

   37 iteration: FOR_STMT . '(' loop_condition ')' command

    '('  shift, and go to state 307


State 240

   42 output: OUTPUT_WRITE . '(' operation ')' ';'
   44       | OUTPUT_WRITE . '(' STRING ')' ';'

    '('  shift, and go to state 308


State 241

   43 output: OUTPUT_WRITELN . '(' operation ')' ';'
   45       | OUTPUT_WRITELN . '(' STRING ')' ';'

    '('  shift, and go to state 309


State 242

   46 input: INPUT_READ . '(' expression ')' ';'

    '('  shift, and go to state 310


State 243

   31 command: '{' . block_commands '}'

    NUM_INT         shift, and go to state 29
    NUM_FLOAT       shift, and go to state 30
    NIL_CNST        shift, and go to state 31
    ID              shift, and go to state 32
    RETURN_STM      shift, and go to state 33
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 34
    FOR_STMT        shift, and go to state 35
    OUTPUT_WRITE    shift, and go to state 36
    OUTPUT_WRITELN  shift, and go to state 37
    INPUT_READ      shift, and go to state 38
    '{'             shift, and go to state 39
    '+'             shift, and go to state 40
    '-'             shift, and go to state 41
    '%'             shift, and go to state 42
    '?'             shift, and go to state 43
    '!'             shift, and go to state 44

    '}'  reduce using rule 23 (block_commands)

    var_declaration   go to state 45
    unq_declaration   go to state 46
    block_commands    go to state 311
    command           go to state 48
    conditional_stmt  go to state 49
    return_stmt       go to state 50
    init_variable     go to state 51
    iteration         go to state 52
    init_stmt         go to state 53
    output            go to state 54
    input             go to state 55
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 152
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 60
    binary_operation  go to state 61
    single_operation  go to state 62
    arith_binary      go to state 63
    arith_single      go to state 64
    lst_single        go to state 65
    lst_binary        go to state 66


State 244

   24 command: var_declaration .

    NUM_INT         reduce using rule 24 (command)
    NUM_FLOAT       reduce using rule 24 (command)
    NIL_CNST        reduce using rule 24 (command)
    ID              reduce using rule 24 (command)
    RETURN_STM      reduce using rule 24 (command)
    T_INT           reduce using rule 24 (command)
    T_FLOAT         reduce using rule 24 (command)
    IF_STMT         reduce using rule 24 (command)
    ELSE_STMT       reduce using rule 24 (command)
    FOR_STMT        reduce using rule 24 (command)
    OUTPUT_WRITE    reduce using rule 24 (command)
    OUTPUT_WRITELN  reduce using rule 24 (command)
    INPUT_READ      reduce using rule 24 (command)
    '{'             reduce using rule 24 (command)
    '}'             reduce using rule 24 (command)
    '+'             reduce using rule 24 (command)
    '-'             reduce using rule 24 (command)
    '%'             reduce using rule 24 (command)
    '?'             reduce using rule 24 (command)
    '!'             reduce using rule 24 (command)


State 245

   10 var_declaration: unq_declaration . ';'

    ';'  shift, and go to state 312


State 246

   25 command: conditional_stmt .

    NUM_INT         reduce using rule 25 (command)
    NUM_FLOAT       reduce using rule 25 (command)
    NIL_CNST        reduce using rule 25 (command)
    ID              reduce using rule 25 (command)
    RETURN_STM      reduce using rule 25 (command)
    T_INT           reduce using rule 25 (command)
    T_FLOAT         reduce using rule 25 (command)
    IF_STMT         reduce using rule 25 (command)
    ELSE_STMT       reduce using rule 25 (command)
    FOR_STMT        reduce using rule 25 (command)
    OUTPUT_WRITE    reduce using rule 25 (command)
    OUTPUT_WRITELN  reduce using rule 25 (command)
    INPUT_READ      reduce using rule 25 (command)
    '{'             reduce using rule 25 (command)
    '}'             reduce using rule 25 (command)
    '+'             reduce using rule 25 (command)
    '-'             reduce using rule 25 (command)
    '%'             reduce using rule 25 (command)
    '?'             reduce using rule 25 (command)
    '!'             reduce using rule 25 (command)


State 247

   26 command: return_stmt .

    NUM_INT         reduce using rule 26 (command)
    NUM_FLOAT       reduce using rule 26 (command)
    NIL_CNST        reduce using rule 26 (command)
    ID              reduce using rule 26 (command)
    RETURN_STM      reduce using rule 26 (command)
    T_INT           reduce using rule 26 (command)
    T_FLOAT         reduce using rule 26 (command)
    IF_STMT         reduce using rule 26 (command)
    ELSE_STMT       reduce using rule 26 (command)
    FOR_STMT        reduce using rule 26 (command)
    OUTPUT_WRITE    reduce using rule 26 (command)
    OUTPUT_WRITELN  reduce using rule 26 (command)
    INPUT_READ      reduce using rule 26 (command)
    '{'             reduce using rule 26 (command)
    '}'             reduce using rule 26 (command)
    '+'             reduce using rule 26 (command)
    '-'             reduce using rule 26 (command)
    '%'             reduce using rule 26 (command)
    '?'             reduce using rule 26 (command)
    '!'             reduce using rule 26 (command)


State 248

   27 command: init_variable .

    NUM_INT         reduce using rule 27 (command)
    NUM_FLOAT       reduce using rule 27 (command)
    NIL_CNST        reduce using rule 27 (command)
    ID              reduce using rule 27 (command)
    RETURN_STM      reduce using rule 27 (command)
    T_INT           reduce using rule 27 (command)
    T_FLOAT         reduce using rule 27 (command)
    IF_STMT         reduce using rule 27 (command)
    ELSE_STMT       reduce using rule 27 (command)
    FOR_STMT        reduce using rule 27 (command)
    OUTPUT_WRITE    reduce using rule 27 (command)
    OUTPUT_WRITELN  reduce using rule 27 (command)
    INPUT_READ      reduce using rule 27 (command)
    '{'             reduce using rule 27 (command)
    '}'             reduce using rule 27 (command)
    '+'             reduce using rule 27 (command)
    '-'             reduce using rule 27 (command)
    '%'             reduce using rule 27 (command)
    '?'             reduce using rule 27 (command)
    '!'             reduce using rule 27 (command)


State 249

   28 command: iteration .

    NUM_INT         reduce using rule 28 (command)
    NUM_FLOAT       reduce using rule 28 (command)
    NIL_CNST        reduce using rule 28 (command)
    ID              reduce using rule 28 (command)
    RETURN_STM      reduce using rule 28 (command)
    T_INT           reduce using rule 28 (command)
    T_FLOAT         reduce using rule 28 (command)
    IF_STMT         reduce using rule 28 (command)
    ELSE_STMT       reduce using rule 28 (command)
    FOR_STMT        reduce using rule 28 (command)
    OUTPUT_WRITE    reduce using rule 28 (command)
    OUTPUT_WRITELN  reduce using rule 28 (command)
    INPUT_READ      reduce using rule 28 (command)
    '{'             reduce using rule 28 (command)
    '}'             reduce using rule 28 (command)
    '+'             reduce using rule 28 (command)
    '-'             reduce using rule 28 (command)
    '%'             reduce using rule 28 (command)
    '?'             reduce using rule 28 (command)
    '!'             reduce using rule 28 (command)


State 250

   36 init_variable: init_stmt . ';'

    ';'  shift, and go to state 313


State 251

   30 command: output .

    NUM_INT         reduce using rule 30 (command)
    NUM_FLOAT       reduce using rule 30 (command)
    NIL_CNST        reduce using rule 30 (command)
    ID              reduce using rule 30 (command)
    RETURN_STM      reduce using rule 30 (command)
    T_INT           reduce using rule 30 (command)
    T_FLOAT         reduce using rule 30 (command)
    IF_STMT         reduce using rule 30 (command)
    ELSE_STMT       reduce using rule 30 (command)
    FOR_STMT        reduce using rule 30 (command)
    OUTPUT_WRITE    reduce using rule 30 (command)
    OUTPUT_WRITELN  reduce using rule 30 (command)
    INPUT_READ      reduce using rule 30 (command)
    '{'             reduce using rule 30 (command)
    '}'             reduce using rule 30 (command)
    '+'             reduce using rule 30 (command)
    '-'             reduce using rule 30 (command)
    '%'             reduce using rule 30 (command)
    '?'             reduce using rule 30 (command)
    '!'             reduce using rule 30 (command)


State 252

   29 command: input .

    NUM_INT         reduce using rule 29 (command)
    NUM_FLOAT       reduce using rule 29 (command)
    NIL_CNST        reduce using rule 29 (command)
    ID              reduce using rule 29 (command)
    RETURN_STM      reduce using rule 29 (command)
    T_INT           reduce using rule 29 (command)
    T_FLOAT         reduce using rule 29 (command)
    IF_STMT         reduce using rule 29 (command)
    ELSE_STMT       reduce using rule 29 (command)
    FOR_STMT        reduce using rule 29 (command)
    OUTPUT_WRITE    reduce using rule 29 (command)
    OUTPUT_WRITELN  reduce using rule 29 (command)
    INPUT_READ      reduce using rule 29 (command)
    '{'             reduce using rule 29 (command)
    '}'             reduce using rule 29 (command)
    '+'             reduce using rule 29 (command)
    '-'             reduce using rule 29 (command)
    '%'             reduce using rule 29 (command)
    '?'             reduce using rule 29 (command)
    '!'             reduce using rule 29 (command)


State 253

   32 command: operation . ';'

    ';'  shift, and go to state 314


State 254

   39 init_stmt: ID . '=' operation

    '='  shift, and go to state 315


State 255

   12 unq_declaration: type $@2 . ID

    ID  shift, and go to state 316


State 256

   12 unq_declaration: type $@2 . ID

    ID  shift, and go to state 317


State 257

   47 func_calling: ID '(' . lst_params ')'

    NUM_INT    shift, and go to state 154
    NUM_FLOAT  shift, and go to state 155
    NIL_CNST   shift, and go to state 156
    ID         shift, and go to state 157
    '+'        shift, and go to state 158
    '-'        shift, and go to state 159
    '%'        shift, and go to state 160
    '?'        shift, and go to state 161
    '!'        shift, and go to state 162

    ')'  reduce using rule 18 (lst_params)

    lst_params          go to state 318
    lst_calling_params  go to state 104
    func_calling        go to state 163
    expression          go to state 164
    const               go to state 165
    number              go to state 166
    operation           go to state 105
    binary_operation    go to state 167
    single_operation    go to state 168
    arith_binary        go to state 169
    arith_single        go to state 170
    lst_single          go to state 171
    lst_binary          go to state 172


State 258

   74 arith_single: '+' expression .

    ')'         reduce using rule 74 (arith_single)
    ','         reduce using rule 74 (arith_single)
    AND         reduce using rule 74 (arith_single)
    OR          reduce using rule 74 (arith_single)
    GREATER     reduce using rule 74 (arith_single)
    GREATER_EQ  reduce using rule 74 (arith_single)
    LESS        reduce using rule 74 (arith_single)
    LESS_EQ     reduce using rule 74 (arith_single)
    EQUAL       reduce using rule 74 (arith_single)
    NOT_EQ      reduce using rule 74 (arith_single)
    '+'         reduce using rule 74 (arith_single)
    '-'         reduce using rule 74 (arith_single)
    '*'         reduce using rule 74 (arith_single)
    '/'         reduce using rule 74 (arith_single)
    FILTER      reduce using rule 74 (arith_single)
    MAP         reduce using rule 74 (arith_single)
    ':'         reduce using rule 74 (arith_single)


State 259

   75 arith_single: '-' expression .

    ')'         reduce using rule 75 (arith_single)
    ','         reduce using rule 75 (arith_single)
    AND         reduce using rule 75 (arith_single)
    OR          reduce using rule 75 (arith_single)
    GREATER     reduce using rule 75 (arith_single)
    GREATER_EQ  reduce using rule 75 (arith_single)
    LESS        reduce using rule 75 (arith_single)
    LESS_EQ     reduce using rule 75 (arith_single)
    EQUAL       reduce using rule 75 (arith_single)
    NOT_EQ      reduce using rule 75 (arith_single)
    '+'         reduce using rule 75 (arith_single)
    '-'         reduce using rule 75 (arith_single)
    '*'         reduce using rule 75 (arith_single)
    '/'         reduce using rule 75 (arith_single)
    FILTER      reduce using rule 75 (arith_single)
    MAP         reduce using rule 75 (arith_single)
    ':'         reduce using rule 75 (arith_single)


State 260

   76 lst_single: '%' expression .

    ')'         reduce using rule 76 (lst_single)
    ','         reduce using rule 76 (lst_single)
    AND         reduce using rule 76 (lst_single)
    OR          reduce using rule 76 (lst_single)
    GREATER     reduce using rule 76 (lst_single)
    GREATER_EQ  reduce using rule 76 (lst_single)
    LESS        reduce using rule 76 (lst_single)
    LESS_EQ     reduce using rule 76 (lst_single)
    EQUAL       reduce using rule 76 (lst_single)
    NOT_EQ      reduce using rule 76 (lst_single)
    '+'         reduce using rule 76 (lst_single)
    '-'         reduce using rule 76 (lst_single)
    '*'         reduce using rule 76 (lst_single)
    '/'         reduce using rule 76 (lst_single)
    FILTER      reduce using rule 76 (lst_single)
    MAP         reduce using rule 76 (lst_single)
    ':'         reduce using rule 76 (lst_single)


State 261

   77 lst_single: '?' expression .

    ')'         reduce using rule 77 (lst_single)
    ','         reduce using rule 77 (lst_single)
    AND         reduce using rule 77 (lst_single)
    OR          reduce using rule 77 (lst_single)
    GREATER     reduce using rule 77 (lst_single)
    GREATER_EQ  reduce using rule 77 (lst_single)
    LESS        reduce using rule 77 (lst_single)
    LESS_EQ     reduce using rule 77 (lst_single)
    EQUAL       reduce using rule 77 (lst_single)
    NOT_EQ      reduce using rule 77 (lst_single)
    '+'         reduce using rule 77 (lst_single)
    '-'         reduce using rule 77 (lst_single)
    '*'         reduce using rule 77 (lst_single)
    '/'         reduce using rule 77 (lst_single)
    FILTER      reduce using rule 77 (lst_single)
    MAP         reduce using rule 77 (lst_single)
    ':'         reduce using rule 77 (lst_single)


State 262

   68 single_operation: '!' expression .

    ')'         reduce using rule 68 (single_operation)
    ','         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)
    '+'         reduce using rule 68 (single_operation)
    '-'         reduce using rule 68 (single_operation)
    '*'         reduce using rule 68 (single_operation)
    '/'         reduce using rule 68 (single_operation)
    FILTER      reduce using rule 68 (single_operation)
    MAP         reduce using rule 68 (single_operation)
    ':'         reduce using rule 68 (single_operation)


State 263

   78 lst_binary: expression FILTER . expression

    NUM_INT    shift, and go to state 319
    NUM_FLOAT  shift, and go to state 320
    NIL_CNST   shift, and go to state 321
    ID         shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 329
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 264

   79 lst_binary: expression MAP . expression

    NUM_INT    shift, and go to state 319
    NUM_FLOAT  shift, and go to state 320
    NIL_CNST   shift, and go to state 321
    ID         shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 335
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 265

   80 lst_binary: expression ':' . expression

    NUM_INT    shift, and go to state 319
    NUM_FLOAT  shift, and go to state 320
    NIL_CNST   shift, and go to state 321
    ID         shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 336
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 266

   65 binary_operation: binary_operation log_operator . expression

    NUM_INT    shift, and go to state 319
    NUM_FLOAT  shift, and go to state 320
    NIL_CNST   shift, and go to state 321
    ID         shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 337
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 267

   64 binary_operation: binary_operation relation_operator . expression

    NUM_INT    shift, and go to state 319
    NUM_FLOAT  shift, and go to state 320
    NIL_CNST   shift, and go to state 321
    ID         shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 338
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 268

   69 arith_binary: arith_binary '+' . expression

    NUM_INT    shift, and go to state 339
    NUM_FLOAT  shift, and go to state 340
    NIL_CNST   shift, and go to state 341
    ID         shift, and go to state 342
    '+'        shift, and go to state 343
    '-'        shift, and go to state 344
    '%'        shift, and go to state 345
    '?'        shift, and go to state 346
    '!'        shift, and go to state 347

    func_calling      go to state 348
    expression        go to state 349
    const             go to state 350
    number            go to state 351
    single_operation  go to state 352
    arith_single      go to state 353
    lst_single        go to state 354


State 269

   70 arith_binary: arith_binary '-' . expression

    NUM_INT    shift, and go to state 339
    NUM_FLOAT  shift, and go to state 340
    NIL_CNST   shift, and go to state 341
    ID         shift, and go to state 342
    '+'        shift, and go to state 343
    '-'        shift, and go to state 344
    '%'        shift, and go to state 345
    '?'        shift, and go to state 346
    '!'        shift, and go to state 347

    func_calling      go to state 348
    expression        go to state 355
    const             go to state 350
    number            go to state 351
    single_operation  go to state 352
    arith_single      go to state 353
    lst_single        go to state 354


State 270

   71 arith_binary: arith_binary '*' . expression

    NUM_INT    shift, and go to state 339
    NUM_FLOAT  shift, and go to state 340
    NIL_CNST   shift, and go to state 341
    ID         shift, and go to state 342
    '+'        shift, and go to state 343
    '-'        shift, and go to state 344
    '%'        shift, and go to state 345
    '?'        shift, and go to state 346
    '!'        shift, and go to state 347

    func_calling      go to state 348
    expression        go to state 356
    const             go to state 350
    number            go to state 351
    single_operation  go to state 352
    arith_single      go to state 353
    lst_single        go to state 354


State 271

   72 arith_binary: arith_binary '/' . expression

    NUM_INT    shift, and go to state 339
    NUM_FLOAT  shift, and go to state 340
    NIL_CNST   shift, and go to state 341
    ID         shift, and go to state 342
    '+'        shift, and go to state 343
    '-'        shift, and go to state 344
    '%'        shift, and go to state 345
    '?'        shift, and go to state 346
    '!'        shift, and go to state 347

    func_calling      go to state 348
    expression        go to state 357
    const             go to state 350
    number            go to state 351
    single_operation  go to state 352
    arith_single      go to state 353
    lst_single        go to state 354


State 272

   47 func_calling: ID '(' . lst_params ')'

    NUM_INT    shift, and go to state 154
    NUM_FLOAT  shift, and go to state 155
    NIL_CNST   shift, and go to state 156
    ID         shift, and go to state 157
    '+'        shift, and go to state 158
    '-'        shift, and go to state 159
    '%'        shift, and go to state 160
    '?'        shift, and go to state 161
    '!'        shift, and go to state 162

    ')'  reduce using rule 18 (lst_params)

    lst_params          go to state 358
    lst_calling_params  go to state 104
    func_calling        go to state 163
    expression          go to state 164
    const               go to state 165
    number              go to state 166
    operation           go to state 105
    binary_operation    go to state 167
    single_operation    go to state 168
    arith_binary        go to state 169
    arith_single        go to state 170
    lst_single          go to state 171
    lst_binary          go to state 172


State 273

   74 arith_single: '+' expression .

    ')'         reduce using rule 74 (arith_single)
    AND         reduce using rule 74 (arith_single)
    OR          reduce using rule 74 (arith_single)
    GREATER     reduce using rule 74 (arith_single)
    GREATER_EQ  reduce using rule 74 (arith_single)
    LESS        reduce using rule 74 (arith_single)
    LESS_EQ     reduce using rule 74 (arith_single)
    EQUAL       reduce using rule 74 (arith_single)
    NOT_EQ      reduce using rule 74 (arith_single)
    '+'         reduce using rule 74 (arith_single)
    '-'         reduce using rule 74 (arith_single)
    '*'         reduce using rule 74 (arith_single)
    '/'         reduce using rule 74 (arith_single)
    FILTER      reduce using rule 74 (arith_single)
    MAP         reduce using rule 74 (arith_single)
    ':'         reduce using rule 74 (arith_single)


State 274

   75 arith_single: '-' expression .

    ')'         reduce using rule 75 (arith_single)
    AND         reduce using rule 75 (arith_single)
    OR          reduce using rule 75 (arith_single)
    GREATER     reduce using rule 75 (arith_single)
    GREATER_EQ  reduce using rule 75 (arith_single)
    LESS        reduce using rule 75 (arith_single)
    LESS_EQ     reduce using rule 75 (arith_single)
    EQUAL       reduce using rule 75 (arith_single)
    NOT_EQ      reduce using rule 75 (arith_single)
    '+'         reduce using rule 75 (arith_single)
    '-'         reduce using rule 75 (arith_single)
    '*'         reduce using rule 75 (arith_single)
    '/'         reduce using rule 75 (arith_single)
    FILTER      reduce using rule 75 (arith_single)
    MAP         reduce using rule 75 (arith_single)
    ':'         reduce using rule 75 (arith_single)


State 275

   76 lst_single: '%' expression .

    ')'         reduce using rule 76 (lst_single)
    AND         reduce using rule 76 (lst_single)
    OR          reduce using rule 76 (lst_single)
    GREATER     reduce using rule 76 (lst_single)
    GREATER_EQ  reduce using rule 76 (lst_single)
    LESS        reduce using rule 76 (lst_single)
    LESS_EQ     reduce using rule 76 (lst_single)
    EQUAL       reduce using rule 76 (lst_single)
    NOT_EQ      reduce using rule 76 (lst_single)
    '+'         reduce using rule 76 (lst_single)
    '-'         reduce using rule 76 (lst_single)
    '*'         reduce using rule 76 (lst_single)
    '/'         reduce using rule 76 (lst_single)
    FILTER      reduce using rule 76 (lst_single)
    MAP         reduce using rule 76 (lst_single)
    ':'         reduce using rule 76 (lst_single)


State 276

   77 lst_single: '?' expression .

    ')'         reduce using rule 77 (lst_single)
    AND         reduce using rule 77 (lst_single)
    OR          reduce using rule 77 (lst_single)
    GREATER     reduce using rule 77 (lst_single)
    GREATER_EQ  reduce using rule 77 (lst_single)
    LESS        reduce using rule 77 (lst_single)
    LESS_EQ     reduce using rule 77 (lst_single)
    EQUAL       reduce using rule 77 (lst_single)
    NOT_EQ      reduce using rule 77 (lst_single)
    '+'         reduce using rule 77 (lst_single)
    '-'         reduce using rule 77 (lst_single)
    '*'         reduce using rule 77 (lst_single)
    '/'         reduce using rule 77 (lst_single)
    FILTER      reduce using rule 77 (lst_single)
    MAP         reduce using rule 77 (lst_single)
    ':'         reduce using rule 77 (lst_single)


State 277

   68 single_operation: '!' expression .

    ')'         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)
    '+'         reduce using rule 68 (single_operation)
    '-'         reduce using rule 68 (single_operation)
    '*'         reduce using rule 68 (single_operation)
    '/'         reduce using rule 68 (single_operation)
    FILTER      reduce using rule 68 (single_operation)
    MAP         reduce using rule 68 (single_operation)
    ':'         reduce using rule 68 (single_operation)


State 278

   78 lst_binary: expression FILTER . expression

    NUM_INT    shift, and go to state 359
    NUM_FLOAT  shift, and go to state 360
    NIL_CNST   shift, and go to state 361
    ID         shift, and go to state 362
    '+'        shift, and go to state 363
    '-'        shift, and go to state 364
    '%'        shift, and go to state 365
    '?'        shift, and go to state 366
    '!'        shift, and go to state 367

    func_calling      go to state 368
    expression        go to state 369
    const             go to state 370
    number            go to state 371
    single_operation  go to state 372
    arith_single      go to state 373
    lst_single        go to state 374


State 279

   79 lst_binary: expression MAP . expression

    NUM_INT    shift, and go to state 359
    NUM_FLOAT  shift, and go to state 360
    NIL_CNST   shift, and go to state 361
    ID         shift, and go to state 362
    '+'        shift, and go to state 363
    '-'        shift, and go to state 364
    '%'        shift, and go to state 365
    '?'        shift, and go to state 366
    '!'        shift, and go to state 367

    func_calling      go to state 368
    expression        go to state 375
    const             go to state 370
    number            go to state 371
    single_operation  go to state 372
    arith_single      go to state 373
    lst_single        go to state 374


State 280

   80 lst_binary: expression ':' . expression

    NUM_INT    shift, and go to state 359
    NUM_FLOAT  shift, and go to state 360
    NIL_CNST   shift, and go to state 361
    ID         shift, and go to state 362
    '+'        shift, and go to state 363
    '-'        shift, and go to state 364
    '%'        shift, and go to state 365
    '?'        shift, and go to state 366
    '!'        shift, and go to state 367

    func_calling      go to state 368
    expression        go to state 376
    const             go to state 370
    number            go to state 371
    single_operation  go to state 372
    arith_single      go to state 373
    lst_single        go to state 374


State 281

   65 binary_operation: binary_operation log_operator . expression

    NUM_INT    shift, and go to state 359
    NUM_FLOAT  shift, and go to state 360
    NIL_CNST   shift, and go to state 361
    ID         shift, and go to state 362
    '+'        shift, and go to state 363
    '-'        shift, and go to state 364
    '%'        shift, and go to state 365
    '?'        shift, and go to state 366
    '!'        shift, and go to state 367

    func_calling      go to state 368
    expression        go to state 377
    const             go to state 370
    number            go to state 371
    single_operation  go to state 372
    arith_single      go to state 373
    lst_single        go to state 374


State 282

   64 binary_operation: binary_operation relation_operator . expression

    NUM_INT    shift, and go to state 359
    NUM_FLOAT  shift, and go to state 360
    NIL_CNST   shift, and go to state 361
    ID         shift, and go to state 362
    '+'        shift, and go to state 363
    '-'        shift, and go to state 364
    '%'        shift, and go to state 365
    '?'        shift, and go to state 366
    '!'        shift, and go to state 367

    func_calling      go to state 368
    expression        go to state 378
    const             go to state 370
    number            go to state 371
    single_operation  go to state 372
    arith_single      go to state 373
    lst_single        go to state 374


State 283

   69 arith_binary: arith_binary '+' . expression

    NUM_INT    shift, and go to state 379
    NUM_FLOAT  shift, and go to state 380
    NIL_CNST   shift, and go to state 381
    ID         shift, and go to state 382
    '+'        shift, and go to state 383
    '-'        shift, and go to state 384
    '%'        shift, and go to state 385
    '?'        shift, and go to state 386
    '!'        shift, and go to state 387

    func_calling      go to state 388
    expression        go to state 389
    const             go to state 390
    number            go to state 391
    single_operation  go to state 392
    arith_single      go to state 393
    lst_single        go to state 394


State 284

   70 arith_binary: arith_binary '-' . expression

    NUM_INT    shift, and go to state 379
    NUM_FLOAT  shift, and go to state 380
    NIL_CNST   shift, and go to state 381
    ID         shift, and go to state 382
    '+'        shift, and go to state 383
    '-'        shift, and go to state 384
    '%'        shift, and go to state 385
    '?'        shift, and go to state 386
    '!'        shift, and go to state 387

    func_calling      go to state 388
    expression        go to state 395
    const             go to state 390
    number            go to state 391
    single_operation  go to state 392
    arith_single      go to state 393
    lst_single        go to state 394


State 285

   71 arith_binary: arith_binary '*' . expression

    NUM_INT    shift, and go to state 379
    NUM_FLOAT  shift, and go to state 380
    NIL_CNST   shift, and go to state 381
    ID         shift, and go to state 382
    '+'        shift, and go to state 383
    '-'        shift, and go to state 384
    '%'        shift, and go to state 385
    '?'        shift, and go to state 386
    '!'        shift, and go to state 387

    func_calling      go to state 388
    expression        go to state 396
    const             go to state 390
    number            go to state 391
    single_operation  go to state 392
    arith_single      go to state 393
    lst_single        go to state 394


State 286

   72 arith_binary: arith_binary '/' . expression

    NUM_INT    shift, and go to state 379
    NUM_FLOAT  shift, and go to state 380
    NIL_CNST   shift, and go to state 381
    ID         shift, and go to state 382
    '+'        shift, and go to state 383
    '-'        shift, and go to state 384
    '%'        shift, and go to state 385
    '?'        shift, and go to state 386
    '!'        shift, and go to state 387

    func_calling      go to state 388
    expression        go to state 397
    const             go to state 390
    number            go to state 391
    single_operation  go to state 392
    arith_single      go to state 393
    lst_single        go to state 394


State 287

   47 func_calling: ID '(' . lst_params ')'

    NUM_INT    shift, and go to state 154
    NUM_FLOAT  shift, and go to state 155
    NIL_CNST   shift, and go to state 156
    ID         shift, and go to state 157
    '+'        shift, and go to state 158
    '-'        shift, and go to state 159
    '%'        shift, and go to state 160
    '?'        shift, and go to state 161
    '!'        shift, and go to state 162

    ')'  reduce using rule 18 (lst_params)

    lst_params          go to state 398
    lst_calling_params  go to state 104
    func_calling        go to state 163
    expression          go to state 164
    const               go to state 165
    number              go to state 166
    operation           go to state 105
    binary_operation    go to state 167
    single_operation    go to state 168
    arith_binary        go to state 169
    arith_single        go to state 170
    lst_single          go to state 171
    lst_binary          go to state 172


State 288

   74 arith_single: '+' expression .

    ')'  reduce using rule 74 (arith_single)


State 289

   75 arith_single: '-' expression .

    ')'  reduce using rule 75 (arith_single)


State 290

   76 lst_single: '%' expression .

    ')'  reduce using rule 76 (lst_single)


State 291

   77 lst_single: '?' expression .

    ')'  reduce using rule 77 (lst_single)


State 292

   68 single_operation: '!' expression .

    ')'  reduce using rule 68 (single_operation)


State 293

   47 func_calling: ID '(' . lst_params ')'

    NUM_INT    shift, and go to state 154
    NUM_FLOAT  shift, and go to state 155
    NIL_CNST   shift, and go to state 156
    ID         shift, and go to state 157
    '+'        shift, and go to state 158
    '-'        shift, and go to state 159
    '%'        shift, and go to state 160
    '?'        shift, and go to state 161
    '!'        shift, and go to state 162

    ')'  reduce using rule 18 (lst_params)

    lst_params          go to state 399
    lst_calling_params  go to state 104
    func_calling        go to state 163
    expression          go to state 164
    const               go to state 165
    number              go to state 166
    operation           go to state 105
    binary_operation    go to state 167
    single_operation    go to state 168
    arith_binary        go to state 169
    arith_single        go to state 170
    lst_single          go to state 171
    lst_binary          go to state 172


State 294

   74 arith_single: '+' expression .

    ';'         reduce using rule 74 (arith_single)
    AND         reduce using rule 74 (arith_single)
    OR          reduce using rule 74 (arith_single)
    GREATER     reduce using rule 74 (arith_single)
    GREATER_EQ  reduce using rule 74 (arith_single)
    LESS        reduce using rule 74 (arith_single)
    LESS_EQ     reduce using rule 74 (arith_single)
    EQUAL       reduce using rule 74 (arith_single)
    NOT_EQ      reduce using rule 74 (arith_single)


State 295

   75 arith_single: '-' expression .

    ';'         reduce using rule 75 (arith_single)
    AND         reduce using rule 75 (arith_single)
    OR          reduce using rule 75 (arith_single)
    GREATER     reduce using rule 75 (arith_single)
    GREATER_EQ  reduce using rule 75 (arith_single)
    LESS        reduce using rule 75 (arith_single)
    LESS_EQ     reduce using rule 75 (arith_single)
    EQUAL       reduce using rule 75 (arith_single)
    NOT_EQ      reduce using rule 75 (arith_single)


State 296

   76 lst_single: '%' expression .

    ';'         reduce using rule 76 (lst_single)
    AND         reduce using rule 76 (lst_single)
    OR          reduce using rule 76 (lst_single)
    GREATER     reduce using rule 76 (lst_single)
    GREATER_EQ  reduce using rule 76 (lst_single)
    LESS        reduce using rule 76 (lst_single)
    LESS_EQ     reduce using rule 76 (lst_single)
    EQUAL       reduce using rule 76 (lst_single)
    NOT_EQ      reduce using rule 76 (lst_single)


State 297

   77 lst_single: '?' expression .

    ';'         reduce using rule 77 (lst_single)
    AND         reduce using rule 77 (lst_single)
    OR          reduce using rule 77 (lst_single)
    GREATER     reduce using rule 77 (lst_single)
    GREATER_EQ  reduce using rule 77 (lst_single)
    LESS        reduce using rule 77 (lst_single)
    LESS_EQ     reduce using rule 77 (lst_single)
    EQUAL       reduce using rule 77 (lst_single)
    NOT_EQ      reduce using rule 77 (lst_single)


State 298

   68 single_operation: '!' expression .

    ';'         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)


State 299

   47 func_calling: ID '(' . lst_params ')'

    NUM_INT    shift, and go to state 154
    NUM_FLOAT  shift, and go to state 155
    NIL_CNST   shift, and go to state 156
    ID         shift, and go to state 157
    '+'        shift, and go to state 158
    '-'        shift, and go to state 159
    '%'        shift, and go to state 160
    '?'        shift, and go to state 161
    '!'        shift, and go to state 162

    ')'  reduce using rule 18 (lst_params)

    lst_params          go to state 400
    lst_calling_params  go to state 104
    func_calling        go to state 163
    expression          go to state 164
    const               go to state 165
    number              go to state 166
    operation           go to state 105
    binary_operation    go to state 167
    single_operation    go to state 168
    arith_binary        go to state 169
    arith_single        go to state 170
    lst_single          go to state 171
    lst_binary          go to state 172


State 300

   74 arith_single: '+' expression .

    ';'         reduce using rule 74 (arith_single)
    AND         reduce using rule 74 (arith_single)
    OR          reduce using rule 74 (arith_single)
    GREATER     reduce using rule 74 (arith_single)
    GREATER_EQ  reduce using rule 74 (arith_single)
    LESS        reduce using rule 74 (arith_single)
    LESS_EQ     reduce using rule 74 (arith_single)
    EQUAL       reduce using rule 74 (arith_single)
    NOT_EQ      reduce using rule 74 (arith_single)
    '+'         reduce using rule 74 (arith_single)
    '-'         reduce using rule 74 (arith_single)
    '*'         reduce using rule 74 (arith_single)
    '/'         reduce using rule 74 (arith_single)


State 301

   75 arith_single: '-' expression .

    ';'         reduce using rule 75 (arith_single)
    AND         reduce using rule 75 (arith_single)
    OR          reduce using rule 75 (arith_single)
    GREATER     reduce using rule 75 (arith_single)
    GREATER_EQ  reduce using rule 75 (arith_single)
    LESS        reduce using rule 75 (arith_single)
    LESS_EQ     reduce using rule 75 (arith_single)
    EQUAL       reduce using rule 75 (arith_single)
    NOT_EQ      reduce using rule 75 (arith_single)
    '+'         reduce using rule 75 (arith_single)
    '-'         reduce using rule 75 (arith_single)
    '*'         reduce using rule 75 (arith_single)
    '/'         reduce using rule 75 (arith_single)


State 302

   76 lst_single: '%' expression .

    ';'         reduce using rule 76 (lst_single)
    AND         reduce using rule 76 (lst_single)
    OR          reduce using rule 76 (lst_single)
    GREATER     reduce using rule 76 (lst_single)
    GREATER_EQ  reduce using rule 76 (lst_single)
    LESS        reduce using rule 76 (lst_single)
    LESS_EQ     reduce using rule 76 (lst_single)
    EQUAL       reduce using rule 76 (lst_single)
    NOT_EQ      reduce using rule 76 (lst_single)
    '+'         reduce using rule 76 (lst_single)
    '-'         reduce using rule 76 (lst_single)
    '*'         reduce using rule 76 (lst_single)
    '/'         reduce using rule 76 (lst_single)


State 303

   77 lst_single: '?' expression .

    ';'         reduce using rule 77 (lst_single)
    AND         reduce using rule 77 (lst_single)
    OR          reduce using rule 77 (lst_single)
    GREATER     reduce using rule 77 (lst_single)
    GREATER_EQ  reduce using rule 77 (lst_single)
    LESS        reduce using rule 77 (lst_single)
    LESS_EQ     reduce using rule 77 (lst_single)
    EQUAL       reduce using rule 77 (lst_single)
    NOT_EQ      reduce using rule 77 (lst_single)
    '+'         reduce using rule 77 (lst_single)
    '-'         reduce using rule 77 (lst_single)
    '*'         reduce using rule 77 (lst_single)
    '/'         reduce using rule 77 (lst_single)


State 304

   68 single_operation: '!' expression .

    ';'         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)
    '+'         reduce using rule 68 (single_operation)
    '-'         reduce using rule 68 (single_operation)
    '*'         reduce using rule 68 (single_operation)
    '/'         reduce using rule 68 (single_operation)


State 305

   35 return_stmt: RETURN_STM operation . ';'

    ';'  shift, and go to state 401


State 306

   33 conditional_stmt: IF_STMT '(' . operation ')' command
   34                 | IF_STMT '(' . operation ')' command ELSE_STMT command

    NUM_INT    shift, and go to state 173
    NUM_FLOAT  shift, and go to state 174
    NIL_CNST   shift, and go to state 175
    ID         shift, and go to state 176
    '+'        shift, and go to state 177
    '-'        shift, and go to state 178
    '%'        shift, and go to state 179
    '?'        shift, and go to state 180
    '!'        shift, and go to state 181

    func_calling      go to state 182
    expression        go to state 183
    const             go to state 184
    number            go to state 185
    operation         go to state 402
    binary_operation  go to state 186
    single_operation  go to state 187
    arith_binary      go to state 188
    arith_single      go to state 189
    lst_single        go to state 190
    lst_binary        go to state 191


State 307

   37 iteration: FOR_STMT '(' . loop_condition ')' command

    ID  shift, and go to state 109

    loop_condition  go to state 403
    init_stmt       go to state 111


State 308

   42 output: OUTPUT_WRITE '(' . operation ')' ';'
   44       | OUTPUT_WRITE '(' . STRING ')' ';'

    NUM_INT    shift, and go to state 173
    NUM_FLOAT  shift, and go to state 174
    STRING     shift, and go to state 404
    NIL_CNST   shift, and go to state 175
    ID         shift, and go to state 176
    '+'        shift, and go to state 177
    '-'        shift, and go to state 178
    '%'        shift, and go to state 179
    '?'        shift, and go to state 180
    '!'        shift, and go to state 181

    func_calling      go to state 182
    expression        go to state 183
    const             go to state 184
    number            go to state 185
    operation         go to state 405
    binary_operation  go to state 186
    single_operation  go to state 187
    arith_binary      go to state 188
    arith_single      go to state 189
    lst_single        go to state 190
    lst_binary        go to state 191


State 309

   43 output: OUTPUT_WRITELN '(' . operation ')' ';'
   45       | OUTPUT_WRITELN '(' . STRING ')' ';'

    NUM_INT    shift, and go to state 173
    NUM_FLOAT  shift, and go to state 174
    STRING     shift, and go to state 406
    NIL_CNST   shift, and go to state 175
    ID         shift, and go to state 176
    '+'        shift, and go to state 177
    '-'        shift, and go to state 178
    '%'        shift, and go to state 179
    '?'        shift, and go to state 180
    '!'        shift, and go to state 181

    func_calling      go to state 182
    expression        go to state 183
    const             go to state 184
    number            go to state 185
    operation         go to state 407
    binary_operation  go to state 186
    single_operation  go to state 187
    arith_binary      go to state 188
    arith_single      go to state 189
    lst_single        go to state 190
    lst_binary        go to state 191


State 310

   46 input: INPUT_READ '(' . expression ')' ';'

    NUM_INT    shift, and go to state 192
    NUM_FLOAT  shift, and go to state 193
    NIL_CNST   shift, and go to state 194
    ID         shift, and go to state 195
    '+'        shift, and go to state 196
    '-'        shift, and go to state 197
    '%'        shift, and go to state 198
    '?'        shift, and go to state 199
    '!'        shift, and go to state 200

    func_calling      go to state 201
    expression        go to state 408
    const             go to state 202
    number            go to state 203
    single_operation  go to state 204
    arith_single      go to state 205
    lst_single        go to state 206


State 311

   31 command: '{' block_commands . '}'

    '}'  shift, and go to state 409


State 312

   10 var_declaration: unq_declaration ';' .

    NUM_INT         reduce using rule 10 (var_declaration)
    NUM_FLOAT       reduce using rule 10 (var_declaration)
    NIL_CNST        reduce using rule 10 (var_declaration)
    ID              reduce using rule 10 (var_declaration)
    RETURN_STM      reduce using rule 10 (var_declaration)
    T_INT           reduce using rule 10 (var_declaration)
    T_FLOAT         reduce using rule 10 (var_declaration)
    IF_STMT         reduce using rule 10 (var_declaration)
    ELSE_STMT       reduce using rule 10 (var_declaration)
    FOR_STMT        reduce using rule 10 (var_declaration)
    OUTPUT_WRITE    reduce using rule 10 (var_declaration)
    OUTPUT_WRITELN  reduce using rule 10 (var_declaration)
    INPUT_READ      reduce using rule 10 (var_declaration)
    '{'             reduce using rule 10 (var_declaration)
    '}'             reduce using rule 10 (var_declaration)
    '+'             reduce using rule 10 (var_declaration)
    '-'             reduce using rule 10 (var_declaration)
    '%'             reduce using rule 10 (var_declaration)
    '?'             reduce using rule 10 (var_declaration)
    '!'             reduce using rule 10 (var_declaration)


State 313

   36 init_variable: init_stmt ';' .

    NUM_INT         reduce using rule 36 (init_variable)
    NUM_FLOAT       reduce using rule 36 (init_variable)
    NIL_CNST        reduce using rule 36 (init_variable)
    ID              reduce using rule 36 (init_variable)
    RETURN_STM      reduce using rule 36 (init_variable)
    T_INT           reduce using rule 36 (init_variable)
    T_FLOAT         reduce using rule 36 (init_variable)
    IF_STMT         reduce using rule 36 (init_variable)
    ELSE_STMT       reduce using rule 36 (init_variable)
    FOR_STMT        reduce using rule 36 (init_variable)
    OUTPUT_WRITE    reduce using rule 36 (init_variable)
    OUTPUT_WRITELN  reduce using rule 36 (init_variable)
    INPUT_READ      reduce using rule 36 (init_variable)
    '{'             reduce using rule 36 (init_variable)
    '}'             reduce using rule 36 (init_variable)
    '+'             reduce using rule 36 (init_variable)
    '-'             reduce using rule 36 (init_variable)
    '%'             reduce using rule 36 (init_variable)
    '?'             reduce using rule 36 (init_variable)
    '!'             reduce using rule 36 (init_variable)


State 314

   32 command: operation ';' .

    NUM_INT         reduce using rule 32 (command)
    NUM_FLOAT       reduce using rule 32 (command)
    NIL_CNST        reduce using rule 32 (command)
    ID              reduce using rule 32 (command)
    RETURN_STM      reduce using rule 32 (command)
    T_INT           reduce using rule 32 (command)
    T_FLOAT         reduce using rule 32 (command)
    IF_STMT         reduce using rule 32 (command)
    ELSE_STMT       reduce using rule 32 (command)
    FOR_STMT        reduce using rule 32 (command)
    OUTPUT_WRITE    reduce using rule 32 (command)
    OUTPUT_WRITELN  reduce using rule 32 (command)
    INPUT_READ      reduce using rule 32 (command)
    '{'             reduce using rule 32 (command)
    '}'             reduce using rule 32 (command)
    '+'             reduce using rule 32 (command)
    '-'             reduce using rule 32 (command)
    '%'             reduce using rule 32 (command)
    '?'             reduce using rule 32 (command)
    '!'             reduce using rule 32 (command)


State 315

   39 init_stmt: ID '=' . operation

    NUM_INT    shift, and go to state 173
    NUM_FLOAT  shift, and go to state 174
    NIL_CNST   shift, and go to state 175
    ID         shift, and go to state 176
    '+'        shift, and go to state 177
    '-'        shift, and go to state 178
    '%'        shift, and go to state 179
    '?'        shift, and go to state 180
    '!'        shift, and go to state 181

    func_calling      go to state 182
    expression        go to state 183
    const             go to state 184
    number            go to state 185
    operation         go to state 410
    binary_operation  go to state 186
    single_operation  go to state 187
    arith_binary      go to state 188
    arith_single      go to state 189
    lst_single        go to state 190
    lst_binary        go to state 191


State 316

   12 unq_declaration: type $@2 ID .

    ')'  reduce using rule 12 (unq_declaration)
    ','  reduce using rule 12 (unq_declaration)


State 317

   12 unq_declaration: type $@2 ID .

    ';'  reduce using rule 12 (unq_declaration)


State 318

   47 func_calling: ID '(' lst_params . ')'

    ')'  shift, and go to state 411


State 319

   54 number: NUM_INT .

    ')'         reduce using rule 54 (number)
    ','         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)


State 320

   55 number: NUM_FLOAT .

    ')'         reduce using rule 55 (number)
    ','         reduce using rule 55 (number)
    AND         reduce using rule 55 (number)
    OR          reduce using rule 55 (number)
    GREATER     reduce using rule 55 (number)
    GREATER_EQ  reduce using rule 55 (number)
    LESS        reduce using rule 55 (number)
    LESS_EQ     reduce using rule 55 (number)
    EQUAL       reduce using rule 55 (number)
    NOT_EQ      reduce using rule 55 (number)


State 321

   53 const: NIL_CNST .

    ')'         reduce using rule 53 (const)
    ','         reduce using rule 53 (const)
    AND         reduce using rule 53 (const)
    OR          reduce using rule 53 (const)
    GREATER     reduce using rule 53 (const)
    GREATER_EQ  reduce using rule 53 (const)
    LESS        reduce using rule 53 (const)
    LESS_EQ     reduce using rule 53 (const)
    EQUAL       reduce using rule 53 (const)
    NOT_EQ      reduce using rule 53 (const)


State 322

   47 func_calling: ID . '(' lst_params ')'
   49 expression: ID .

    '('  shift, and go to state 412

    ')'         reduce using rule 49 (expression)
    ','         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)


State 323

   74 arith_single: '+' . expression

    NUM_INT    shift, and go to state 319
    NUM_FLOAT  shift, and go to state 320
    NIL_CNST   shift, and go to state 321
    ID         shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 413
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 324

   75 arith_single: '-' . expression

    NUM_INT    shift, and go to state 319
    NUM_FLOAT  shift, and go to state 320
    NIL_CNST   shift, and go to state 321
    ID         shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 414
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 325

   76 lst_single: '%' . expression

    NUM_INT    shift, and go to state 319
    NUM_FLOAT  shift, and go to state 320
    NIL_CNST   shift, and go to state 321
    ID         shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 415
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 326

   77 lst_single: '?' . expression

    NUM_INT    shift, and go to state 319
    NUM_FLOAT  shift, and go to state 320
    NIL_CNST   shift, and go to state 321
    ID         shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 416
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 327

   68 single_operation: '!' . expression

    NUM_INT    shift, and go to state 319
    NUM_FLOAT  shift, and go to state 320
    NIL_CNST   shift, and go to state 321
    ID         shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 417
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 328

   48 expression: func_calling .

    ')'         reduce using rule 48 (expression)
    ','         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)


State 329

   78 lst_binary: expression FILTER expression .

    ')'         reduce using rule 78 (lst_binary)
    ','         reduce using rule 78 (lst_binary)
    AND         reduce using rule 78 (lst_binary)
    OR          reduce using rule 78 (lst_binary)
    GREATER     reduce using rule 78 (lst_binary)
    GREATER_EQ  reduce using rule 78 (lst_binary)
    LESS        reduce using rule 78 (lst_binary)
    LESS_EQ     reduce using rule 78 (lst_binary)
    EQUAL       reduce using rule 78 (lst_binary)
    NOT_EQ      reduce using rule 78 (lst_binary)


State 330

   50 expression: const .

    ')'         reduce using rule 50 (expression)
    ','         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)


State 331

   52 const: number .

    ')'         reduce using rule 52 (const)
    ','         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)


State 332

   51 expression: single_operation .

    ')'         reduce using rule 51 (expression)
    ','         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)


State 333

   66 single_operation: arith_single .

    ')'         reduce using rule 66 (single_operation)
    ','         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)


State 334

   67 single_operation: lst_single .

    ')'         reduce using rule 67 (single_operation)
    ','         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)


State 335

   79 lst_binary: expression MAP expression .

    ')'         reduce using rule 79 (lst_binary)
    ','         reduce using rule 79 (lst_binary)
    AND         reduce using rule 79 (lst_binary)
    OR          reduce using rule 79 (lst_binary)
    GREATER     reduce using rule 79 (lst_binary)
    GREATER_EQ  reduce using rule 79 (lst_binary)
    LESS        reduce using rule 79 (lst_binary)
    LESS_EQ     reduce using rule 79 (lst_binary)
    EQUAL       reduce using rule 79 (lst_binary)
    NOT_EQ      reduce using rule 79 (lst_binary)


State 336

   80 lst_binary: expression ':' expression .

    ')'         reduce using rule 80 (lst_binary)
    ','         reduce using rule 80 (lst_binary)
    AND         reduce using rule 80 (lst_binary)
    OR          reduce using rule 80 (lst_binary)
    GREATER     reduce using rule 80 (lst_binary)
    GREATER_EQ  reduce using rule 80 (lst_binary)
    LESS        reduce using rule 80 (lst_binary)
    LESS_EQ     reduce using rule 80 (lst_binary)
    EQUAL       reduce using rule 80 (lst_binary)
    NOT_EQ      reduce using rule 80 (lst_binary)


State 337

   65 binary_operation: binary_operation log_operator expression .

    ')'         reduce using rule 65 (binary_operation)
    ','         reduce using rule 65 (binary_operation)
    AND         reduce using rule 65 (binary_operation)
    OR          reduce using rule 65 (binary_operation)
    GREATER     reduce using rule 65 (binary_operation)
    GREATER_EQ  reduce using rule 65 (binary_operation)
    LESS        reduce using rule 65 (binary_operation)
    LESS_EQ     reduce using rule 65 (binary_operation)
    EQUAL       reduce using rule 65 (binary_operation)
    NOT_EQ      reduce using rule 65 (binary_operation)


State 338

   64 binary_operation: binary_operation relation_operator expression .

    ')'         reduce using rule 64 (binary_operation)
    ','         reduce using rule 64 (binary_operation)
    AND         reduce using rule 64 (binary_operation)
    OR          reduce using rule 64 (binary_operation)
    GREATER     reduce using rule 64 (binary_operation)
    GREATER_EQ  reduce using rule 64 (binary_operation)
    LESS        reduce using rule 64 (binary_operation)
    LESS_EQ     reduce using rule 64 (binary_operation)
    EQUAL       reduce using rule 64 (binary_operation)
    NOT_EQ      reduce using rule 64 (binary_operation)


State 339

   54 number: NUM_INT .

    ')'         reduce using rule 54 (number)
    ','         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)
    '+'         reduce using rule 54 (number)
    '-'         reduce using rule 54 (number)
    '*'         reduce using rule 54 (number)
    '/'         reduce using rule 54 (number)


State 340

   55 number: NUM_FLOAT .

    ')'         reduce using rule 55 (number)
    ','         reduce using rule 55 (number)
    AND         reduce using rule 55 (number)
    OR          reduce using rule 55 (number)
    GREATER     reduce using rule 55 (number)
    GREATER_EQ  reduce using rule 55 (number)
    LESS        reduce using rule 55 (number)
    LESS_EQ     reduce using rule 55 (number)
    EQUAL       reduce using rule 55 (number)
    NOT_EQ      reduce using rule 55 (number)
    '+'         reduce using rule 55 (number)
    '-'         reduce using rule 55 (number)
    '*'         reduce using rule 55 (number)
    '/'         reduce using rule 55 (number)


State 341

   53 const: NIL_CNST .

    ')'         reduce using rule 53 (const)
    ','         reduce using rule 53 (const)
    AND         reduce using rule 53 (const)
    OR          reduce using rule 53 (const)
    GREATER     reduce using rule 53 (const)
    GREATER_EQ  reduce using rule 53 (const)
    LESS        reduce using rule 53 (const)
    LESS_EQ     reduce using rule 53 (const)
    EQUAL       reduce using rule 53 (const)
    NOT_EQ      reduce using rule 53 (const)
    '+'         reduce using rule 53 (const)
    '-'         reduce using rule 53 (const)
    '*'         reduce using rule 53 (const)
    '/'         reduce using rule 53 (const)


State 342

   47 func_calling: ID . '(' lst_params ')'
   49 expression: ID .

    '('  shift, and go to state 418

    ')'         reduce using rule 49 (expression)
    ','         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)
    '+'         reduce using rule 49 (expression)
    '-'         reduce using rule 49 (expression)
    '*'         reduce using rule 49 (expression)
    '/'         reduce using rule 49 (expression)


State 343

   74 arith_single: '+' . expression

    NUM_INT    shift, and go to state 339
    NUM_FLOAT  shift, and go to state 340
    NIL_CNST   shift, and go to state 341
    ID         shift, and go to state 342
    '+'        shift, and go to state 343
    '-'        shift, and go to state 344
    '%'        shift, and go to state 345
    '?'        shift, and go to state 346
    '!'        shift, and go to state 347

    func_calling      go to state 348
    expression        go to state 419
    const             go to state 350
    number            go to state 351
    single_operation  go to state 352
    arith_single      go to state 353
    lst_single        go to state 354


State 344

   75 arith_single: '-' . expression

    NUM_INT    shift, and go to state 339
    NUM_FLOAT  shift, and go to state 340
    NIL_CNST   shift, and go to state 341
    ID         shift, and go to state 342
    '+'        shift, and go to state 343
    '-'        shift, and go to state 344
    '%'        shift, and go to state 345
    '?'        shift, and go to state 346
    '!'        shift, and go to state 347

    func_calling      go to state 348
    expression        go to state 420
    const             go to state 350
    number            go to state 351
    single_operation  go to state 352
    arith_single      go to state 353
    lst_single        go to state 354


State 345

   76 lst_single: '%' . expression

    NUM_INT    shift, and go to state 339
    NUM_FLOAT  shift, and go to state 340
    NIL_CNST   shift, and go to state 341
    ID         shift, and go to state 342
    '+'        shift, and go to state 343
    '-'        shift, and go to state 344
    '%'        shift, and go to state 345
    '?'        shift, and go to state 346
    '!'        shift, and go to state 347

    func_calling      go to state 348
    expression        go to state 421
    const             go to state 350
    number            go to state 351
    single_operation  go to state 352
    arith_single      go to state 353
    lst_single        go to state 354


State 346

   77 lst_single: '?' . expression

    NUM_INT    shift, and go to state 339
    NUM_FLOAT  shift, and go to state 340
    NIL_CNST   shift, and go to state 341
    ID         shift, and go to state 342
    '+'        shift, and go to state 343
    '-'        shift, and go to state 344
    '%'        shift, and go to state 345
    '?'        shift, and go to state 346
    '!'        shift, and go to state 347

    func_calling      go to state 348
    expression        go to state 422
    const             go to state 350
    number            go to state 351
    single_operation  go to state 352
    arith_single      go to state 353
    lst_single        go to state 354


State 347

   68 single_operation: '!' . expression

    NUM_INT    shift, and go to state 339
    NUM_FLOAT  shift, and go to state 340
    NIL_CNST   shift, and go to state 341
    ID         shift, and go to state 342
    '+'        shift, and go to state 343
    '-'        shift, and go to state 344
    '%'        shift, and go to state 345
    '?'        shift, and go to state 346
    '!'        shift, and go to state 347

    func_calling      go to state 348
    expression        go to state 423
    const             go to state 350
    number            go to state 351
    single_operation  go to state 352
    arith_single      go to state 353
    lst_single        go to state 354


State 348

   48 expression: func_calling .

    ')'         reduce using rule 48 (expression)
    ','         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)
    '+'         reduce using rule 48 (expression)
    '-'         reduce using rule 48 (expression)
    '*'         reduce using rule 48 (expression)
    '/'         reduce using rule 48 (expression)


State 349

   69 arith_binary: arith_binary '+' expression .

    ')'         reduce using rule 69 (arith_binary)
    ','         reduce using rule 69 (arith_binary)
    AND         reduce using rule 69 (arith_binary)
    OR          reduce using rule 69 (arith_binary)
    GREATER     reduce using rule 69 (arith_binary)
    GREATER_EQ  reduce using rule 69 (arith_binary)
    LESS        reduce using rule 69 (arith_binary)
    LESS_EQ     reduce using rule 69 (arith_binary)
    EQUAL       reduce using rule 69 (arith_binary)
    NOT_EQ      reduce using rule 69 (arith_binary)
    '+'         reduce using rule 69 (arith_binary)
    '-'         reduce using rule 69 (arith_binary)
    '*'         reduce using rule 69 (arith_binary)
    '/'         reduce using rule 69 (arith_binary)


State 350

   50 expression: const .

    ')'         reduce using rule 50 (expression)
    ','         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)


State 351

   52 const: number .

    ')'         reduce using rule 52 (const)
    ','         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)
    '+'         reduce using rule 52 (const)
    '-'         reduce using rule 52 (const)
    '*'         reduce using rule 52 (const)
    '/'         reduce using rule 52 (const)


State 352

   51 expression: single_operation .

    ')'         reduce using rule 51 (expression)
    ','         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)


State 353

   66 single_operation: arith_single .

    ')'         reduce using rule 66 (single_operation)
    ','         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)
    '+'         reduce using rule 66 (single_operation)
    '-'         reduce using rule 66 (single_operation)
    '*'         reduce using rule 66 (single_operation)
    '/'         reduce using rule 66 (single_operation)


State 354

   67 single_operation: lst_single .

    ')'         reduce using rule 67 (single_operation)
    ','         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)
    '+'         reduce using rule 67 (single_operation)
    '-'         reduce using rule 67 (single_operation)
    '*'         reduce using rule 67 (single_operation)
    '/'         reduce using rule 67 (single_operation)


State 355

   70 arith_binary: arith_binary '-' expression .

    ')'         reduce using rule 70 (arith_binary)
    ','         reduce using rule 70 (arith_binary)
    AND         reduce using rule 70 (arith_binary)
    OR          reduce using rule 70 (arith_binary)
    GREATER     reduce using rule 70 (arith_binary)
    GREATER_EQ  reduce using rule 70 (arith_binary)
    LESS        reduce using rule 70 (arith_binary)
    LESS_EQ     reduce using rule 70 (arith_binary)
    EQUAL       reduce using rule 70 (arith_binary)
    NOT_EQ      reduce using rule 70 (arith_binary)
    '+'         reduce using rule 70 (arith_binary)
    '-'         reduce using rule 70 (arith_binary)
    '*'         reduce using rule 70 (arith_binary)
    '/'         reduce using rule 70 (arith_binary)


State 356

   71 arith_binary: arith_binary '*' expression .

    ')'         reduce using rule 71 (arith_binary)
    ','         reduce using rule 71 (arith_binary)
    AND         reduce using rule 71 (arith_binary)
    OR          reduce using rule 71 (arith_binary)
    GREATER     reduce using rule 71 (arith_binary)
    GREATER_EQ  reduce using rule 71 (arith_binary)
    LESS        reduce using rule 71 (arith_binary)
    LESS_EQ     reduce using rule 71 (arith_binary)
    EQUAL       reduce using rule 71 (arith_binary)
    NOT_EQ      reduce using rule 71 (arith_binary)
    '+'         reduce using rule 71 (arith_binary)
    '-'         reduce using rule 71 (arith_binary)
    '*'         reduce using rule 71 (arith_binary)
    '/'         reduce using rule 71 (arith_binary)


State 357

   72 arith_binary: arith_binary '/' expression .

    ')'         reduce using rule 72 (arith_binary)
    ','         reduce using rule 72 (arith_binary)
    AND         reduce using rule 72 (arith_binary)
    OR          reduce using rule 72 (arith_binary)
    GREATER     reduce using rule 72 (arith_binary)
    GREATER_EQ  reduce using rule 72 (arith_binary)
    LESS        reduce using rule 72 (arith_binary)
    LESS_EQ     reduce using rule 72 (arith_binary)
    EQUAL       reduce using rule 72 (arith_binary)
    NOT_EQ      reduce using rule 72 (arith_binary)
    '+'         reduce using rule 72 (arith_binary)
    '-'         reduce using rule 72 (arith_binary)
    '*'         reduce using rule 72 (arith_binary)
    '/'         reduce using rule 72 (arith_binary)


State 358

   47 func_calling: ID '(' lst_params . ')'

    ')'  shift, and go to state 424


State 359

   54 number: NUM_INT .

    ')'         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)


State 360

   55 number: NUM_FLOAT .

    ')'         reduce using rule 55 (number)
    AND         reduce using rule 55 (number)
    OR          reduce using rule 55 (number)
    GREATER     reduce using rule 55 (number)
    GREATER_EQ  reduce using rule 55 (number)
    LESS        reduce using rule 55 (number)
    LESS_EQ     reduce using rule 55 (number)
    EQUAL       reduce using rule 55 (number)
    NOT_EQ      reduce using rule 55 (number)


State 361

   53 const: NIL_CNST .

    ')'         reduce using rule 53 (const)
    AND         reduce using rule 53 (const)
    OR          reduce using rule 53 (const)
    GREATER     reduce using rule 53 (const)
    GREATER_EQ  reduce using rule 53 (const)
    LESS        reduce using rule 53 (const)
    LESS_EQ     reduce using rule 53 (const)
    EQUAL       reduce using rule 53 (const)
    NOT_EQ      reduce using rule 53 (const)


State 362

   47 func_calling: ID . '(' lst_params ')'
   49 expression: ID .

    '('  shift, and go to state 425

    ')'         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)


State 363

   74 arith_single: '+' . expression

    NUM_INT    shift, and go to state 359
    NUM_FLOAT  shift, and go to state 360
    NIL_CNST   shift, and go to state 361
    ID         shift, and go to state 362
    '+'        shift, and go to state 363
    '-'        shift, and go to state 364
    '%'        shift, and go to state 365
    '?'        shift, and go to state 366
    '!'        shift, and go to state 367

    func_calling      go to state 368
    expression        go to state 426
    const             go to state 370
    number            go to state 371
    single_operation  go to state 372
    arith_single      go to state 373
    lst_single        go to state 374


State 364

   75 arith_single: '-' . expression

    NUM_INT    shift, and go to state 359
    NUM_FLOAT  shift, and go to state 360
    NIL_CNST   shift, and go to state 361
    ID         shift, and go to state 362
    '+'        shift, and go to state 363
    '-'        shift, and go to state 364
    '%'        shift, and go to state 365
    '?'        shift, and go to state 366
    '!'        shift, and go to state 367

    func_calling      go to state 368
    expression        go to state 427
    const             go to state 370
    number            go to state 371
    single_operation  go to state 372
    arith_single      go to state 373
    lst_single        go to state 374


State 365

   76 lst_single: '%' . expression

    NUM_INT    shift, and go to state 359
    NUM_FLOAT  shift, and go to state 360
    NIL_CNST   shift, and go to state 361
    ID         shift, and go to state 362
    '+'        shift, and go to state 363
    '-'        shift, and go to state 364
    '%'        shift, and go to state 365
    '?'        shift, and go to state 366
    '!'        shift, and go to state 367

    func_calling      go to state 368
    expression        go to state 428
    const             go to state 370
    number            go to state 371
    single_operation  go to state 372
    arith_single      go to state 373
    lst_single        go to state 374


State 366

   77 lst_single: '?' . expression

    NUM_INT    shift, and go to state 359
    NUM_FLOAT  shift, and go to state 360
    NIL_CNST   shift, and go to state 361
    ID         shift, and go to state 362
    '+'        shift, and go to state 363
    '-'        shift, and go to state 364
    '%'        shift, and go to state 365
    '?'        shift, and go to state 366
    '!'        shift, and go to state 367

    func_calling      go to state 368
    expression        go to state 429
    const             go to state 370
    number            go to state 371
    single_operation  go to state 372
    arith_single      go to state 373
    lst_single        go to state 374


State 367

   68 single_operation: '!' . expression

    NUM_INT    shift, and go to state 359
    NUM_FLOAT  shift, and go to state 360
    NIL_CNST   shift, and go to state 361
    ID         shift, and go to state 362
    '+'        shift, and go to state 363
    '-'        shift, and go to state 364
    '%'        shift, and go to state 365
    '?'        shift, and go to state 366
    '!'        shift, and go to state 367

    func_calling      go to state 368
    expression        go to state 430
    const             go to state 370
    number            go to state 371
    single_operation  go to state 372
    arith_single      go to state 373
    lst_single        go to state 374


State 368

   48 expression: func_calling .

    ')'         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)


State 369

   78 lst_binary: expression FILTER expression .

    ')'         reduce using rule 78 (lst_binary)
    AND         reduce using rule 78 (lst_binary)
    OR          reduce using rule 78 (lst_binary)
    GREATER     reduce using rule 78 (lst_binary)
    GREATER_EQ  reduce using rule 78 (lst_binary)
    LESS        reduce using rule 78 (lst_binary)
    LESS_EQ     reduce using rule 78 (lst_binary)
    EQUAL       reduce using rule 78 (lst_binary)
    NOT_EQ      reduce using rule 78 (lst_binary)


State 370

   50 expression: const .

    ')'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)


State 371

   52 const: number .

    ')'         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)


State 372

   51 expression: single_operation .

    ')'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)


State 373

   66 single_operation: arith_single .

    ')'         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)


State 374

   67 single_operation: lst_single .

    ')'         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)


State 375

   79 lst_binary: expression MAP expression .

    ')'         reduce using rule 79 (lst_binary)
    AND         reduce using rule 79 (lst_binary)
    OR          reduce using rule 79 (lst_binary)
    GREATER     reduce using rule 79 (lst_binary)
    GREATER_EQ  reduce using rule 79 (lst_binary)
    LESS        reduce using rule 79 (lst_binary)
    LESS_EQ     reduce using rule 79 (lst_binary)
    EQUAL       reduce using rule 79 (lst_binary)
    NOT_EQ      reduce using rule 79 (lst_binary)


State 376

   80 lst_binary: expression ':' expression .

    ')'         reduce using rule 80 (lst_binary)
    AND         reduce using rule 80 (lst_binary)
    OR          reduce using rule 80 (lst_binary)
    GREATER     reduce using rule 80 (lst_binary)
    GREATER_EQ  reduce using rule 80 (lst_binary)
    LESS        reduce using rule 80 (lst_binary)
    LESS_EQ     reduce using rule 80 (lst_binary)
    EQUAL       reduce using rule 80 (lst_binary)
    NOT_EQ      reduce using rule 80 (lst_binary)


State 377

   65 binary_operation: binary_operation log_operator expression .

    ')'         reduce using rule 65 (binary_operation)
    AND         reduce using rule 65 (binary_operation)
    OR          reduce using rule 65 (binary_operation)
    GREATER     reduce using rule 65 (binary_operation)
    GREATER_EQ  reduce using rule 65 (binary_operation)
    LESS        reduce using rule 65 (binary_operation)
    LESS_EQ     reduce using rule 65 (binary_operation)
    EQUAL       reduce using rule 65 (binary_operation)
    NOT_EQ      reduce using rule 65 (binary_operation)


State 378

   64 binary_operation: binary_operation relation_operator expression .

    ')'         reduce using rule 64 (binary_operation)
    AND         reduce using rule 64 (binary_operation)
    OR          reduce using rule 64 (binary_operation)
    GREATER     reduce using rule 64 (binary_operation)
    GREATER_EQ  reduce using rule 64 (binary_operation)
    LESS        reduce using rule 64 (binary_operation)
    LESS_EQ     reduce using rule 64 (binary_operation)
    EQUAL       reduce using rule 64 (binary_operation)
    NOT_EQ      reduce using rule 64 (binary_operation)


State 379

   54 number: NUM_INT .

    ')'         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)
    '+'         reduce using rule 54 (number)
    '-'         reduce using rule 54 (number)
    '*'         reduce using rule 54 (number)
    '/'         reduce using rule 54 (number)


State 380

   55 number: NUM_FLOAT .

    ')'         reduce using rule 55 (number)
    AND         reduce using rule 55 (number)
    OR          reduce using rule 55 (number)
    GREATER     reduce using rule 55 (number)
    GREATER_EQ  reduce using rule 55 (number)
    LESS        reduce using rule 55 (number)
    LESS_EQ     reduce using rule 55 (number)
    EQUAL       reduce using rule 55 (number)
    NOT_EQ      reduce using rule 55 (number)
    '+'         reduce using rule 55 (number)
    '-'         reduce using rule 55 (number)
    '*'         reduce using rule 55 (number)
    '/'         reduce using rule 55 (number)


State 381

   53 const: NIL_CNST .

    ')'         reduce using rule 53 (const)
    AND         reduce using rule 53 (const)
    OR          reduce using rule 53 (const)
    GREATER     reduce using rule 53 (const)
    GREATER_EQ  reduce using rule 53 (const)
    LESS        reduce using rule 53 (const)
    LESS_EQ     reduce using rule 53 (const)
    EQUAL       reduce using rule 53 (const)
    NOT_EQ      reduce using rule 53 (const)
    '+'         reduce using rule 53 (const)
    '-'         reduce using rule 53 (const)
    '*'         reduce using rule 53 (const)
    '/'         reduce using rule 53 (const)


State 382

   47 func_calling: ID . '(' lst_params ')'
   49 expression: ID .

    '('  shift, and go to state 431

    ')'         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)
    '+'         reduce using rule 49 (expression)
    '-'         reduce using rule 49 (expression)
    '*'         reduce using rule 49 (expression)
    '/'         reduce using rule 49 (expression)


State 383

   74 arith_single: '+' . expression

    NUM_INT    shift, and go to state 379
    NUM_FLOAT  shift, and go to state 380
    NIL_CNST   shift, and go to state 381
    ID         shift, and go to state 382
    '+'        shift, and go to state 383
    '-'        shift, and go to state 384
    '%'        shift, and go to state 385
    '?'        shift, and go to state 386
    '!'        shift, and go to state 387

    func_calling      go to state 388
    expression        go to state 432
    const             go to state 390
    number            go to state 391
    single_operation  go to state 392
    arith_single      go to state 393
    lst_single        go to state 394


State 384

   75 arith_single: '-' . expression

    NUM_INT    shift, and go to state 379
    NUM_FLOAT  shift, and go to state 380
    NIL_CNST   shift, and go to state 381
    ID         shift, and go to state 382
    '+'        shift, and go to state 383
    '-'        shift, and go to state 384
    '%'        shift, and go to state 385
    '?'        shift, and go to state 386
    '!'        shift, and go to state 387

    func_calling      go to state 388
    expression        go to state 433
    const             go to state 390
    number            go to state 391
    single_operation  go to state 392
    arith_single      go to state 393
    lst_single        go to state 394


State 385

   76 lst_single: '%' . expression

    NUM_INT    shift, and go to state 379
    NUM_FLOAT  shift, and go to state 380
    NIL_CNST   shift, and go to state 381
    ID         shift, and go to state 382
    '+'        shift, and go to state 383
    '-'        shift, and go to state 384
    '%'        shift, and go to state 385
    '?'        shift, and go to state 386
    '!'        shift, and go to state 387

    func_calling      go to state 388
    expression        go to state 434
    const             go to state 390
    number            go to state 391
    single_operation  go to state 392
    arith_single      go to state 393
    lst_single        go to state 394


State 386

   77 lst_single: '?' . expression

    NUM_INT    shift, and go to state 379
    NUM_FLOAT  shift, and go to state 380
    NIL_CNST   shift, and go to state 381
    ID         shift, and go to state 382
    '+'        shift, and go to state 383
    '-'        shift, and go to state 384
    '%'        shift, and go to state 385
    '?'        shift, and go to state 386
    '!'        shift, and go to state 387

    func_calling      go to state 388
    expression        go to state 435
    const             go to state 390
    number            go to state 391
    single_operation  go to state 392
    arith_single      go to state 393
    lst_single        go to state 394


State 387

   68 single_operation: '!' . expression

    NUM_INT    shift, and go to state 379
    NUM_FLOAT  shift, and go to state 380
    NIL_CNST   shift, and go to state 381
    ID         shift, and go to state 382
    '+'        shift, and go to state 383
    '-'        shift, and go to state 384
    '%'        shift, and go to state 385
    '?'        shift, and go to state 386
    '!'        shift, and go to state 387

    func_calling      go to state 388
    expression        go to state 436
    const             go to state 390
    number            go to state 391
    single_operation  go to state 392
    arith_single      go to state 393
    lst_single        go to state 394


State 388

   48 expression: func_calling .

    ')'         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)
    '+'         reduce using rule 48 (expression)
    '-'         reduce using rule 48 (expression)
    '*'         reduce using rule 48 (expression)
    '/'         reduce using rule 48 (expression)


State 389

   69 arith_binary: arith_binary '+' expression .

    ')'         reduce using rule 69 (arith_binary)
    AND         reduce using rule 69 (arith_binary)
    OR          reduce using rule 69 (arith_binary)
    GREATER     reduce using rule 69 (arith_binary)
    GREATER_EQ  reduce using rule 69 (arith_binary)
    LESS        reduce using rule 69 (arith_binary)
    LESS_EQ     reduce using rule 69 (arith_binary)
    EQUAL       reduce using rule 69 (arith_binary)
    NOT_EQ      reduce using rule 69 (arith_binary)
    '+'         reduce using rule 69 (arith_binary)
    '-'         reduce using rule 69 (arith_binary)
    '*'         reduce using rule 69 (arith_binary)
    '/'         reduce using rule 69 (arith_binary)


State 390

   50 expression: const .

    ')'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)


State 391

   52 const: number .

    ')'         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)
    '+'         reduce using rule 52 (const)
    '-'         reduce using rule 52 (const)
    '*'         reduce using rule 52 (const)
    '/'         reduce using rule 52 (const)


State 392

   51 expression: single_operation .

    ')'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)


State 393

   66 single_operation: arith_single .

    ')'         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)
    '+'         reduce using rule 66 (single_operation)
    '-'         reduce using rule 66 (single_operation)
    '*'         reduce using rule 66 (single_operation)
    '/'         reduce using rule 66 (single_operation)


State 394

   67 single_operation: lst_single .

    ')'         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)
    '+'         reduce using rule 67 (single_operation)
    '-'         reduce using rule 67 (single_operation)
    '*'         reduce using rule 67 (single_operation)
    '/'         reduce using rule 67 (single_operation)


State 395

   70 arith_binary: arith_binary '-' expression .

    ')'         reduce using rule 70 (arith_binary)
    AND         reduce using rule 70 (arith_binary)
    OR          reduce using rule 70 (arith_binary)
    GREATER     reduce using rule 70 (arith_binary)
    GREATER_EQ  reduce using rule 70 (arith_binary)
    LESS        reduce using rule 70 (arith_binary)
    LESS_EQ     reduce using rule 70 (arith_binary)
    EQUAL       reduce using rule 70 (arith_binary)
    NOT_EQ      reduce using rule 70 (arith_binary)
    '+'         reduce using rule 70 (arith_binary)
    '-'         reduce using rule 70 (arith_binary)
    '*'         reduce using rule 70 (arith_binary)
    '/'         reduce using rule 70 (arith_binary)


State 396

   71 arith_binary: arith_binary '*' expression .

    ')'         reduce using rule 71 (arith_binary)
    AND         reduce using rule 71 (arith_binary)
    OR          reduce using rule 71 (arith_binary)
    GREATER     reduce using rule 71 (arith_binary)
    GREATER_EQ  reduce using rule 71 (arith_binary)
    LESS        reduce using rule 71 (arith_binary)
    LESS_EQ     reduce using rule 71 (arith_binary)
    EQUAL       reduce using rule 71 (arith_binary)
    NOT_EQ      reduce using rule 71 (arith_binary)
    '+'         reduce using rule 71 (arith_binary)
    '-'         reduce using rule 71 (arith_binary)
    '*'         reduce using rule 71 (arith_binary)
    '/'         reduce using rule 71 (arith_binary)


State 397

   72 arith_binary: arith_binary '/' expression .

    ')'         reduce using rule 72 (arith_binary)
    AND         reduce using rule 72 (arith_binary)
    OR          reduce using rule 72 (arith_binary)
    GREATER     reduce using rule 72 (arith_binary)
    GREATER_EQ  reduce using rule 72 (arith_binary)
    LESS        reduce using rule 72 (arith_binary)
    LESS_EQ     reduce using rule 72 (arith_binary)
    EQUAL       reduce using rule 72 (arith_binary)
    NOT_EQ      reduce using rule 72 (arith_binary)
    '+'         reduce using rule 72 (arith_binary)
    '-'         reduce using rule 72 (arith_binary)
    '*'         reduce using rule 72 (arith_binary)
    '/'         reduce using rule 72 (arith_binary)


State 398

   47 func_calling: ID '(' lst_params . ')'

    ')'  shift, and go to state 437


State 399

   47 func_calling: ID '(' lst_params . ')'

    ')'  shift, and go to state 438


State 400

   47 func_calling: ID '(' lst_params . ')'

    ')'  shift, and go to state 439


State 401

   35 return_stmt: RETURN_STM operation ';' .

    NUM_INT         reduce using rule 35 (return_stmt)
    NUM_FLOAT       reduce using rule 35 (return_stmt)
    NIL_CNST        reduce using rule 35 (return_stmt)
    ID              reduce using rule 35 (return_stmt)
    RETURN_STM      reduce using rule 35 (return_stmt)
    T_INT           reduce using rule 35 (return_stmt)
    T_FLOAT         reduce using rule 35 (return_stmt)
    IF_STMT         reduce using rule 35 (return_stmt)
    ELSE_STMT       reduce using rule 35 (return_stmt)
    FOR_STMT        reduce using rule 35 (return_stmt)
    OUTPUT_WRITE    reduce using rule 35 (return_stmt)
    OUTPUT_WRITELN  reduce using rule 35 (return_stmt)
    INPUT_READ      reduce using rule 35 (return_stmt)
    '{'             reduce using rule 35 (return_stmt)
    '}'             reduce using rule 35 (return_stmt)
    '+'             reduce using rule 35 (return_stmt)
    '-'             reduce using rule 35 (return_stmt)
    '%'             reduce using rule 35 (return_stmt)
    '?'             reduce using rule 35 (return_stmt)
    '!'             reduce using rule 35 (return_stmt)


State 402

   33 conditional_stmt: IF_STMT '(' operation . ')' command
   34                 | IF_STMT '(' operation . ')' command ELSE_STMT command

    ')'  shift, and go to state 440


State 403

   37 iteration: FOR_STMT '(' loop_condition . ')' command

    ')'  shift, and go to state 441


State 404

   44 output: OUTPUT_WRITE '(' STRING . ')' ';'

    ')'  shift, and go to state 442


State 405

   42 output: OUTPUT_WRITE '(' operation . ')' ';'

    ')'  shift, and go to state 443


State 406

   45 output: OUTPUT_WRITELN '(' STRING . ')' ';'

    ')'  shift, and go to state 444


State 407

   43 output: OUTPUT_WRITELN '(' operation . ')' ';'

    ')'  shift, and go to state 445


State 408

   46 input: INPUT_READ '(' expression . ')' ';'

    ')'  shift, and go to state 446


State 409

   31 command: '{' block_commands '}' .

    NUM_INT         reduce using rule 31 (command)
    NUM_FLOAT       reduce using rule 31 (command)
    NIL_CNST        reduce using rule 31 (command)
    ID              reduce using rule 31 (command)
    RETURN_STM      reduce using rule 31 (command)
    T_INT           reduce using rule 31 (command)
    T_FLOAT         reduce using rule 31 (command)
    IF_STMT         reduce using rule 31 (command)
    ELSE_STMT       reduce using rule 31 (command)
    FOR_STMT        reduce using rule 31 (command)
    OUTPUT_WRITE    reduce using rule 31 (command)
    OUTPUT_WRITELN  reduce using rule 31 (command)
    INPUT_READ      reduce using rule 31 (command)
    '{'             reduce using rule 31 (command)
    '}'             reduce using rule 31 (command)
    '+'             reduce using rule 31 (command)
    '-'             reduce using rule 31 (command)
    '%'             reduce using rule 31 (command)
    '?'             reduce using rule 31 (command)
    '!'             reduce using rule 31 (command)


State 410

   39 init_stmt: ID '=' operation .

    ')'  reduce using rule 39 (init_stmt)


State 411

   47 func_calling: ID '(' lst_params ')' .

    ')'         reduce using rule 47 (func_calling)
    ','         reduce using rule 47 (func_calling)
    AND         reduce using rule 47 (func_calling)
    OR          reduce using rule 47 (func_calling)
    GREATER     reduce using rule 47 (func_calling)
    GREATER_EQ  reduce using rule 47 (func_calling)
    LESS        reduce using rule 47 (func_calling)
    LESS_EQ     reduce using rule 47 (func_calling)
    EQUAL       reduce using rule 47 (func_calling)
    NOT_EQ      reduce using rule 47 (func_calling)
    '+'         reduce using rule 47 (func_calling)
    '-'         reduce using rule 47 (func_calling)
    '*'         reduce using rule 47 (func_calling)
    '/'         reduce using rule 47 (func_calling)
    FILTER      reduce using rule 47 (func_calling)
    MAP         reduce using rule 47 (func_calling)
    ':'         reduce using rule 47 (func_calling)


State 412

   47 func_calling: ID '(' . lst_params ')'

    NUM_INT    shift, and go to state 154
    NUM_FLOAT  shift, and go to state 155
    NIL_CNST   shift, and go to state 156
    ID         shift, and go to state 157
    '+'        shift, and go to state 158
    '-'        shift, and go to state 159
    '%'        shift, and go to state 160
    '?'        shift, and go to state 161
    '!'        shift, and go to state 162

    ')'  reduce using rule 18 (lst_params)

    lst_params          go to state 447
    lst_calling_params  go to state 104
    func_calling        go to state 163
    expression          go to state 164
    const               go to state 165
    number              go to state 166
    operation           go to state 105
    binary_operation    go to state 167
    single_operation    go to state 168
    arith_binary        go to state 169
    arith_single        go to state 170
    lst_single          go to state 171
    lst_binary          go to state 172


State 413

   74 arith_single: '+' expression .

    ')'         reduce using rule 74 (arith_single)
    ','         reduce using rule 74 (arith_single)
    AND         reduce using rule 74 (arith_single)
    OR          reduce using rule 74 (arith_single)
    GREATER     reduce using rule 74 (arith_single)
    GREATER_EQ  reduce using rule 74 (arith_single)
    LESS        reduce using rule 74 (arith_single)
    LESS_EQ     reduce using rule 74 (arith_single)
    EQUAL       reduce using rule 74 (arith_single)
    NOT_EQ      reduce using rule 74 (arith_single)


State 414

   75 arith_single: '-' expression .

    ')'         reduce using rule 75 (arith_single)
    ','         reduce using rule 75 (arith_single)
    AND         reduce using rule 75 (arith_single)
    OR          reduce using rule 75 (arith_single)
    GREATER     reduce using rule 75 (arith_single)
    GREATER_EQ  reduce using rule 75 (arith_single)
    LESS        reduce using rule 75 (arith_single)
    LESS_EQ     reduce using rule 75 (arith_single)
    EQUAL       reduce using rule 75 (arith_single)
    NOT_EQ      reduce using rule 75 (arith_single)


State 415

   76 lst_single: '%' expression .

    ')'         reduce using rule 76 (lst_single)
    ','         reduce using rule 76 (lst_single)
    AND         reduce using rule 76 (lst_single)
    OR          reduce using rule 76 (lst_single)
    GREATER     reduce using rule 76 (lst_single)
    GREATER_EQ  reduce using rule 76 (lst_single)
    LESS        reduce using rule 76 (lst_single)
    LESS_EQ     reduce using rule 76 (lst_single)
    EQUAL       reduce using rule 76 (lst_single)
    NOT_EQ      reduce using rule 76 (lst_single)


State 416

   77 lst_single: '?' expression .

    ')'         reduce using rule 77 (lst_single)
    ','         reduce using rule 77 (lst_single)
    AND         reduce using rule 77 (lst_single)
    OR          reduce using rule 77 (lst_single)
    GREATER     reduce using rule 77 (lst_single)
    GREATER_EQ  reduce using rule 77 (lst_single)
    LESS        reduce using rule 77 (lst_single)
    LESS_EQ     reduce using rule 77 (lst_single)
    EQUAL       reduce using rule 77 (lst_single)
    NOT_EQ      reduce using rule 77 (lst_single)


State 417

   68 single_operation: '!' expression .

    ')'         reduce using rule 68 (single_operation)
    ','         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)


State 418

   47 func_calling: ID '(' . lst_params ')'

    NUM_INT    shift, and go to state 154
    NUM_FLOAT  shift, and go to state 155
    NIL_CNST   shift, and go to state 156
    ID         shift, and go to state 157
    '+'        shift, and go to state 158
    '-'        shift, and go to state 159
    '%'        shift, and go to state 160
    '?'        shift, and go to state 161
    '!'        shift, and go to state 162

    ')'  reduce using rule 18 (lst_params)

    lst_params          go to state 448
    lst_calling_params  go to state 104
    func_calling        go to state 163
    expression          go to state 164
    const               go to state 165
    number              go to state 166
    operation           go to state 105
    binary_operation    go to state 167
    single_operation    go to state 168
    arith_binary        go to state 169
    arith_single        go to state 170
    lst_single          go to state 171
    lst_binary          go to state 172


State 419

   74 arith_single: '+' expression .

    ')'         reduce using rule 74 (arith_single)
    ','         reduce using rule 74 (arith_single)
    AND         reduce using rule 74 (arith_single)
    OR          reduce using rule 74 (arith_single)
    GREATER     reduce using rule 74 (arith_single)
    GREATER_EQ  reduce using rule 74 (arith_single)
    LESS        reduce using rule 74 (arith_single)
    LESS_EQ     reduce using rule 74 (arith_single)
    EQUAL       reduce using rule 74 (arith_single)
    NOT_EQ      reduce using rule 74 (arith_single)
    '+'         reduce using rule 74 (arith_single)
    '-'         reduce using rule 74 (arith_single)
    '*'         reduce using rule 74 (arith_single)
    '/'         reduce using rule 74 (arith_single)


State 420

   75 arith_single: '-' expression .

    ')'         reduce using rule 75 (arith_single)
    ','         reduce using rule 75 (arith_single)
    AND         reduce using rule 75 (arith_single)
    OR          reduce using rule 75 (arith_single)
    GREATER     reduce using rule 75 (arith_single)
    GREATER_EQ  reduce using rule 75 (arith_single)
    LESS        reduce using rule 75 (arith_single)
    LESS_EQ     reduce using rule 75 (arith_single)
    EQUAL       reduce using rule 75 (arith_single)
    NOT_EQ      reduce using rule 75 (arith_single)
    '+'         reduce using rule 75 (arith_single)
    '-'         reduce using rule 75 (arith_single)
    '*'         reduce using rule 75 (arith_single)
    '/'         reduce using rule 75 (arith_single)


State 421

   76 lst_single: '%' expression .

    ')'         reduce using rule 76 (lst_single)
    ','         reduce using rule 76 (lst_single)
    AND         reduce using rule 76 (lst_single)
    OR          reduce using rule 76 (lst_single)
    GREATER     reduce using rule 76 (lst_single)
    GREATER_EQ  reduce using rule 76 (lst_single)
    LESS        reduce using rule 76 (lst_single)
    LESS_EQ     reduce using rule 76 (lst_single)
    EQUAL       reduce using rule 76 (lst_single)
    NOT_EQ      reduce using rule 76 (lst_single)
    '+'         reduce using rule 76 (lst_single)
    '-'         reduce using rule 76 (lst_single)
    '*'         reduce using rule 76 (lst_single)
    '/'         reduce using rule 76 (lst_single)


State 422

   77 lst_single: '?' expression .

    ')'         reduce using rule 77 (lst_single)
    ','         reduce using rule 77 (lst_single)
    AND         reduce using rule 77 (lst_single)
    OR          reduce using rule 77 (lst_single)
    GREATER     reduce using rule 77 (lst_single)
    GREATER_EQ  reduce using rule 77 (lst_single)
    LESS        reduce using rule 77 (lst_single)
    LESS_EQ     reduce using rule 77 (lst_single)
    EQUAL       reduce using rule 77 (lst_single)
    NOT_EQ      reduce using rule 77 (lst_single)
    '+'         reduce using rule 77 (lst_single)
    '-'         reduce using rule 77 (lst_single)
    '*'         reduce using rule 77 (lst_single)
    '/'         reduce using rule 77 (lst_single)


State 423

   68 single_operation: '!' expression .

    ')'         reduce using rule 68 (single_operation)
    ','         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)
    '+'         reduce using rule 68 (single_operation)
    '-'         reduce using rule 68 (single_operation)
    '*'         reduce using rule 68 (single_operation)
    '/'         reduce using rule 68 (single_operation)


State 424

   47 func_calling: ID '(' lst_params ')' .

    ')'         reduce using rule 47 (func_calling)
    AND         reduce using rule 47 (func_calling)
    OR          reduce using rule 47 (func_calling)
    GREATER     reduce using rule 47 (func_calling)
    GREATER_EQ  reduce using rule 47 (func_calling)
    LESS        reduce using rule 47 (func_calling)
    LESS_EQ     reduce using rule 47 (func_calling)
    EQUAL       reduce using rule 47 (func_calling)
    NOT_EQ      reduce using rule 47 (func_calling)
    '+'         reduce using rule 47 (func_calling)
    '-'         reduce using rule 47 (func_calling)
    '*'         reduce using rule 47 (func_calling)
    '/'         reduce using rule 47 (func_calling)
    FILTER      reduce using rule 47 (func_calling)
    MAP         reduce using rule 47 (func_calling)
    ':'         reduce using rule 47 (func_calling)


State 425

   47 func_calling: ID '(' . lst_params ')'

    NUM_INT    shift, and go to state 154
    NUM_FLOAT  shift, and go to state 155
    NIL_CNST   shift, and go to state 156
    ID         shift, and go to state 157
    '+'        shift, and go to state 158
    '-'        shift, and go to state 159
    '%'        shift, and go to state 160
    '?'        shift, and go to state 161
    '!'        shift, and go to state 162

    ')'  reduce using rule 18 (lst_params)

    lst_params          go to state 449
    lst_calling_params  go to state 104
    func_calling        go to state 163
    expression          go to state 164
    const               go to state 165
    number              go to state 166
    operation           go to state 105
    binary_operation    go to state 167
    single_operation    go to state 168
    arith_binary        go to state 169
    arith_single        go to state 170
    lst_single          go to state 171
    lst_binary          go to state 172


State 426

   74 arith_single: '+' expression .

    ')'         reduce using rule 74 (arith_single)
    AND         reduce using rule 74 (arith_single)
    OR          reduce using rule 74 (arith_single)
    GREATER     reduce using rule 74 (arith_single)
    GREATER_EQ  reduce using rule 74 (arith_single)
    LESS        reduce using rule 74 (arith_single)
    LESS_EQ     reduce using rule 74 (arith_single)
    EQUAL       reduce using rule 74 (arith_single)
    NOT_EQ      reduce using rule 74 (arith_single)


State 427

   75 arith_single: '-' expression .

    ')'         reduce using rule 75 (arith_single)
    AND         reduce using rule 75 (arith_single)
    OR          reduce using rule 75 (arith_single)
    GREATER     reduce using rule 75 (arith_single)
    GREATER_EQ  reduce using rule 75 (arith_single)
    LESS        reduce using rule 75 (arith_single)
    LESS_EQ     reduce using rule 75 (arith_single)
    EQUAL       reduce using rule 75 (arith_single)
    NOT_EQ      reduce using rule 75 (arith_single)


State 428

   76 lst_single: '%' expression .

    ')'         reduce using rule 76 (lst_single)
    AND         reduce using rule 76 (lst_single)
    OR          reduce using rule 76 (lst_single)
    GREATER     reduce using rule 76 (lst_single)
    GREATER_EQ  reduce using rule 76 (lst_single)
    LESS        reduce using rule 76 (lst_single)
    LESS_EQ     reduce using rule 76 (lst_single)
    EQUAL       reduce using rule 76 (lst_single)
    NOT_EQ      reduce using rule 76 (lst_single)


State 429

   77 lst_single: '?' expression .

    ')'         reduce using rule 77 (lst_single)
    AND         reduce using rule 77 (lst_single)
    OR          reduce using rule 77 (lst_single)
    GREATER     reduce using rule 77 (lst_single)
    GREATER_EQ  reduce using rule 77 (lst_single)
    LESS        reduce using rule 77 (lst_single)
    LESS_EQ     reduce using rule 77 (lst_single)
    EQUAL       reduce using rule 77 (lst_single)
    NOT_EQ      reduce using rule 77 (lst_single)


State 430

   68 single_operation: '!' expression .

    ')'         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)


State 431

   47 func_calling: ID '(' . lst_params ')'

    NUM_INT    shift, and go to state 154
    NUM_FLOAT  shift, and go to state 155
    NIL_CNST   shift, and go to state 156
    ID         shift, and go to state 157
    '+'        shift, and go to state 158
    '-'        shift, and go to state 159
    '%'        shift, and go to state 160
    '?'        shift, and go to state 161
    '!'        shift, and go to state 162

    ')'  reduce using rule 18 (lst_params)

    lst_params          go to state 450
    lst_calling_params  go to state 104
    func_calling        go to state 163
    expression          go to state 164
    const               go to state 165
    number              go to state 166
    operation           go to state 105
    binary_operation    go to state 167
    single_operation    go to state 168
    arith_binary        go to state 169
    arith_single        go to state 170
    lst_single          go to state 171
    lst_binary          go to state 172


State 432

   74 arith_single: '+' expression .

    ')'         reduce using rule 74 (arith_single)
    AND         reduce using rule 74 (arith_single)
    OR          reduce using rule 74 (arith_single)
    GREATER     reduce using rule 74 (arith_single)
    GREATER_EQ  reduce using rule 74 (arith_single)
    LESS        reduce using rule 74 (arith_single)
    LESS_EQ     reduce using rule 74 (arith_single)
    EQUAL       reduce using rule 74 (arith_single)
    NOT_EQ      reduce using rule 74 (arith_single)
    '+'         reduce using rule 74 (arith_single)
    '-'         reduce using rule 74 (arith_single)
    '*'         reduce using rule 74 (arith_single)
    '/'         reduce using rule 74 (arith_single)


State 433

   75 arith_single: '-' expression .

    ')'         reduce using rule 75 (arith_single)
    AND         reduce using rule 75 (arith_single)
    OR          reduce using rule 75 (arith_single)
    GREATER     reduce using rule 75 (arith_single)
    GREATER_EQ  reduce using rule 75 (arith_single)
    LESS        reduce using rule 75 (arith_single)
    LESS_EQ     reduce using rule 75 (arith_single)
    EQUAL       reduce using rule 75 (arith_single)
    NOT_EQ      reduce using rule 75 (arith_single)
    '+'         reduce using rule 75 (arith_single)
    '-'         reduce using rule 75 (arith_single)
    '*'         reduce using rule 75 (arith_single)
    '/'         reduce using rule 75 (arith_single)


State 434

   76 lst_single: '%' expression .

    ')'         reduce using rule 76 (lst_single)
    AND         reduce using rule 76 (lst_single)
    OR          reduce using rule 76 (lst_single)
    GREATER     reduce using rule 76 (lst_single)
    GREATER_EQ  reduce using rule 76 (lst_single)
    LESS        reduce using rule 76 (lst_single)
    LESS_EQ     reduce using rule 76 (lst_single)
    EQUAL       reduce using rule 76 (lst_single)
    NOT_EQ      reduce using rule 76 (lst_single)
    '+'         reduce using rule 76 (lst_single)
    '-'         reduce using rule 76 (lst_single)
    '*'         reduce using rule 76 (lst_single)
    '/'         reduce using rule 76 (lst_single)


State 435

   77 lst_single: '?' expression .

    ')'         reduce using rule 77 (lst_single)
    AND         reduce using rule 77 (lst_single)
    OR          reduce using rule 77 (lst_single)
    GREATER     reduce using rule 77 (lst_single)
    GREATER_EQ  reduce using rule 77 (lst_single)
    LESS        reduce using rule 77 (lst_single)
    LESS_EQ     reduce using rule 77 (lst_single)
    EQUAL       reduce using rule 77 (lst_single)
    NOT_EQ      reduce using rule 77 (lst_single)
    '+'         reduce using rule 77 (lst_single)
    '-'         reduce using rule 77 (lst_single)
    '*'         reduce using rule 77 (lst_single)
    '/'         reduce using rule 77 (lst_single)


State 436

   68 single_operation: '!' expression .

    ')'         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)
    '+'         reduce using rule 68 (single_operation)
    '-'         reduce using rule 68 (single_operation)
    '*'         reduce using rule 68 (single_operation)
    '/'         reduce using rule 68 (single_operation)


State 437

   47 func_calling: ID '(' lst_params ')' .

    ')'  reduce using rule 47 (func_calling)


State 438

   47 func_calling: ID '(' lst_params ')' .

    ';'         reduce using rule 47 (func_calling)
    AND         reduce using rule 47 (func_calling)
    OR          reduce using rule 47 (func_calling)
    GREATER     reduce using rule 47 (func_calling)
    GREATER_EQ  reduce using rule 47 (func_calling)
    LESS        reduce using rule 47 (func_calling)
    LESS_EQ     reduce using rule 47 (func_calling)
    EQUAL       reduce using rule 47 (func_calling)
    NOT_EQ      reduce using rule 47 (func_calling)


State 439

   47 func_calling: ID '(' lst_params ')' .

    ';'         reduce using rule 47 (func_calling)
    AND         reduce using rule 47 (func_calling)
    OR          reduce using rule 47 (func_calling)
    GREATER     reduce using rule 47 (func_calling)
    GREATER_EQ  reduce using rule 47 (func_calling)
    LESS        reduce using rule 47 (func_calling)
    LESS_EQ     reduce using rule 47 (func_calling)
    EQUAL       reduce using rule 47 (func_calling)
    NOT_EQ      reduce using rule 47 (func_calling)
    '+'         reduce using rule 47 (func_calling)
    '-'         reduce using rule 47 (func_calling)
    '*'         reduce using rule 47 (func_calling)
    '/'         reduce using rule 47 (func_calling)


State 440

   33 conditional_stmt: IF_STMT '(' operation ')' . command
   34                 | IF_STMT '(' operation ')' . command ELSE_STMT command

    NUM_INT         shift, and go to state 29
    NUM_FLOAT       shift, and go to state 30
    NIL_CNST        shift, and go to state 31
    ID              shift, and go to state 32
    RETURN_STM      shift, and go to state 237
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 238
    FOR_STMT        shift, and go to state 239
    OUTPUT_WRITE    shift, and go to state 240
    OUTPUT_WRITELN  shift, and go to state 241
    INPUT_READ      shift, and go to state 242
    '{'             shift, and go to state 243
    '+'             shift, and go to state 40
    '-'             shift, and go to state 41
    '%'             shift, and go to state 42
    '?'             shift, and go to state 43
    '!'             shift, and go to state 44

    var_declaration   go to state 244
    unq_declaration   go to state 245
    command           go to state 451
    conditional_stmt  go to state 246
    return_stmt       go to state 247
    init_variable     go to state 248
    iteration         go to state 249
    init_stmt         go to state 250
    output            go to state 251
    input             go to state 252
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 152
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 253
    binary_operation  go to state 61
    single_operation  go to state 62
    arith_binary      go to state 63
    arith_single      go to state 64
    lst_single        go to state 65
    lst_binary        go to state 66


State 441

   37 iteration: FOR_STMT '(' loop_condition ')' . command

    NUM_INT         shift, and go to state 29
    NUM_FLOAT       shift, and go to state 30
    NIL_CNST        shift, and go to state 31
    ID              shift, and go to state 32
    RETURN_STM      shift, and go to state 237
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 238
    FOR_STMT        shift, and go to state 239
    OUTPUT_WRITE    shift, and go to state 240
    OUTPUT_WRITELN  shift, and go to state 241
    INPUT_READ      shift, and go to state 242
    '{'             shift, and go to state 243
    '+'             shift, and go to state 40
    '-'             shift, and go to state 41
    '%'             shift, and go to state 42
    '?'             shift, and go to state 43
    '!'             shift, and go to state 44

    var_declaration   go to state 244
    unq_declaration   go to state 245
    command           go to state 452
    conditional_stmt  go to state 246
    return_stmt       go to state 247
    init_variable     go to state 248
    iteration         go to state 249
    init_stmt         go to state 250
    output            go to state 251
    input             go to state 252
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 152
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 253
    binary_operation  go to state 61
    single_operation  go to state 62
    arith_binary      go to state 63
    arith_single      go to state 64
    lst_single        go to state 65
    lst_binary        go to state 66


State 442

   44 output: OUTPUT_WRITE '(' STRING ')' . ';'

    ';'  shift, and go to state 453


State 443

   42 output: OUTPUT_WRITE '(' operation ')' . ';'

    ';'  shift, and go to state 454


State 444

   45 output: OUTPUT_WRITELN '(' STRING ')' . ';'

    ';'  shift, and go to state 455


State 445

   43 output: OUTPUT_WRITELN '(' operation ')' . ';'

    ';'  shift, and go to state 456


State 446

   46 input: INPUT_READ '(' expression ')' . ';'

    ';'  shift, and go to state 457


State 447

   47 func_calling: ID '(' lst_params . ')'

    ')'  shift, and go to state 458


State 448

   47 func_calling: ID '(' lst_params . ')'

    ')'  shift, and go to state 459


State 449

   47 func_calling: ID '(' lst_params . ')'

    ')'  shift, and go to state 460


State 450

   47 func_calling: ID '(' lst_params . ')'

    ')'  shift, and go to state 461


State 451

   33 conditional_stmt: IF_STMT '(' operation ')' command .
   34                 | IF_STMT '(' operation ')' command . ELSE_STMT command

    ELSE_STMT  shift, and go to state 462

    NUM_INT         reduce using rule 33 (conditional_stmt)
    NUM_FLOAT       reduce using rule 33 (conditional_stmt)
    NIL_CNST        reduce using rule 33 (conditional_stmt)
    ID              reduce using rule 33 (conditional_stmt)
    RETURN_STM      reduce using rule 33 (conditional_stmt)
    T_INT           reduce using rule 33 (conditional_stmt)
    T_FLOAT         reduce using rule 33 (conditional_stmt)
    IF_STMT         reduce using rule 33 (conditional_stmt)
    FOR_STMT        reduce using rule 33 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 33 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 33 (conditional_stmt)
    INPUT_READ      reduce using rule 33 (conditional_stmt)
    '{'             reduce using rule 33 (conditional_stmt)
    '}'             reduce using rule 33 (conditional_stmt)
    '+'             reduce using rule 33 (conditional_stmt)
    '-'             reduce using rule 33 (conditional_stmt)
    '%'             reduce using rule 33 (conditional_stmt)
    '?'             reduce using rule 33 (conditional_stmt)
    '!'             reduce using rule 33 (conditional_stmt)


State 452

   37 iteration: FOR_STMT '(' loop_condition ')' command .

    NUM_INT         reduce using rule 37 (iteration)
    NUM_FLOAT       reduce using rule 37 (iteration)
    NIL_CNST        reduce using rule 37 (iteration)
    ID              reduce using rule 37 (iteration)
    RETURN_STM      reduce using rule 37 (iteration)
    T_INT           reduce using rule 37 (iteration)
    T_FLOAT         reduce using rule 37 (iteration)
    IF_STMT         reduce using rule 37 (iteration)
    ELSE_STMT       reduce using rule 37 (iteration)
    FOR_STMT        reduce using rule 37 (iteration)
    OUTPUT_WRITE    reduce using rule 37 (iteration)
    OUTPUT_WRITELN  reduce using rule 37 (iteration)
    INPUT_READ      reduce using rule 37 (iteration)
    '{'             reduce using rule 37 (iteration)
    '}'             reduce using rule 37 (iteration)
    '+'             reduce using rule 37 (iteration)
    '-'             reduce using rule 37 (iteration)
    '%'             reduce using rule 37 (iteration)
    '?'             reduce using rule 37 (iteration)
    '!'             reduce using rule 37 (iteration)


State 453

   44 output: OUTPUT_WRITE '(' STRING ')' ';' .

    NUM_INT         reduce using rule 44 (output)
    NUM_FLOAT       reduce using rule 44 (output)
    NIL_CNST        reduce using rule 44 (output)
    ID              reduce using rule 44 (output)
    RETURN_STM      reduce using rule 44 (output)
    T_INT           reduce using rule 44 (output)
    T_FLOAT         reduce using rule 44 (output)
    IF_STMT         reduce using rule 44 (output)
    ELSE_STMT       reduce using rule 44 (output)
    FOR_STMT        reduce using rule 44 (output)
    OUTPUT_WRITE    reduce using rule 44 (output)
    OUTPUT_WRITELN  reduce using rule 44 (output)
    INPUT_READ      reduce using rule 44 (output)
    '{'             reduce using rule 44 (output)
    '}'             reduce using rule 44 (output)
    '+'             reduce using rule 44 (output)
    '-'             reduce using rule 44 (output)
    '%'             reduce using rule 44 (output)
    '?'             reduce using rule 44 (output)
    '!'             reduce using rule 44 (output)


State 454

   42 output: OUTPUT_WRITE '(' operation ')' ';' .

    NUM_INT         reduce using rule 42 (output)
    NUM_FLOAT       reduce using rule 42 (output)
    NIL_CNST        reduce using rule 42 (output)
    ID              reduce using rule 42 (output)
    RETURN_STM      reduce using rule 42 (output)
    T_INT           reduce using rule 42 (output)
    T_FLOAT         reduce using rule 42 (output)
    IF_STMT         reduce using rule 42 (output)
    ELSE_STMT       reduce using rule 42 (output)
    FOR_STMT        reduce using rule 42 (output)
    OUTPUT_WRITE    reduce using rule 42 (output)
    OUTPUT_WRITELN  reduce using rule 42 (output)
    INPUT_READ      reduce using rule 42 (output)
    '{'             reduce using rule 42 (output)
    '}'             reduce using rule 42 (output)
    '+'             reduce using rule 42 (output)
    '-'             reduce using rule 42 (output)
    '%'             reduce using rule 42 (output)
    '?'             reduce using rule 42 (output)
    '!'             reduce using rule 42 (output)


State 455

   45 output: OUTPUT_WRITELN '(' STRING ')' ';' .

    NUM_INT         reduce using rule 45 (output)
    NUM_FLOAT       reduce using rule 45 (output)
    NIL_CNST        reduce using rule 45 (output)
    ID              reduce using rule 45 (output)
    RETURN_STM      reduce using rule 45 (output)
    T_INT           reduce using rule 45 (output)
    T_FLOAT         reduce using rule 45 (output)
    IF_STMT         reduce using rule 45 (output)
    ELSE_STMT       reduce using rule 45 (output)
    FOR_STMT        reduce using rule 45 (output)
    OUTPUT_WRITE    reduce using rule 45 (output)
    OUTPUT_WRITELN  reduce using rule 45 (output)
    INPUT_READ      reduce using rule 45 (output)
    '{'             reduce using rule 45 (output)
    '}'             reduce using rule 45 (output)
    '+'             reduce using rule 45 (output)
    '-'             reduce using rule 45 (output)
    '%'             reduce using rule 45 (output)
    '?'             reduce using rule 45 (output)
    '!'             reduce using rule 45 (output)


State 456

   43 output: OUTPUT_WRITELN '(' operation ')' ';' .

    NUM_INT         reduce using rule 43 (output)
    NUM_FLOAT       reduce using rule 43 (output)
    NIL_CNST        reduce using rule 43 (output)
    ID              reduce using rule 43 (output)
    RETURN_STM      reduce using rule 43 (output)
    T_INT           reduce using rule 43 (output)
    T_FLOAT         reduce using rule 43 (output)
    IF_STMT         reduce using rule 43 (output)
    ELSE_STMT       reduce using rule 43 (output)
    FOR_STMT        reduce using rule 43 (output)
    OUTPUT_WRITE    reduce using rule 43 (output)
    OUTPUT_WRITELN  reduce using rule 43 (output)
    INPUT_READ      reduce using rule 43 (output)
    '{'             reduce using rule 43 (output)
    '}'             reduce using rule 43 (output)
    '+'             reduce using rule 43 (output)
    '-'             reduce using rule 43 (output)
    '%'             reduce using rule 43 (output)
    '?'             reduce using rule 43 (output)
    '!'             reduce using rule 43 (output)


State 457

   46 input: INPUT_READ '(' expression ')' ';' .

    NUM_INT         reduce using rule 46 (input)
    NUM_FLOAT       reduce using rule 46 (input)
    NIL_CNST        reduce using rule 46 (input)
    ID              reduce using rule 46 (input)
    RETURN_STM      reduce using rule 46 (input)
    T_INT           reduce using rule 46 (input)
    T_FLOAT         reduce using rule 46 (input)
    IF_STMT         reduce using rule 46 (input)
    ELSE_STMT       reduce using rule 46 (input)
    FOR_STMT        reduce using rule 46 (input)
    OUTPUT_WRITE    reduce using rule 46 (input)
    OUTPUT_WRITELN  reduce using rule 46 (input)
    INPUT_READ      reduce using rule 46 (input)
    '{'             reduce using rule 46 (input)
    '}'             reduce using rule 46 (input)
    '+'             reduce using rule 46 (input)
    '-'             reduce using rule 46 (input)
    '%'             reduce using rule 46 (input)
    '?'             reduce using rule 46 (input)
    '!'             reduce using rule 46 (input)


State 458

   47 func_calling: ID '(' lst_params ')' .

    ')'         reduce using rule 47 (func_calling)
    ','         reduce using rule 47 (func_calling)
    AND         reduce using rule 47 (func_calling)
    OR          reduce using rule 47 (func_calling)
    GREATER     reduce using rule 47 (func_calling)
    GREATER_EQ  reduce using rule 47 (func_calling)
    LESS        reduce using rule 47 (func_calling)
    LESS_EQ     reduce using rule 47 (func_calling)
    EQUAL       reduce using rule 47 (func_calling)
    NOT_EQ      reduce using rule 47 (func_calling)


State 459

   47 func_calling: ID '(' lst_params ')' .

    ')'         reduce using rule 47 (func_calling)
    ','         reduce using rule 47 (func_calling)
    AND         reduce using rule 47 (func_calling)
    OR          reduce using rule 47 (func_calling)
    GREATER     reduce using rule 47 (func_calling)
    GREATER_EQ  reduce using rule 47 (func_calling)
    LESS        reduce using rule 47 (func_calling)
    LESS_EQ     reduce using rule 47 (func_calling)
    EQUAL       reduce using rule 47 (func_calling)
    NOT_EQ      reduce using rule 47 (func_calling)
    '+'         reduce using rule 47 (func_calling)
    '-'         reduce using rule 47 (func_calling)
    '*'         reduce using rule 47 (func_calling)
    '/'         reduce using rule 47 (func_calling)


State 460

   47 func_calling: ID '(' lst_params ')' .

    ')'         reduce using rule 47 (func_calling)
    AND         reduce using rule 47 (func_calling)
    OR          reduce using rule 47 (func_calling)
    GREATER     reduce using rule 47 (func_calling)
    GREATER_EQ  reduce using rule 47 (func_calling)
    LESS        reduce using rule 47 (func_calling)
    LESS_EQ     reduce using rule 47 (func_calling)
    EQUAL       reduce using rule 47 (func_calling)
    NOT_EQ      reduce using rule 47 (func_calling)


State 461

   47 func_calling: ID '(' lst_params ')' .

    ')'         reduce using rule 47 (func_calling)
    AND         reduce using rule 47 (func_calling)
    OR          reduce using rule 47 (func_calling)
    GREATER     reduce using rule 47 (func_calling)
    GREATER_EQ  reduce using rule 47 (func_calling)
    LESS        reduce using rule 47 (func_calling)
    LESS_EQ     reduce using rule 47 (func_calling)
    EQUAL       reduce using rule 47 (func_calling)
    NOT_EQ      reduce using rule 47 (func_calling)
    '+'         reduce using rule 47 (func_calling)
    '-'         reduce using rule 47 (func_calling)
    '*'         reduce using rule 47 (func_calling)
    '/'         reduce using rule 47 (func_calling)


State 462

   34 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT . command

    NUM_INT         shift, and go to state 29
    NUM_FLOAT       shift, and go to state 30
    NIL_CNST        shift, and go to state 31
    ID              shift, and go to state 32
    RETURN_STM      shift, and go to state 237
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 238
    FOR_STMT        shift, and go to state 239
    OUTPUT_WRITE    shift, and go to state 240
    OUTPUT_WRITELN  shift, and go to state 241
    INPUT_READ      shift, and go to state 242
    '{'             shift, and go to state 243
    '+'             shift, and go to state 40
    '-'             shift, and go to state 41
    '%'             shift, and go to state 42
    '?'             shift, and go to state 43
    '!'             shift, and go to state 44

    var_declaration   go to state 244
    unq_declaration   go to state 245
    command           go to state 463
    conditional_stmt  go to state 246
    return_stmt       go to state 247
    init_variable     go to state 248
    iteration         go to state 249
    init_stmt         go to state 250
    output            go to state 251
    input             go to state 252
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 152
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 253
    binary_operation  go to state 61
    single_operation  go to state 62
    arith_binary      go to state 63
    arith_single      go to state 64
    lst_single        go to state 65
    lst_binary        go to state 66


State 463

   34 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT command .

    NUM_INT         reduce using rule 34 (conditional_stmt)
    NUM_FLOAT       reduce using rule 34 (conditional_stmt)
    NIL_CNST        reduce using rule 34 (conditional_stmt)
    ID              reduce using rule 34 (conditional_stmt)
    RETURN_STM      reduce using rule 34 (conditional_stmt)
    T_INT           reduce using rule 34 (conditional_stmt)
    T_FLOAT         reduce using rule 34 (conditional_stmt)
    IF_STMT         reduce using rule 34 (conditional_stmt)
    ELSE_STMT       reduce using rule 34 (conditional_stmt)
    FOR_STMT        reduce using rule 34 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 34 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 34 (conditional_stmt)
    INPUT_READ      reduce using rule 34 (conditional_stmt)
    '{'             reduce using rule 34 (conditional_stmt)
    '}'             reduce using rule 34 (conditional_stmt)
    '+'             reduce using rule 34 (conditional_stmt)
    '-'             reduce using rule 34 (conditional_stmt)
    '%'             reduce using rule 34 (conditional_stmt)
    '?'             reduce using rule 34 (conditional_stmt)
    '!'             reduce using rule 34 (conditional_stmt)
