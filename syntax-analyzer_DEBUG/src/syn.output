Grammar

    0 $accept: program $end

    1 program: lst_declarations
    2        | %empty

    3 lst_declarations: declaration lst_declarations
    4                 | declaration

    5 declaration: func_declaration
    6            | var_declaration
    7            | error

    8 $@1: %empty

    9 func_declaration: unq_declaration $@1 '(' params ')' '{' block_commands '}'

   10 var_declaration: unq_declaration ';'

   11 $@2: %empty

   12 unq_declaration: type $@2 ID

   13 params: %empty
   14       | lst_parameters

   15 lst_parameters: parameter ',' lst_parameters
   16               | parameter

   17 parameter: unq_declaration

   18 lst_params: %empty
   19           | lst_calling_params

   20 lst_calling_params: operation ',' lst_calling_params
   21                   | operation

   22 block_commands: command block_commands
   23               | %empty

   24 command: var_declaration
   25        | conditional_stmt
   26        | return_stmt
   27        | init_variable
   28        | iteration
   29        | input
   30        | output
   31        | '{' block_commands '}'
   32        | operation ';'

   33 conditional_stmt: IF_STMT '(' operation ')' command
   34                 | IF_STMT '(' operation ')' command ELSE_STMT command

   35 return_stmt: RETURN_STM operation ';'

   36 init_variable: init_stmt ';'

   37 iteration: FOR_STMT '(' loop_condition ')' command

   38 loop_condition: init_stmt ';' operation ';' update_stmt

   39 init_stmt: ID '=' operation

   40 update_stmt: init_stmt
   41            | %empty

   42 output: OUTPUT_WRITE '(' operation ')' ';'
   43       | OUTPUT_WRITELN '(' operation ')' ';'
   44       | OUTPUT_WRITE '(' STRING ')' ';'
   45       | OUTPUT_WRITELN '(' STRING ')' ';'

   46 input: INPUT_READ '(' expression ')' ';'

   47 func_calling: ID '(' lst_params ')'

   48 expression: func_calling
   49           | single_operation
   50           | ID
   51           | const

   52 const: number
   53      | NIL_CNST

   54 number: NUM_INT
   55       | NUM_FLOAT

   56 type: type_lst
   57     | type_number

   58 type_lst: type_number T_LIST

   59 type_number: T_INT
   60            | T_FLOAT

   61 operation: arith_binary
   62          | lst_binary
   63          | operation relation_operator expression
   64          | operation log_operator expression

   65 single_operation: arith_single
   66                 | lst_single
   67                 | '!' expression

   68 arith_binary: arith_binary '+' expression
   69             | arith_binary '-' expression
   70             | arith_binary '*' expression
   71             | arith_binary '/' expression
   72             | expression

   73 arith_single: '+' expression
   74             | '-' expression

   75 lst_single: '%' expression
   76           | '?' expression

   77 lst_binary: expression FILTER expression
   78           | expression MAP expression
   79           | expression ':' expression

   80 log_operator: AND
   81             | OR

   82 relation_operator: GREATER
   83                  | GREATER_EQ
   84                  | LESS
   85                  | LESS_EQ
   86                  | EQUAL
   87                  | NOT_EQ


Terminals, with rules where they appear

    $end (0) 0
    '!' <token> (33) 67
    '%' <token> (37) 75
    '(' <token> (40) 9 33 34 37 42 43 44 45 46 47
    ')' <token> (41) 9 33 34 37 42 43 44 45 46 47
    '*' <token> (42) 70
    '+' <token> (43) 68 73
    ',' <token> (44) 15 20
    '-' <token> (45) 69 74
    '/' <token> (47) 71
    ':' <token> (58) 79
    ';' <token> (59) 10 32 35 36 38 42 43 44 45 46
    '=' <token> (61) 39
    '?' <token> (63) 76
    '{' <token> (123) 9 31
    '}' <token> (125) 9 31
    error (256) 7
    NUM_INT <token> (258) 54
    NUM_FLOAT <token> (259) 55
    STRING <token> (260) 44 45
    NIL_CNST <token> (261) 53
    ID <token> (262) 12 39 47 50
    RETURN_STM <token> (263) 35
    T_INT <token> (264) 59
    T_FLOAT <token> (265) 60
    T_LIST <token> (266) 58
    IF_STMT <token> (267) 33 34
    ELSE_STMT <token> (268) 34
    FOR_STMT <token> (269) 37
    OUTPUT_WRITE <token> (270) 42 44
    OUTPUT_WRITELN <token> (271) 43 45
    INPUT_READ <token> (272) 46
    AND <token> (273) 80
    OR <token> (274) 81
    GREATER <token> (275) 82
    GREATER_EQ <token> (276) 83
    LESS <token> (277) 84
    LESS_EQ <token> (278) 85
    EQUAL <token> (279) 86
    NOT_EQ <token> (280) 87
    FILTER <token> (281) 77
    MAP <token> (282) 78


Nonterminals, with rules where they appear

    $accept (43)
        on left: 0
    program <node> (44)
        on left: 1 2
        on right: 0
    lst_declarations <node> (45)
        on left: 3 4
        on right: 1 3
    declaration <node> (46)
        on left: 5 6 7
        on right: 3 4
    func_declaration <node> (47)
        on left: 9
        on right: 5
    $@1 (48)
        on left: 8
        on right: 9
    var_declaration <node> (49)
        on left: 10
        on right: 6 24
    unq_declaration <node> (50)
        on left: 12
        on right: 9 10 17
    $@2 (51)
        on left: 11
        on right: 12
    params (52)
        on left: 13 14
        on right: 9
    lst_parameters <node> (53)
        on left: 15 16
        on right: 14 15
    parameter <node> (54)
        on left: 17
        on right: 15 16
    lst_params (55)
        on left: 18 19
        on right: 47
    lst_calling_params (56)
        on left: 20 21
        on right: 19 20
    block_commands <node> (57)
        on left: 22 23
        on right: 9 22 31
    command <node> (58)
        on left: 24 25 26 27 28 29 30 31 32
        on right: 22 33 34 37
    conditional_stmt <node> (59)
        on left: 33 34
        on right: 25
    return_stmt <node> (60)
        on left: 35
        on right: 26
    init_variable <node> (61)
        on left: 36
        on right: 27
    iteration <node> (62)
        on left: 37
        on right: 28
    loop_condition <node> (63)
        on left: 38
        on right: 37
    init_stmt <node> (64)
        on left: 39
        on right: 36 38 40
    update_stmt <node> (65)
        on left: 40 41
        on right: 38
    output <node> (66)
        on left: 42 43 44 45
        on right: 30
    input <node> (67)
        on left: 46
        on right: 29
    func_calling <node> (68)
        on left: 47
        on right: 48
    expression <node> (69)
        on left: 48 49 50 51
        on right: 46 63 64 67 68 69 70 71 72 73 74 75 76 77 78 79
    const <node> (70)
        on left: 52 53
        on right: 51
    number <node> (71)
        on left: 54 55
        on right: 52
    type <node> (72)
        on left: 56 57
        on right: 12
    type_lst <node> (73)
        on left: 58
        on right: 56
    type_number <node> (74)
        on left: 59 60
        on right: 57 58
    operation <node> (75)
        on left: 61 62 63 64
        on right: 20 21 32 33 34 35 38 39 42 43 63 64
    single_operation <node> (76)
        on left: 65 66 67
        on right: 49
    arith_binary <node> (77)
        on left: 68 69 70 71 72
        on right: 61 68 69 70 71
    arith_single <node> (78)
        on left: 73 74
        on right: 65
    lst_single <node> (79)
        on left: 75 76
        on right: 66
    lst_binary <node> (80)
        on left: 77 78 79
        on right: 62
    log_operator <node> (81)
        on left: 80 81
        on right: 64
    relation_operator <node> (82)
        on left: 82 83 84 85 86 87
        on right: 63


State 0

    0 $accept: . program $end

    error    shift, and go to state 1
    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    $end  reduce using rule 2 (program)

    program           go to state 4
    lst_declarations  go to state 5
    declaration       go to state 6
    func_declaration  go to state 7
    var_declaration   go to state 8
    unq_declaration   go to state 9
    type              go to state 10
    type_lst          go to state 11
    type_number       go to state 12


State 1

    7 declaration: error .

    $end     reduce using rule 7 (declaration)
    error    reduce using rule 7 (declaration)
    T_INT    reduce using rule 7 (declaration)
    T_FLOAT  reduce using rule 7 (declaration)


State 2

   59 type_number: T_INT .

    ID      reduce using rule 59 (type_number)
    T_LIST  reduce using rule 59 (type_number)


State 3

   60 type_number: T_FLOAT .

    ID      reduce using rule 60 (type_number)
    T_LIST  reduce using rule 60 (type_number)


State 4

    0 $accept: program . $end

    $end  shift, and go to state 13


State 5

    1 program: lst_declarations .

    $end  reduce using rule 1 (program)


State 6

    3 lst_declarations: declaration . lst_declarations
    4                 | declaration .

    error    shift, and go to state 1
    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    $end  reduce using rule 4 (lst_declarations)

    lst_declarations  go to state 14
    declaration       go to state 6
    func_declaration  go to state 7
    var_declaration   go to state 8
    unq_declaration   go to state 9
    type              go to state 10
    type_lst          go to state 11
    type_number       go to state 12


State 7

    5 declaration: func_declaration .

    $end     reduce using rule 5 (declaration)
    error    reduce using rule 5 (declaration)
    T_INT    reduce using rule 5 (declaration)
    T_FLOAT  reduce using rule 5 (declaration)


State 8

    6 declaration: var_declaration .

    $end     reduce using rule 6 (declaration)
    error    reduce using rule 6 (declaration)
    T_INT    reduce using rule 6 (declaration)
    T_FLOAT  reduce using rule 6 (declaration)


State 9

    9 func_declaration: unq_declaration . $@1 '(' params ')' '{' block_commands '}'
   10 var_declaration: unq_declaration . ';'

    ';'  shift, and go to state 15

    '('  reduce using rule 8 ($@1)

    $@1  go to state 16


State 10

   12 unq_declaration: type . $@2 ID

    ID  reduce using rule 11 ($@2)

    $@2  go to state 17


State 11

   56 type: type_lst .

    ID  reduce using rule 56 (type)


State 12

   57 type: type_number .
   58 type_lst: type_number . T_LIST

    T_LIST  shift, and go to state 18

    ID  reduce using rule 57 (type)


State 13

    0 $accept: program $end .

    $default  accept


State 14

    3 lst_declarations: declaration lst_declarations .

    $end  reduce using rule 3 (lst_declarations)


State 15

   10 var_declaration: unq_declaration ';' .

    $end     reduce using rule 10 (var_declaration)
    error    reduce using rule 10 (var_declaration)
    T_INT    reduce using rule 10 (var_declaration)
    T_FLOAT  reduce using rule 10 (var_declaration)


State 16

    9 func_declaration: unq_declaration $@1 . '(' params ')' '{' block_commands '}'

    '('  shift, and go to state 19


State 17

   12 unq_declaration: type $@2 . ID

    ID  shift, and go to state 20


State 18

   58 type_lst: type_number T_LIST .

    ID  reduce using rule 58 (type_lst)


State 19

    9 func_declaration: unq_declaration $@1 '(' . params ')' '{' block_commands '}'

    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    ')'  reduce using rule 13 (params)

    unq_declaration  go to state 21
    params           go to state 22
    lst_parameters   go to state 23
    parameter        go to state 24
    type             go to state 150
    type_lst         go to state 11
    type_number      go to state 12


State 20

   12 unq_declaration: type $@2 ID .

    '('  reduce using rule 12 (unq_declaration)
    ';'  reduce using rule 12 (unq_declaration)


State 21

   17 parameter: unq_declaration .

    ')'  reduce using rule 17 (parameter)
    ','  reduce using rule 17 (parameter)


State 22

    9 func_declaration: unq_declaration $@1 '(' params . ')' '{' block_commands '}'

    ')'  shift, and go to state 25


State 23

   14 params: lst_parameters .

    ')'  reduce using rule 14 (params)


State 24

   15 lst_parameters: parameter . ',' lst_parameters
   16               | parameter .

    ','  shift, and go to state 26

    ')'  reduce using rule 16 (lst_parameters)


State 25

    9 func_declaration: unq_declaration $@1 '(' params ')' . '{' block_commands '}'

    '{'  shift, and go to state 27


State 26

   15 lst_parameters: parameter ',' . lst_parameters

    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    unq_declaration  go to state 21
    lst_parameters   go to state 28
    parameter        go to state 24
    type             go to state 150
    type_lst         go to state 11
    type_number      go to state 12


State 27

    9 func_declaration: unq_declaration $@1 '(' params ')' '{' . block_commands '}'

    NUM_INT         shift, and go to state 29
    NUM_FLOAT       shift, and go to state 30
    NIL_CNST        shift, and go to state 31
    ID              shift, and go to state 32
    RETURN_STM      shift, and go to state 33
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 34
    FOR_STMT        shift, and go to state 35
    OUTPUT_WRITE    shift, and go to state 36
    OUTPUT_WRITELN  shift, and go to state 37
    INPUT_READ      shift, and go to state 38
    '{'             shift, and go to state 39
    '+'             shift, and go to state 40
    '-'             shift, and go to state 41
    '%'             shift, and go to state 42
    '?'             shift, and go to state 43
    '!'             shift, and go to state 44

    '}'  reduce using rule 23 (block_commands)

    var_declaration   go to state 45
    unq_declaration   go to state 46
    block_commands    go to state 47
    command           go to state 48
    conditional_stmt  go to state 49
    return_stmt       go to state 50
    init_variable     go to state 51
    iteration         go to state 52
    init_stmt         go to state 53
    output            go to state 54
    input             go to state 55
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 151
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 60
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 28

   15 lst_parameters: parameter ',' lst_parameters .

    ')'  reduce using rule 15 (lst_parameters)


State 29

   54 number: NUM_INT .

    ';'         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)
    '+'         reduce using rule 54 (number)
    '-'         reduce using rule 54 (number)
    '*'         reduce using rule 54 (number)
    '/'         reduce using rule 54 (number)
    FILTER      reduce using rule 54 (number)
    MAP         reduce using rule 54 (number)
    ':'         reduce using rule 54 (number)


State 30

   55 number: NUM_FLOAT .

    ';'         reduce using rule 55 (number)
    AND         reduce using rule 55 (number)
    OR          reduce using rule 55 (number)
    GREATER     reduce using rule 55 (number)
    GREATER_EQ  reduce using rule 55 (number)
    LESS        reduce using rule 55 (number)
    LESS_EQ     reduce using rule 55 (number)
    EQUAL       reduce using rule 55 (number)
    NOT_EQ      reduce using rule 55 (number)
    '+'         reduce using rule 55 (number)
    '-'         reduce using rule 55 (number)
    '*'         reduce using rule 55 (number)
    '/'         reduce using rule 55 (number)
    FILTER      reduce using rule 55 (number)
    MAP         reduce using rule 55 (number)
    ':'         reduce using rule 55 (number)


State 31

   53 const: NIL_CNST .

    ';'         reduce using rule 53 (const)
    AND         reduce using rule 53 (const)
    OR          reduce using rule 53 (const)
    GREATER     reduce using rule 53 (const)
    GREATER_EQ  reduce using rule 53 (const)
    LESS        reduce using rule 53 (const)
    LESS_EQ     reduce using rule 53 (const)
    EQUAL       reduce using rule 53 (const)
    NOT_EQ      reduce using rule 53 (const)
    '+'         reduce using rule 53 (const)
    '-'         reduce using rule 53 (const)
    '*'         reduce using rule 53 (const)
    '/'         reduce using rule 53 (const)
    FILTER      reduce using rule 53 (const)
    MAP         reduce using rule 53 (const)
    ':'         reduce using rule 53 (const)


State 32

   39 init_stmt: ID . '=' operation
   47 func_calling: ID . '(' lst_params ')'
   50 expression: ID .

    '('  shift, and go to state 66
    '='  shift, and go to state 67

    ';'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)
    FILTER      reduce using rule 50 (expression)
    MAP         reduce using rule 50 (expression)
    ':'         reduce using rule 50 (expression)


State 33

   35 return_stmt: RETURN_STM . operation ';'

    NUM_INT    shift, and go to state 29
    NUM_FLOAT  shift, and go to state 30
    NIL_CNST   shift, and go to state 31
    ID         shift, and go to state 68
    '+'        shift, and go to state 40
    '-'        shift, and go to state 41
    '%'        shift, and go to state 42
    '?'        shift, and go to state 43
    '!'        shift, and go to state 44

    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    operation         go to state 69
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 34

   33 conditional_stmt: IF_STMT . '(' operation ')' command
   34                 | IF_STMT . '(' operation ')' command ELSE_STMT command

    '('  shift, and go to state 70


State 35

   37 iteration: FOR_STMT . '(' loop_condition ')' command

    '('  shift, and go to state 71


State 36

   42 output: OUTPUT_WRITE . '(' operation ')' ';'
   44       | OUTPUT_WRITE . '(' STRING ')' ';'

    '('  shift, and go to state 72


State 37

   43 output: OUTPUT_WRITELN . '(' operation ')' ';'
   45       | OUTPUT_WRITELN . '(' STRING ')' ';'

    '('  shift, and go to state 73


State 38

   46 input: INPUT_READ . '(' expression ')' ';'

    '('  shift, and go to state 74


State 39

   31 command: '{' . block_commands '}'

    NUM_INT         shift, and go to state 29
    NUM_FLOAT       shift, and go to state 30
    NIL_CNST        shift, and go to state 31
    ID              shift, and go to state 32
    RETURN_STM      shift, and go to state 33
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 34
    FOR_STMT        shift, and go to state 35
    OUTPUT_WRITE    shift, and go to state 36
    OUTPUT_WRITELN  shift, and go to state 37
    INPUT_READ      shift, and go to state 38
    '{'             shift, and go to state 39
    '+'             shift, and go to state 40
    '-'             shift, and go to state 41
    '%'             shift, and go to state 42
    '?'             shift, and go to state 43
    '!'             shift, and go to state 44

    '}'  reduce using rule 23 (block_commands)

    var_declaration   go to state 45
    unq_declaration   go to state 46
    block_commands    go to state 75
    command           go to state 48
    conditional_stmt  go to state 49
    return_stmt       go to state 50
    init_variable     go to state 51
    iteration         go to state 52
    init_stmt         go to state 53
    output            go to state 54
    input             go to state 55
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 151
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 60
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 40

   73 arith_single: '+' . expression

    NUM_INT    shift, and go to state 29
    NUM_FLOAT  shift, and go to state 30
    NIL_CNST   shift, and go to state 31
    ID         shift, and go to state 68
    '+'        shift, and go to state 40
    '-'        shift, and go to state 41
    '%'        shift, and go to state 42
    '?'        shift, and go to state 43
    '!'        shift, and go to state 44

    func_calling      go to state 56
    expression        go to state 76
    const             go to state 58
    number            go to state 59
    single_operation  go to state 61
    arith_single      go to state 63
    lst_single        go to state 64


State 41

   74 arith_single: '-' . expression

    NUM_INT    shift, and go to state 29
    NUM_FLOAT  shift, and go to state 30
    NIL_CNST   shift, and go to state 31
    ID         shift, and go to state 68
    '+'        shift, and go to state 40
    '-'        shift, and go to state 41
    '%'        shift, and go to state 42
    '?'        shift, and go to state 43
    '!'        shift, and go to state 44

    func_calling      go to state 56
    expression        go to state 77
    const             go to state 58
    number            go to state 59
    single_operation  go to state 61
    arith_single      go to state 63
    lst_single        go to state 64


State 42

   75 lst_single: '%' . expression

    NUM_INT    shift, and go to state 29
    NUM_FLOAT  shift, and go to state 30
    NIL_CNST   shift, and go to state 31
    ID         shift, and go to state 68
    '+'        shift, and go to state 40
    '-'        shift, and go to state 41
    '%'        shift, and go to state 42
    '?'        shift, and go to state 43
    '!'        shift, and go to state 44

    func_calling      go to state 56
    expression        go to state 78
    const             go to state 58
    number            go to state 59
    single_operation  go to state 61
    arith_single      go to state 63
    lst_single        go to state 64


State 43

   76 lst_single: '?' . expression

    NUM_INT    shift, and go to state 29
    NUM_FLOAT  shift, and go to state 30
    NIL_CNST   shift, and go to state 31
    ID         shift, and go to state 68
    '+'        shift, and go to state 40
    '-'        shift, and go to state 41
    '%'        shift, and go to state 42
    '?'        shift, and go to state 43
    '!'        shift, and go to state 44

    func_calling      go to state 56
    expression        go to state 79
    const             go to state 58
    number            go to state 59
    single_operation  go to state 61
    arith_single      go to state 63
    lst_single        go to state 64


State 44

   67 single_operation: '!' . expression

    NUM_INT    shift, and go to state 29
    NUM_FLOAT  shift, and go to state 30
    NIL_CNST   shift, and go to state 31
    ID         shift, and go to state 68
    '+'        shift, and go to state 40
    '-'        shift, and go to state 41
    '%'        shift, and go to state 42
    '?'        shift, and go to state 43
    '!'        shift, and go to state 44

    func_calling      go to state 56
    expression        go to state 80
    const             go to state 58
    number            go to state 59
    single_operation  go to state 61
    arith_single      go to state 63
    lst_single        go to state 64


State 45

   24 command: var_declaration .

    NUM_INT         reduce using rule 24 (command)
    NUM_FLOAT       reduce using rule 24 (command)
    NIL_CNST        reduce using rule 24 (command)
    ID              reduce using rule 24 (command)
    RETURN_STM      reduce using rule 24 (command)
    T_INT           reduce using rule 24 (command)
    T_FLOAT         reduce using rule 24 (command)
    IF_STMT         reduce using rule 24 (command)
    FOR_STMT        reduce using rule 24 (command)
    OUTPUT_WRITE    reduce using rule 24 (command)
    OUTPUT_WRITELN  reduce using rule 24 (command)
    INPUT_READ      reduce using rule 24 (command)
    '{'             reduce using rule 24 (command)
    '}'             reduce using rule 24 (command)
    '+'             reduce using rule 24 (command)
    '-'             reduce using rule 24 (command)
    '%'             reduce using rule 24 (command)
    '?'             reduce using rule 24 (command)
    '!'             reduce using rule 24 (command)


State 46

   10 var_declaration: unq_declaration . ';'

    ';'  shift, and go to state 152


State 47

    9 func_declaration: unq_declaration $@1 '(' params ')' '{' block_commands . '}'

    '}'  shift, and go to state 81


State 48

   22 block_commands: command . block_commands

    NUM_INT         shift, and go to state 29
    NUM_FLOAT       shift, and go to state 30
    NIL_CNST        shift, and go to state 31
    ID              shift, and go to state 32
    RETURN_STM      shift, and go to state 33
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 34
    FOR_STMT        shift, and go to state 35
    OUTPUT_WRITE    shift, and go to state 36
    OUTPUT_WRITELN  shift, and go to state 37
    INPUT_READ      shift, and go to state 38
    '{'             shift, and go to state 39
    '+'             shift, and go to state 40
    '-'             shift, and go to state 41
    '%'             shift, and go to state 42
    '?'             shift, and go to state 43
    '!'             shift, and go to state 44

    '}'  reduce using rule 23 (block_commands)

    var_declaration   go to state 45
    unq_declaration   go to state 46
    block_commands    go to state 82
    command           go to state 48
    conditional_stmt  go to state 49
    return_stmt       go to state 50
    init_variable     go to state 51
    iteration         go to state 52
    init_stmt         go to state 53
    output            go to state 54
    input             go to state 55
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 151
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 60
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 49

   25 command: conditional_stmt .

    NUM_INT         reduce using rule 25 (command)
    NUM_FLOAT       reduce using rule 25 (command)
    NIL_CNST        reduce using rule 25 (command)
    ID              reduce using rule 25 (command)
    RETURN_STM      reduce using rule 25 (command)
    T_INT           reduce using rule 25 (command)
    T_FLOAT         reduce using rule 25 (command)
    IF_STMT         reduce using rule 25 (command)
    FOR_STMT        reduce using rule 25 (command)
    OUTPUT_WRITE    reduce using rule 25 (command)
    OUTPUT_WRITELN  reduce using rule 25 (command)
    INPUT_READ      reduce using rule 25 (command)
    '{'             reduce using rule 25 (command)
    '}'             reduce using rule 25 (command)
    '+'             reduce using rule 25 (command)
    '-'             reduce using rule 25 (command)
    '%'             reduce using rule 25 (command)
    '?'             reduce using rule 25 (command)
    '!'             reduce using rule 25 (command)


State 50

   26 command: return_stmt .

    NUM_INT         reduce using rule 26 (command)
    NUM_FLOAT       reduce using rule 26 (command)
    NIL_CNST        reduce using rule 26 (command)
    ID              reduce using rule 26 (command)
    RETURN_STM      reduce using rule 26 (command)
    T_INT           reduce using rule 26 (command)
    T_FLOAT         reduce using rule 26 (command)
    IF_STMT         reduce using rule 26 (command)
    FOR_STMT        reduce using rule 26 (command)
    OUTPUT_WRITE    reduce using rule 26 (command)
    OUTPUT_WRITELN  reduce using rule 26 (command)
    INPUT_READ      reduce using rule 26 (command)
    '{'             reduce using rule 26 (command)
    '}'             reduce using rule 26 (command)
    '+'             reduce using rule 26 (command)
    '-'             reduce using rule 26 (command)
    '%'             reduce using rule 26 (command)
    '?'             reduce using rule 26 (command)
    '!'             reduce using rule 26 (command)


State 51

   27 command: init_variable .

    NUM_INT         reduce using rule 27 (command)
    NUM_FLOAT       reduce using rule 27 (command)
    NIL_CNST        reduce using rule 27 (command)
    ID              reduce using rule 27 (command)
    RETURN_STM      reduce using rule 27 (command)
    T_INT           reduce using rule 27 (command)
    T_FLOAT         reduce using rule 27 (command)
    IF_STMT         reduce using rule 27 (command)
    FOR_STMT        reduce using rule 27 (command)
    OUTPUT_WRITE    reduce using rule 27 (command)
    OUTPUT_WRITELN  reduce using rule 27 (command)
    INPUT_READ      reduce using rule 27 (command)
    '{'             reduce using rule 27 (command)
    '}'             reduce using rule 27 (command)
    '+'             reduce using rule 27 (command)
    '-'             reduce using rule 27 (command)
    '%'             reduce using rule 27 (command)
    '?'             reduce using rule 27 (command)
    '!'             reduce using rule 27 (command)


State 52

   28 command: iteration .

    NUM_INT         reduce using rule 28 (command)
    NUM_FLOAT       reduce using rule 28 (command)
    NIL_CNST        reduce using rule 28 (command)
    ID              reduce using rule 28 (command)
    RETURN_STM      reduce using rule 28 (command)
    T_INT           reduce using rule 28 (command)
    T_FLOAT         reduce using rule 28 (command)
    IF_STMT         reduce using rule 28 (command)
    FOR_STMT        reduce using rule 28 (command)
    OUTPUT_WRITE    reduce using rule 28 (command)
    OUTPUT_WRITELN  reduce using rule 28 (command)
    INPUT_READ      reduce using rule 28 (command)
    '{'             reduce using rule 28 (command)
    '}'             reduce using rule 28 (command)
    '+'             reduce using rule 28 (command)
    '-'             reduce using rule 28 (command)
    '%'             reduce using rule 28 (command)
    '?'             reduce using rule 28 (command)
    '!'             reduce using rule 28 (command)


State 53

   36 init_variable: init_stmt . ';'

    ';'  shift, and go to state 83


State 54

   30 command: output .

    NUM_INT         reduce using rule 30 (command)
    NUM_FLOAT       reduce using rule 30 (command)
    NIL_CNST        reduce using rule 30 (command)
    ID              reduce using rule 30 (command)
    RETURN_STM      reduce using rule 30 (command)
    T_INT           reduce using rule 30 (command)
    T_FLOAT         reduce using rule 30 (command)
    IF_STMT         reduce using rule 30 (command)
    FOR_STMT        reduce using rule 30 (command)
    OUTPUT_WRITE    reduce using rule 30 (command)
    OUTPUT_WRITELN  reduce using rule 30 (command)
    INPUT_READ      reduce using rule 30 (command)
    '{'             reduce using rule 30 (command)
    '}'             reduce using rule 30 (command)
    '+'             reduce using rule 30 (command)
    '-'             reduce using rule 30 (command)
    '%'             reduce using rule 30 (command)
    '?'             reduce using rule 30 (command)
    '!'             reduce using rule 30 (command)


State 55

   29 command: input .

    NUM_INT         reduce using rule 29 (command)
    NUM_FLOAT       reduce using rule 29 (command)
    NIL_CNST        reduce using rule 29 (command)
    ID              reduce using rule 29 (command)
    RETURN_STM      reduce using rule 29 (command)
    T_INT           reduce using rule 29 (command)
    T_FLOAT         reduce using rule 29 (command)
    IF_STMT         reduce using rule 29 (command)
    FOR_STMT        reduce using rule 29 (command)
    OUTPUT_WRITE    reduce using rule 29 (command)
    OUTPUT_WRITELN  reduce using rule 29 (command)
    INPUT_READ      reduce using rule 29 (command)
    '{'             reduce using rule 29 (command)
    '}'             reduce using rule 29 (command)
    '+'             reduce using rule 29 (command)
    '-'             reduce using rule 29 (command)
    '%'             reduce using rule 29 (command)
    '?'             reduce using rule 29 (command)
    '!'             reduce using rule 29 (command)


State 56

   48 expression: func_calling .

    ';'         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)
    '+'         reduce using rule 48 (expression)
    '-'         reduce using rule 48 (expression)
    '*'         reduce using rule 48 (expression)
    '/'         reduce using rule 48 (expression)
    FILTER      reduce using rule 48 (expression)
    MAP         reduce using rule 48 (expression)
    ':'         reduce using rule 48 (expression)


State 57

   72 arith_binary: expression .
   77 lst_binary: expression . FILTER expression
   78           | expression . MAP expression
   79           | expression . ':' expression

    FILTER  shift, and go to state 84
    MAP     shift, and go to state 85
    ':'     shift, and go to state 86

    ';'         reduce using rule 72 (arith_binary)
    AND         reduce using rule 72 (arith_binary)
    OR          reduce using rule 72 (arith_binary)
    GREATER     reduce using rule 72 (arith_binary)
    GREATER_EQ  reduce using rule 72 (arith_binary)
    LESS        reduce using rule 72 (arith_binary)
    LESS_EQ     reduce using rule 72 (arith_binary)
    EQUAL       reduce using rule 72 (arith_binary)
    NOT_EQ      reduce using rule 72 (arith_binary)
    '+'         reduce using rule 72 (arith_binary)
    '-'         reduce using rule 72 (arith_binary)
    '*'         reduce using rule 72 (arith_binary)
    '/'         reduce using rule 72 (arith_binary)


State 58

   51 expression: const .

    ';'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)
    FILTER      reduce using rule 51 (expression)
    MAP         reduce using rule 51 (expression)
    ':'         reduce using rule 51 (expression)


State 59

   52 const: number .

    ';'         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)
    '+'         reduce using rule 52 (const)
    '-'         reduce using rule 52 (const)
    '*'         reduce using rule 52 (const)
    '/'         reduce using rule 52 (const)
    FILTER      reduce using rule 52 (const)
    MAP         reduce using rule 52 (const)
    ':'         reduce using rule 52 (const)


State 60

   32 command: operation . ';'
   63 operation: operation . relation_operator expression
   64          | operation . log_operator expression

    ';'         shift, and go to state 87
    AND         shift, and go to state 88
    OR          shift, and go to state 89
    GREATER     shift, and go to state 90
    GREATER_EQ  shift, and go to state 91
    LESS        shift, and go to state 92
    LESS_EQ     shift, and go to state 93
    EQUAL       shift, and go to state 94
    NOT_EQ      shift, and go to state 95

    log_operator       go to state 96
    relation_operator  go to state 97


State 61

   49 expression: single_operation .

    ';'         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)
    '+'         reduce using rule 49 (expression)
    '-'         reduce using rule 49 (expression)
    '*'         reduce using rule 49 (expression)
    '/'         reduce using rule 49 (expression)
    FILTER      reduce using rule 49 (expression)
    MAP         reduce using rule 49 (expression)
    ':'         reduce using rule 49 (expression)


State 62

   61 operation: arith_binary .
   68 arith_binary: arith_binary . '+' expression
   69             | arith_binary . '-' expression
   70             | arith_binary . '*' expression
   71             | arith_binary . '/' expression

    '+'  shift, and go to state 98
    '-'  shift, and go to state 99
    '*'  shift, and go to state 100
    '/'  shift, and go to state 101

    ';'         reduce using rule 61 (operation)
    AND         reduce using rule 61 (operation)
    OR          reduce using rule 61 (operation)
    GREATER     reduce using rule 61 (operation)
    GREATER_EQ  reduce using rule 61 (operation)
    LESS        reduce using rule 61 (operation)
    LESS_EQ     reduce using rule 61 (operation)
    EQUAL       reduce using rule 61 (operation)
    NOT_EQ      reduce using rule 61 (operation)


State 63

   65 single_operation: arith_single .

    ';'         reduce using rule 65 (single_operation)
    AND         reduce using rule 65 (single_operation)
    OR          reduce using rule 65 (single_operation)
    GREATER     reduce using rule 65 (single_operation)
    GREATER_EQ  reduce using rule 65 (single_operation)
    LESS        reduce using rule 65 (single_operation)
    LESS_EQ     reduce using rule 65 (single_operation)
    EQUAL       reduce using rule 65 (single_operation)
    NOT_EQ      reduce using rule 65 (single_operation)
    '+'         reduce using rule 65 (single_operation)
    '-'         reduce using rule 65 (single_operation)
    '*'         reduce using rule 65 (single_operation)
    '/'         reduce using rule 65 (single_operation)
    FILTER      reduce using rule 65 (single_operation)
    MAP         reduce using rule 65 (single_operation)
    ':'         reduce using rule 65 (single_operation)


State 64

   66 single_operation: lst_single .

    ';'         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)
    '+'         reduce using rule 66 (single_operation)
    '-'         reduce using rule 66 (single_operation)
    '*'         reduce using rule 66 (single_operation)
    '/'         reduce using rule 66 (single_operation)
    FILTER      reduce using rule 66 (single_operation)
    MAP         reduce using rule 66 (single_operation)
    ':'         reduce using rule 66 (single_operation)


State 65

   62 operation: lst_binary .

    ';'         reduce using rule 62 (operation)
    AND         reduce using rule 62 (operation)
    OR          reduce using rule 62 (operation)
    GREATER     reduce using rule 62 (operation)
    GREATER_EQ  reduce using rule 62 (operation)
    LESS        reduce using rule 62 (operation)
    LESS_EQ     reduce using rule 62 (operation)
    EQUAL       reduce using rule 62 (operation)
    NOT_EQ      reduce using rule 62 (operation)


State 66

   47 func_calling: ID '(' . lst_params ')'

    NUM_INT    shift, and go to state 153
    NUM_FLOAT  shift, and go to state 154
    NIL_CNST   shift, and go to state 155
    ID         shift, and go to state 156
    '+'        shift, and go to state 157
    '-'        shift, and go to state 158
    '%'        shift, and go to state 159
    '?'        shift, and go to state 160
    '!'        shift, and go to state 161

    ')'  reduce using rule 18 (lst_params)

    lst_params          go to state 102
    lst_calling_params  go to state 103
    func_calling        go to state 162
    expression          go to state 163
    const               go to state 164
    number              go to state 165
    operation           go to state 104
    single_operation    go to state 166
    arith_binary        go to state 167
    arith_single        go to state 168
    lst_single          go to state 169
    lst_binary          go to state 170


State 67

   39 init_stmt: ID '=' . operation

    NUM_INT    shift, and go to state 29
    NUM_FLOAT  shift, and go to state 30
    NIL_CNST   shift, and go to state 31
    ID         shift, and go to state 68
    '+'        shift, and go to state 40
    '-'        shift, and go to state 41
    '%'        shift, and go to state 42
    '?'        shift, and go to state 43
    '!'        shift, and go to state 44

    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    operation         go to state 105
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 68

   47 func_calling: ID . '(' lst_params ')'
   50 expression: ID .

    '('  shift, and go to state 66

    ';'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)
    FILTER      reduce using rule 50 (expression)
    MAP         reduce using rule 50 (expression)
    ':'         reduce using rule 50 (expression)


State 69

   35 return_stmt: RETURN_STM operation . ';'
   63 operation: operation . relation_operator expression
   64          | operation . log_operator expression

    ';'         shift, and go to state 106
    AND         shift, and go to state 88
    OR          shift, and go to state 89
    GREATER     shift, and go to state 90
    GREATER_EQ  shift, and go to state 91
    LESS        shift, and go to state 92
    LESS_EQ     shift, and go to state 93
    EQUAL       shift, and go to state 94
    NOT_EQ      shift, and go to state 95

    log_operator       go to state 96
    relation_operator  go to state 97


State 70

   33 conditional_stmt: IF_STMT '(' . operation ')' command
   34                 | IF_STMT '(' . operation ')' command ELSE_STMT command

    NUM_INT    shift, and go to state 171
    NUM_FLOAT  shift, and go to state 172
    NIL_CNST   shift, and go to state 173
    ID         shift, and go to state 174
    '+'        shift, and go to state 175
    '-'        shift, and go to state 176
    '%'        shift, and go to state 177
    '?'        shift, and go to state 178
    '!'        shift, and go to state 179

    func_calling      go to state 180
    expression        go to state 181
    const             go to state 182
    number            go to state 183
    operation         go to state 107
    single_operation  go to state 184
    arith_binary      go to state 185
    arith_single      go to state 186
    lst_single        go to state 187
    lst_binary        go to state 188


State 71

   37 iteration: FOR_STMT '(' . loop_condition ')' command

    ID  shift, and go to state 108

    loop_condition  go to state 109
    init_stmt       go to state 110


State 72

   42 output: OUTPUT_WRITE '(' . operation ')' ';'
   44       | OUTPUT_WRITE '(' . STRING ')' ';'

    NUM_INT    shift, and go to state 171
    NUM_FLOAT  shift, and go to state 172
    STRING     shift, and go to state 111
    NIL_CNST   shift, and go to state 173
    ID         shift, and go to state 174
    '+'        shift, and go to state 175
    '-'        shift, and go to state 176
    '%'        shift, and go to state 177
    '?'        shift, and go to state 178
    '!'        shift, and go to state 179

    func_calling      go to state 180
    expression        go to state 181
    const             go to state 182
    number            go to state 183
    operation         go to state 112
    single_operation  go to state 184
    arith_binary      go to state 185
    arith_single      go to state 186
    lst_single        go to state 187
    lst_binary        go to state 188


State 73

   43 output: OUTPUT_WRITELN '(' . operation ')' ';'
   45       | OUTPUT_WRITELN '(' . STRING ')' ';'

    NUM_INT    shift, and go to state 171
    NUM_FLOAT  shift, and go to state 172
    STRING     shift, and go to state 113
    NIL_CNST   shift, and go to state 173
    ID         shift, and go to state 174
    '+'        shift, and go to state 175
    '-'        shift, and go to state 176
    '%'        shift, and go to state 177
    '?'        shift, and go to state 178
    '!'        shift, and go to state 179

    func_calling      go to state 180
    expression        go to state 181
    const             go to state 182
    number            go to state 183
    operation         go to state 114
    single_operation  go to state 184
    arith_binary      go to state 185
    arith_single      go to state 186
    lst_single        go to state 187
    lst_binary        go to state 188


State 74

   46 input: INPUT_READ '(' . expression ')' ';'

    NUM_INT    shift, and go to state 189
    NUM_FLOAT  shift, and go to state 190
    NIL_CNST   shift, and go to state 191
    ID         shift, and go to state 192
    '+'        shift, and go to state 193
    '-'        shift, and go to state 194
    '%'        shift, and go to state 195
    '?'        shift, and go to state 196
    '!'        shift, and go to state 197

    func_calling      go to state 198
    expression        go to state 115
    const             go to state 199
    number            go to state 200
    single_operation  go to state 201
    arith_single      go to state 202
    lst_single        go to state 203


State 75

   31 command: '{' block_commands . '}'

    '}'  shift, and go to state 116


State 76

   73 arith_single: '+' expression .

    ';'         reduce using rule 73 (arith_single)
    AND         reduce using rule 73 (arith_single)
    OR          reduce using rule 73 (arith_single)
    GREATER     reduce using rule 73 (arith_single)
    GREATER_EQ  reduce using rule 73 (arith_single)
    LESS        reduce using rule 73 (arith_single)
    LESS_EQ     reduce using rule 73 (arith_single)
    EQUAL       reduce using rule 73 (arith_single)
    NOT_EQ      reduce using rule 73 (arith_single)
    '+'         reduce using rule 73 (arith_single)
    '-'         reduce using rule 73 (arith_single)
    '*'         reduce using rule 73 (arith_single)
    '/'         reduce using rule 73 (arith_single)
    FILTER      reduce using rule 73 (arith_single)
    MAP         reduce using rule 73 (arith_single)
    ':'         reduce using rule 73 (arith_single)


State 77

   74 arith_single: '-' expression .

    ';'         reduce using rule 74 (arith_single)
    AND         reduce using rule 74 (arith_single)
    OR          reduce using rule 74 (arith_single)
    GREATER     reduce using rule 74 (arith_single)
    GREATER_EQ  reduce using rule 74 (arith_single)
    LESS        reduce using rule 74 (arith_single)
    LESS_EQ     reduce using rule 74 (arith_single)
    EQUAL       reduce using rule 74 (arith_single)
    NOT_EQ      reduce using rule 74 (arith_single)
    '+'         reduce using rule 74 (arith_single)
    '-'         reduce using rule 74 (arith_single)
    '*'         reduce using rule 74 (arith_single)
    '/'         reduce using rule 74 (arith_single)
    FILTER      reduce using rule 74 (arith_single)
    MAP         reduce using rule 74 (arith_single)
    ':'         reduce using rule 74 (arith_single)


State 78

   75 lst_single: '%' expression .

    ';'         reduce using rule 75 (lst_single)
    AND         reduce using rule 75 (lst_single)
    OR          reduce using rule 75 (lst_single)
    GREATER     reduce using rule 75 (lst_single)
    GREATER_EQ  reduce using rule 75 (lst_single)
    LESS        reduce using rule 75 (lst_single)
    LESS_EQ     reduce using rule 75 (lst_single)
    EQUAL       reduce using rule 75 (lst_single)
    NOT_EQ      reduce using rule 75 (lst_single)
    '+'         reduce using rule 75 (lst_single)
    '-'         reduce using rule 75 (lst_single)
    '*'         reduce using rule 75 (lst_single)
    '/'         reduce using rule 75 (lst_single)
    FILTER      reduce using rule 75 (lst_single)
    MAP         reduce using rule 75 (lst_single)
    ':'         reduce using rule 75 (lst_single)


State 79

   76 lst_single: '?' expression .

    ';'         reduce using rule 76 (lst_single)
    AND         reduce using rule 76 (lst_single)
    OR          reduce using rule 76 (lst_single)
    GREATER     reduce using rule 76 (lst_single)
    GREATER_EQ  reduce using rule 76 (lst_single)
    LESS        reduce using rule 76 (lst_single)
    LESS_EQ     reduce using rule 76 (lst_single)
    EQUAL       reduce using rule 76 (lst_single)
    NOT_EQ      reduce using rule 76 (lst_single)
    '+'         reduce using rule 76 (lst_single)
    '-'         reduce using rule 76 (lst_single)
    '*'         reduce using rule 76 (lst_single)
    '/'         reduce using rule 76 (lst_single)
    FILTER      reduce using rule 76 (lst_single)
    MAP         reduce using rule 76 (lst_single)
    ':'         reduce using rule 76 (lst_single)


State 80

   67 single_operation: '!' expression .

    ';'         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)
    '+'         reduce using rule 67 (single_operation)
    '-'         reduce using rule 67 (single_operation)
    '*'         reduce using rule 67 (single_operation)
    '/'         reduce using rule 67 (single_operation)
    FILTER      reduce using rule 67 (single_operation)
    MAP         reduce using rule 67 (single_operation)
    ':'         reduce using rule 67 (single_operation)


State 81

    9 func_declaration: unq_declaration $@1 '(' params ')' '{' block_commands '}' .

    $end     reduce using rule 9 (func_declaration)
    error    reduce using rule 9 (func_declaration)
    T_INT    reduce using rule 9 (func_declaration)
    T_FLOAT  reduce using rule 9 (func_declaration)


State 82

   22 block_commands: command block_commands .

    '}'  reduce using rule 22 (block_commands)


State 83

   36 init_variable: init_stmt ';' .

    NUM_INT         reduce using rule 36 (init_variable)
    NUM_FLOAT       reduce using rule 36 (init_variable)
    NIL_CNST        reduce using rule 36 (init_variable)
    ID              reduce using rule 36 (init_variable)
    RETURN_STM      reduce using rule 36 (init_variable)
    T_INT           reduce using rule 36 (init_variable)
    T_FLOAT         reduce using rule 36 (init_variable)
    IF_STMT         reduce using rule 36 (init_variable)
    FOR_STMT        reduce using rule 36 (init_variable)
    OUTPUT_WRITE    reduce using rule 36 (init_variable)
    OUTPUT_WRITELN  reduce using rule 36 (init_variable)
    INPUT_READ      reduce using rule 36 (init_variable)
    '{'             reduce using rule 36 (init_variable)
    '}'             reduce using rule 36 (init_variable)
    '+'             reduce using rule 36 (init_variable)
    '-'             reduce using rule 36 (init_variable)
    '%'             reduce using rule 36 (init_variable)
    '?'             reduce using rule 36 (init_variable)
    '!'             reduce using rule 36 (init_variable)


State 84

   77 lst_binary: expression FILTER . expression

    NUM_INT    shift, and go to state 204
    NUM_FLOAT  shift, and go to state 205
    NIL_CNST   shift, and go to state 206
    ID         shift, and go to state 207
    '+'        shift, and go to state 208
    '-'        shift, and go to state 209
    '%'        shift, and go to state 210
    '?'        shift, and go to state 211
    '!'        shift, and go to state 212

    func_calling      go to state 213
    expression        go to state 117
    const             go to state 214
    number            go to state 215
    single_operation  go to state 216
    arith_single      go to state 217
    lst_single        go to state 218


State 85

   78 lst_binary: expression MAP . expression

    NUM_INT    shift, and go to state 204
    NUM_FLOAT  shift, and go to state 205
    NIL_CNST   shift, and go to state 206
    ID         shift, and go to state 207
    '+'        shift, and go to state 208
    '-'        shift, and go to state 209
    '%'        shift, and go to state 210
    '?'        shift, and go to state 211
    '!'        shift, and go to state 212

    func_calling      go to state 213
    expression        go to state 118
    const             go to state 214
    number            go to state 215
    single_operation  go to state 216
    arith_single      go to state 217
    lst_single        go to state 218


State 86

   79 lst_binary: expression ':' . expression

    NUM_INT    shift, and go to state 204
    NUM_FLOAT  shift, and go to state 205
    NIL_CNST   shift, and go to state 206
    ID         shift, and go to state 207
    '+'        shift, and go to state 208
    '-'        shift, and go to state 209
    '%'        shift, and go to state 210
    '?'        shift, and go to state 211
    '!'        shift, and go to state 212

    func_calling      go to state 213
    expression        go to state 119
    const             go to state 214
    number            go to state 215
    single_operation  go to state 216
    arith_single      go to state 217
    lst_single        go to state 218


State 87

   32 command: operation ';' .

    NUM_INT         reduce using rule 32 (command)
    NUM_FLOAT       reduce using rule 32 (command)
    NIL_CNST        reduce using rule 32 (command)
    ID              reduce using rule 32 (command)
    RETURN_STM      reduce using rule 32 (command)
    T_INT           reduce using rule 32 (command)
    T_FLOAT         reduce using rule 32 (command)
    IF_STMT         reduce using rule 32 (command)
    FOR_STMT        reduce using rule 32 (command)
    OUTPUT_WRITE    reduce using rule 32 (command)
    OUTPUT_WRITELN  reduce using rule 32 (command)
    INPUT_READ      reduce using rule 32 (command)
    '{'             reduce using rule 32 (command)
    '}'             reduce using rule 32 (command)
    '+'             reduce using rule 32 (command)
    '-'             reduce using rule 32 (command)
    '%'             reduce using rule 32 (command)
    '?'             reduce using rule 32 (command)
    '!'             reduce using rule 32 (command)


State 88

   80 log_operator: AND .

    NUM_INT    reduce using rule 80 (log_operator)
    NUM_FLOAT  reduce using rule 80 (log_operator)
    NIL_CNST   reduce using rule 80 (log_operator)
    ID         reduce using rule 80 (log_operator)
    '+'        reduce using rule 80 (log_operator)
    '-'        reduce using rule 80 (log_operator)
    '%'        reduce using rule 80 (log_operator)
    '?'        reduce using rule 80 (log_operator)
    '!'        reduce using rule 80 (log_operator)


State 89

   81 log_operator: OR .

    NUM_INT    reduce using rule 81 (log_operator)
    NUM_FLOAT  reduce using rule 81 (log_operator)
    NIL_CNST   reduce using rule 81 (log_operator)
    ID         reduce using rule 81 (log_operator)
    '+'        reduce using rule 81 (log_operator)
    '-'        reduce using rule 81 (log_operator)
    '%'        reduce using rule 81 (log_operator)
    '?'        reduce using rule 81 (log_operator)
    '!'        reduce using rule 81 (log_operator)


State 90

   82 relation_operator: GREATER .

    NUM_INT    reduce using rule 82 (relation_operator)
    NUM_FLOAT  reduce using rule 82 (relation_operator)
    NIL_CNST   reduce using rule 82 (relation_operator)
    ID         reduce using rule 82 (relation_operator)
    '+'        reduce using rule 82 (relation_operator)
    '-'        reduce using rule 82 (relation_operator)
    '%'        reduce using rule 82 (relation_operator)
    '?'        reduce using rule 82 (relation_operator)
    '!'        reduce using rule 82 (relation_operator)


State 91

   83 relation_operator: GREATER_EQ .

    NUM_INT    reduce using rule 83 (relation_operator)
    NUM_FLOAT  reduce using rule 83 (relation_operator)
    NIL_CNST   reduce using rule 83 (relation_operator)
    ID         reduce using rule 83 (relation_operator)
    '+'        reduce using rule 83 (relation_operator)
    '-'        reduce using rule 83 (relation_operator)
    '%'        reduce using rule 83 (relation_operator)
    '?'        reduce using rule 83 (relation_operator)
    '!'        reduce using rule 83 (relation_operator)


State 92

   84 relation_operator: LESS .

    NUM_INT    reduce using rule 84 (relation_operator)
    NUM_FLOAT  reduce using rule 84 (relation_operator)
    NIL_CNST   reduce using rule 84 (relation_operator)
    ID         reduce using rule 84 (relation_operator)
    '+'        reduce using rule 84 (relation_operator)
    '-'        reduce using rule 84 (relation_operator)
    '%'        reduce using rule 84 (relation_operator)
    '?'        reduce using rule 84 (relation_operator)
    '!'        reduce using rule 84 (relation_operator)


State 93

   85 relation_operator: LESS_EQ .

    NUM_INT    reduce using rule 85 (relation_operator)
    NUM_FLOAT  reduce using rule 85 (relation_operator)
    NIL_CNST   reduce using rule 85 (relation_operator)
    ID         reduce using rule 85 (relation_operator)
    '+'        reduce using rule 85 (relation_operator)
    '-'        reduce using rule 85 (relation_operator)
    '%'        reduce using rule 85 (relation_operator)
    '?'        reduce using rule 85 (relation_operator)
    '!'        reduce using rule 85 (relation_operator)


State 94

   86 relation_operator: EQUAL .

    NUM_INT    reduce using rule 86 (relation_operator)
    NUM_FLOAT  reduce using rule 86 (relation_operator)
    NIL_CNST   reduce using rule 86 (relation_operator)
    ID         reduce using rule 86 (relation_operator)
    '+'        reduce using rule 86 (relation_operator)
    '-'        reduce using rule 86 (relation_operator)
    '%'        reduce using rule 86 (relation_operator)
    '?'        reduce using rule 86 (relation_operator)
    '!'        reduce using rule 86 (relation_operator)


State 95

   87 relation_operator: NOT_EQ .

    NUM_INT    reduce using rule 87 (relation_operator)
    NUM_FLOAT  reduce using rule 87 (relation_operator)
    NIL_CNST   reduce using rule 87 (relation_operator)
    ID         reduce using rule 87 (relation_operator)
    '+'        reduce using rule 87 (relation_operator)
    '-'        reduce using rule 87 (relation_operator)
    '%'        reduce using rule 87 (relation_operator)
    '?'        reduce using rule 87 (relation_operator)
    '!'        reduce using rule 87 (relation_operator)


State 96

   64 operation: operation log_operator . expression

    NUM_INT    shift, and go to state 204
    NUM_FLOAT  shift, and go to state 205
    NIL_CNST   shift, and go to state 206
    ID         shift, and go to state 207
    '+'        shift, and go to state 208
    '-'        shift, and go to state 209
    '%'        shift, and go to state 210
    '?'        shift, and go to state 211
    '!'        shift, and go to state 212

    func_calling      go to state 213
    expression        go to state 120
    const             go to state 214
    number            go to state 215
    single_operation  go to state 216
    arith_single      go to state 217
    lst_single        go to state 218


State 97

   63 operation: operation relation_operator . expression

    NUM_INT    shift, and go to state 204
    NUM_FLOAT  shift, and go to state 205
    NIL_CNST   shift, and go to state 206
    ID         shift, and go to state 207
    '+'        shift, and go to state 208
    '-'        shift, and go to state 209
    '%'        shift, and go to state 210
    '?'        shift, and go to state 211
    '!'        shift, and go to state 212

    func_calling      go to state 213
    expression        go to state 121
    const             go to state 214
    number            go to state 215
    single_operation  go to state 216
    arith_single      go to state 217
    lst_single        go to state 218


State 98

   68 arith_binary: arith_binary '+' . expression

    NUM_INT    shift, and go to state 219
    NUM_FLOAT  shift, and go to state 220
    NIL_CNST   shift, and go to state 221
    ID         shift, and go to state 222
    '+'        shift, and go to state 223
    '-'        shift, and go to state 224
    '%'        shift, and go to state 225
    '?'        shift, and go to state 226
    '!'        shift, and go to state 227

    func_calling      go to state 228
    expression        go to state 122
    const             go to state 229
    number            go to state 230
    single_operation  go to state 231
    arith_single      go to state 232
    lst_single        go to state 233


State 99

   69 arith_binary: arith_binary '-' . expression

    NUM_INT    shift, and go to state 219
    NUM_FLOAT  shift, and go to state 220
    NIL_CNST   shift, and go to state 221
    ID         shift, and go to state 222
    '+'        shift, and go to state 223
    '-'        shift, and go to state 224
    '%'        shift, and go to state 225
    '?'        shift, and go to state 226
    '!'        shift, and go to state 227

    func_calling      go to state 228
    expression        go to state 123
    const             go to state 229
    number            go to state 230
    single_operation  go to state 231
    arith_single      go to state 232
    lst_single        go to state 233


State 100

   70 arith_binary: arith_binary '*' . expression

    NUM_INT    shift, and go to state 219
    NUM_FLOAT  shift, and go to state 220
    NIL_CNST   shift, and go to state 221
    ID         shift, and go to state 222
    '+'        shift, and go to state 223
    '-'        shift, and go to state 224
    '%'        shift, and go to state 225
    '?'        shift, and go to state 226
    '!'        shift, and go to state 227

    func_calling      go to state 228
    expression        go to state 124
    const             go to state 229
    number            go to state 230
    single_operation  go to state 231
    arith_single      go to state 232
    lst_single        go to state 233


State 101

   71 arith_binary: arith_binary '/' . expression

    NUM_INT    shift, and go to state 219
    NUM_FLOAT  shift, and go to state 220
    NIL_CNST   shift, and go to state 221
    ID         shift, and go to state 222
    '+'        shift, and go to state 223
    '-'        shift, and go to state 224
    '%'        shift, and go to state 225
    '?'        shift, and go to state 226
    '!'        shift, and go to state 227

    func_calling      go to state 228
    expression        go to state 125
    const             go to state 229
    number            go to state 230
    single_operation  go to state 231
    arith_single      go to state 232
    lst_single        go to state 233


State 102

   47 func_calling: ID '(' lst_params . ')'

    ')'  shift, and go to state 126


State 103

   19 lst_params: lst_calling_params .

    ')'  reduce using rule 19 (lst_params)


State 104

   20 lst_calling_params: operation . ',' lst_calling_params
   21                   | operation .
   63 operation: operation . relation_operator expression
   64          | operation . log_operator expression

    ','         shift, and go to state 127
    AND         shift, and go to state 88
    OR          shift, and go to state 89
    GREATER     shift, and go to state 90
    GREATER_EQ  shift, and go to state 91
    LESS        shift, and go to state 92
    LESS_EQ     shift, and go to state 93
    EQUAL       shift, and go to state 94
    NOT_EQ      shift, and go to state 95

    ')'  reduce using rule 21 (lst_calling_params)

    log_operator       go to state 234
    relation_operator  go to state 235


State 105

   39 init_stmt: ID '=' operation .
   63 operation: operation . relation_operator expression
   64          | operation . log_operator expression

    AND         shift, and go to state 88
    OR          shift, and go to state 89
    GREATER     shift, and go to state 90
    GREATER_EQ  shift, and go to state 91
    LESS        shift, and go to state 92
    LESS_EQ     shift, and go to state 93
    EQUAL       shift, and go to state 94
    NOT_EQ      shift, and go to state 95

    ';'  reduce using rule 39 (init_stmt)

    log_operator       go to state 96
    relation_operator  go to state 97


State 106

   35 return_stmt: RETURN_STM operation ';' .

    NUM_INT         reduce using rule 35 (return_stmt)
    NUM_FLOAT       reduce using rule 35 (return_stmt)
    NIL_CNST        reduce using rule 35 (return_stmt)
    ID              reduce using rule 35 (return_stmt)
    RETURN_STM      reduce using rule 35 (return_stmt)
    T_INT           reduce using rule 35 (return_stmt)
    T_FLOAT         reduce using rule 35 (return_stmt)
    IF_STMT         reduce using rule 35 (return_stmt)
    FOR_STMT        reduce using rule 35 (return_stmt)
    OUTPUT_WRITE    reduce using rule 35 (return_stmt)
    OUTPUT_WRITELN  reduce using rule 35 (return_stmt)
    INPUT_READ      reduce using rule 35 (return_stmt)
    '{'             reduce using rule 35 (return_stmt)
    '}'             reduce using rule 35 (return_stmt)
    '+'             reduce using rule 35 (return_stmt)
    '-'             reduce using rule 35 (return_stmt)
    '%'             reduce using rule 35 (return_stmt)
    '?'             reduce using rule 35 (return_stmt)
    '!'             reduce using rule 35 (return_stmt)


State 107

   33 conditional_stmt: IF_STMT '(' operation . ')' command
   34                 | IF_STMT '(' operation . ')' command ELSE_STMT command
   63 operation: operation . relation_operator expression
   64          | operation . log_operator expression

    ')'         shift, and go to state 128
    AND         shift, and go to state 88
    OR          shift, and go to state 89
    GREATER     shift, and go to state 90
    GREATER_EQ  shift, and go to state 91
    LESS        shift, and go to state 92
    LESS_EQ     shift, and go to state 93
    EQUAL       shift, and go to state 94
    NOT_EQ      shift, and go to state 95

    log_operator       go to state 236
    relation_operator  go to state 237


State 108

   39 init_stmt: ID . '=' operation

    '='  shift, and go to state 67


State 109

   37 iteration: FOR_STMT '(' loop_condition . ')' command

    ')'  shift, and go to state 129


State 110

   38 loop_condition: init_stmt . ';' operation ';' update_stmt

    ';'  shift, and go to state 130


State 111

   44 output: OUTPUT_WRITE '(' STRING . ')' ';'

    ')'  shift, and go to state 131


State 112

   42 output: OUTPUT_WRITE '(' operation . ')' ';'
   63 operation: operation . relation_operator expression
   64          | operation . log_operator expression

    ')'         shift, and go to state 132
    AND         shift, and go to state 88
    OR          shift, and go to state 89
    GREATER     shift, and go to state 90
    GREATER_EQ  shift, and go to state 91
    LESS        shift, and go to state 92
    LESS_EQ     shift, and go to state 93
    EQUAL       shift, and go to state 94
    NOT_EQ      shift, and go to state 95

    log_operator       go to state 236
    relation_operator  go to state 237


State 113

   45 output: OUTPUT_WRITELN '(' STRING . ')' ';'

    ')'  shift, and go to state 133


State 114

   43 output: OUTPUT_WRITELN '(' operation . ')' ';'
   63 operation: operation . relation_operator expression
   64          | operation . log_operator expression

    ')'         shift, and go to state 134
    AND         shift, and go to state 88
    OR          shift, and go to state 89
    GREATER     shift, and go to state 90
    GREATER_EQ  shift, and go to state 91
    LESS        shift, and go to state 92
    LESS_EQ     shift, and go to state 93
    EQUAL       shift, and go to state 94
    NOT_EQ      shift, and go to state 95

    log_operator       go to state 236
    relation_operator  go to state 237


State 115

   46 input: INPUT_READ '(' expression . ')' ';'

    ')'  shift, and go to state 135


State 116

   31 command: '{' block_commands '}' .

    NUM_INT         reduce using rule 31 (command)
    NUM_FLOAT       reduce using rule 31 (command)
    NIL_CNST        reduce using rule 31 (command)
    ID              reduce using rule 31 (command)
    RETURN_STM      reduce using rule 31 (command)
    T_INT           reduce using rule 31 (command)
    T_FLOAT         reduce using rule 31 (command)
    IF_STMT         reduce using rule 31 (command)
    FOR_STMT        reduce using rule 31 (command)
    OUTPUT_WRITE    reduce using rule 31 (command)
    OUTPUT_WRITELN  reduce using rule 31 (command)
    INPUT_READ      reduce using rule 31 (command)
    '{'             reduce using rule 31 (command)
    '}'             reduce using rule 31 (command)
    '+'             reduce using rule 31 (command)
    '-'             reduce using rule 31 (command)
    '%'             reduce using rule 31 (command)
    '?'             reduce using rule 31 (command)
    '!'             reduce using rule 31 (command)


State 117

   77 lst_binary: expression FILTER expression .

    ';'         reduce using rule 77 (lst_binary)
    AND         reduce using rule 77 (lst_binary)
    OR          reduce using rule 77 (lst_binary)
    GREATER     reduce using rule 77 (lst_binary)
    GREATER_EQ  reduce using rule 77 (lst_binary)
    LESS        reduce using rule 77 (lst_binary)
    LESS_EQ     reduce using rule 77 (lst_binary)
    EQUAL       reduce using rule 77 (lst_binary)
    NOT_EQ      reduce using rule 77 (lst_binary)


State 118

   78 lst_binary: expression MAP expression .

    ';'         reduce using rule 78 (lst_binary)
    AND         reduce using rule 78 (lst_binary)
    OR          reduce using rule 78 (lst_binary)
    GREATER     reduce using rule 78 (lst_binary)
    GREATER_EQ  reduce using rule 78 (lst_binary)
    LESS        reduce using rule 78 (lst_binary)
    LESS_EQ     reduce using rule 78 (lst_binary)
    EQUAL       reduce using rule 78 (lst_binary)
    NOT_EQ      reduce using rule 78 (lst_binary)


State 119

   79 lst_binary: expression ':' expression .

    ';'         reduce using rule 79 (lst_binary)
    AND         reduce using rule 79 (lst_binary)
    OR          reduce using rule 79 (lst_binary)
    GREATER     reduce using rule 79 (lst_binary)
    GREATER_EQ  reduce using rule 79 (lst_binary)
    LESS        reduce using rule 79 (lst_binary)
    LESS_EQ     reduce using rule 79 (lst_binary)
    EQUAL       reduce using rule 79 (lst_binary)
    NOT_EQ      reduce using rule 79 (lst_binary)


State 120

   64 operation: operation log_operator expression .

    ';'         reduce using rule 64 (operation)
    AND         reduce using rule 64 (operation)
    OR          reduce using rule 64 (operation)
    GREATER     reduce using rule 64 (operation)
    GREATER_EQ  reduce using rule 64 (operation)
    LESS        reduce using rule 64 (operation)
    LESS_EQ     reduce using rule 64 (operation)
    EQUAL       reduce using rule 64 (operation)
    NOT_EQ      reduce using rule 64 (operation)


State 121

   63 operation: operation relation_operator expression .

    ';'         reduce using rule 63 (operation)
    AND         reduce using rule 63 (operation)
    OR          reduce using rule 63 (operation)
    GREATER     reduce using rule 63 (operation)
    GREATER_EQ  reduce using rule 63 (operation)
    LESS        reduce using rule 63 (operation)
    LESS_EQ     reduce using rule 63 (operation)
    EQUAL       reduce using rule 63 (operation)
    NOT_EQ      reduce using rule 63 (operation)


State 122

   68 arith_binary: arith_binary '+' expression .

    ';'         reduce using rule 68 (arith_binary)
    AND         reduce using rule 68 (arith_binary)
    OR          reduce using rule 68 (arith_binary)
    GREATER     reduce using rule 68 (arith_binary)
    GREATER_EQ  reduce using rule 68 (arith_binary)
    LESS        reduce using rule 68 (arith_binary)
    LESS_EQ     reduce using rule 68 (arith_binary)
    EQUAL       reduce using rule 68 (arith_binary)
    NOT_EQ      reduce using rule 68 (arith_binary)
    '+'         reduce using rule 68 (arith_binary)
    '-'         reduce using rule 68 (arith_binary)
    '*'         reduce using rule 68 (arith_binary)
    '/'         reduce using rule 68 (arith_binary)


State 123

   69 arith_binary: arith_binary '-' expression .

    ';'         reduce using rule 69 (arith_binary)
    AND         reduce using rule 69 (arith_binary)
    OR          reduce using rule 69 (arith_binary)
    GREATER     reduce using rule 69 (arith_binary)
    GREATER_EQ  reduce using rule 69 (arith_binary)
    LESS        reduce using rule 69 (arith_binary)
    LESS_EQ     reduce using rule 69 (arith_binary)
    EQUAL       reduce using rule 69 (arith_binary)
    NOT_EQ      reduce using rule 69 (arith_binary)
    '+'         reduce using rule 69 (arith_binary)
    '-'         reduce using rule 69 (arith_binary)
    '*'         reduce using rule 69 (arith_binary)
    '/'         reduce using rule 69 (arith_binary)


State 124

   70 arith_binary: arith_binary '*' expression .

    ';'         reduce using rule 70 (arith_binary)
    AND         reduce using rule 70 (arith_binary)
    OR          reduce using rule 70 (arith_binary)
    GREATER     reduce using rule 70 (arith_binary)
    GREATER_EQ  reduce using rule 70 (arith_binary)
    LESS        reduce using rule 70 (arith_binary)
    LESS_EQ     reduce using rule 70 (arith_binary)
    EQUAL       reduce using rule 70 (arith_binary)
    NOT_EQ      reduce using rule 70 (arith_binary)
    '+'         reduce using rule 70 (arith_binary)
    '-'         reduce using rule 70 (arith_binary)
    '*'         reduce using rule 70 (arith_binary)
    '/'         reduce using rule 70 (arith_binary)


State 125

   71 arith_binary: arith_binary '/' expression .

    ';'         reduce using rule 71 (arith_binary)
    AND         reduce using rule 71 (arith_binary)
    OR          reduce using rule 71 (arith_binary)
    GREATER     reduce using rule 71 (arith_binary)
    GREATER_EQ  reduce using rule 71 (arith_binary)
    LESS        reduce using rule 71 (arith_binary)
    LESS_EQ     reduce using rule 71 (arith_binary)
    EQUAL       reduce using rule 71 (arith_binary)
    NOT_EQ      reduce using rule 71 (arith_binary)
    '+'         reduce using rule 71 (arith_binary)
    '-'         reduce using rule 71 (arith_binary)
    '*'         reduce using rule 71 (arith_binary)
    '/'         reduce using rule 71 (arith_binary)


State 126

   47 func_calling: ID '(' lst_params ')' .

    ';'         reduce using rule 47 (func_calling)
    AND         reduce using rule 47 (func_calling)
    OR          reduce using rule 47 (func_calling)
    GREATER     reduce using rule 47 (func_calling)
    GREATER_EQ  reduce using rule 47 (func_calling)
    LESS        reduce using rule 47 (func_calling)
    LESS_EQ     reduce using rule 47 (func_calling)
    EQUAL       reduce using rule 47 (func_calling)
    NOT_EQ      reduce using rule 47 (func_calling)
    '+'         reduce using rule 47 (func_calling)
    '-'         reduce using rule 47 (func_calling)
    '*'         reduce using rule 47 (func_calling)
    '/'         reduce using rule 47 (func_calling)
    FILTER      reduce using rule 47 (func_calling)
    MAP         reduce using rule 47 (func_calling)
    ':'         reduce using rule 47 (func_calling)


State 127

   20 lst_calling_params: operation ',' . lst_calling_params

    NUM_INT    shift, and go to state 153
    NUM_FLOAT  shift, and go to state 154
    NIL_CNST   shift, and go to state 155
    ID         shift, and go to state 156
    '+'        shift, and go to state 157
    '-'        shift, and go to state 158
    '%'        shift, and go to state 159
    '?'        shift, and go to state 160
    '!'        shift, and go to state 161

    lst_calling_params  go to state 136
    func_calling        go to state 162
    expression          go to state 163
    const               go to state 164
    number              go to state 165
    operation           go to state 104
    single_operation    go to state 166
    arith_binary        go to state 167
    arith_single        go to state 168
    lst_single          go to state 169
    lst_binary          go to state 170


State 128

   33 conditional_stmt: IF_STMT '(' operation ')' . command
   34                 | IF_STMT '(' operation ')' . command ELSE_STMT command

    NUM_INT         shift, and go to state 29
    NUM_FLOAT       shift, and go to state 30
    NIL_CNST        shift, and go to state 31
    ID              shift, and go to state 32
    RETURN_STM      shift, and go to state 238
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 239
    FOR_STMT        shift, and go to state 240
    OUTPUT_WRITE    shift, and go to state 241
    OUTPUT_WRITELN  shift, and go to state 242
    INPUT_READ      shift, and go to state 243
    '{'             shift, and go to state 244
    '+'             shift, and go to state 40
    '-'             shift, and go to state 41
    '%'             shift, and go to state 42
    '?'             shift, and go to state 43
    '!'             shift, and go to state 44

    var_declaration   go to state 245
    unq_declaration   go to state 246
    command           go to state 137
    conditional_stmt  go to state 247
    return_stmt       go to state 248
    init_variable     go to state 249
    iteration         go to state 250
    init_stmt         go to state 251
    output            go to state 252
    input             go to state 253
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 151
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 254
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 129

   37 iteration: FOR_STMT '(' loop_condition ')' . command

    NUM_INT         shift, and go to state 29
    NUM_FLOAT       shift, and go to state 30
    NIL_CNST        shift, and go to state 31
    ID              shift, and go to state 32
    RETURN_STM      shift, and go to state 33
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 34
    FOR_STMT        shift, and go to state 35
    OUTPUT_WRITE    shift, and go to state 36
    OUTPUT_WRITELN  shift, and go to state 37
    INPUT_READ      shift, and go to state 38
    '{'             shift, and go to state 39
    '+'             shift, and go to state 40
    '-'             shift, and go to state 41
    '%'             shift, and go to state 42
    '?'             shift, and go to state 43
    '!'             shift, and go to state 44

    var_declaration   go to state 45
    unq_declaration   go to state 46
    command           go to state 138
    conditional_stmt  go to state 49
    return_stmt       go to state 50
    init_variable     go to state 51
    iteration         go to state 52
    init_stmt         go to state 53
    output            go to state 54
    input             go to state 55
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 151
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 60
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 130

   38 loop_condition: init_stmt ';' . operation ';' update_stmt

    NUM_INT    shift, and go to state 29
    NUM_FLOAT  shift, and go to state 30
    NIL_CNST   shift, and go to state 31
    ID         shift, and go to state 68
    '+'        shift, and go to state 40
    '-'        shift, and go to state 41
    '%'        shift, and go to state 42
    '?'        shift, and go to state 43
    '!'        shift, and go to state 44

    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    operation         go to state 139
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 131

   44 output: OUTPUT_WRITE '(' STRING ')' . ';'

    ';'  shift, and go to state 140


State 132

   42 output: OUTPUT_WRITE '(' operation ')' . ';'

    ';'  shift, and go to state 141


State 133

   45 output: OUTPUT_WRITELN '(' STRING ')' . ';'

    ';'  shift, and go to state 142


State 134

   43 output: OUTPUT_WRITELN '(' operation ')' . ';'

    ';'  shift, and go to state 143


State 135

   46 input: INPUT_READ '(' expression ')' . ';'

    ';'  shift, and go to state 144


State 136

   20 lst_calling_params: operation ',' lst_calling_params .

    ')'  reduce using rule 20 (lst_calling_params)


State 137

   33 conditional_stmt: IF_STMT '(' operation ')' command .
   34                 | IF_STMT '(' operation ')' command . ELSE_STMT command

    ELSE_STMT  shift, and go to state 145

    NUM_INT         reduce using rule 33 (conditional_stmt)
    NUM_FLOAT       reduce using rule 33 (conditional_stmt)
    NIL_CNST        reduce using rule 33 (conditional_stmt)
    ID              reduce using rule 33 (conditional_stmt)
    RETURN_STM      reduce using rule 33 (conditional_stmt)
    T_INT           reduce using rule 33 (conditional_stmt)
    T_FLOAT         reduce using rule 33 (conditional_stmt)
    IF_STMT         reduce using rule 33 (conditional_stmt)
    FOR_STMT        reduce using rule 33 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 33 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 33 (conditional_stmt)
    INPUT_READ      reduce using rule 33 (conditional_stmt)
    '{'             reduce using rule 33 (conditional_stmt)
    '}'             reduce using rule 33 (conditional_stmt)
    '+'             reduce using rule 33 (conditional_stmt)
    '-'             reduce using rule 33 (conditional_stmt)
    '%'             reduce using rule 33 (conditional_stmt)
    '?'             reduce using rule 33 (conditional_stmt)
    '!'             reduce using rule 33 (conditional_stmt)


State 138

   37 iteration: FOR_STMT '(' loop_condition ')' command .

    NUM_INT         reduce using rule 37 (iteration)
    NUM_FLOAT       reduce using rule 37 (iteration)
    NIL_CNST        reduce using rule 37 (iteration)
    ID              reduce using rule 37 (iteration)
    RETURN_STM      reduce using rule 37 (iteration)
    T_INT           reduce using rule 37 (iteration)
    T_FLOAT         reduce using rule 37 (iteration)
    IF_STMT         reduce using rule 37 (iteration)
    FOR_STMT        reduce using rule 37 (iteration)
    OUTPUT_WRITE    reduce using rule 37 (iteration)
    OUTPUT_WRITELN  reduce using rule 37 (iteration)
    INPUT_READ      reduce using rule 37 (iteration)
    '{'             reduce using rule 37 (iteration)
    '}'             reduce using rule 37 (iteration)
    '+'             reduce using rule 37 (iteration)
    '-'             reduce using rule 37 (iteration)
    '%'             reduce using rule 37 (iteration)
    '?'             reduce using rule 37 (iteration)
    '!'             reduce using rule 37 (iteration)


State 139

   38 loop_condition: init_stmt ';' operation . ';' update_stmt
   63 operation: operation . relation_operator expression
   64          | operation . log_operator expression

    ';'         shift, and go to state 146
    AND         shift, and go to state 88
    OR          shift, and go to state 89
    GREATER     shift, and go to state 90
    GREATER_EQ  shift, and go to state 91
    LESS        shift, and go to state 92
    LESS_EQ     shift, and go to state 93
    EQUAL       shift, and go to state 94
    NOT_EQ      shift, and go to state 95

    log_operator       go to state 96
    relation_operator  go to state 97


State 140

   44 output: OUTPUT_WRITE '(' STRING ')' ';' .

    NUM_INT         reduce using rule 44 (output)
    NUM_FLOAT       reduce using rule 44 (output)
    NIL_CNST        reduce using rule 44 (output)
    ID              reduce using rule 44 (output)
    RETURN_STM      reduce using rule 44 (output)
    T_INT           reduce using rule 44 (output)
    T_FLOAT         reduce using rule 44 (output)
    IF_STMT         reduce using rule 44 (output)
    FOR_STMT        reduce using rule 44 (output)
    OUTPUT_WRITE    reduce using rule 44 (output)
    OUTPUT_WRITELN  reduce using rule 44 (output)
    INPUT_READ      reduce using rule 44 (output)
    '{'             reduce using rule 44 (output)
    '}'             reduce using rule 44 (output)
    '+'             reduce using rule 44 (output)
    '-'             reduce using rule 44 (output)
    '%'             reduce using rule 44 (output)
    '?'             reduce using rule 44 (output)
    '!'             reduce using rule 44 (output)


State 141

   42 output: OUTPUT_WRITE '(' operation ')' ';' .

    NUM_INT         reduce using rule 42 (output)
    NUM_FLOAT       reduce using rule 42 (output)
    NIL_CNST        reduce using rule 42 (output)
    ID              reduce using rule 42 (output)
    RETURN_STM      reduce using rule 42 (output)
    T_INT           reduce using rule 42 (output)
    T_FLOAT         reduce using rule 42 (output)
    IF_STMT         reduce using rule 42 (output)
    FOR_STMT        reduce using rule 42 (output)
    OUTPUT_WRITE    reduce using rule 42 (output)
    OUTPUT_WRITELN  reduce using rule 42 (output)
    INPUT_READ      reduce using rule 42 (output)
    '{'             reduce using rule 42 (output)
    '}'             reduce using rule 42 (output)
    '+'             reduce using rule 42 (output)
    '-'             reduce using rule 42 (output)
    '%'             reduce using rule 42 (output)
    '?'             reduce using rule 42 (output)
    '!'             reduce using rule 42 (output)


State 142

   45 output: OUTPUT_WRITELN '(' STRING ')' ';' .

    NUM_INT         reduce using rule 45 (output)
    NUM_FLOAT       reduce using rule 45 (output)
    NIL_CNST        reduce using rule 45 (output)
    ID              reduce using rule 45 (output)
    RETURN_STM      reduce using rule 45 (output)
    T_INT           reduce using rule 45 (output)
    T_FLOAT         reduce using rule 45 (output)
    IF_STMT         reduce using rule 45 (output)
    FOR_STMT        reduce using rule 45 (output)
    OUTPUT_WRITE    reduce using rule 45 (output)
    OUTPUT_WRITELN  reduce using rule 45 (output)
    INPUT_READ      reduce using rule 45 (output)
    '{'             reduce using rule 45 (output)
    '}'             reduce using rule 45 (output)
    '+'             reduce using rule 45 (output)
    '-'             reduce using rule 45 (output)
    '%'             reduce using rule 45 (output)
    '?'             reduce using rule 45 (output)
    '!'             reduce using rule 45 (output)


State 143

   43 output: OUTPUT_WRITELN '(' operation ')' ';' .

    NUM_INT         reduce using rule 43 (output)
    NUM_FLOAT       reduce using rule 43 (output)
    NIL_CNST        reduce using rule 43 (output)
    ID              reduce using rule 43 (output)
    RETURN_STM      reduce using rule 43 (output)
    T_INT           reduce using rule 43 (output)
    T_FLOAT         reduce using rule 43 (output)
    IF_STMT         reduce using rule 43 (output)
    FOR_STMT        reduce using rule 43 (output)
    OUTPUT_WRITE    reduce using rule 43 (output)
    OUTPUT_WRITELN  reduce using rule 43 (output)
    INPUT_READ      reduce using rule 43 (output)
    '{'             reduce using rule 43 (output)
    '}'             reduce using rule 43 (output)
    '+'             reduce using rule 43 (output)
    '-'             reduce using rule 43 (output)
    '%'             reduce using rule 43 (output)
    '?'             reduce using rule 43 (output)
    '!'             reduce using rule 43 (output)


State 144

   46 input: INPUT_READ '(' expression ')' ';' .

    NUM_INT         reduce using rule 46 (input)
    NUM_FLOAT       reduce using rule 46 (input)
    NIL_CNST        reduce using rule 46 (input)
    ID              reduce using rule 46 (input)
    RETURN_STM      reduce using rule 46 (input)
    T_INT           reduce using rule 46 (input)
    T_FLOAT         reduce using rule 46 (input)
    IF_STMT         reduce using rule 46 (input)
    FOR_STMT        reduce using rule 46 (input)
    OUTPUT_WRITE    reduce using rule 46 (input)
    OUTPUT_WRITELN  reduce using rule 46 (input)
    INPUT_READ      reduce using rule 46 (input)
    '{'             reduce using rule 46 (input)
    '}'             reduce using rule 46 (input)
    '+'             reduce using rule 46 (input)
    '-'             reduce using rule 46 (input)
    '%'             reduce using rule 46 (input)
    '?'             reduce using rule 46 (input)
    '!'             reduce using rule 46 (input)


State 145

   34 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT . command

    NUM_INT         shift, and go to state 29
    NUM_FLOAT       shift, and go to state 30
    NIL_CNST        shift, and go to state 31
    ID              shift, and go to state 32
    RETURN_STM      shift, and go to state 33
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 34
    FOR_STMT        shift, and go to state 35
    OUTPUT_WRITE    shift, and go to state 36
    OUTPUT_WRITELN  shift, and go to state 37
    INPUT_READ      shift, and go to state 38
    '{'             shift, and go to state 39
    '+'             shift, and go to state 40
    '-'             shift, and go to state 41
    '%'             shift, and go to state 42
    '?'             shift, and go to state 43
    '!'             shift, and go to state 44

    var_declaration   go to state 45
    unq_declaration   go to state 46
    command           go to state 147
    conditional_stmt  go to state 49
    return_stmt       go to state 50
    init_variable     go to state 51
    iteration         go to state 52
    init_stmt         go to state 53
    output            go to state 54
    input             go to state 55
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 151
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 60
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 146

   38 loop_condition: init_stmt ';' operation ';' . update_stmt

    ID  shift, and go to state 255

    ')'  reduce using rule 41 (update_stmt)

    init_stmt    go to state 148
    update_stmt  go to state 149


State 147

   34 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT command .

    NUM_INT         reduce using rule 34 (conditional_stmt)
    NUM_FLOAT       reduce using rule 34 (conditional_stmt)
    NIL_CNST        reduce using rule 34 (conditional_stmt)
    ID              reduce using rule 34 (conditional_stmt)
    RETURN_STM      reduce using rule 34 (conditional_stmt)
    T_INT           reduce using rule 34 (conditional_stmt)
    T_FLOAT         reduce using rule 34 (conditional_stmt)
    IF_STMT         reduce using rule 34 (conditional_stmt)
    FOR_STMT        reduce using rule 34 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 34 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 34 (conditional_stmt)
    INPUT_READ      reduce using rule 34 (conditional_stmt)
    '{'             reduce using rule 34 (conditional_stmt)
    '}'             reduce using rule 34 (conditional_stmt)
    '+'             reduce using rule 34 (conditional_stmt)
    '-'             reduce using rule 34 (conditional_stmt)
    '%'             reduce using rule 34 (conditional_stmt)
    '?'             reduce using rule 34 (conditional_stmt)
    '!'             reduce using rule 34 (conditional_stmt)


State 148

   40 update_stmt: init_stmt .

    ')'  reduce using rule 40 (update_stmt)


State 149

   38 loop_condition: init_stmt ';' operation ';' update_stmt .

    ')'  reduce using rule 38 (loop_condition)


State 150

   12 unq_declaration: type . $@2 ID

    ID  reduce using rule 11 ($@2)

    $@2  go to state 256


State 151

   12 unq_declaration: type . $@2 ID

    ID  reduce using rule 11 ($@2)

    $@2  go to state 257


State 152

   10 var_declaration: unq_declaration ';' .

    NUM_INT         reduce using rule 10 (var_declaration)
    NUM_FLOAT       reduce using rule 10 (var_declaration)
    NIL_CNST        reduce using rule 10 (var_declaration)
    ID              reduce using rule 10 (var_declaration)
    RETURN_STM      reduce using rule 10 (var_declaration)
    T_INT           reduce using rule 10 (var_declaration)
    T_FLOAT         reduce using rule 10 (var_declaration)
    IF_STMT         reduce using rule 10 (var_declaration)
    FOR_STMT        reduce using rule 10 (var_declaration)
    OUTPUT_WRITE    reduce using rule 10 (var_declaration)
    OUTPUT_WRITELN  reduce using rule 10 (var_declaration)
    INPUT_READ      reduce using rule 10 (var_declaration)
    '{'             reduce using rule 10 (var_declaration)
    '}'             reduce using rule 10 (var_declaration)
    '+'             reduce using rule 10 (var_declaration)
    '-'             reduce using rule 10 (var_declaration)
    '%'             reduce using rule 10 (var_declaration)
    '?'             reduce using rule 10 (var_declaration)
    '!'             reduce using rule 10 (var_declaration)


State 153

   54 number: NUM_INT .

    ')'         reduce using rule 54 (number)
    ','         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)
    '+'         reduce using rule 54 (number)
    '-'         reduce using rule 54 (number)
    '*'         reduce using rule 54 (number)
    '/'         reduce using rule 54 (number)
    FILTER      reduce using rule 54 (number)
    MAP         reduce using rule 54 (number)
    ':'         reduce using rule 54 (number)


State 154

   55 number: NUM_FLOAT .

    ')'         reduce using rule 55 (number)
    ','         reduce using rule 55 (number)
    AND         reduce using rule 55 (number)
    OR          reduce using rule 55 (number)
    GREATER     reduce using rule 55 (number)
    GREATER_EQ  reduce using rule 55 (number)
    LESS        reduce using rule 55 (number)
    LESS_EQ     reduce using rule 55 (number)
    EQUAL       reduce using rule 55 (number)
    NOT_EQ      reduce using rule 55 (number)
    '+'         reduce using rule 55 (number)
    '-'         reduce using rule 55 (number)
    '*'         reduce using rule 55 (number)
    '/'         reduce using rule 55 (number)
    FILTER      reduce using rule 55 (number)
    MAP         reduce using rule 55 (number)
    ':'         reduce using rule 55 (number)


State 155

   53 const: NIL_CNST .

    ')'         reduce using rule 53 (const)
    ','         reduce using rule 53 (const)
    AND         reduce using rule 53 (const)
    OR          reduce using rule 53 (const)
    GREATER     reduce using rule 53 (const)
    GREATER_EQ  reduce using rule 53 (const)
    LESS        reduce using rule 53 (const)
    LESS_EQ     reduce using rule 53 (const)
    EQUAL       reduce using rule 53 (const)
    NOT_EQ      reduce using rule 53 (const)
    '+'         reduce using rule 53 (const)
    '-'         reduce using rule 53 (const)
    '*'         reduce using rule 53 (const)
    '/'         reduce using rule 53 (const)
    FILTER      reduce using rule 53 (const)
    MAP         reduce using rule 53 (const)
    ':'         reduce using rule 53 (const)


State 156

   47 func_calling: ID . '(' lst_params ')'
   50 expression: ID .

    '('  shift, and go to state 258

    ')'         reduce using rule 50 (expression)
    ','         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)
    FILTER      reduce using rule 50 (expression)
    MAP         reduce using rule 50 (expression)
    ':'         reduce using rule 50 (expression)


State 157

   73 arith_single: '+' . expression

    NUM_INT    shift, and go to state 153
    NUM_FLOAT  shift, and go to state 154
    NIL_CNST   shift, and go to state 155
    ID         shift, and go to state 156
    '+'        shift, and go to state 157
    '-'        shift, and go to state 158
    '%'        shift, and go to state 159
    '?'        shift, and go to state 160
    '!'        shift, and go to state 161

    func_calling      go to state 162
    expression        go to state 259
    const             go to state 164
    number            go to state 165
    single_operation  go to state 166
    arith_single      go to state 168
    lst_single        go to state 169


State 158

   74 arith_single: '-' . expression

    NUM_INT    shift, and go to state 153
    NUM_FLOAT  shift, and go to state 154
    NIL_CNST   shift, and go to state 155
    ID         shift, and go to state 156
    '+'        shift, and go to state 157
    '-'        shift, and go to state 158
    '%'        shift, and go to state 159
    '?'        shift, and go to state 160
    '!'        shift, and go to state 161

    func_calling      go to state 162
    expression        go to state 260
    const             go to state 164
    number            go to state 165
    single_operation  go to state 166
    arith_single      go to state 168
    lst_single        go to state 169


State 159

   75 lst_single: '%' . expression

    NUM_INT    shift, and go to state 153
    NUM_FLOAT  shift, and go to state 154
    NIL_CNST   shift, and go to state 155
    ID         shift, and go to state 156
    '+'        shift, and go to state 157
    '-'        shift, and go to state 158
    '%'        shift, and go to state 159
    '?'        shift, and go to state 160
    '!'        shift, and go to state 161

    func_calling      go to state 162
    expression        go to state 261
    const             go to state 164
    number            go to state 165
    single_operation  go to state 166
    arith_single      go to state 168
    lst_single        go to state 169


State 160

   76 lst_single: '?' . expression

    NUM_INT    shift, and go to state 153
    NUM_FLOAT  shift, and go to state 154
    NIL_CNST   shift, and go to state 155
    ID         shift, and go to state 156
    '+'        shift, and go to state 157
    '-'        shift, and go to state 158
    '%'        shift, and go to state 159
    '?'        shift, and go to state 160
    '!'        shift, and go to state 161

    func_calling      go to state 162
    expression        go to state 262
    const             go to state 164
    number            go to state 165
    single_operation  go to state 166
    arith_single      go to state 168
    lst_single        go to state 169


State 161

   67 single_operation: '!' . expression

    NUM_INT    shift, and go to state 153
    NUM_FLOAT  shift, and go to state 154
    NIL_CNST   shift, and go to state 155
    ID         shift, and go to state 156
    '+'        shift, and go to state 157
    '-'        shift, and go to state 158
    '%'        shift, and go to state 159
    '?'        shift, and go to state 160
    '!'        shift, and go to state 161

    func_calling      go to state 162
    expression        go to state 263
    const             go to state 164
    number            go to state 165
    single_operation  go to state 166
    arith_single      go to state 168
    lst_single        go to state 169


State 162

   48 expression: func_calling .

    ')'         reduce using rule 48 (expression)
    ','         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)
    '+'         reduce using rule 48 (expression)
    '-'         reduce using rule 48 (expression)
    '*'         reduce using rule 48 (expression)
    '/'         reduce using rule 48 (expression)
    FILTER      reduce using rule 48 (expression)
    MAP         reduce using rule 48 (expression)
    ':'         reduce using rule 48 (expression)


State 163

   72 arith_binary: expression .
   77 lst_binary: expression . FILTER expression
   78           | expression . MAP expression
   79           | expression . ':' expression

    FILTER  shift, and go to state 264
    MAP     shift, and go to state 265
    ':'     shift, and go to state 266

    ')'         reduce using rule 72 (arith_binary)
    ','         reduce using rule 72 (arith_binary)
    AND         reduce using rule 72 (arith_binary)
    OR          reduce using rule 72 (arith_binary)
    GREATER     reduce using rule 72 (arith_binary)
    GREATER_EQ  reduce using rule 72 (arith_binary)
    LESS        reduce using rule 72 (arith_binary)
    LESS_EQ     reduce using rule 72 (arith_binary)
    EQUAL       reduce using rule 72 (arith_binary)
    NOT_EQ      reduce using rule 72 (arith_binary)
    '+'         reduce using rule 72 (arith_binary)
    '-'         reduce using rule 72 (arith_binary)
    '*'         reduce using rule 72 (arith_binary)
    '/'         reduce using rule 72 (arith_binary)


State 164

   51 expression: const .

    ')'         reduce using rule 51 (expression)
    ','         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)
    FILTER      reduce using rule 51 (expression)
    MAP         reduce using rule 51 (expression)
    ':'         reduce using rule 51 (expression)


State 165

   52 const: number .

    ')'         reduce using rule 52 (const)
    ','         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)
    '+'         reduce using rule 52 (const)
    '-'         reduce using rule 52 (const)
    '*'         reduce using rule 52 (const)
    '/'         reduce using rule 52 (const)
    FILTER      reduce using rule 52 (const)
    MAP         reduce using rule 52 (const)
    ':'         reduce using rule 52 (const)


State 166

   49 expression: single_operation .

    ')'         reduce using rule 49 (expression)
    ','         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)
    '+'         reduce using rule 49 (expression)
    '-'         reduce using rule 49 (expression)
    '*'         reduce using rule 49 (expression)
    '/'         reduce using rule 49 (expression)
    FILTER      reduce using rule 49 (expression)
    MAP         reduce using rule 49 (expression)
    ':'         reduce using rule 49 (expression)


State 167

   61 operation: arith_binary .
   68 arith_binary: arith_binary . '+' expression
   69             | arith_binary . '-' expression
   70             | arith_binary . '*' expression
   71             | arith_binary . '/' expression

    '+'  shift, and go to state 267
    '-'  shift, and go to state 268
    '*'  shift, and go to state 269
    '/'  shift, and go to state 270

    ')'         reduce using rule 61 (operation)
    ','         reduce using rule 61 (operation)
    AND         reduce using rule 61 (operation)
    OR          reduce using rule 61 (operation)
    GREATER     reduce using rule 61 (operation)
    GREATER_EQ  reduce using rule 61 (operation)
    LESS        reduce using rule 61 (operation)
    LESS_EQ     reduce using rule 61 (operation)
    EQUAL       reduce using rule 61 (operation)
    NOT_EQ      reduce using rule 61 (operation)


State 168

   65 single_operation: arith_single .

    ')'         reduce using rule 65 (single_operation)
    ','         reduce using rule 65 (single_operation)
    AND         reduce using rule 65 (single_operation)
    OR          reduce using rule 65 (single_operation)
    GREATER     reduce using rule 65 (single_operation)
    GREATER_EQ  reduce using rule 65 (single_operation)
    LESS        reduce using rule 65 (single_operation)
    LESS_EQ     reduce using rule 65 (single_operation)
    EQUAL       reduce using rule 65 (single_operation)
    NOT_EQ      reduce using rule 65 (single_operation)
    '+'         reduce using rule 65 (single_operation)
    '-'         reduce using rule 65 (single_operation)
    '*'         reduce using rule 65 (single_operation)
    '/'         reduce using rule 65 (single_operation)
    FILTER      reduce using rule 65 (single_operation)
    MAP         reduce using rule 65 (single_operation)
    ':'         reduce using rule 65 (single_operation)


State 169

   66 single_operation: lst_single .

    ')'         reduce using rule 66 (single_operation)
    ','         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)
    '+'         reduce using rule 66 (single_operation)
    '-'         reduce using rule 66 (single_operation)
    '*'         reduce using rule 66 (single_operation)
    '/'         reduce using rule 66 (single_operation)
    FILTER      reduce using rule 66 (single_operation)
    MAP         reduce using rule 66 (single_operation)
    ':'         reduce using rule 66 (single_operation)


State 170

   62 operation: lst_binary .

    ')'         reduce using rule 62 (operation)
    ','         reduce using rule 62 (operation)
    AND         reduce using rule 62 (operation)
    OR          reduce using rule 62 (operation)
    GREATER     reduce using rule 62 (operation)
    GREATER_EQ  reduce using rule 62 (operation)
    LESS        reduce using rule 62 (operation)
    LESS_EQ     reduce using rule 62 (operation)
    EQUAL       reduce using rule 62 (operation)
    NOT_EQ      reduce using rule 62 (operation)


State 171

   54 number: NUM_INT .

    ')'         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)
    '+'         reduce using rule 54 (number)
    '-'         reduce using rule 54 (number)
    '*'         reduce using rule 54 (number)
    '/'         reduce using rule 54 (number)
    FILTER      reduce using rule 54 (number)
    MAP         reduce using rule 54 (number)
    ':'         reduce using rule 54 (number)


State 172

   55 number: NUM_FLOAT .

    ')'         reduce using rule 55 (number)
    AND         reduce using rule 55 (number)
    OR          reduce using rule 55 (number)
    GREATER     reduce using rule 55 (number)
    GREATER_EQ  reduce using rule 55 (number)
    LESS        reduce using rule 55 (number)
    LESS_EQ     reduce using rule 55 (number)
    EQUAL       reduce using rule 55 (number)
    NOT_EQ      reduce using rule 55 (number)
    '+'         reduce using rule 55 (number)
    '-'         reduce using rule 55 (number)
    '*'         reduce using rule 55 (number)
    '/'         reduce using rule 55 (number)
    FILTER      reduce using rule 55 (number)
    MAP         reduce using rule 55 (number)
    ':'         reduce using rule 55 (number)


State 173

   53 const: NIL_CNST .

    ')'         reduce using rule 53 (const)
    AND         reduce using rule 53 (const)
    OR          reduce using rule 53 (const)
    GREATER     reduce using rule 53 (const)
    GREATER_EQ  reduce using rule 53 (const)
    LESS        reduce using rule 53 (const)
    LESS_EQ     reduce using rule 53 (const)
    EQUAL       reduce using rule 53 (const)
    NOT_EQ      reduce using rule 53 (const)
    '+'         reduce using rule 53 (const)
    '-'         reduce using rule 53 (const)
    '*'         reduce using rule 53 (const)
    '/'         reduce using rule 53 (const)
    FILTER      reduce using rule 53 (const)
    MAP         reduce using rule 53 (const)
    ':'         reduce using rule 53 (const)


State 174

   47 func_calling: ID . '(' lst_params ')'
   50 expression: ID .

    '('  shift, and go to state 271

    ')'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)
    FILTER      reduce using rule 50 (expression)
    MAP         reduce using rule 50 (expression)
    ':'         reduce using rule 50 (expression)


State 175

   73 arith_single: '+' . expression

    NUM_INT    shift, and go to state 171
    NUM_FLOAT  shift, and go to state 172
    NIL_CNST   shift, and go to state 173
    ID         shift, and go to state 174
    '+'        shift, and go to state 175
    '-'        shift, and go to state 176
    '%'        shift, and go to state 177
    '?'        shift, and go to state 178
    '!'        shift, and go to state 179

    func_calling      go to state 180
    expression        go to state 272
    const             go to state 182
    number            go to state 183
    single_operation  go to state 184
    arith_single      go to state 186
    lst_single        go to state 187


State 176

   74 arith_single: '-' . expression

    NUM_INT    shift, and go to state 171
    NUM_FLOAT  shift, and go to state 172
    NIL_CNST   shift, and go to state 173
    ID         shift, and go to state 174
    '+'        shift, and go to state 175
    '-'        shift, and go to state 176
    '%'        shift, and go to state 177
    '?'        shift, and go to state 178
    '!'        shift, and go to state 179

    func_calling      go to state 180
    expression        go to state 273
    const             go to state 182
    number            go to state 183
    single_operation  go to state 184
    arith_single      go to state 186
    lst_single        go to state 187


State 177

   75 lst_single: '%' . expression

    NUM_INT    shift, and go to state 171
    NUM_FLOAT  shift, and go to state 172
    NIL_CNST   shift, and go to state 173
    ID         shift, and go to state 174
    '+'        shift, and go to state 175
    '-'        shift, and go to state 176
    '%'        shift, and go to state 177
    '?'        shift, and go to state 178
    '!'        shift, and go to state 179

    func_calling      go to state 180
    expression        go to state 274
    const             go to state 182
    number            go to state 183
    single_operation  go to state 184
    arith_single      go to state 186
    lst_single        go to state 187


State 178

   76 lst_single: '?' . expression

    NUM_INT    shift, and go to state 171
    NUM_FLOAT  shift, and go to state 172
    NIL_CNST   shift, and go to state 173
    ID         shift, and go to state 174
    '+'        shift, and go to state 175
    '-'        shift, and go to state 176
    '%'        shift, and go to state 177
    '?'        shift, and go to state 178
    '!'        shift, and go to state 179

    func_calling      go to state 180
    expression        go to state 275
    const             go to state 182
    number            go to state 183
    single_operation  go to state 184
    arith_single      go to state 186
    lst_single        go to state 187


State 179

   67 single_operation: '!' . expression

    NUM_INT    shift, and go to state 171
    NUM_FLOAT  shift, and go to state 172
    NIL_CNST   shift, and go to state 173
    ID         shift, and go to state 174
    '+'        shift, and go to state 175
    '-'        shift, and go to state 176
    '%'        shift, and go to state 177
    '?'        shift, and go to state 178
    '!'        shift, and go to state 179

    func_calling      go to state 180
    expression        go to state 276
    const             go to state 182
    number            go to state 183
    single_operation  go to state 184
    arith_single      go to state 186
    lst_single        go to state 187


State 180

   48 expression: func_calling .

    ')'         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)
    '+'         reduce using rule 48 (expression)
    '-'         reduce using rule 48 (expression)
    '*'         reduce using rule 48 (expression)
    '/'         reduce using rule 48 (expression)
    FILTER      reduce using rule 48 (expression)
    MAP         reduce using rule 48 (expression)
    ':'         reduce using rule 48 (expression)


State 181

   72 arith_binary: expression .
   77 lst_binary: expression . FILTER expression
   78           | expression . MAP expression
   79           | expression . ':' expression

    FILTER  shift, and go to state 277
    MAP     shift, and go to state 278
    ':'     shift, and go to state 279

    ')'         reduce using rule 72 (arith_binary)
    AND         reduce using rule 72 (arith_binary)
    OR          reduce using rule 72 (arith_binary)
    GREATER     reduce using rule 72 (arith_binary)
    GREATER_EQ  reduce using rule 72 (arith_binary)
    LESS        reduce using rule 72 (arith_binary)
    LESS_EQ     reduce using rule 72 (arith_binary)
    EQUAL       reduce using rule 72 (arith_binary)
    NOT_EQ      reduce using rule 72 (arith_binary)
    '+'         reduce using rule 72 (arith_binary)
    '-'         reduce using rule 72 (arith_binary)
    '*'         reduce using rule 72 (arith_binary)
    '/'         reduce using rule 72 (arith_binary)


State 182

   51 expression: const .

    ')'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)
    FILTER      reduce using rule 51 (expression)
    MAP         reduce using rule 51 (expression)
    ':'         reduce using rule 51 (expression)


State 183

   52 const: number .

    ')'         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)
    '+'         reduce using rule 52 (const)
    '-'         reduce using rule 52 (const)
    '*'         reduce using rule 52 (const)
    '/'         reduce using rule 52 (const)
    FILTER      reduce using rule 52 (const)
    MAP         reduce using rule 52 (const)
    ':'         reduce using rule 52 (const)


State 184

   49 expression: single_operation .

    ')'         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)
    '+'         reduce using rule 49 (expression)
    '-'         reduce using rule 49 (expression)
    '*'         reduce using rule 49 (expression)
    '/'         reduce using rule 49 (expression)
    FILTER      reduce using rule 49 (expression)
    MAP         reduce using rule 49 (expression)
    ':'         reduce using rule 49 (expression)


State 185

   61 operation: arith_binary .
   68 arith_binary: arith_binary . '+' expression
   69             | arith_binary . '-' expression
   70             | arith_binary . '*' expression
   71             | arith_binary . '/' expression

    '+'  shift, and go to state 280
    '-'  shift, and go to state 281
    '*'  shift, and go to state 282
    '/'  shift, and go to state 283

    ')'         reduce using rule 61 (operation)
    AND         reduce using rule 61 (operation)
    OR          reduce using rule 61 (operation)
    GREATER     reduce using rule 61 (operation)
    GREATER_EQ  reduce using rule 61 (operation)
    LESS        reduce using rule 61 (operation)
    LESS_EQ     reduce using rule 61 (operation)
    EQUAL       reduce using rule 61 (operation)
    NOT_EQ      reduce using rule 61 (operation)


State 186

   65 single_operation: arith_single .

    ')'         reduce using rule 65 (single_operation)
    AND         reduce using rule 65 (single_operation)
    OR          reduce using rule 65 (single_operation)
    GREATER     reduce using rule 65 (single_operation)
    GREATER_EQ  reduce using rule 65 (single_operation)
    LESS        reduce using rule 65 (single_operation)
    LESS_EQ     reduce using rule 65 (single_operation)
    EQUAL       reduce using rule 65 (single_operation)
    NOT_EQ      reduce using rule 65 (single_operation)
    '+'         reduce using rule 65 (single_operation)
    '-'         reduce using rule 65 (single_operation)
    '*'         reduce using rule 65 (single_operation)
    '/'         reduce using rule 65 (single_operation)
    FILTER      reduce using rule 65 (single_operation)
    MAP         reduce using rule 65 (single_operation)
    ':'         reduce using rule 65 (single_operation)


State 187

   66 single_operation: lst_single .

    ')'         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)
    '+'         reduce using rule 66 (single_operation)
    '-'         reduce using rule 66 (single_operation)
    '*'         reduce using rule 66 (single_operation)
    '/'         reduce using rule 66 (single_operation)
    FILTER      reduce using rule 66 (single_operation)
    MAP         reduce using rule 66 (single_operation)
    ':'         reduce using rule 66 (single_operation)


State 188

   62 operation: lst_binary .

    ')'         reduce using rule 62 (operation)
    AND         reduce using rule 62 (operation)
    OR          reduce using rule 62 (operation)
    GREATER     reduce using rule 62 (operation)
    GREATER_EQ  reduce using rule 62 (operation)
    LESS        reduce using rule 62 (operation)
    LESS_EQ     reduce using rule 62 (operation)
    EQUAL       reduce using rule 62 (operation)
    NOT_EQ      reduce using rule 62 (operation)


State 189

   54 number: NUM_INT .

    ')'  reduce using rule 54 (number)


State 190

   55 number: NUM_FLOAT .

    ')'  reduce using rule 55 (number)


State 191

   53 const: NIL_CNST .

    ')'  reduce using rule 53 (const)


State 192

   47 func_calling: ID . '(' lst_params ')'
   50 expression: ID .

    '('  shift, and go to state 284

    ')'  reduce using rule 50 (expression)


State 193

   73 arith_single: '+' . expression

    NUM_INT    shift, and go to state 189
    NUM_FLOAT  shift, and go to state 190
    NIL_CNST   shift, and go to state 191
    ID         shift, and go to state 192
    '+'        shift, and go to state 193
    '-'        shift, and go to state 194
    '%'        shift, and go to state 195
    '?'        shift, and go to state 196
    '!'        shift, and go to state 197

    func_calling      go to state 198
    expression        go to state 285
    const             go to state 199
    number            go to state 200
    single_operation  go to state 201
    arith_single      go to state 202
    lst_single        go to state 203


State 194

   74 arith_single: '-' . expression

    NUM_INT    shift, and go to state 189
    NUM_FLOAT  shift, and go to state 190
    NIL_CNST   shift, and go to state 191
    ID         shift, and go to state 192
    '+'        shift, and go to state 193
    '-'        shift, and go to state 194
    '%'        shift, and go to state 195
    '?'        shift, and go to state 196
    '!'        shift, and go to state 197

    func_calling      go to state 198
    expression        go to state 286
    const             go to state 199
    number            go to state 200
    single_operation  go to state 201
    arith_single      go to state 202
    lst_single        go to state 203


State 195

   75 lst_single: '%' . expression

    NUM_INT    shift, and go to state 189
    NUM_FLOAT  shift, and go to state 190
    NIL_CNST   shift, and go to state 191
    ID         shift, and go to state 192
    '+'        shift, and go to state 193
    '-'        shift, and go to state 194
    '%'        shift, and go to state 195
    '?'        shift, and go to state 196
    '!'        shift, and go to state 197

    func_calling      go to state 198
    expression        go to state 287
    const             go to state 199
    number            go to state 200
    single_operation  go to state 201
    arith_single      go to state 202
    lst_single        go to state 203


State 196

   76 lst_single: '?' . expression

    NUM_INT    shift, and go to state 189
    NUM_FLOAT  shift, and go to state 190
    NIL_CNST   shift, and go to state 191
    ID         shift, and go to state 192
    '+'        shift, and go to state 193
    '-'        shift, and go to state 194
    '%'        shift, and go to state 195
    '?'        shift, and go to state 196
    '!'        shift, and go to state 197

    func_calling      go to state 198
    expression        go to state 288
    const             go to state 199
    number            go to state 200
    single_operation  go to state 201
    arith_single      go to state 202
    lst_single        go to state 203


State 197

   67 single_operation: '!' . expression

    NUM_INT    shift, and go to state 189
    NUM_FLOAT  shift, and go to state 190
    NIL_CNST   shift, and go to state 191
    ID         shift, and go to state 192
    '+'        shift, and go to state 193
    '-'        shift, and go to state 194
    '%'        shift, and go to state 195
    '?'        shift, and go to state 196
    '!'        shift, and go to state 197

    func_calling      go to state 198
    expression        go to state 289
    const             go to state 199
    number            go to state 200
    single_operation  go to state 201
    arith_single      go to state 202
    lst_single        go to state 203


State 198

   48 expression: func_calling .

    ')'  reduce using rule 48 (expression)


State 199

   51 expression: const .

    ')'  reduce using rule 51 (expression)


State 200

   52 const: number .

    ')'  reduce using rule 52 (const)


State 201

   49 expression: single_operation .

    ')'  reduce using rule 49 (expression)


State 202

   65 single_operation: arith_single .

    ')'  reduce using rule 65 (single_operation)


State 203

   66 single_operation: lst_single .

    ')'  reduce using rule 66 (single_operation)


State 204

   54 number: NUM_INT .

    ';'         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)


State 205

   55 number: NUM_FLOAT .

    ';'         reduce using rule 55 (number)
    AND         reduce using rule 55 (number)
    OR          reduce using rule 55 (number)
    GREATER     reduce using rule 55 (number)
    GREATER_EQ  reduce using rule 55 (number)
    LESS        reduce using rule 55 (number)
    LESS_EQ     reduce using rule 55 (number)
    EQUAL       reduce using rule 55 (number)
    NOT_EQ      reduce using rule 55 (number)


State 206

   53 const: NIL_CNST .

    ';'         reduce using rule 53 (const)
    AND         reduce using rule 53 (const)
    OR          reduce using rule 53 (const)
    GREATER     reduce using rule 53 (const)
    GREATER_EQ  reduce using rule 53 (const)
    LESS        reduce using rule 53 (const)
    LESS_EQ     reduce using rule 53 (const)
    EQUAL       reduce using rule 53 (const)
    NOT_EQ      reduce using rule 53 (const)


State 207

   47 func_calling: ID . '(' lst_params ')'
   50 expression: ID .

    '('  shift, and go to state 290

    ';'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)


State 208

   73 arith_single: '+' . expression

    NUM_INT    shift, and go to state 204
    NUM_FLOAT  shift, and go to state 205
    NIL_CNST   shift, and go to state 206
    ID         shift, and go to state 207
    '+'        shift, and go to state 208
    '-'        shift, and go to state 209
    '%'        shift, and go to state 210
    '?'        shift, and go to state 211
    '!'        shift, and go to state 212

    func_calling      go to state 213
    expression        go to state 291
    const             go to state 214
    number            go to state 215
    single_operation  go to state 216
    arith_single      go to state 217
    lst_single        go to state 218


State 209

   74 arith_single: '-' . expression

    NUM_INT    shift, and go to state 204
    NUM_FLOAT  shift, and go to state 205
    NIL_CNST   shift, and go to state 206
    ID         shift, and go to state 207
    '+'        shift, and go to state 208
    '-'        shift, and go to state 209
    '%'        shift, and go to state 210
    '?'        shift, and go to state 211
    '!'        shift, and go to state 212

    func_calling      go to state 213
    expression        go to state 292
    const             go to state 214
    number            go to state 215
    single_operation  go to state 216
    arith_single      go to state 217
    lst_single        go to state 218


State 210

   75 lst_single: '%' . expression

    NUM_INT    shift, and go to state 204
    NUM_FLOAT  shift, and go to state 205
    NIL_CNST   shift, and go to state 206
    ID         shift, and go to state 207
    '+'        shift, and go to state 208
    '-'        shift, and go to state 209
    '%'        shift, and go to state 210
    '?'        shift, and go to state 211
    '!'        shift, and go to state 212

    func_calling      go to state 213
    expression        go to state 293
    const             go to state 214
    number            go to state 215
    single_operation  go to state 216
    arith_single      go to state 217
    lst_single        go to state 218


State 211

   76 lst_single: '?' . expression

    NUM_INT    shift, and go to state 204
    NUM_FLOAT  shift, and go to state 205
    NIL_CNST   shift, and go to state 206
    ID         shift, and go to state 207
    '+'        shift, and go to state 208
    '-'        shift, and go to state 209
    '%'        shift, and go to state 210
    '?'        shift, and go to state 211
    '!'        shift, and go to state 212

    func_calling      go to state 213
    expression        go to state 294
    const             go to state 214
    number            go to state 215
    single_operation  go to state 216
    arith_single      go to state 217
    lst_single        go to state 218


State 212

   67 single_operation: '!' . expression

    NUM_INT    shift, and go to state 204
    NUM_FLOAT  shift, and go to state 205
    NIL_CNST   shift, and go to state 206
    ID         shift, and go to state 207
    '+'        shift, and go to state 208
    '-'        shift, and go to state 209
    '%'        shift, and go to state 210
    '?'        shift, and go to state 211
    '!'        shift, and go to state 212

    func_calling      go to state 213
    expression        go to state 295
    const             go to state 214
    number            go to state 215
    single_operation  go to state 216
    arith_single      go to state 217
    lst_single        go to state 218


State 213

   48 expression: func_calling .

    ';'         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)


State 214

   51 expression: const .

    ';'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)


State 215

   52 const: number .

    ';'         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)


State 216

   49 expression: single_operation .

    ';'         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)


State 217

   65 single_operation: arith_single .

    ';'         reduce using rule 65 (single_operation)
    AND         reduce using rule 65 (single_operation)
    OR          reduce using rule 65 (single_operation)
    GREATER     reduce using rule 65 (single_operation)
    GREATER_EQ  reduce using rule 65 (single_operation)
    LESS        reduce using rule 65 (single_operation)
    LESS_EQ     reduce using rule 65 (single_operation)
    EQUAL       reduce using rule 65 (single_operation)
    NOT_EQ      reduce using rule 65 (single_operation)


State 218

   66 single_operation: lst_single .

    ';'         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)


State 219

   54 number: NUM_INT .

    ';'         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)
    '+'         reduce using rule 54 (number)
    '-'         reduce using rule 54 (number)
    '*'         reduce using rule 54 (number)
    '/'         reduce using rule 54 (number)


State 220

   55 number: NUM_FLOAT .

    ';'         reduce using rule 55 (number)
    AND         reduce using rule 55 (number)
    OR          reduce using rule 55 (number)
    GREATER     reduce using rule 55 (number)
    GREATER_EQ  reduce using rule 55 (number)
    LESS        reduce using rule 55 (number)
    LESS_EQ     reduce using rule 55 (number)
    EQUAL       reduce using rule 55 (number)
    NOT_EQ      reduce using rule 55 (number)
    '+'         reduce using rule 55 (number)
    '-'         reduce using rule 55 (number)
    '*'         reduce using rule 55 (number)
    '/'         reduce using rule 55 (number)


State 221

   53 const: NIL_CNST .

    ';'         reduce using rule 53 (const)
    AND         reduce using rule 53 (const)
    OR          reduce using rule 53 (const)
    GREATER     reduce using rule 53 (const)
    GREATER_EQ  reduce using rule 53 (const)
    LESS        reduce using rule 53 (const)
    LESS_EQ     reduce using rule 53 (const)
    EQUAL       reduce using rule 53 (const)
    NOT_EQ      reduce using rule 53 (const)
    '+'         reduce using rule 53 (const)
    '-'         reduce using rule 53 (const)
    '*'         reduce using rule 53 (const)
    '/'         reduce using rule 53 (const)


State 222

   47 func_calling: ID . '(' lst_params ')'
   50 expression: ID .

    '('  shift, and go to state 296

    ';'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)


State 223

   73 arith_single: '+' . expression

    NUM_INT    shift, and go to state 219
    NUM_FLOAT  shift, and go to state 220
    NIL_CNST   shift, and go to state 221
    ID         shift, and go to state 222
    '+'        shift, and go to state 223
    '-'        shift, and go to state 224
    '%'        shift, and go to state 225
    '?'        shift, and go to state 226
    '!'        shift, and go to state 227

    func_calling      go to state 228
    expression        go to state 297
    const             go to state 229
    number            go to state 230
    single_operation  go to state 231
    arith_single      go to state 232
    lst_single        go to state 233


State 224

   74 arith_single: '-' . expression

    NUM_INT    shift, and go to state 219
    NUM_FLOAT  shift, and go to state 220
    NIL_CNST   shift, and go to state 221
    ID         shift, and go to state 222
    '+'        shift, and go to state 223
    '-'        shift, and go to state 224
    '%'        shift, and go to state 225
    '?'        shift, and go to state 226
    '!'        shift, and go to state 227

    func_calling      go to state 228
    expression        go to state 298
    const             go to state 229
    number            go to state 230
    single_operation  go to state 231
    arith_single      go to state 232
    lst_single        go to state 233


State 225

   75 lst_single: '%' . expression

    NUM_INT    shift, and go to state 219
    NUM_FLOAT  shift, and go to state 220
    NIL_CNST   shift, and go to state 221
    ID         shift, and go to state 222
    '+'        shift, and go to state 223
    '-'        shift, and go to state 224
    '%'        shift, and go to state 225
    '?'        shift, and go to state 226
    '!'        shift, and go to state 227

    func_calling      go to state 228
    expression        go to state 299
    const             go to state 229
    number            go to state 230
    single_operation  go to state 231
    arith_single      go to state 232
    lst_single        go to state 233


State 226

   76 lst_single: '?' . expression

    NUM_INT    shift, and go to state 219
    NUM_FLOAT  shift, and go to state 220
    NIL_CNST   shift, and go to state 221
    ID         shift, and go to state 222
    '+'        shift, and go to state 223
    '-'        shift, and go to state 224
    '%'        shift, and go to state 225
    '?'        shift, and go to state 226
    '!'        shift, and go to state 227

    func_calling      go to state 228
    expression        go to state 300
    const             go to state 229
    number            go to state 230
    single_operation  go to state 231
    arith_single      go to state 232
    lst_single        go to state 233


State 227

   67 single_operation: '!' . expression

    NUM_INT    shift, and go to state 219
    NUM_FLOAT  shift, and go to state 220
    NIL_CNST   shift, and go to state 221
    ID         shift, and go to state 222
    '+'        shift, and go to state 223
    '-'        shift, and go to state 224
    '%'        shift, and go to state 225
    '?'        shift, and go to state 226
    '!'        shift, and go to state 227

    func_calling      go to state 228
    expression        go to state 301
    const             go to state 229
    number            go to state 230
    single_operation  go to state 231
    arith_single      go to state 232
    lst_single        go to state 233


State 228

   48 expression: func_calling .

    ';'         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)
    '+'         reduce using rule 48 (expression)
    '-'         reduce using rule 48 (expression)
    '*'         reduce using rule 48 (expression)
    '/'         reduce using rule 48 (expression)


State 229

   51 expression: const .

    ';'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)


State 230

   52 const: number .

    ';'         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)
    '+'         reduce using rule 52 (const)
    '-'         reduce using rule 52 (const)
    '*'         reduce using rule 52 (const)
    '/'         reduce using rule 52 (const)


State 231

   49 expression: single_operation .

    ';'         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)
    '+'         reduce using rule 49 (expression)
    '-'         reduce using rule 49 (expression)
    '*'         reduce using rule 49 (expression)
    '/'         reduce using rule 49 (expression)


State 232

   65 single_operation: arith_single .

    ';'         reduce using rule 65 (single_operation)
    AND         reduce using rule 65 (single_operation)
    OR          reduce using rule 65 (single_operation)
    GREATER     reduce using rule 65 (single_operation)
    GREATER_EQ  reduce using rule 65 (single_operation)
    LESS        reduce using rule 65 (single_operation)
    LESS_EQ     reduce using rule 65 (single_operation)
    EQUAL       reduce using rule 65 (single_operation)
    NOT_EQ      reduce using rule 65 (single_operation)
    '+'         reduce using rule 65 (single_operation)
    '-'         reduce using rule 65 (single_operation)
    '*'         reduce using rule 65 (single_operation)
    '/'         reduce using rule 65 (single_operation)


State 233

   66 single_operation: lst_single .

    ';'         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)
    '+'         reduce using rule 66 (single_operation)
    '-'         reduce using rule 66 (single_operation)
    '*'         reduce using rule 66 (single_operation)
    '/'         reduce using rule 66 (single_operation)


State 234

   64 operation: operation log_operator . expression

    NUM_INT    shift, and go to state 302
    NUM_FLOAT  shift, and go to state 303
    NIL_CNST   shift, and go to state 304
    ID         shift, and go to state 305
    '+'        shift, and go to state 306
    '-'        shift, and go to state 307
    '%'        shift, and go to state 308
    '?'        shift, and go to state 309
    '!'        shift, and go to state 310

    func_calling      go to state 311
    expression        go to state 312
    const             go to state 313
    number            go to state 314
    single_operation  go to state 315
    arith_single      go to state 316
    lst_single        go to state 317


State 235

   63 operation: operation relation_operator . expression

    NUM_INT    shift, and go to state 302
    NUM_FLOAT  shift, and go to state 303
    NIL_CNST   shift, and go to state 304
    ID         shift, and go to state 305
    '+'        shift, and go to state 306
    '-'        shift, and go to state 307
    '%'        shift, and go to state 308
    '?'        shift, and go to state 309
    '!'        shift, and go to state 310

    func_calling      go to state 311
    expression        go to state 318
    const             go to state 313
    number            go to state 314
    single_operation  go to state 315
    arith_single      go to state 316
    lst_single        go to state 317


State 236

   64 operation: operation log_operator . expression

    NUM_INT    shift, and go to state 319
    NUM_FLOAT  shift, and go to state 320
    NIL_CNST   shift, and go to state 321
    ID         shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 329
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 237

   63 operation: operation relation_operator . expression

    NUM_INT    shift, and go to state 319
    NUM_FLOAT  shift, and go to state 320
    NIL_CNST   shift, and go to state 321
    ID         shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 335
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 238

   35 return_stmt: RETURN_STM . operation ';'

    NUM_INT    shift, and go to state 29
    NUM_FLOAT  shift, and go to state 30
    NIL_CNST   shift, and go to state 31
    ID         shift, and go to state 68
    '+'        shift, and go to state 40
    '-'        shift, and go to state 41
    '%'        shift, and go to state 42
    '?'        shift, and go to state 43
    '!'        shift, and go to state 44

    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    operation         go to state 336
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 239

   33 conditional_stmt: IF_STMT . '(' operation ')' command
   34                 | IF_STMT . '(' operation ')' command ELSE_STMT command

    '('  shift, and go to state 337


State 240

   37 iteration: FOR_STMT . '(' loop_condition ')' command

    '('  shift, and go to state 338


State 241

   42 output: OUTPUT_WRITE . '(' operation ')' ';'
   44       | OUTPUT_WRITE . '(' STRING ')' ';'

    '('  shift, and go to state 339


State 242

   43 output: OUTPUT_WRITELN . '(' operation ')' ';'
   45       | OUTPUT_WRITELN . '(' STRING ')' ';'

    '('  shift, and go to state 340


State 243

   46 input: INPUT_READ . '(' expression ')' ';'

    '('  shift, and go to state 341


State 244

   31 command: '{' . block_commands '}'

    NUM_INT         shift, and go to state 29
    NUM_FLOAT       shift, and go to state 30
    NIL_CNST        shift, and go to state 31
    ID              shift, and go to state 32
    RETURN_STM      shift, and go to state 33
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 34
    FOR_STMT        shift, and go to state 35
    OUTPUT_WRITE    shift, and go to state 36
    OUTPUT_WRITELN  shift, and go to state 37
    INPUT_READ      shift, and go to state 38
    '{'             shift, and go to state 39
    '+'             shift, and go to state 40
    '-'             shift, and go to state 41
    '%'             shift, and go to state 42
    '?'             shift, and go to state 43
    '!'             shift, and go to state 44

    '}'  reduce using rule 23 (block_commands)

    var_declaration   go to state 45
    unq_declaration   go to state 46
    block_commands    go to state 342
    command           go to state 48
    conditional_stmt  go to state 49
    return_stmt       go to state 50
    init_variable     go to state 51
    iteration         go to state 52
    init_stmt         go to state 53
    output            go to state 54
    input             go to state 55
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 151
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 60
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 245

   24 command: var_declaration .

    NUM_INT         reduce using rule 24 (command)
    NUM_FLOAT       reduce using rule 24 (command)
    NIL_CNST        reduce using rule 24 (command)
    ID              reduce using rule 24 (command)
    RETURN_STM      reduce using rule 24 (command)
    T_INT           reduce using rule 24 (command)
    T_FLOAT         reduce using rule 24 (command)
    IF_STMT         reduce using rule 24 (command)
    ELSE_STMT       reduce using rule 24 (command)
    FOR_STMT        reduce using rule 24 (command)
    OUTPUT_WRITE    reduce using rule 24 (command)
    OUTPUT_WRITELN  reduce using rule 24 (command)
    INPUT_READ      reduce using rule 24 (command)
    '{'             reduce using rule 24 (command)
    '}'             reduce using rule 24 (command)
    '+'             reduce using rule 24 (command)
    '-'             reduce using rule 24 (command)
    '%'             reduce using rule 24 (command)
    '?'             reduce using rule 24 (command)
    '!'             reduce using rule 24 (command)


State 246

   10 var_declaration: unq_declaration . ';'

    ';'  shift, and go to state 343


State 247

   25 command: conditional_stmt .

    NUM_INT         reduce using rule 25 (command)
    NUM_FLOAT       reduce using rule 25 (command)
    NIL_CNST        reduce using rule 25 (command)
    ID              reduce using rule 25 (command)
    RETURN_STM      reduce using rule 25 (command)
    T_INT           reduce using rule 25 (command)
    T_FLOAT         reduce using rule 25 (command)
    IF_STMT         reduce using rule 25 (command)
    ELSE_STMT       reduce using rule 25 (command)
    FOR_STMT        reduce using rule 25 (command)
    OUTPUT_WRITE    reduce using rule 25 (command)
    OUTPUT_WRITELN  reduce using rule 25 (command)
    INPUT_READ      reduce using rule 25 (command)
    '{'             reduce using rule 25 (command)
    '}'             reduce using rule 25 (command)
    '+'             reduce using rule 25 (command)
    '-'             reduce using rule 25 (command)
    '%'             reduce using rule 25 (command)
    '?'             reduce using rule 25 (command)
    '!'             reduce using rule 25 (command)


State 248

   26 command: return_stmt .

    NUM_INT         reduce using rule 26 (command)
    NUM_FLOAT       reduce using rule 26 (command)
    NIL_CNST        reduce using rule 26 (command)
    ID              reduce using rule 26 (command)
    RETURN_STM      reduce using rule 26 (command)
    T_INT           reduce using rule 26 (command)
    T_FLOAT         reduce using rule 26 (command)
    IF_STMT         reduce using rule 26 (command)
    ELSE_STMT       reduce using rule 26 (command)
    FOR_STMT        reduce using rule 26 (command)
    OUTPUT_WRITE    reduce using rule 26 (command)
    OUTPUT_WRITELN  reduce using rule 26 (command)
    INPUT_READ      reduce using rule 26 (command)
    '{'             reduce using rule 26 (command)
    '}'             reduce using rule 26 (command)
    '+'             reduce using rule 26 (command)
    '-'             reduce using rule 26 (command)
    '%'             reduce using rule 26 (command)
    '?'             reduce using rule 26 (command)
    '!'             reduce using rule 26 (command)


State 249

   27 command: init_variable .

    NUM_INT         reduce using rule 27 (command)
    NUM_FLOAT       reduce using rule 27 (command)
    NIL_CNST        reduce using rule 27 (command)
    ID              reduce using rule 27 (command)
    RETURN_STM      reduce using rule 27 (command)
    T_INT           reduce using rule 27 (command)
    T_FLOAT         reduce using rule 27 (command)
    IF_STMT         reduce using rule 27 (command)
    ELSE_STMT       reduce using rule 27 (command)
    FOR_STMT        reduce using rule 27 (command)
    OUTPUT_WRITE    reduce using rule 27 (command)
    OUTPUT_WRITELN  reduce using rule 27 (command)
    INPUT_READ      reduce using rule 27 (command)
    '{'             reduce using rule 27 (command)
    '}'             reduce using rule 27 (command)
    '+'             reduce using rule 27 (command)
    '-'             reduce using rule 27 (command)
    '%'             reduce using rule 27 (command)
    '?'             reduce using rule 27 (command)
    '!'             reduce using rule 27 (command)


State 250

   28 command: iteration .

    NUM_INT         reduce using rule 28 (command)
    NUM_FLOAT       reduce using rule 28 (command)
    NIL_CNST        reduce using rule 28 (command)
    ID              reduce using rule 28 (command)
    RETURN_STM      reduce using rule 28 (command)
    T_INT           reduce using rule 28 (command)
    T_FLOAT         reduce using rule 28 (command)
    IF_STMT         reduce using rule 28 (command)
    ELSE_STMT       reduce using rule 28 (command)
    FOR_STMT        reduce using rule 28 (command)
    OUTPUT_WRITE    reduce using rule 28 (command)
    OUTPUT_WRITELN  reduce using rule 28 (command)
    INPUT_READ      reduce using rule 28 (command)
    '{'             reduce using rule 28 (command)
    '}'             reduce using rule 28 (command)
    '+'             reduce using rule 28 (command)
    '-'             reduce using rule 28 (command)
    '%'             reduce using rule 28 (command)
    '?'             reduce using rule 28 (command)
    '!'             reduce using rule 28 (command)


State 251

   36 init_variable: init_stmt . ';'

    ';'  shift, and go to state 344


State 252

   30 command: output .

    NUM_INT         reduce using rule 30 (command)
    NUM_FLOAT       reduce using rule 30 (command)
    NIL_CNST        reduce using rule 30 (command)
    ID              reduce using rule 30 (command)
    RETURN_STM      reduce using rule 30 (command)
    T_INT           reduce using rule 30 (command)
    T_FLOAT         reduce using rule 30 (command)
    IF_STMT         reduce using rule 30 (command)
    ELSE_STMT       reduce using rule 30 (command)
    FOR_STMT        reduce using rule 30 (command)
    OUTPUT_WRITE    reduce using rule 30 (command)
    OUTPUT_WRITELN  reduce using rule 30 (command)
    INPUT_READ      reduce using rule 30 (command)
    '{'             reduce using rule 30 (command)
    '}'             reduce using rule 30 (command)
    '+'             reduce using rule 30 (command)
    '-'             reduce using rule 30 (command)
    '%'             reduce using rule 30 (command)
    '?'             reduce using rule 30 (command)
    '!'             reduce using rule 30 (command)


State 253

   29 command: input .

    NUM_INT         reduce using rule 29 (command)
    NUM_FLOAT       reduce using rule 29 (command)
    NIL_CNST        reduce using rule 29 (command)
    ID              reduce using rule 29 (command)
    RETURN_STM      reduce using rule 29 (command)
    T_INT           reduce using rule 29 (command)
    T_FLOAT         reduce using rule 29 (command)
    IF_STMT         reduce using rule 29 (command)
    ELSE_STMT       reduce using rule 29 (command)
    FOR_STMT        reduce using rule 29 (command)
    OUTPUT_WRITE    reduce using rule 29 (command)
    OUTPUT_WRITELN  reduce using rule 29 (command)
    INPUT_READ      reduce using rule 29 (command)
    '{'             reduce using rule 29 (command)
    '}'             reduce using rule 29 (command)
    '+'             reduce using rule 29 (command)
    '-'             reduce using rule 29 (command)
    '%'             reduce using rule 29 (command)
    '?'             reduce using rule 29 (command)
    '!'             reduce using rule 29 (command)


State 254

   32 command: operation . ';'
   63 operation: operation . relation_operator expression
   64          | operation . log_operator expression

    ';'         shift, and go to state 345
    AND         shift, and go to state 88
    OR          shift, and go to state 89
    GREATER     shift, and go to state 90
    GREATER_EQ  shift, and go to state 91
    LESS        shift, and go to state 92
    LESS_EQ     shift, and go to state 93
    EQUAL       shift, and go to state 94
    NOT_EQ      shift, and go to state 95

    log_operator       go to state 96
    relation_operator  go to state 97


State 255

   39 init_stmt: ID . '=' operation

    '='  shift, and go to state 346


State 256

   12 unq_declaration: type $@2 . ID

    ID  shift, and go to state 347


State 257

   12 unq_declaration: type $@2 . ID

    ID  shift, and go to state 348


State 258

   47 func_calling: ID '(' . lst_params ')'

    NUM_INT    shift, and go to state 153
    NUM_FLOAT  shift, and go to state 154
    NIL_CNST   shift, and go to state 155
    ID         shift, and go to state 156
    '+'        shift, and go to state 157
    '-'        shift, and go to state 158
    '%'        shift, and go to state 159
    '?'        shift, and go to state 160
    '!'        shift, and go to state 161

    ')'  reduce using rule 18 (lst_params)

    lst_params          go to state 349
    lst_calling_params  go to state 103
    func_calling        go to state 162
    expression          go to state 163
    const               go to state 164
    number              go to state 165
    operation           go to state 104
    single_operation    go to state 166
    arith_binary        go to state 167
    arith_single        go to state 168
    lst_single          go to state 169
    lst_binary          go to state 170


State 259

   73 arith_single: '+' expression .

    ')'         reduce using rule 73 (arith_single)
    ','         reduce using rule 73 (arith_single)
    AND         reduce using rule 73 (arith_single)
    OR          reduce using rule 73 (arith_single)
    GREATER     reduce using rule 73 (arith_single)
    GREATER_EQ  reduce using rule 73 (arith_single)
    LESS        reduce using rule 73 (arith_single)
    LESS_EQ     reduce using rule 73 (arith_single)
    EQUAL       reduce using rule 73 (arith_single)
    NOT_EQ      reduce using rule 73 (arith_single)
    '+'         reduce using rule 73 (arith_single)
    '-'         reduce using rule 73 (arith_single)
    '*'         reduce using rule 73 (arith_single)
    '/'         reduce using rule 73 (arith_single)
    FILTER      reduce using rule 73 (arith_single)
    MAP         reduce using rule 73 (arith_single)
    ':'         reduce using rule 73 (arith_single)


State 260

   74 arith_single: '-' expression .

    ')'         reduce using rule 74 (arith_single)
    ','         reduce using rule 74 (arith_single)
    AND         reduce using rule 74 (arith_single)
    OR          reduce using rule 74 (arith_single)
    GREATER     reduce using rule 74 (arith_single)
    GREATER_EQ  reduce using rule 74 (arith_single)
    LESS        reduce using rule 74 (arith_single)
    LESS_EQ     reduce using rule 74 (arith_single)
    EQUAL       reduce using rule 74 (arith_single)
    NOT_EQ      reduce using rule 74 (arith_single)
    '+'         reduce using rule 74 (arith_single)
    '-'         reduce using rule 74 (arith_single)
    '*'         reduce using rule 74 (arith_single)
    '/'         reduce using rule 74 (arith_single)
    FILTER      reduce using rule 74 (arith_single)
    MAP         reduce using rule 74 (arith_single)
    ':'         reduce using rule 74 (arith_single)


State 261

   75 lst_single: '%' expression .

    ')'         reduce using rule 75 (lst_single)
    ','         reduce using rule 75 (lst_single)
    AND         reduce using rule 75 (lst_single)
    OR          reduce using rule 75 (lst_single)
    GREATER     reduce using rule 75 (lst_single)
    GREATER_EQ  reduce using rule 75 (lst_single)
    LESS        reduce using rule 75 (lst_single)
    LESS_EQ     reduce using rule 75 (lst_single)
    EQUAL       reduce using rule 75 (lst_single)
    NOT_EQ      reduce using rule 75 (lst_single)
    '+'         reduce using rule 75 (lst_single)
    '-'         reduce using rule 75 (lst_single)
    '*'         reduce using rule 75 (lst_single)
    '/'         reduce using rule 75 (lst_single)
    FILTER      reduce using rule 75 (lst_single)
    MAP         reduce using rule 75 (lst_single)
    ':'         reduce using rule 75 (lst_single)


State 262

   76 lst_single: '?' expression .

    ')'         reduce using rule 76 (lst_single)
    ','         reduce using rule 76 (lst_single)
    AND         reduce using rule 76 (lst_single)
    OR          reduce using rule 76 (lst_single)
    GREATER     reduce using rule 76 (lst_single)
    GREATER_EQ  reduce using rule 76 (lst_single)
    LESS        reduce using rule 76 (lst_single)
    LESS_EQ     reduce using rule 76 (lst_single)
    EQUAL       reduce using rule 76 (lst_single)
    NOT_EQ      reduce using rule 76 (lst_single)
    '+'         reduce using rule 76 (lst_single)
    '-'         reduce using rule 76 (lst_single)
    '*'         reduce using rule 76 (lst_single)
    '/'         reduce using rule 76 (lst_single)
    FILTER      reduce using rule 76 (lst_single)
    MAP         reduce using rule 76 (lst_single)
    ':'         reduce using rule 76 (lst_single)


State 263

   67 single_operation: '!' expression .

    ')'         reduce using rule 67 (single_operation)
    ','         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)
    '+'         reduce using rule 67 (single_operation)
    '-'         reduce using rule 67 (single_operation)
    '*'         reduce using rule 67 (single_operation)
    '/'         reduce using rule 67 (single_operation)
    FILTER      reduce using rule 67 (single_operation)
    MAP         reduce using rule 67 (single_operation)
    ':'         reduce using rule 67 (single_operation)


State 264

   77 lst_binary: expression FILTER . expression

    NUM_INT    shift, and go to state 302
    NUM_FLOAT  shift, and go to state 303
    NIL_CNST   shift, and go to state 304
    ID         shift, and go to state 305
    '+'        shift, and go to state 306
    '-'        shift, and go to state 307
    '%'        shift, and go to state 308
    '?'        shift, and go to state 309
    '!'        shift, and go to state 310

    func_calling      go to state 311
    expression        go to state 350
    const             go to state 313
    number            go to state 314
    single_operation  go to state 315
    arith_single      go to state 316
    lst_single        go to state 317


State 265

   78 lst_binary: expression MAP . expression

    NUM_INT    shift, and go to state 302
    NUM_FLOAT  shift, and go to state 303
    NIL_CNST   shift, and go to state 304
    ID         shift, and go to state 305
    '+'        shift, and go to state 306
    '-'        shift, and go to state 307
    '%'        shift, and go to state 308
    '?'        shift, and go to state 309
    '!'        shift, and go to state 310

    func_calling      go to state 311
    expression        go to state 351
    const             go to state 313
    number            go to state 314
    single_operation  go to state 315
    arith_single      go to state 316
    lst_single        go to state 317


State 266

   79 lst_binary: expression ':' . expression

    NUM_INT    shift, and go to state 302
    NUM_FLOAT  shift, and go to state 303
    NIL_CNST   shift, and go to state 304
    ID         shift, and go to state 305
    '+'        shift, and go to state 306
    '-'        shift, and go to state 307
    '%'        shift, and go to state 308
    '?'        shift, and go to state 309
    '!'        shift, and go to state 310

    func_calling      go to state 311
    expression        go to state 352
    const             go to state 313
    number            go to state 314
    single_operation  go to state 315
    arith_single      go to state 316
    lst_single        go to state 317


State 267

   68 arith_binary: arith_binary '+' . expression

    NUM_INT    shift, and go to state 353
    NUM_FLOAT  shift, and go to state 354
    NIL_CNST   shift, and go to state 355
    ID         shift, and go to state 356
    '+'        shift, and go to state 357
    '-'        shift, and go to state 358
    '%'        shift, and go to state 359
    '?'        shift, and go to state 360
    '!'        shift, and go to state 361

    func_calling      go to state 362
    expression        go to state 363
    const             go to state 364
    number            go to state 365
    single_operation  go to state 366
    arith_single      go to state 367
    lst_single        go to state 368


State 268

   69 arith_binary: arith_binary '-' . expression

    NUM_INT    shift, and go to state 353
    NUM_FLOAT  shift, and go to state 354
    NIL_CNST   shift, and go to state 355
    ID         shift, and go to state 356
    '+'        shift, and go to state 357
    '-'        shift, and go to state 358
    '%'        shift, and go to state 359
    '?'        shift, and go to state 360
    '!'        shift, and go to state 361

    func_calling      go to state 362
    expression        go to state 369
    const             go to state 364
    number            go to state 365
    single_operation  go to state 366
    arith_single      go to state 367
    lst_single        go to state 368


State 269

   70 arith_binary: arith_binary '*' . expression

    NUM_INT    shift, and go to state 353
    NUM_FLOAT  shift, and go to state 354
    NIL_CNST   shift, and go to state 355
    ID         shift, and go to state 356
    '+'        shift, and go to state 357
    '-'        shift, and go to state 358
    '%'        shift, and go to state 359
    '?'        shift, and go to state 360
    '!'        shift, and go to state 361

    func_calling      go to state 362
    expression        go to state 370
    const             go to state 364
    number            go to state 365
    single_operation  go to state 366
    arith_single      go to state 367
    lst_single        go to state 368


State 270

   71 arith_binary: arith_binary '/' . expression

    NUM_INT    shift, and go to state 353
    NUM_FLOAT  shift, and go to state 354
    NIL_CNST   shift, and go to state 355
    ID         shift, and go to state 356
    '+'        shift, and go to state 357
    '-'        shift, and go to state 358
    '%'        shift, and go to state 359
    '?'        shift, and go to state 360
    '!'        shift, and go to state 361

    func_calling      go to state 362
    expression        go to state 371
    const             go to state 364
    number            go to state 365
    single_operation  go to state 366
    arith_single      go to state 367
    lst_single        go to state 368


State 271

   47 func_calling: ID '(' . lst_params ')'

    NUM_INT    shift, and go to state 153
    NUM_FLOAT  shift, and go to state 154
    NIL_CNST   shift, and go to state 155
    ID         shift, and go to state 156
    '+'        shift, and go to state 157
    '-'        shift, and go to state 158
    '%'        shift, and go to state 159
    '?'        shift, and go to state 160
    '!'        shift, and go to state 161

    ')'  reduce using rule 18 (lst_params)

    lst_params          go to state 372
    lst_calling_params  go to state 103
    func_calling        go to state 162
    expression          go to state 163
    const               go to state 164
    number              go to state 165
    operation           go to state 104
    single_operation    go to state 166
    arith_binary        go to state 167
    arith_single        go to state 168
    lst_single          go to state 169
    lst_binary          go to state 170


State 272

   73 arith_single: '+' expression .

    ')'         reduce using rule 73 (arith_single)
    AND         reduce using rule 73 (arith_single)
    OR          reduce using rule 73 (arith_single)
    GREATER     reduce using rule 73 (arith_single)
    GREATER_EQ  reduce using rule 73 (arith_single)
    LESS        reduce using rule 73 (arith_single)
    LESS_EQ     reduce using rule 73 (arith_single)
    EQUAL       reduce using rule 73 (arith_single)
    NOT_EQ      reduce using rule 73 (arith_single)
    '+'         reduce using rule 73 (arith_single)
    '-'         reduce using rule 73 (arith_single)
    '*'         reduce using rule 73 (arith_single)
    '/'         reduce using rule 73 (arith_single)
    FILTER      reduce using rule 73 (arith_single)
    MAP         reduce using rule 73 (arith_single)
    ':'         reduce using rule 73 (arith_single)


State 273

   74 arith_single: '-' expression .

    ')'         reduce using rule 74 (arith_single)
    AND         reduce using rule 74 (arith_single)
    OR          reduce using rule 74 (arith_single)
    GREATER     reduce using rule 74 (arith_single)
    GREATER_EQ  reduce using rule 74 (arith_single)
    LESS        reduce using rule 74 (arith_single)
    LESS_EQ     reduce using rule 74 (arith_single)
    EQUAL       reduce using rule 74 (arith_single)
    NOT_EQ      reduce using rule 74 (arith_single)
    '+'         reduce using rule 74 (arith_single)
    '-'         reduce using rule 74 (arith_single)
    '*'         reduce using rule 74 (arith_single)
    '/'         reduce using rule 74 (arith_single)
    FILTER      reduce using rule 74 (arith_single)
    MAP         reduce using rule 74 (arith_single)
    ':'         reduce using rule 74 (arith_single)


State 274

   75 lst_single: '%' expression .

    ')'         reduce using rule 75 (lst_single)
    AND         reduce using rule 75 (lst_single)
    OR          reduce using rule 75 (lst_single)
    GREATER     reduce using rule 75 (lst_single)
    GREATER_EQ  reduce using rule 75 (lst_single)
    LESS        reduce using rule 75 (lst_single)
    LESS_EQ     reduce using rule 75 (lst_single)
    EQUAL       reduce using rule 75 (lst_single)
    NOT_EQ      reduce using rule 75 (lst_single)
    '+'         reduce using rule 75 (lst_single)
    '-'         reduce using rule 75 (lst_single)
    '*'         reduce using rule 75 (lst_single)
    '/'         reduce using rule 75 (lst_single)
    FILTER      reduce using rule 75 (lst_single)
    MAP         reduce using rule 75 (lst_single)
    ':'         reduce using rule 75 (lst_single)


State 275

   76 lst_single: '?' expression .

    ')'         reduce using rule 76 (lst_single)
    AND         reduce using rule 76 (lst_single)
    OR          reduce using rule 76 (lst_single)
    GREATER     reduce using rule 76 (lst_single)
    GREATER_EQ  reduce using rule 76 (lst_single)
    LESS        reduce using rule 76 (lst_single)
    LESS_EQ     reduce using rule 76 (lst_single)
    EQUAL       reduce using rule 76 (lst_single)
    NOT_EQ      reduce using rule 76 (lst_single)
    '+'         reduce using rule 76 (lst_single)
    '-'         reduce using rule 76 (lst_single)
    '*'         reduce using rule 76 (lst_single)
    '/'         reduce using rule 76 (lst_single)
    FILTER      reduce using rule 76 (lst_single)
    MAP         reduce using rule 76 (lst_single)
    ':'         reduce using rule 76 (lst_single)


State 276

   67 single_operation: '!' expression .

    ')'         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)
    '+'         reduce using rule 67 (single_operation)
    '-'         reduce using rule 67 (single_operation)
    '*'         reduce using rule 67 (single_operation)
    '/'         reduce using rule 67 (single_operation)
    FILTER      reduce using rule 67 (single_operation)
    MAP         reduce using rule 67 (single_operation)
    ':'         reduce using rule 67 (single_operation)


State 277

   77 lst_binary: expression FILTER . expression

    NUM_INT    shift, and go to state 319
    NUM_FLOAT  shift, and go to state 320
    NIL_CNST   shift, and go to state 321
    ID         shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 373
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 278

   78 lst_binary: expression MAP . expression

    NUM_INT    shift, and go to state 319
    NUM_FLOAT  shift, and go to state 320
    NIL_CNST   shift, and go to state 321
    ID         shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 374
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 279

   79 lst_binary: expression ':' . expression

    NUM_INT    shift, and go to state 319
    NUM_FLOAT  shift, and go to state 320
    NIL_CNST   shift, and go to state 321
    ID         shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 375
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 280

   68 arith_binary: arith_binary '+' . expression

    NUM_INT    shift, and go to state 376
    NUM_FLOAT  shift, and go to state 377
    NIL_CNST   shift, and go to state 378
    ID         shift, and go to state 379
    '+'        shift, and go to state 380
    '-'        shift, and go to state 381
    '%'        shift, and go to state 382
    '?'        shift, and go to state 383
    '!'        shift, and go to state 384

    func_calling      go to state 385
    expression        go to state 386
    const             go to state 387
    number            go to state 388
    single_operation  go to state 389
    arith_single      go to state 390
    lst_single        go to state 391


State 281

   69 arith_binary: arith_binary '-' . expression

    NUM_INT    shift, and go to state 376
    NUM_FLOAT  shift, and go to state 377
    NIL_CNST   shift, and go to state 378
    ID         shift, and go to state 379
    '+'        shift, and go to state 380
    '-'        shift, and go to state 381
    '%'        shift, and go to state 382
    '?'        shift, and go to state 383
    '!'        shift, and go to state 384

    func_calling      go to state 385
    expression        go to state 392
    const             go to state 387
    number            go to state 388
    single_operation  go to state 389
    arith_single      go to state 390
    lst_single        go to state 391


State 282

   70 arith_binary: arith_binary '*' . expression

    NUM_INT    shift, and go to state 376
    NUM_FLOAT  shift, and go to state 377
    NIL_CNST   shift, and go to state 378
    ID         shift, and go to state 379
    '+'        shift, and go to state 380
    '-'        shift, and go to state 381
    '%'        shift, and go to state 382
    '?'        shift, and go to state 383
    '!'        shift, and go to state 384

    func_calling      go to state 385
    expression        go to state 393
    const             go to state 387
    number            go to state 388
    single_operation  go to state 389
    arith_single      go to state 390
    lst_single        go to state 391


State 283

   71 arith_binary: arith_binary '/' . expression

    NUM_INT    shift, and go to state 376
    NUM_FLOAT  shift, and go to state 377
    NIL_CNST   shift, and go to state 378
    ID         shift, and go to state 379
    '+'        shift, and go to state 380
    '-'        shift, and go to state 381
    '%'        shift, and go to state 382
    '?'        shift, and go to state 383
    '!'        shift, and go to state 384

    func_calling      go to state 385
    expression        go to state 394
    const             go to state 387
    number            go to state 388
    single_operation  go to state 389
    arith_single      go to state 390
    lst_single        go to state 391


State 284

   47 func_calling: ID '(' . lst_params ')'

    NUM_INT    shift, and go to state 153
    NUM_FLOAT  shift, and go to state 154
    NIL_CNST   shift, and go to state 155
    ID         shift, and go to state 156
    '+'        shift, and go to state 157
    '-'        shift, and go to state 158
    '%'        shift, and go to state 159
    '?'        shift, and go to state 160
    '!'        shift, and go to state 161

    ')'  reduce using rule 18 (lst_params)

    lst_params          go to state 395
    lst_calling_params  go to state 103
    func_calling        go to state 162
    expression          go to state 163
    const               go to state 164
    number              go to state 165
    operation           go to state 104
    single_operation    go to state 166
    arith_binary        go to state 167
    arith_single        go to state 168
    lst_single          go to state 169
    lst_binary          go to state 170


State 285

   73 arith_single: '+' expression .

    ')'  reduce using rule 73 (arith_single)


State 286

   74 arith_single: '-' expression .

    ')'  reduce using rule 74 (arith_single)


State 287

   75 lst_single: '%' expression .

    ')'  reduce using rule 75 (lst_single)


State 288

   76 lst_single: '?' expression .

    ')'  reduce using rule 76 (lst_single)


State 289

   67 single_operation: '!' expression .

    ')'  reduce using rule 67 (single_operation)


State 290

   47 func_calling: ID '(' . lst_params ')'

    NUM_INT    shift, and go to state 153
    NUM_FLOAT  shift, and go to state 154
    NIL_CNST   shift, and go to state 155
    ID         shift, and go to state 156
    '+'        shift, and go to state 157
    '-'        shift, and go to state 158
    '%'        shift, and go to state 159
    '?'        shift, and go to state 160
    '!'        shift, and go to state 161

    ')'  reduce using rule 18 (lst_params)

    lst_params          go to state 396
    lst_calling_params  go to state 103
    func_calling        go to state 162
    expression          go to state 163
    const               go to state 164
    number              go to state 165
    operation           go to state 104
    single_operation    go to state 166
    arith_binary        go to state 167
    arith_single        go to state 168
    lst_single          go to state 169
    lst_binary          go to state 170


State 291

   73 arith_single: '+' expression .

    ';'         reduce using rule 73 (arith_single)
    AND         reduce using rule 73 (arith_single)
    OR          reduce using rule 73 (arith_single)
    GREATER     reduce using rule 73 (arith_single)
    GREATER_EQ  reduce using rule 73 (arith_single)
    LESS        reduce using rule 73 (arith_single)
    LESS_EQ     reduce using rule 73 (arith_single)
    EQUAL       reduce using rule 73 (arith_single)
    NOT_EQ      reduce using rule 73 (arith_single)


State 292

   74 arith_single: '-' expression .

    ';'         reduce using rule 74 (arith_single)
    AND         reduce using rule 74 (arith_single)
    OR          reduce using rule 74 (arith_single)
    GREATER     reduce using rule 74 (arith_single)
    GREATER_EQ  reduce using rule 74 (arith_single)
    LESS        reduce using rule 74 (arith_single)
    LESS_EQ     reduce using rule 74 (arith_single)
    EQUAL       reduce using rule 74 (arith_single)
    NOT_EQ      reduce using rule 74 (arith_single)


State 293

   75 lst_single: '%' expression .

    ';'         reduce using rule 75 (lst_single)
    AND         reduce using rule 75 (lst_single)
    OR          reduce using rule 75 (lst_single)
    GREATER     reduce using rule 75 (lst_single)
    GREATER_EQ  reduce using rule 75 (lst_single)
    LESS        reduce using rule 75 (lst_single)
    LESS_EQ     reduce using rule 75 (lst_single)
    EQUAL       reduce using rule 75 (lst_single)
    NOT_EQ      reduce using rule 75 (lst_single)


State 294

   76 lst_single: '?' expression .

    ';'         reduce using rule 76 (lst_single)
    AND         reduce using rule 76 (lst_single)
    OR          reduce using rule 76 (lst_single)
    GREATER     reduce using rule 76 (lst_single)
    GREATER_EQ  reduce using rule 76 (lst_single)
    LESS        reduce using rule 76 (lst_single)
    LESS_EQ     reduce using rule 76 (lst_single)
    EQUAL       reduce using rule 76 (lst_single)
    NOT_EQ      reduce using rule 76 (lst_single)


State 295

   67 single_operation: '!' expression .

    ';'         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)


State 296

   47 func_calling: ID '(' . lst_params ')'

    NUM_INT    shift, and go to state 153
    NUM_FLOAT  shift, and go to state 154
    NIL_CNST   shift, and go to state 155
    ID         shift, and go to state 156
    '+'        shift, and go to state 157
    '-'        shift, and go to state 158
    '%'        shift, and go to state 159
    '?'        shift, and go to state 160
    '!'        shift, and go to state 161

    ')'  reduce using rule 18 (lst_params)

    lst_params          go to state 397
    lst_calling_params  go to state 103
    func_calling        go to state 162
    expression          go to state 163
    const               go to state 164
    number              go to state 165
    operation           go to state 104
    single_operation    go to state 166
    arith_binary        go to state 167
    arith_single        go to state 168
    lst_single          go to state 169
    lst_binary          go to state 170


State 297

   73 arith_single: '+' expression .

    ';'         reduce using rule 73 (arith_single)
    AND         reduce using rule 73 (arith_single)
    OR          reduce using rule 73 (arith_single)
    GREATER     reduce using rule 73 (arith_single)
    GREATER_EQ  reduce using rule 73 (arith_single)
    LESS        reduce using rule 73 (arith_single)
    LESS_EQ     reduce using rule 73 (arith_single)
    EQUAL       reduce using rule 73 (arith_single)
    NOT_EQ      reduce using rule 73 (arith_single)
    '+'         reduce using rule 73 (arith_single)
    '-'         reduce using rule 73 (arith_single)
    '*'         reduce using rule 73 (arith_single)
    '/'         reduce using rule 73 (arith_single)


State 298

   74 arith_single: '-' expression .

    ';'         reduce using rule 74 (arith_single)
    AND         reduce using rule 74 (arith_single)
    OR          reduce using rule 74 (arith_single)
    GREATER     reduce using rule 74 (arith_single)
    GREATER_EQ  reduce using rule 74 (arith_single)
    LESS        reduce using rule 74 (arith_single)
    LESS_EQ     reduce using rule 74 (arith_single)
    EQUAL       reduce using rule 74 (arith_single)
    NOT_EQ      reduce using rule 74 (arith_single)
    '+'         reduce using rule 74 (arith_single)
    '-'         reduce using rule 74 (arith_single)
    '*'         reduce using rule 74 (arith_single)
    '/'         reduce using rule 74 (arith_single)


State 299

   75 lst_single: '%' expression .

    ';'         reduce using rule 75 (lst_single)
    AND         reduce using rule 75 (lst_single)
    OR          reduce using rule 75 (lst_single)
    GREATER     reduce using rule 75 (lst_single)
    GREATER_EQ  reduce using rule 75 (lst_single)
    LESS        reduce using rule 75 (lst_single)
    LESS_EQ     reduce using rule 75 (lst_single)
    EQUAL       reduce using rule 75 (lst_single)
    NOT_EQ      reduce using rule 75 (lst_single)
    '+'         reduce using rule 75 (lst_single)
    '-'         reduce using rule 75 (lst_single)
    '*'         reduce using rule 75 (lst_single)
    '/'         reduce using rule 75 (lst_single)


State 300

   76 lst_single: '?' expression .

    ';'         reduce using rule 76 (lst_single)
    AND         reduce using rule 76 (lst_single)
    OR          reduce using rule 76 (lst_single)
    GREATER     reduce using rule 76 (lst_single)
    GREATER_EQ  reduce using rule 76 (lst_single)
    LESS        reduce using rule 76 (lst_single)
    LESS_EQ     reduce using rule 76 (lst_single)
    EQUAL       reduce using rule 76 (lst_single)
    NOT_EQ      reduce using rule 76 (lst_single)
    '+'         reduce using rule 76 (lst_single)
    '-'         reduce using rule 76 (lst_single)
    '*'         reduce using rule 76 (lst_single)
    '/'         reduce using rule 76 (lst_single)


State 301

   67 single_operation: '!' expression .

    ';'         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)
    '+'         reduce using rule 67 (single_operation)
    '-'         reduce using rule 67 (single_operation)
    '*'         reduce using rule 67 (single_operation)
    '/'         reduce using rule 67 (single_operation)


State 302

   54 number: NUM_INT .

    ')'         reduce using rule 54 (number)
    ','         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)


State 303

   55 number: NUM_FLOAT .

    ')'         reduce using rule 55 (number)
    ','         reduce using rule 55 (number)
    AND         reduce using rule 55 (number)
    OR          reduce using rule 55 (number)
    GREATER     reduce using rule 55 (number)
    GREATER_EQ  reduce using rule 55 (number)
    LESS        reduce using rule 55 (number)
    LESS_EQ     reduce using rule 55 (number)
    EQUAL       reduce using rule 55 (number)
    NOT_EQ      reduce using rule 55 (number)


State 304

   53 const: NIL_CNST .

    ')'         reduce using rule 53 (const)
    ','         reduce using rule 53 (const)
    AND         reduce using rule 53 (const)
    OR          reduce using rule 53 (const)
    GREATER     reduce using rule 53 (const)
    GREATER_EQ  reduce using rule 53 (const)
    LESS        reduce using rule 53 (const)
    LESS_EQ     reduce using rule 53 (const)
    EQUAL       reduce using rule 53 (const)
    NOT_EQ      reduce using rule 53 (const)


State 305

   47 func_calling: ID . '(' lst_params ')'
   50 expression: ID .

    '('  shift, and go to state 398

    ')'         reduce using rule 50 (expression)
    ','         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)


State 306

   73 arith_single: '+' . expression

    NUM_INT    shift, and go to state 302
    NUM_FLOAT  shift, and go to state 303
    NIL_CNST   shift, and go to state 304
    ID         shift, and go to state 305
    '+'        shift, and go to state 306
    '-'        shift, and go to state 307
    '%'        shift, and go to state 308
    '?'        shift, and go to state 309
    '!'        shift, and go to state 310

    func_calling      go to state 311
    expression        go to state 399
    const             go to state 313
    number            go to state 314
    single_operation  go to state 315
    arith_single      go to state 316
    lst_single        go to state 317


State 307

   74 arith_single: '-' . expression

    NUM_INT    shift, and go to state 302
    NUM_FLOAT  shift, and go to state 303
    NIL_CNST   shift, and go to state 304
    ID         shift, and go to state 305
    '+'        shift, and go to state 306
    '-'        shift, and go to state 307
    '%'        shift, and go to state 308
    '?'        shift, and go to state 309
    '!'        shift, and go to state 310

    func_calling      go to state 311
    expression        go to state 400
    const             go to state 313
    number            go to state 314
    single_operation  go to state 315
    arith_single      go to state 316
    lst_single        go to state 317


State 308

   75 lst_single: '%' . expression

    NUM_INT    shift, and go to state 302
    NUM_FLOAT  shift, and go to state 303
    NIL_CNST   shift, and go to state 304
    ID         shift, and go to state 305
    '+'        shift, and go to state 306
    '-'        shift, and go to state 307
    '%'        shift, and go to state 308
    '?'        shift, and go to state 309
    '!'        shift, and go to state 310

    func_calling      go to state 311
    expression        go to state 401
    const             go to state 313
    number            go to state 314
    single_operation  go to state 315
    arith_single      go to state 316
    lst_single        go to state 317


State 309

   76 lst_single: '?' . expression

    NUM_INT    shift, and go to state 302
    NUM_FLOAT  shift, and go to state 303
    NIL_CNST   shift, and go to state 304
    ID         shift, and go to state 305
    '+'        shift, and go to state 306
    '-'        shift, and go to state 307
    '%'        shift, and go to state 308
    '?'        shift, and go to state 309
    '!'        shift, and go to state 310

    func_calling      go to state 311
    expression        go to state 402
    const             go to state 313
    number            go to state 314
    single_operation  go to state 315
    arith_single      go to state 316
    lst_single        go to state 317


State 310

   67 single_operation: '!' . expression

    NUM_INT    shift, and go to state 302
    NUM_FLOAT  shift, and go to state 303
    NIL_CNST   shift, and go to state 304
    ID         shift, and go to state 305
    '+'        shift, and go to state 306
    '-'        shift, and go to state 307
    '%'        shift, and go to state 308
    '?'        shift, and go to state 309
    '!'        shift, and go to state 310

    func_calling      go to state 311
    expression        go to state 403
    const             go to state 313
    number            go to state 314
    single_operation  go to state 315
    arith_single      go to state 316
    lst_single        go to state 317


State 311

   48 expression: func_calling .

    ')'         reduce using rule 48 (expression)
    ','         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)


State 312

   64 operation: operation log_operator expression .

    ')'         reduce using rule 64 (operation)
    ','         reduce using rule 64 (operation)
    AND         reduce using rule 64 (operation)
    OR          reduce using rule 64 (operation)
    GREATER     reduce using rule 64 (operation)
    GREATER_EQ  reduce using rule 64 (operation)
    LESS        reduce using rule 64 (operation)
    LESS_EQ     reduce using rule 64 (operation)
    EQUAL       reduce using rule 64 (operation)
    NOT_EQ      reduce using rule 64 (operation)


State 313

   51 expression: const .

    ')'         reduce using rule 51 (expression)
    ','         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)


State 314

   52 const: number .

    ')'         reduce using rule 52 (const)
    ','         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)


State 315

   49 expression: single_operation .

    ')'         reduce using rule 49 (expression)
    ','         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)


State 316

   65 single_operation: arith_single .

    ')'         reduce using rule 65 (single_operation)
    ','         reduce using rule 65 (single_operation)
    AND         reduce using rule 65 (single_operation)
    OR          reduce using rule 65 (single_operation)
    GREATER     reduce using rule 65 (single_operation)
    GREATER_EQ  reduce using rule 65 (single_operation)
    LESS        reduce using rule 65 (single_operation)
    LESS_EQ     reduce using rule 65 (single_operation)
    EQUAL       reduce using rule 65 (single_operation)
    NOT_EQ      reduce using rule 65 (single_operation)


State 317

   66 single_operation: lst_single .

    ')'         reduce using rule 66 (single_operation)
    ','         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)


State 318

   63 operation: operation relation_operator expression .

    ')'         reduce using rule 63 (operation)
    ','         reduce using rule 63 (operation)
    AND         reduce using rule 63 (operation)
    OR          reduce using rule 63 (operation)
    GREATER     reduce using rule 63 (operation)
    GREATER_EQ  reduce using rule 63 (operation)
    LESS        reduce using rule 63 (operation)
    LESS_EQ     reduce using rule 63 (operation)
    EQUAL       reduce using rule 63 (operation)
    NOT_EQ      reduce using rule 63 (operation)


State 319

   54 number: NUM_INT .

    ')'         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)


State 320

   55 number: NUM_FLOAT .

    ')'         reduce using rule 55 (number)
    AND         reduce using rule 55 (number)
    OR          reduce using rule 55 (number)
    GREATER     reduce using rule 55 (number)
    GREATER_EQ  reduce using rule 55 (number)
    LESS        reduce using rule 55 (number)
    LESS_EQ     reduce using rule 55 (number)
    EQUAL       reduce using rule 55 (number)
    NOT_EQ      reduce using rule 55 (number)


State 321

   53 const: NIL_CNST .

    ')'         reduce using rule 53 (const)
    AND         reduce using rule 53 (const)
    OR          reduce using rule 53 (const)
    GREATER     reduce using rule 53 (const)
    GREATER_EQ  reduce using rule 53 (const)
    LESS        reduce using rule 53 (const)
    LESS_EQ     reduce using rule 53 (const)
    EQUAL       reduce using rule 53 (const)
    NOT_EQ      reduce using rule 53 (const)


State 322

   47 func_calling: ID . '(' lst_params ')'
   50 expression: ID .

    '('  shift, and go to state 404

    ')'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)


State 323

   73 arith_single: '+' . expression

    NUM_INT    shift, and go to state 319
    NUM_FLOAT  shift, and go to state 320
    NIL_CNST   shift, and go to state 321
    ID         shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 405
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 324

   74 arith_single: '-' . expression

    NUM_INT    shift, and go to state 319
    NUM_FLOAT  shift, and go to state 320
    NIL_CNST   shift, and go to state 321
    ID         shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 406
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 325

   75 lst_single: '%' . expression

    NUM_INT    shift, and go to state 319
    NUM_FLOAT  shift, and go to state 320
    NIL_CNST   shift, and go to state 321
    ID         shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 407
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 326

   76 lst_single: '?' . expression

    NUM_INT    shift, and go to state 319
    NUM_FLOAT  shift, and go to state 320
    NIL_CNST   shift, and go to state 321
    ID         shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 408
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 327

   67 single_operation: '!' . expression

    NUM_INT    shift, and go to state 319
    NUM_FLOAT  shift, and go to state 320
    NIL_CNST   shift, and go to state 321
    ID         shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 409
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 328

   48 expression: func_calling .

    ')'         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)


State 329

   64 operation: operation log_operator expression .

    ')'         reduce using rule 64 (operation)
    AND         reduce using rule 64 (operation)
    OR          reduce using rule 64 (operation)
    GREATER     reduce using rule 64 (operation)
    GREATER_EQ  reduce using rule 64 (operation)
    LESS        reduce using rule 64 (operation)
    LESS_EQ     reduce using rule 64 (operation)
    EQUAL       reduce using rule 64 (operation)
    NOT_EQ      reduce using rule 64 (operation)


State 330

   51 expression: const .

    ')'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)


State 331

   52 const: number .

    ')'         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)


State 332

   49 expression: single_operation .

    ')'         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)


State 333

   65 single_operation: arith_single .

    ')'         reduce using rule 65 (single_operation)
    AND         reduce using rule 65 (single_operation)
    OR          reduce using rule 65 (single_operation)
    GREATER     reduce using rule 65 (single_operation)
    GREATER_EQ  reduce using rule 65 (single_operation)
    LESS        reduce using rule 65 (single_operation)
    LESS_EQ     reduce using rule 65 (single_operation)
    EQUAL       reduce using rule 65 (single_operation)
    NOT_EQ      reduce using rule 65 (single_operation)


State 334

   66 single_operation: lst_single .

    ')'         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)


State 335

   63 operation: operation relation_operator expression .

    ')'         reduce using rule 63 (operation)
    AND         reduce using rule 63 (operation)
    OR          reduce using rule 63 (operation)
    GREATER     reduce using rule 63 (operation)
    GREATER_EQ  reduce using rule 63 (operation)
    LESS        reduce using rule 63 (operation)
    LESS_EQ     reduce using rule 63 (operation)
    EQUAL       reduce using rule 63 (operation)
    NOT_EQ      reduce using rule 63 (operation)


State 336

   35 return_stmt: RETURN_STM operation . ';'
   63 operation: operation . relation_operator expression
   64          | operation . log_operator expression

    ';'         shift, and go to state 410
    AND         shift, and go to state 88
    OR          shift, and go to state 89
    GREATER     shift, and go to state 90
    GREATER_EQ  shift, and go to state 91
    LESS        shift, and go to state 92
    LESS_EQ     shift, and go to state 93
    EQUAL       shift, and go to state 94
    NOT_EQ      shift, and go to state 95

    log_operator       go to state 96
    relation_operator  go to state 97


State 337

   33 conditional_stmt: IF_STMT '(' . operation ')' command
   34                 | IF_STMT '(' . operation ')' command ELSE_STMT command

    NUM_INT    shift, and go to state 171
    NUM_FLOAT  shift, and go to state 172
    NIL_CNST   shift, and go to state 173
    ID         shift, and go to state 174
    '+'        shift, and go to state 175
    '-'        shift, and go to state 176
    '%'        shift, and go to state 177
    '?'        shift, and go to state 178
    '!'        shift, and go to state 179

    func_calling      go to state 180
    expression        go to state 181
    const             go to state 182
    number            go to state 183
    operation         go to state 411
    single_operation  go to state 184
    arith_binary      go to state 185
    arith_single      go to state 186
    lst_single        go to state 187
    lst_binary        go to state 188


State 338

   37 iteration: FOR_STMT '(' . loop_condition ')' command

    ID  shift, and go to state 108

    loop_condition  go to state 412
    init_stmt       go to state 110


State 339

   42 output: OUTPUT_WRITE '(' . operation ')' ';'
   44       | OUTPUT_WRITE '(' . STRING ')' ';'

    NUM_INT    shift, and go to state 171
    NUM_FLOAT  shift, and go to state 172
    STRING     shift, and go to state 413
    NIL_CNST   shift, and go to state 173
    ID         shift, and go to state 174
    '+'        shift, and go to state 175
    '-'        shift, and go to state 176
    '%'        shift, and go to state 177
    '?'        shift, and go to state 178
    '!'        shift, and go to state 179

    func_calling      go to state 180
    expression        go to state 181
    const             go to state 182
    number            go to state 183
    operation         go to state 414
    single_operation  go to state 184
    arith_binary      go to state 185
    arith_single      go to state 186
    lst_single        go to state 187
    lst_binary        go to state 188


State 340

   43 output: OUTPUT_WRITELN '(' . operation ')' ';'
   45       | OUTPUT_WRITELN '(' . STRING ')' ';'

    NUM_INT    shift, and go to state 171
    NUM_FLOAT  shift, and go to state 172
    STRING     shift, and go to state 415
    NIL_CNST   shift, and go to state 173
    ID         shift, and go to state 174
    '+'        shift, and go to state 175
    '-'        shift, and go to state 176
    '%'        shift, and go to state 177
    '?'        shift, and go to state 178
    '!'        shift, and go to state 179

    func_calling      go to state 180
    expression        go to state 181
    const             go to state 182
    number            go to state 183
    operation         go to state 416
    single_operation  go to state 184
    arith_binary      go to state 185
    arith_single      go to state 186
    lst_single        go to state 187
    lst_binary        go to state 188


State 341

   46 input: INPUT_READ '(' . expression ')' ';'

    NUM_INT    shift, and go to state 189
    NUM_FLOAT  shift, and go to state 190
    NIL_CNST   shift, and go to state 191
    ID         shift, and go to state 192
    '+'        shift, and go to state 193
    '-'        shift, and go to state 194
    '%'        shift, and go to state 195
    '?'        shift, and go to state 196
    '!'        shift, and go to state 197

    func_calling      go to state 198
    expression        go to state 417
    const             go to state 199
    number            go to state 200
    single_operation  go to state 201
    arith_single      go to state 202
    lst_single        go to state 203


State 342

   31 command: '{' block_commands . '}'

    '}'  shift, and go to state 418


State 343

   10 var_declaration: unq_declaration ';' .

    NUM_INT         reduce using rule 10 (var_declaration)
    NUM_FLOAT       reduce using rule 10 (var_declaration)
    NIL_CNST        reduce using rule 10 (var_declaration)
    ID              reduce using rule 10 (var_declaration)
    RETURN_STM      reduce using rule 10 (var_declaration)
    T_INT           reduce using rule 10 (var_declaration)
    T_FLOAT         reduce using rule 10 (var_declaration)
    IF_STMT         reduce using rule 10 (var_declaration)
    ELSE_STMT       reduce using rule 10 (var_declaration)
    FOR_STMT        reduce using rule 10 (var_declaration)
    OUTPUT_WRITE    reduce using rule 10 (var_declaration)
    OUTPUT_WRITELN  reduce using rule 10 (var_declaration)
    INPUT_READ      reduce using rule 10 (var_declaration)
    '{'             reduce using rule 10 (var_declaration)
    '}'             reduce using rule 10 (var_declaration)
    '+'             reduce using rule 10 (var_declaration)
    '-'             reduce using rule 10 (var_declaration)
    '%'             reduce using rule 10 (var_declaration)
    '?'             reduce using rule 10 (var_declaration)
    '!'             reduce using rule 10 (var_declaration)


State 344

   36 init_variable: init_stmt ';' .

    NUM_INT         reduce using rule 36 (init_variable)
    NUM_FLOAT       reduce using rule 36 (init_variable)
    NIL_CNST        reduce using rule 36 (init_variable)
    ID              reduce using rule 36 (init_variable)
    RETURN_STM      reduce using rule 36 (init_variable)
    T_INT           reduce using rule 36 (init_variable)
    T_FLOAT         reduce using rule 36 (init_variable)
    IF_STMT         reduce using rule 36 (init_variable)
    ELSE_STMT       reduce using rule 36 (init_variable)
    FOR_STMT        reduce using rule 36 (init_variable)
    OUTPUT_WRITE    reduce using rule 36 (init_variable)
    OUTPUT_WRITELN  reduce using rule 36 (init_variable)
    INPUT_READ      reduce using rule 36 (init_variable)
    '{'             reduce using rule 36 (init_variable)
    '}'             reduce using rule 36 (init_variable)
    '+'             reduce using rule 36 (init_variable)
    '-'             reduce using rule 36 (init_variable)
    '%'             reduce using rule 36 (init_variable)
    '?'             reduce using rule 36 (init_variable)
    '!'             reduce using rule 36 (init_variable)


State 345

   32 command: operation ';' .

    NUM_INT         reduce using rule 32 (command)
    NUM_FLOAT       reduce using rule 32 (command)
    NIL_CNST        reduce using rule 32 (command)
    ID              reduce using rule 32 (command)
    RETURN_STM      reduce using rule 32 (command)
    T_INT           reduce using rule 32 (command)
    T_FLOAT         reduce using rule 32 (command)
    IF_STMT         reduce using rule 32 (command)
    ELSE_STMT       reduce using rule 32 (command)
    FOR_STMT        reduce using rule 32 (command)
    OUTPUT_WRITE    reduce using rule 32 (command)
    OUTPUT_WRITELN  reduce using rule 32 (command)
    INPUT_READ      reduce using rule 32 (command)
    '{'             reduce using rule 32 (command)
    '}'             reduce using rule 32 (command)
    '+'             reduce using rule 32 (command)
    '-'             reduce using rule 32 (command)
    '%'             reduce using rule 32 (command)
    '?'             reduce using rule 32 (command)
    '!'             reduce using rule 32 (command)


State 346

   39 init_stmt: ID '=' . operation

    NUM_INT    shift, and go to state 171
    NUM_FLOAT  shift, and go to state 172
    NIL_CNST   shift, and go to state 173
    ID         shift, and go to state 174
    '+'        shift, and go to state 175
    '-'        shift, and go to state 176
    '%'        shift, and go to state 177
    '?'        shift, and go to state 178
    '!'        shift, and go to state 179

    func_calling      go to state 180
    expression        go to state 181
    const             go to state 182
    number            go to state 183
    operation         go to state 419
    single_operation  go to state 184
    arith_binary      go to state 185
    arith_single      go to state 186
    lst_single        go to state 187
    lst_binary        go to state 188


State 347

   12 unq_declaration: type $@2 ID .

    ')'  reduce using rule 12 (unq_declaration)
    ','  reduce using rule 12 (unq_declaration)


State 348

   12 unq_declaration: type $@2 ID .

    ';'  reduce using rule 12 (unq_declaration)


State 349

   47 func_calling: ID '(' lst_params . ')'

    ')'  shift, and go to state 420


State 350

   77 lst_binary: expression FILTER expression .

    ')'         reduce using rule 77 (lst_binary)
    ','         reduce using rule 77 (lst_binary)
    AND         reduce using rule 77 (lst_binary)
    OR          reduce using rule 77 (lst_binary)
    GREATER     reduce using rule 77 (lst_binary)
    GREATER_EQ  reduce using rule 77 (lst_binary)
    LESS        reduce using rule 77 (lst_binary)
    LESS_EQ     reduce using rule 77 (lst_binary)
    EQUAL       reduce using rule 77 (lst_binary)
    NOT_EQ      reduce using rule 77 (lst_binary)


State 351

   78 lst_binary: expression MAP expression .

    ')'         reduce using rule 78 (lst_binary)
    ','         reduce using rule 78 (lst_binary)
    AND         reduce using rule 78 (lst_binary)
    OR          reduce using rule 78 (lst_binary)
    GREATER     reduce using rule 78 (lst_binary)
    GREATER_EQ  reduce using rule 78 (lst_binary)
    LESS        reduce using rule 78 (lst_binary)
    LESS_EQ     reduce using rule 78 (lst_binary)
    EQUAL       reduce using rule 78 (lst_binary)
    NOT_EQ      reduce using rule 78 (lst_binary)


State 352

   79 lst_binary: expression ':' expression .

    ')'         reduce using rule 79 (lst_binary)
    ','         reduce using rule 79 (lst_binary)
    AND         reduce using rule 79 (lst_binary)
    OR          reduce using rule 79 (lst_binary)
    GREATER     reduce using rule 79 (lst_binary)
    GREATER_EQ  reduce using rule 79 (lst_binary)
    LESS        reduce using rule 79 (lst_binary)
    LESS_EQ     reduce using rule 79 (lst_binary)
    EQUAL       reduce using rule 79 (lst_binary)
    NOT_EQ      reduce using rule 79 (lst_binary)


State 353

   54 number: NUM_INT .

    ')'         reduce using rule 54 (number)
    ','         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)
    '+'         reduce using rule 54 (number)
    '-'         reduce using rule 54 (number)
    '*'         reduce using rule 54 (number)
    '/'         reduce using rule 54 (number)


State 354

   55 number: NUM_FLOAT .

    ')'         reduce using rule 55 (number)
    ','         reduce using rule 55 (number)
    AND         reduce using rule 55 (number)
    OR          reduce using rule 55 (number)
    GREATER     reduce using rule 55 (number)
    GREATER_EQ  reduce using rule 55 (number)
    LESS        reduce using rule 55 (number)
    LESS_EQ     reduce using rule 55 (number)
    EQUAL       reduce using rule 55 (number)
    NOT_EQ      reduce using rule 55 (number)
    '+'         reduce using rule 55 (number)
    '-'         reduce using rule 55 (number)
    '*'         reduce using rule 55 (number)
    '/'         reduce using rule 55 (number)


State 355

   53 const: NIL_CNST .

    ')'         reduce using rule 53 (const)
    ','         reduce using rule 53 (const)
    AND         reduce using rule 53 (const)
    OR          reduce using rule 53 (const)
    GREATER     reduce using rule 53 (const)
    GREATER_EQ  reduce using rule 53 (const)
    LESS        reduce using rule 53 (const)
    LESS_EQ     reduce using rule 53 (const)
    EQUAL       reduce using rule 53 (const)
    NOT_EQ      reduce using rule 53 (const)
    '+'         reduce using rule 53 (const)
    '-'         reduce using rule 53 (const)
    '*'         reduce using rule 53 (const)
    '/'         reduce using rule 53 (const)


State 356

   47 func_calling: ID . '(' lst_params ')'
   50 expression: ID .

    '('  shift, and go to state 421

    ')'         reduce using rule 50 (expression)
    ','         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)


State 357

   73 arith_single: '+' . expression

    NUM_INT    shift, and go to state 353
    NUM_FLOAT  shift, and go to state 354
    NIL_CNST   shift, and go to state 355
    ID         shift, and go to state 356
    '+'        shift, and go to state 357
    '-'        shift, and go to state 358
    '%'        shift, and go to state 359
    '?'        shift, and go to state 360
    '!'        shift, and go to state 361

    func_calling      go to state 362
    expression        go to state 422
    const             go to state 364
    number            go to state 365
    single_operation  go to state 366
    arith_single      go to state 367
    lst_single        go to state 368


State 358

   74 arith_single: '-' . expression

    NUM_INT    shift, and go to state 353
    NUM_FLOAT  shift, and go to state 354
    NIL_CNST   shift, and go to state 355
    ID         shift, and go to state 356
    '+'        shift, and go to state 357
    '-'        shift, and go to state 358
    '%'        shift, and go to state 359
    '?'        shift, and go to state 360
    '!'        shift, and go to state 361

    func_calling      go to state 362
    expression        go to state 423
    const             go to state 364
    number            go to state 365
    single_operation  go to state 366
    arith_single      go to state 367
    lst_single        go to state 368


State 359

   75 lst_single: '%' . expression

    NUM_INT    shift, and go to state 353
    NUM_FLOAT  shift, and go to state 354
    NIL_CNST   shift, and go to state 355
    ID         shift, and go to state 356
    '+'        shift, and go to state 357
    '-'        shift, and go to state 358
    '%'        shift, and go to state 359
    '?'        shift, and go to state 360
    '!'        shift, and go to state 361

    func_calling      go to state 362
    expression        go to state 424
    const             go to state 364
    number            go to state 365
    single_operation  go to state 366
    arith_single      go to state 367
    lst_single        go to state 368


State 360

   76 lst_single: '?' . expression

    NUM_INT    shift, and go to state 353
    NUM_FLOAT  shift, and go to state 354
    NIL_CNST   shift, and go to state 355
    ID         shift, and go to state 356
    '+'        shift, and go to state 357
    '-'        shift, and go to state 358
    '%'        shift, and go to state 359
    '?'        shift, and go to state 360
    '!'        shift, and go to state 361

    func_calling      go to state 362
    expression        go to state 425
    const             go to state 364
    number            go to state 365
    single_operation  go to state 366
    arith_single      go to state 367
    lst_single        go to state 368


State 361

   67 single_operation: '!' . expression

    NUM_INT    shift, and go to state 353
    NUM_FLOAT  shift, and go to state 354
    NIL_CNST   shift, and go to state 355
    ID         shift, and go to state 356
    '+'        shift, and go to state 357
    '-'        shift, and go to state 358
    '%'        shift, and go to state 359
    '?'        shift, and go to state 360
    '!'        shift, and go to state 361

    func_calling      go to state 362
    expression        go to state 426
    const             go to state 364
    number            go to state 365
    single_operation  go to state 366
    arith_single      go to state 367
    lst_single        go to state 368


State 362

   48 expression: func_calling .

    ')'         reduce using rule 48 (expression)
    ','         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)
    '+'         reduce using rule 48 (expression)
    '-'         reduce using rule 48 (expression)
    '*'         reduce using rule 48 (expression)
    '/'         reduce using rule 48 (expression)


State 363

   68 arith_binary: arith_binary '+' expression .

    ')'         reduce using rule 68 (arith_binary)
    ','         reduce using rule 68 (arith_binary)
    AND         reduce using rule 68 (arith_binary)
    OR          reduce using rule 68 (arith_binary)
    GREATER     reduce using rule 68 (arith_binary)
    GREATER_EQ  reduce using rule 68 (arith_binary)
    LESS        reduce using rule 68 (arith_binary)
    LESS_EQ     reduce using rule 68 (arith_binary)
    EQUAL       reduce using rule 68 (arith_binary)
    NOT_EQ      reduce using rule 68 (arith_binary)
    '+'         reduce using rule 68 (arith_binary)
    '-'         reduce using rule 68 (arith_binary)
    '*'         reduce using rule 68 (arith_binary)
    '/'         reduce using rule 68 (arith_binary)


State 364

   51 expression: const .

    ')'         reduce using rule 51 (expression)
    ','         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)


State 365

   52 const: number .

    ')'         reduce using rule 52 (const)
    ','         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)
    '+'         reduce using rule 52 (const)
    '-'         reduce using rule 52 (const)
    '*'         reduce using rule 52 (const)
    '/'         reduce using rule 52 (const)


State 366

   49 expression: single_operation .

    ')'         reduce using rule 49 (expression)
    ','         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)
    '+'         reduce using rule 49 (expression)
    '-'         reduce using rule 49 (expression)
    '*'         reduce using rule 49 (expression)
    '/'         reduce using rule 49 (expression)


State 367

   65 single_operation: arith_single .

    ')'         reduce using rule 65 (single_operation)
    ','         reduce using rule 65 (single_operation)
    AND         reduce using rule 65 (single_operation)
    OR          reduce using rule 65 (single_operation)
    GREATER     reduce using rule 65 (single_operation)
    GREATER_EQ  reduce using rule 65 (single_operation)
    LESS        reduce using rule 65 (single_operation)
    LESS_EQ     reduce using rule 65 (single_operation)
    EQUAL       reduce using rule 65 (single_operation)
    NOT_EQ      reduce using rule 65 (single_operation)
    '+'         reduce using rule 65 (single_operation)
    '-'         reduce using rule 65 (single_operation)
    '*'         reduce using rule 65 (single_operation)
    '/'         reduce using rule 65 (single_operation)


State 368

   66 single_operation: lst_single .

    ')'         reduce using rule 66 (single_operation)
    ','         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)
    '+'         reduce using rule 66 (single_operation)
    '-'         reduce using rule 66 (single_operation)
    '*'         reduce using rule 66 (single_operation)
    '/'         reduce using rule 66 (single_operation)


State 369

   69 arith_binary: arith_binary '-' expression .

    ')'         reduce using rule 69 (arith_binary)
    ','         reduce using rule 69 (arith_binary)
    AND         reduce using rule 69 (arith_binary)
    OR          reduce using rule 69 (arith_binary)
    GREATER     reduce using rule 69 (arith_binary)
    GREATER_EQ  reduce using rule 69 (arith_binary)
    LESS        reduce using rule 69 (arith_binary)
    LESS_EQ     reduce using rule 69 (arith_binary)
    EQUAL       reduce using rule 69 (arith_binary)
    NOT_EQ      reduce using rule 69 (arith_binary)
    '+'         reduce using rule 69 (arith_binary)
    '-'         reduce using rule 69 (arith_binary)
    '*'         reduce using rule 69 (arith_binary)
    '/'         reduce using rule 69 (arith_binary)


State 370

   70 arith_binary: arith_binary '*' expression .

    ')'         reduce using rule 70 (arith_binary)
    ','         reduce using rule 70 (arith_binary)
    AND         reduce using rule 70 (arith_binary)
    OR          reduce using rule 70 (arith_binary)
    GREATER     reduce using rule 70 (arith_binary)
    GREATER_EQ  reduce using rule 70 (arith_binary)
    LESS        reduce using rule 70 (arith_binary)
    LESS_EQ     reduce using rule 70 (arith_binary)
    EQUAL       reduce using rule 70 (arith_binary)
    NOT_EQ      reduce using rule 70 (arith_binary)
    '+'         reduce using rule 70 (arith_binary)
    '-'         reduce using rule 70 (arith_binary)
    '*'         reduce using rule 70 (arith_binary)
    '/'         reduce using rule 70 (arith_binary)


State 371

   71 arith_binary: arith_binary '/' expression .

    ')'         reduce using rule 71 (arith_binary)
    ','         reduce using rule 71 (arith_binary)
    AND         reduce using rule 71 (arith_binary)
    OR          reduce using rule 71 (arith_binary)
    GREATER     reduce using rule 71 (arith_binary)
    GREATER_EQ  reduce using rule 71 (arith_binary)
    LESS        reduce using rule 71 (arith_binary)
    LESS_EQ     reduce using rule 71 (arith_binary)
    EQUAL       reduce using rule 71 (arith_binary)
    NOT_EQ      reduce using rule 71 (arith_binary)
    '+'         reduce using rule 71 (arith_binary)
    '-'         reduce using rule 71 (arith_binary)
    '*'         reduce using rule 71 (arith_binary)
    '/'         reduce using rule 71 (arith_binary)


State 372

   47 func_calling: ID '(' lst_params . ')'

    ')'  shift, and go to state 427


State 373

   77 lst_binary: expression FILTER expression .

    ')'         reduce using rule 77 (lst_binary)
    AND         reduce using rule 77 (lst_binary)
    OR          reduce using rule 77 (lst_binary)
    GREATER     reduce using rule 77 (lst_binary)
    GREATER_EQ  reduce using rule 77 (lst_binary)
    LESS        reduce using rule 77 (lst_binary)
    LESS_EQ     reduce using rule 77 (lst_binary)
    EQUAL       reduce using rule 77 (lst_binary)
    NOT_EQ      reduce using rule 77 (lst_binary)


State 374

   78 lst_binary: expression MAP expression .

    ')'         reduce using rule 78 (lst_binary)
    AND         reduce using rule 78 (lst_binary)
    OR          reduce using rule 78 (lst_binary)
    GREATER     reduce using rule 78 (lst_binary)
    GREATER_EQ  reduce using rule 78 (lst_binary)
    LESS        reduce using rule 78 (lst_binary)
    LESS_EQ     reduce using rule 78 (lst_binary)
    EQUAL       reduce using rule 78 (lst_binary)
    NOT_EQ      reduce using rule 78 (lst_binary)


State 375

   79 lst_binary: expression ':' expression .

    ')'         reduce using rule 79 (lst_binary)
    AND         reduce using rule 79 (lst_binary)
    OR          reduce using rule 79 (lst_binary)
    GREATER     reduce using rule 79 (lst_binary)
    GREATER_EQ  reduce using rule 79 (lst_binary)
    LESS        reduce using rule 79 (lst_binary)
    LESS_EQ     reduce using rule 79 (lst_binary)
    EQUAL       reduce using rule 79 (lst_binary)
    NOT_EQ      reduce using rule 79 (lst_binary)


State 376

   54 number: NUM_INT .

    ')'         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)
    '+'         reduce using rule 54 (number)
    '-'         reduce using rule 54 (number)
    '*'         reduce using rule 54 (number)
    '/'         reduce using rule 54 (number)


State 377

   55 number: NUM_FLOAT .

    ')'         reduce using rule 55 (number)
    AND         reduce using rule 55 (number)
    OR          reduce using rule 55 (number)
    GREATER     reduce using rule 55 (number)
    GREATER_EQ  reduce using rule 55 (number)
    LESS        reduce using rule 55 (number)
    LESS_EQ     reduce using rule 55 (number)
    EQUAL       reduce using rule 55 (number)
    NOT_EQ      reduce using rule 55 (number)
    '+'         reduce using rule 55 (number)
    '-'         reduce using rule 55 (number)
    '*'         reduce using rule 55 (number)
    '/'         reduce using rule 55 (number)


State 378

   53 const: NIL_CNST .

    ')'         reduce using rule 53 (const)
    AND         reduce using rule 53 (const)
    OR          reduce using rule 53 (const)
    GREATER     reduce using rule 53 (const)
    GREATER_EQ  reduce using rule 53 (const)
    LESS        reduce using rule 53 (const)
    LESS_EQ     reduce using rule 53 (const)
    EQUAL       reduce using rule 53 (const)
    NOT_EQ      reduce using rule 53 (const)
    '+'         reduce using rule 53 (const)
    '-'         reduce using rule 53 (const)
    '*'         reduce using rule 53 (const)
    '/'         reduce using rule 53 (const)


State 379

   47 func_calling: ID . '(' lst_params ')'
   50 expression: ID .

    '('  shift, and go to state 428

    ')'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)


State 380

   73 arith_single: '+' . expression

    NUM_INT    shift, and go to state 376
    NUM_FLOAT  shift, and go to state 377
    NIL_CNST   shift, and go to state 378
    ID         shift, and go to state 379
    '+'        shift, and go to state 380
    '-'        shift, and go to state 381
    '%'        shift, and go to state 382
    '?'        shift, and go to state 383
    '!'        shift, and go to state 384

    func_calling      go to state 385
    expression        go to state 429
    const             go to state 387
    number            go to state 388
    single_operation  go to state 389
    arith_single      go to state 390
    lst_single        go to state 391


State 381

   74 arith_single: '-' . expression

    NUM_INT    shift, and go to state 376
    NUM_FLOAT  shift, and go to state 377
    NIL_CNST   shift, and go to state 378
    ID         shift, and go to state 379
    '+'        shift, and go to state 380
    '-'        shift, and go to state 381
    '%'        shift, and go to state 382
    '?'        shift, and go to state 383
    '!'        shift, and go to state 384

    func_calling      go to state 385
    expression        go to state 430
    const             go to state 387
    number            go to state 388
    single_operation  go to state 389
    arith_single      go to state 390
    lst_single        go to state 391


State 382

   75 lst_single: '%' . expression

    NUM_INT    shift, and go to state 376
    NUM_FLOAT  shift, and go to state 377
    NIL_CNST   shift, and go to state 378
    ID         shift, and go to state 379
    '+'        shift, and go to state 380
    '-'        shift, and go to state 381
    '%'        shift, and go to state 382
    '?'        shift, and go to state 383
    '!'        shift, and go to state 384

    func_calling      go to state 385
    expression        go to state 431
    const             go to state 387
    number            go to state 388
    single_operation  go to state 389
    arith_single      go to state 390
    lst_single        go to state 391


State 383

   76 lst_single: '?' . expression

    NUM_INT    shift, and go to state 376
    NUM_FLOAT  shift, and go to state 377
    NIL_CNST   shift, and go to state 378
    ID         shift, and go to state 379
    '+'        shift, and go to state 380
    '-'        shift, and go to state 381
    '%'        shift, and go to state 382
    '?'        shift, and go to state 383
    '!'        shift, and go to state 384

    func_calling      go to state 385
    expression        go to state 432
    const             go to state 387
    number            go to state 388
    single_operation  go to state 389
    arith_single      go to state 390
    lst_single        go to state 391


State 384

   67 single_operation: '!' . expression

    NUM_INT    shift, and go to state 376
    NUM_FLOAT  shift, and go to state 377
    NIL_CNST   shift, and go to state 378
    ID         shift, and go to state 379
    '+'        shift, and go to state 380
    '-'        shift, and go to state 381
    '%'        shift, and go to state 382
    '?'        shift, and go to state 383
    '!'        shift, and go to state 384

    func_calling      go to state 385
    expression        go to state 433
    const             go to state 387
    number            go to state 388
    single_operation  go to state 389
    arith_single      go to state 390
    lst_single        go to state 391


State 385

   48 expression: func_calling .

    ')'         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)
    '+'         reduce using rule 48 (expression)
    '-'         reduce using rule 48 (expression)
    '*'         reduce using rule 48 (expression)
    '/'         reduce using rule 48 (expression)


State 386

   68 arith_binary: arith_binary '+' expression .

    ')'         reduce using rule 68 (arith_binary)
    AND         reduce using rule 68 (arith_binary)
    OR          reduce using rule 68 (arith_binary)
    GREATER     reduce using rule 68 (arith_binary)
    GREATER_EQ  reduce using rule 68 (arith_binary)
    LESS        reduce using rule 68 (arith_binary)
    LESS_EQ     reduce using rule 68 (arith_binary)
    EQUAL       reduce using rule 68 (arith_binary)
    NOT_EQ      reduce using rule 68 (arith_binary)
    '+'         reduce using rule 68 (arith_binary)
    '-'         reduce using rule 68 (arith_binary)
    '*'         reduce using rule 68 (arith_binary)
    '/'         reduce using rule 68 (arith_binary)


State 387

   51 expression: const .

    ')'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)


State 388

   52 const: number .

    ')'         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)
    '+'         reduce using rule 52 (const)
    '-'         reduce using rule 52 (const)
    '*'         reduce using rule 52 (const)
    '/'         reduce using rule 52 (const)


State 389

   49 expression: single_operation .

    ')'         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)
    '+'         reduce using rule 49 (expression)
    '-'         reduce using rule 49 (expression)
    '*'         reduce using rule 49 (expression)
    '/'         reduce using rule 49 (expression)


State 390

   65 single_operation: arith_single .

    ')'         reduce using rule 65 (single_operation)
    AND         reduce using rule 65 (single_operation)
    OR          reduce using rule 65 (single_operation)
    GREATER     reduce using rule 65 (single_operation)
    GREATER_EQ  reduce using rule 65 (single_operation)
    LESS        reduce using rule 65 (single_operation)
    LESS_EQ     reduce using rule 65 (single_operation)
    EQUAL       reduce using rule 65 (single_operation)
    NOT_EQ      reduce using rule 65 (single_operation)
    '+'         reduce using rule 65 (single_operation)
    '-'         reduce using rule 65 (single_operation)
    '*'         reduce using rule 65 (single_operation)
    '/'         reduce using rule 65 (single_operation)


State 391

   66 single_operation: lst_single .

    ')'         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)
    '+'         reduce using rule 66 (single_operation)
    '-'         reduce using rule 66 (single_operation)
    '*'         reduce using rule 66 (single_operation)
    '/'         reduce using rule 66 (single_operation)


State 392

   69 arith_binary: arith_binary '-' expression .

    ')'         reduce using rule 69 (arith_binary)
    AND         reduce using rule 69 (arith_binary)
    OR          reduce using rule 69 (arith_binary)
    GREATER     reduce using rule 69 (arith_binary)
    GREATER_EQ  reduce using rule 69 (arith_binary)
    LESS        reduce using rule 69 (arith_binary)
    LESS_EQ     reduce using rule 69 (arith_binary)
    EQUAL       reduce using rule 69 (arith_binary)
    NOT_EQ      reduce using rule 69 (arith_binary)
    '+'         reduce using rule 69 (arith_binary)
    '-'         reduce using rule 69 (arith_binary)
    '*'         reduce using rule 69 (arith_binary)
    '/'         reduce using rule 69 (arith_binary)


State 393

   70 arith_binary: arith_binary '*' expression .

    ')'         reduce using rule 70 (arith_binary)
    AND         reduce using rule 70 (arith_binary)
    OR          reduce using rule 70 (arith_binary)
    GREATER     reduce using rule 70 (arith_binary)
    GREATER_EQ  reduce using rule 70 (arith_binary)
    LESS        reduce using rule 70 (arith_binary)
    LESS_EQ     reduce using rule 70 (arith_binary)
    EQUAL       reduce using rule 70 (arith_binary)
    NOT_EQ      reduce using rule 70 (arith_binary)
    '+'         reduce using rule 70 (arith_binary)
    '-'         reduce using rule 70 (arith_binary)
    '*'         reduce using rule 70 (arith_binary)
    '/'         reduce using rule 70 (arith_binary)


State 394

   71 arith_binary: arith_binary '/' expression .

    ')'         reduce using rule 71 (arith_binary)
    AND         reduce using rule 71 (arith_binary)
    OR          reduce using rule 71 (arith_binary)
    GREATER     reduce using rule 71 (arith_binary)
    GREATER_EQ  reduce using rule 71 (arith_binary)
    LESS        reduce using rule 71 (arith_binary)
    LESS_EQ     reduce using rule 71 (arith_binary)
    EQUAL       reduce using rule 71 (arith_binary)
    NOT_EQ      reduce using rule 71 (arith_binary)
    '+'         reduce using rule 71 (arith_binary)
    '-'         reduce using rule 71 (arith_binary)
    '*'         reduce using rule 71 (arith_binary)
    '/'         reduce using rule 71 (arith_binary)


State 395

   47 func_calling: ID '(' lst_params . ')'

    ')'  shift, and go to state 434


State 396

   47 func_calling: ID '(' lst_params . ')'

    ')'  shift, and go to state 435


State 397

   47 func_calling: ID '(' lst_params . ')'

    ')'  shift, and go to state 436


State 398

   47 func_calling: ID '(' . lst_params ')'

    NUM_INT    shift, and go to state 153
    NUM_FLOAT  shift, and go to state 154
    NIL_CNST   shift, and go to state 155
    ID         shift, and go to state 156
    '+'        shift, and go to state 157
    '-'        shift, and go to state 158
    '%'        shift, and go to state 159
    '?'        shift, and go to state 160
    '!'        shift, and go to state 161

    ')'  reduce using rule 18 (lst_params)

    lst_params          go to state 437
    lst_calling_params  go to state 103
    func_calling        go to state 162
    expression          go to state 163
    const               go to state 164
    number              go to state 165
    operation           go to state 104
    single_operation    go to state 166
    arith_binary        go to state 167
    arith_single        go to state 168
    lst_single          go to state 169
    lst_binary          go to state 170


State 399

   73 arith_single: '+' expression .

    ')'         reduce using rule 73 (arith_single)
    ','         reduce using rule 73 (arith_single)
    AND         reduce using rule 73 (arith_single)
    OR          reduce using rule 73 (arith_single)
    GREATER     reduce using rule 73 (arith_single)
    GREATER_EQ  reduce using rule 73 (arith_single)
    LESS        reduce using rule 73 (arith_single)
    LESS_EQ     reduce using rule 73 (arith_single)
    EQUAL       reduce using rule 73 (arith_single)
    NOT_EQ      reduce using rule 73 (arith_single)


State 400

   74 arith_single: '-' expression .

    ')'         reduce using rule 74 (arith_single)
    ','         reduce using rule 74 (arith_single)
    AND         reduce using rule 74 (arith_single)
    OR          reduce using rule 74 (arith_single)
    GREATER     reduce using rule 74 (arith_single)
    GREATER_EQ  reduce using rule 74 (arith_single)
    LESS        reduce using rule 74 (arith_single)
    LESS_EQ     reduce using rule 74 (arith_single)
    EQUAL       reduce using rule 74 (arith_single)
    NOT_EQ      reduce using rule 74 (arith_single)


State 401

   75 lst_single: '%' expression .

    ')'         reduce using rule 75 (lst_single)
    ','         reduce using rule 75 (lst_single)
    AND         reduce using rule 75 (lst_single)
    OR          reduce using rule 75 (lst_single)
    GREATER     reduce using rule 75 (lst_single)
    GREATER_EQ  reduce using rule 75 (lst_single)
    LESS        reduce using rule 75 (lst_single)
    LESS_EQ     reduce using rule 75 (lst_single)
    EQUAL       reduce using rule 75 (lst_single)
    NOT_EQ      reduce using rule 75 (lst_single)


State 402

   76 lst_single: '?' expression .

    ')'         reduce using rule 76 (lst_single)
    ','         reduce using rule 76 (lst_single)
    AND         reduce using rule 76 (lst_single)
    OR          reduce using rule 76 (lst_single)
    GREATER     reduce using rule 76 (lst_single)
    GREATER_EQ  reduce using rule 76 (lst_single)
    LESS        reduce using rule 76 (lst_single)
    LESS_EQ     reduce using rule 76 (lst_single)
    EQUAL       reduce using rule 76 (lst_single)
    NOT_EQ      reduce using rule 76 (lst_single)


State 403

   67 single_operation: '!' expression .

    ')'         reduce using rule 67 (single_operation)
    ','         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)


State 404

   47 func_calling: ID '(' . lst_params ')'

    NUM_INT    shift, and go to state 153
    NUM_FLOAT  shift, and go to state 154
    NIL_CNST   shift, and go to state 155
    ID         shift, and go to state 156
    '+'        shift, and go to state 157
    '-'        shift, and go to state 158
    '%'        shift, and go to state 159
    '?'        shift, and go to state 160
    '!'        shift, and go to state 161

    ')'  reduce using rule 18 (lst_params)

    lst_params          go to state 438
    lst_calling_params  go to state 103
    func_calling        go to state 162
    expression          go to state 163
    const               go to state 164
    number              go to state 165
    operation           go to state 104
    single_operation    go to state 166
    arith_binary        go to state 167
    arith_single        go to state 168
    lst_single          go to state 169
    lst_binary          go to state 170


State 405

   73 arith_single: '+' expression .

    ')'         reduce using rule 73 (arith_single)
    AND         reduce using rule 73 (arith_single)
    OR          reduce using rule 73 (arith_single)
    GREATER     reduce using rule 73 (arith_single)
    GREATER_EQ  reduce using rule 73 (arith_single)
    LESS        reduce using rule 73 (arith_single)
    LESS_EQ     reduce using rule 73 (arith_single)
    EQUAL       reduce using rule 73 (arith_single)
    NOT_EQ      reduce using rule 73 (arith_single)


State 406

   74 arith_single: '-' expression .

    ')'         reduce using rule 74 (arith_single)
    AND         reduce using rule 74 (arith_single)
    OR          reduce using rule 74 (arith_single)
    GREATER     reduce using rule 74 (arith_single)
    GREATER_EQ  reduce using rule 74 (arith_single)
    LESS        reduce using rule 74 (arith_single)
    LESS_EQ     reduce using rule 74 (arith_single)
    EQUAL       reduce using rule 74 (arith_single)
    NOT_EQ      reduce using rule 74 (arith_single)


State 407

   75 lst_single: '%' expression .

    ')'         reduce using rule 75 (lst_single)
    AND         reduce using rule 75 (lst_single)
    OR          reduce using rule 75 (lst_single)
    GREATER     reduce using rule 75 (lst_single)
    GREATER_EQ  reduce using rule 75 (lst_single)
    LESS        reduce using rule 75 (lst_single)
    LESS_EQ     reduce using rule 75 (lst_single)
    EQUAL       reduce using rule 75 (lst_single)
    NOT_EQ      reduce using rule 75 (lst_single)


State 408

   76 lst_single: '?' expression .

    ')'         reduce using rule 76 (lst_single)
    AND         reduce using rule 76 (lst_single)
    OR          reduce using rule 76 (lst_single)
    GREATER     reduce using rule 76 (lst_single)
    GREATER_EQ  reduce using rule 76 (lst_single)
    LESS        reduce using rule 76 (lst_single)
    LESS_EQ     reduce using rule 76 (lst_single)
    EQUAL       reduce using rule 76 (lst_single)
    NOT_EQ      reduce using rule 76 (lst_single)


State 409

   67 single_operation: '!' expression .

    ')'         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)


State 410

   35 return_stmt: RETURN_STM operation ';' .

    NUM_INT         reduce using rule 35 (return_stmt)
    NUM_FLOAT       reduce using rule 35 (return_stmt)
    NIL_CNST        reduce using rule 35 (return_stmt)
    ID              reduce using rule 35 (return_stmt)
    RETURN_STM      reduce using rule 35 (return_stmt)
    T_INT           reduce using rule 35 (return_stmt)
    T_FLOAT         reduce using rule 35 (return_stmt)
    IF_STMT         reduce using rule 35 (return_stmt)
    ELSE_STMT       reduce using rule 35 (return_stmt)
    FOR_STMT        reduce using rule 35 (return_stmt)
    OUTPUT_WRITE    reduce using rule 35 (return_stmt)
    OUTPUT_WRITELN  reduce using rule 35 (return_stmt)
    INPUT_READ      reduce using rule 35 (return_stmt)
    '{'             reduce using rule 35 (return_stmt)
    '}'             reduce using rule 35 (return_stmt)
    '+'             reduce using rule 35 (return_stmt)
    '-'             reduce using rule 35 (return_stmt)
    '%'             reduce using rule 35 (return_stmt)
    '?'             reduce using rule 35 (return_stmt)
    '!'             reduce using rule 35 (return_stmt)


State 411

   33 conditional_stmt: IF_STMT '(' operation . ')' command
   34                 | IF_STMT '(' operation . ')' command ELSE_STMT command
   63 operation: operation . relation_operator expression
   64          | operation . log_operator expression

    ')'         shift, and go to state 439
    AND         shift, and go to state 88
    OR          shift, and go to state 89
    GREATER     shift, and go to state 90
    GREATER_EQ  shift, and go to state 91
    LESS        shift, and go to state 92
    LESS_EQ     shift, and go to state 93
    EQUAL       shift, and go to state 94
    NOT_EQ      shift, and go to state 95

    log_operator       go to state 236
    relation_operator  go to state 237


State 412

   37 iteration: FOR_STMT '(' loop_condition . ')' command

    ')'  shift, and go to state 440


State 413

   44 output: OUTPUT_WRITE '(' STRING . ')' ';'

    ')'  shift, and go to state 441


State 414

   42 output: OUTPUT_WRITE '(' operation . ')' ';'
   63 operation: operation . relation_operator expression
   64          | operation . log_operator expression

    ')'         shift, and go to state 442
    AND         shift, and go to state 88
    OR          shift, and go to state 89
    GREATER     shift, and go to state 90
    GREATER_EQ  shift, and go to state 91
    LESS        shift, and go to state 92
    LESS_EQ     shift, and go to state 93
    EQUAL       shift, and go to state 94
    NOT_EQ      shift, and go to state 95

    log_operator       go to state 236
    relation_operator  go to state 237


State 415

   45 output: OUTPUT_WRITELN '(' STRING . ')' ';'

    ')'  shift, and go to state 443


State 416

   43 output: OUTPUT_WRITELN '(' operation . ')' ';'
   63 operation: operation . relation_operator expression
   64          | operation . log_operator expression

    ')'         shift, and go to state 444
    AND         shift, and go to state 88
    OR          shift, and go to state 89
    GREATER     shift, and go to state 90
    GREATER_EQ  shift, and go to state 91
    LESS        shift, and go to state 92
    LESS_EQ     shift, and go to state 93
    EQUAL       shift, and go to state 94
    NOT_EQ      shift, and go to state 95

    log_operator       go to state 236
    relation_operator  go to state 237


State 417

   46 input: INPUT_READ '(' expression . ')' ';'

    ')'  shift, and go to state 445


State 418

   31 command: '{' block_commands '}' .

    NUM_INT         reduce using rule 31 (command)
    NUM_FLOAT       reduce using rule 31 (command)
    NIL_CNST        reduce using rule 31 (command)
    ID              reduce using rule 31 (command)
    RETURN_STM      reduce using rule 31 (command)
    T_INT           reduce using rule 31 (command)
    T_FLOAT         reduce using rule 31 (command)
    IF_STMT         reduce using rule 31 (command)
    ELSE_STMT       reduce using rule 31 (command)
    FOR_STMT        reduce using rule 31 (command)
    OUTPUT_WRITE    reduce using rule 31 (command)
    OUTPUT_WRITELN  reduce using rule 31 (command)
    INPUT_READ      reduce using rule 31 (command)
    '{'             reduce using rule 31 (command)
    '}'             reduce using rule 31 (command)
    '+'             reduce using rule 31 (command)
    '-'             reduce using rule 31 (command)
    '%'             reduce using rule 31 (command)
    '?'             reduce using rule 31 (command)
    '!'             reduce using rule 31 (command)


State 419

   39 init_stmt: ID '=' operation .
   63 operation: operation . relation_operator expression
   64          | operation . log_operator expression

    AND         shift, and go to state 88
    OR          shift, and go to state 89
    GREATER     shift, and go to state 90
    GREATER_EQ  shift, and go to state 91
    LESS        shift, and go to state 92
    LESS_EQ     shift, and go to state 93
    EQUAL       shift, and go to state 94
    NOT_EQ      shift, and go to state 95

    ')'  reduce using rule 39 (init_stmt)

    log_operator       go to state 236
    relation_operator  go to state 237


State 420

   47 func_calling: ID '(' lst_params ')' .

    ')'         reduce using rule 47 (func_calling)
    ','         reduce using rule 47 (func_calling)
    AND         reduce using rule 47 (func_calling)
    OR          reduce using rule 47 (func_calling)
    GREATER     reduce using rule 47 (func_calling)
    GREATER_EQ  reduce using rule 47 (func_calling)
    LESS        reduce using rule 47 (func_calling)
    LESS_EQ     reduce using rule 47 (func_calling)
    EQUAL       reduce using rule 47 (func_calling)
    NOT_EQ      reduce using rule 47 (func_calling)
    '+'         reduce using rule 47 (func_calling)
    '-'         reduce using rule 47 (func_calling)
    '*'         reduce using rule 47 (func_calling)
    '/'         reduce using rule 47 (func_calling)
    FILTER      reduce using rule 47 (func_calling)
    MAP         reduce using rule 47 (func_calling)
    ':'         reduce using rule 47 (func_calling)


State 421

   47 func_calling: ID '(' . lst_params ')'

    NUM_INT    shift, and go to state 153
    NUM_FLOAT  shift, and go to state 154
    NIL_CNST   shift, and go to state 155
    ID         shift, and go to state 156
    '+'        shift, and go to state 157
    '-'        shift, and go to state 158
    '%'        shift, and go to state 159
    '?'        shift, and go to state 160
    '!'        shift, and go to state 161

    ')'  reduce using rule 18 (lst_params)

    lst_params          go to state 446
    lst_calling_params  go to state 103
    func_calling        go to state 162
    expression          go to state 163
    const               go to state 164
    number              go to state 165
    operation           go to state 104
    single_operation    go to state 166
    arith_binary        go to state 167
    arith_single        go to state 168
    lst_single          go to state 169
    lst_binary          go to state 170


State 422

   73 arith_single: '+' expression .

    ')'         reduce using rule 73 (arith_single)
    ','         reduce using rule 73 (arith_single)
    AND         reduce using rule 73 (arith_single)
    OR          reduce using rule 73 (arith_single)
    GREATER     reduce using rule 73 (arith_single)
    GREATER_EQ  reduce using rule 73 (arith_single)
    LESS        reduce using rule 73 (arith_single)
    LESS_EQ     reduce using rule 73 (arith_single)
    EQUAL       reduce using rule 73 (arith_single)
    NOT_EQ      reduce using rule 73 (arith_single)
    '+'         reduce using rule 73 (arith_single)
    '-'         reduce using rule 73 (arith_single)
    '*'         reduce using rule 73 (arith_single)
    '/'         reduce using rule 73 (arith_single)


State 423

   74 arith_single: '-' expression .

    ')'         reduce using rule 74 (arith_single)
    ','         reduce using rule 74 (arith_single)
    AND         reduce using rule 74 (arith_single)
    OR          reduce using rule 74 (arith_single)
    GREATER     reduce using rule 74 (arith_single)
    GREATER_EQ  reduce using rule 74 (arith_single)
    LESS        reduce using rule 74 (arith_single)
    LESS_EQ     reduce using rule 74 (arith_single)
    EQUAL       reduce using rule 74 (arith_single)
    NOT_EQ      reduce using rule 74 (arith_single)
    '+'         reduce using rule 74 (arith_single)
    '-'         reduce using rule 74 (arith_single)
    '*'         reduce using rule 74 (arith_single)
    '/'         reduce using rule 74 (arith_single)


State 424

   75 lst_single: '%' expression .

    ')'         reduce using rule 75 (lst_single)
    ','         reduce using rule 75 (lst_single)
    AND         reduce using rule 75 (lst_single)
    OR          reduce using rule 75 (lst_single)
    GREATER     reduce using rule 75 (lst_single)
    GREATER_EQ  reduce using rule 75 (lst_single)
    LESS        reduce using rule 75 (lst_single)
    LESS_EQ     reduce using rule 75 (lst_single)
    EQUAL       reduce using rule 75 (lst_single)
    NOT_EQ      reduce using rule 75 (lst_single)
    '+'         reduce using rule 75 (lst_single)
    '-'         reduce using rule 75 (lst_single)
    '*'         reduce using rule 75 (lst_single)
    '/'         reduce using rule 75 (lst_single)


State 425

   76 lst_single: '?' expression .

    ')'         reduce using rule 76 (lst_single)
    ','         reduce using rule 76 (lst_single)
    AND         reduce using rule 76 (lst_single)
    OR          reduce using rule 76 (lst_single)
    GREATER     reduce using rule 76 (lst_single)
    GREATER_EQ  reduce using rule 76 (lst_single)
    LESS        reduce using rule 76 (lst_single)
    LESS_EQ     reduce using rule 76 (lst_single)
    EQUAL       reduce using rule 76 (lst_single)
    NOT_EQ      reduce using rule 76 (lst_single)
    '+'         reduce using rule 76 (lst_single)
    '-'         reduce using rule 76 (lst_single)
    '*'         reduce using rule 76 (lst_single)
    '/'         reduce using rule 76 (lst_single)


State 426

   67 single_operation: '!' expression .

    ')'         reduce using rule 67 (single_operation)
    ','         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)
    '+'         reduce using rule 67 (single_operation)
    '-'         reduce using rule 67 (single_operation)
    '*'         reduce using rule 67 (single_operation)
    '/'         reduce using rule 67 (single_operation)


State 427

   47 func_calling: ID '(' lst_params ')' .

    ')'         reduce using rule 47 (func_calling)
    AND         reduce using rule 47 (func_calling)
    OR          reduce using rule 47 (func_calling)
    GREATER     reduce using rule 47 (func_calling)
    GREATER_EQ  reduce using rule 47 (func_calling)
    LESS        reduce using rule 47 (func_calling)
    LESS_EQ     reduce using rule 47 (func_calling)
    EQUAL       reduce using rule 47 (func_calling)
    NOT_EQ      reduce using rule 47 (func_calling)
    '+'         reduce using rule 47 (func_calling)
    '-'         reduce using rule 47 (func_calling)
    '*'         reduce using rule 47 (func_calling)
    '/'         reduce using rule 47 (func_calling)
    FILTER      reduce using rule 47 (func_calling)
    MAP         reduce using rule 47 (func_calling)
    ':'         reduce using rule 47 (func_calling)


State 428

   47 func_calling: ID '(' . lst_params ')'

    NUM_INT    shift, and go to state 153
    NUM_FLOAT  shift, and go to state 154
    NIL_CNST   shift, and go to state 155
    ID         shift, and go to state 156
    '+'        shift, and go to state 157
    '-'        shift, and go to state 158
    '%'        shift, and go to state 159
    '?'        shift, and go to state 160
    '!'        shift, and go to state 161

    ')'  reduce using rule 18 (lst_params)

    lst_params          go to state 447
    lst_calling_params  go to state 103
    func_calling        go to state 162
    expression          go to state 163
    const               go to state 164
    number              go to state 165
    operation           go to state 104
    single_operation    go to state 166
    arith_binary        go to state 167
    arith_single        go to state 168
    lst_single          go to state 169
    lst_binary          go to state 170


State 429

   73 arith_single: '+' expression .

    ')'         reduce using rule 73 (arith_single)
    AND         reduce using rule 73 (arith_single)
    OR          reduce using rule 73 (arith_single)
    GREATER     reduce using rule 73 (arith_single)
    GREATER_EQ  reduce using rule 73 (arith_single)
    LESS        reduce using rule 73 (arith_single)
    LESS_EQ     reduce using rule 73 (arith_single)
    EQUAL       reduce using rule 73 (arith_single)
    NOT_EQ      reduce using rule 73 (arith_single)
    '+'         reduce using rule 73 (arith_single)
    '-'         reduce using rule 73 (arith_single)
    '*'         reduce using rule 73 (arith_single)
    '/'         reduce using rule 73 (arith_single)


State 430

   74 arith_single: '-' expression .

    ')'         reduce using rule 74 (arith_single)
    AND         reduce using rule 74 (arith_single)
    OR          reduce using rule 74 (arith_single)
    GREATER     reduce using rule 74 (arith_single)
    GREATER_EQ  reduce using rule 74 (arith_single)
    LESS        reduce using rule 74 (arith_single)
    LESS_EQ     reduce using rule 74 (arith_single)
    EQUAL       reduce using rule 74 (arith_single)
    NOT_EQ      reduce using rule 74 (arith_single)
    '+'         reduce using rule 74 (arith_single)
    '-'         reduce using rule 74 (arith_single)
    '*'         reduce using rule 74 (arith_single)
    '/'         reduce using rule 74 (arith_single)


State 431

   75 lst_single: '%' expression .

    ')'         reduce using rule 75 (lst_single)
    AND         reduce using rule 75 (lst_single)
    OR          reduce using rule 75 (lst_single)
    GREATER     reduce using rule 75 (lst_single)
    GREATER_EQ  reduce using rule 75 (lst_single)
    LESS        reduce using rule 75 (lst_single)
    LESS_EQ     reduce using rule 75 (lst_single)
    EQUAL       reduce using rule 75 (lst_single)
    NOT_EQ      reduce using rule 75 (lst_single)
    '+'         reduce using rule 75 (lst_single)
    '-'         reduce using rule 75 (lst_single)
    '*'         reduce using rule 75 (lst_single)
    '/'         reduce using rule 75 (lst_single)


State 432

   76 lst_single: '?' expression .

    ')'         reduce using rule 76 (lst_single)
    AND         reduce using rule 76 (lst_single)
    OR          reduce using rule 76 (lst_single)
    GREATER     reduce using rule 76 (lst_single)
    GREATER_EQ  reduce using rule 76 (lst_single)
    LESS        reduce using rule 76 (lst_single)
    LESS_EQ     reduce using rule 76 (lst_single)
    EQUAL       reduce using rule 76 (lst_single)
    NOT_EQ      reduce using rule 76 (lst_single)
    '+'         reduce using rule 76 (lst_single)
    '-'         reduce using rule 76 (lst_single)
    '*'         reduce using rule 76 (lst_single)
    '/'         reduce using rule 76 (lst_single)


State 433

   67 single_operation: '!' expression .

    ')'         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)
    '+'         reduce using rule 67 (single_operation)
    '-'         reduce using rule 67 (single_operation)
    '*'         reduce using rule 67 (single_operation)
    '/'         reduce using rule 67 (single_operation)


State 434

   47 func_calling: ID '(' lst_params ')' .

    ')'  reduce using rule 47 (func_calling)


State 435

   47 func_calling: ID '(' lst_params ')' .

    ';'         reduce using rule 47 (func_calling)
    AND         reduce using rule 47 (func_calling)
    OR          reduce using rule 47 (func_calling)
    GREATER     reduce using rule 47 (func_calling)
    GREATER_EQ  reduce using rule 47 (func_calling)
    LESS        reduce using rule 47 (func_calling)
    LESS_EQ     reduce using rule 47 (func_calling)
    EQUAL       reduce using rule 47 (func_calling)
    NOT_EQ      reduce using rule 47 (func_calling)


State 436

   47 func_calling: ID '(' lst_params ')' .

    ';'         reduce using rule 47 (func_calling)
    AND         reduce using rule 47 (func_calling)
    OR          reduce using rule 47 (func_calling)
    GREATER     reduce using rule 47 (func_calling)
    GREATER_EQ  reduce using rule 47 (func_calling)
    LESS        reduce using rule 47 (func_calling)
    LESS_EQ     reduce using rule 47 (func_calling)
    EQUAL       reduce using rule 47 (func_calling)
    NOT_EQ      reduce using rule 47 (func_calling)
    '+'         reduce using rule 47 (func_calling)
    '-'         reduce using rule 47 (func_calling)
    '*'         reduce using rule 47 (func_calling)
    '/'         reduce using rule 47 (func_calling)


State 437

   47 func_calling: ID '(' lst_params . ')'

    ')'  shift, and go to state 448


State 438

   47 func_calling: ID '(' lst_params . ')'

    ')'  shift, and go to state 449


State 439

   33 conditional_stmt: IF_STMT '(' operation ')' . command
   34                 | IF_STMT '(' operation ')' . command ELSE_STMT command

    NUM_INT         shift, and go to state 29
    NUM_FLOAT       shift, and go to state 30
    NIL_CNST        shift, and go to state 31
    ID              shift, and go to state 32
    RETURN_STM      shift, and go to state 238
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 239
    FOR_STMT        shift, and go to state 240
    OUTPUT_WRITE    shift, and go to state 241
    OUTPUT_WRITELN  shift, and go to state 242
    INPUT_READ      shift, and go to state 243
    '{'             shift, and go to state 244
    '+'             shift, and go to state 40
    '-'             shift, and go to state 41
    '%'             shift, and go to state 42
    '?'             shift, and go to state 43
    '!'             shift, and go to state 44

    var_declaration   go to state 245
    unq_declaration   go to state 246
    command           go to state 450
    conditional_stmt  go to state 247
    return_stmt       go to state 248
    init_variable     go to state 249
    iteration         go to state 250
    init_stmt         go to state 251
    output            go to state 252
    input             go to state 253
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 151
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 254
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 440

   37 iteration: FOR_STMT '(' loop_condition ')' . command

    NUM_INT         shift, and go to state 29
    NUM_FLOAT       shift, and go to state 30
    NIL_CNST        shift, and go to state 31
    ID              shift, and go to state 32
    RETURN_STM      shift, and go to state 238
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 239
    FOR_STMT        shift, and go to state 240
    OUTPUT_WRITE    shift, and go to state 241
    OUTPUT_WRITELN  shift, and go to state 242
    INPUT_READ      shift, and go to state 243
    '{'             shift, and go to state 244
    '+'             shift, and go to state 40
    '-'             shift, and go to state 41
    '%'             shift, and go to state 42
    '?'             shift, and go to state 43
    '!'             shift, and go to state 44

    var_declaration   go to state 245
    unq_declaration   go to state 246
    command           go to state 451
    conditional_stmt  go to state 247
    return_stmt       go to state 248
    init_variable     go to state 249
    iteration         go to state 250
    init_stmt         go to state 251
    output            go to state 252
    input             go to state 253
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 151
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 254
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 441

   44 output: OUTPUT_WRITE '(' STRING ')' . ';'

    ';'  shift, and go to state 452


State 442

   42 output: OUTPUT_WRITE '(' operation ')' . ';'

    ';'  shift, and go to state 453


State 443

   45 output: OUTPUT_WRITELN '(' STRING ')' . ';'

    ';'  shift, and go to state 454


State 444

   43 output: OUTPUT_WRITELN '(' operation ')' . ';'

    ';'  shift, and go to state 455


State 445

   46 input: INPUT_READ '(' expression ')' . ';'

    ';'  shift, and go to state 456


State 446

   47 func_calling: ID '(' lst_params . ')'

    ')'  shift, and go to state 457


State 447

   47 func_calling: ID '(' lst_params . ')'

    ')'  shift, and go to state 458


State 448

   47 func_calling: ID '(' lst_params ')' .

    ')'         reduce using rule 47 (func_calling)
    ','         reduce using rule 47 (func_calling)
    AND         reduce using rule 47 (func_calling)
    OR          reduce using rule 47 (func_calling)
    GREATER     reduce using rule 47 (func_calling)
    GREATER_EQ  reduce using rule 47 (func_calling)
    LESS        reduce using rule 47 (func_calling)
    LESS_EQ     reduce using rule 47 (func_calling)
    EQUAL       reduce using rule 47 (func_calling)
    NOT_EQ      reduce using rule 47 (func_calling)


State 449

   47 func_calling: ID '(' lst_params ')' .

    ')'         reduce using rule 47 (func_calling)
    AND         reduce using rule 47 (func_calling)
    OR          reduce using rule 47 (func_calling)
    GREATER     reduce using rule 47 (func_calling)
    GREATER_EQ  reduce using rule 47 (func_calling)
    LESS        reduce using rule 47 (func_calling)
    LESS_EQ     reduce using rule 47 (func_calling)
    EQUAL       reduce using rule 47 (func_calling)
    NOT_EQ      reduce using rule 47 (func_calling)


State 450

   33 conditional_stmt: IF_STMT '(' operation ')' command .
   34                 | IF_STMT '(' operation ')' command . ELSE_STMT command

    ELSE_STMT  shift, and go to state 459

    NUM_INT         reduce using rule 33 (conditional_stmt)
    NUM_FLOAT       reduce using rule 33 (conditional_stmt)
    NIL_CNST        reduce using rule 33 (conditional_stmt)
    ID              reduce using rule 33 (conditional_stmt)
    RETURN_STM      reduce using rule 33 (conditional_stmt)
    T_INT           reduce using rule 33 (conditional_stmt)
    T_FLOAT         reduce using rule 33 (conditional_stmt)
    IF_STMT         reduce using rule 33 (conditional_stmt)
    FOR_STMT        reduce using rule 33 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 33 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 33 (conditional_stmt)
    INPUT_READ      reduce using rule 33 (conditional_stmt)
    '{'             reduce using rule 33 (conditional_stmt)
    '}'             reduce using rule 33 (conditional_stmt)
    '+'             reduce using rule 33 (conditional_stmt)
    '-'             reduce using rule 33 (conditional_stmt)
    '%'             reduce using rule 33 (conditional_stmt)
    '?'             reduce using rule 33 (conditional_stmt)
    '!'             reduce using rule 33 (conditional_stmt)


State 451

   37 iteration: FOR_STMT '(' loop_condition ')' command .

    NUM_INT         reduce using rule 37 (iteration)
    NUM_FLOAT       reduce using rule 37 (iteration)
    NIL_CNST        reduce using rule 37 (iteration)
    ID              reduce using rule 37 (iteration)
    RETURN_STM      reduce using rule 37 (iteration)
    T_INT           reduce using rule 37 (iteration)
    T_FLOAT         reduce using rule 37 (iteration)
    IF_STMT         reduce using rule 37 (iteration)
    ELSE_STMT       reduce using rule 37 (iteration)
    FOR_STMT        reduce using rule 37 (iteration)
    OUTPUT_WRITE    reduce using rule 37 (iteration)
    OUTPUT_WRITELN  reduce using rule 37 (iteration)
    INPUT_READ      reduce using rule 37 (iteration)
    '{'             reduce using rule 37 (iteration)
    '}'             reduce using rule 37 (iteration)
    '+'             reduce using rule 37 (iteration)
    '-'             reduce using rule 37 (iteration)
    '%'             reduce using rule 37 (iteration)
    '?'             reduce using rule 37 (iteration)
    '!'             reduce using rule 37 (iteration)


State 452

   44 output: OUTPUT_WRITE '(' STRING ')' ';' .

    NUM_INT         reduce using rule 44 (output)
    NUM_FLOAT       reduce using rule 44 (output)
    NIL_CNST        reduce using rule 44 (output)
    ID              reduce using rule 44 (output)
    RETURN_STM      reduce using rule 44 (output)
    T_INT           reduce using rule 44 (output)
    T_FLOAT         reduce using rule 44 (output)
    IF_STMT         reduce using rule 44 (output)
    ELSE_STMT       reduce using rule 44 (output)
    FOR_STMT        reduce using rule 44 (output)
    OUTPUT_WRITE    reduce using rule 44 (output)
    OUTPUT_WRITELN  reduce using rule 44 (output)
    INPUT_READ      reduce using rule 44 (output)
    '{'             reduce using rule 44 (output)
    '}'             reduce using rule 44 (output)
    '+'             reduce using rule 44 (output)
    '-'             reduce using rule 44 (output)
    '%'             reduce using rule 44 (output)
    '?'             reduce using rule 44 (output)
    '!'             reduce using rule 44 (output)


State 453

   42 output: OUTPUT_WRITE '(' operation ')' ';' .

    NUM_INT         reduce using rule 42 (output)
    NUM_FLOAT       reduce using rule 42 (output)
    NIL_CNST        reduce using rule 42 (output)
    ID              reduce using rule 42 (output)
    RETURN_STM      reduce using rule 42 (output)
    T_INT           reduce using rule 42 (output)
    T_FLOAT         reduce using rule 42 (output)
    IF_STMT         reduce using rule 42 (output)
    ELSE_STMT       reduce using rule 42 (output)
    FOR_STMT        reduce using rule 42 (output)
    OUTPUT_WRITE    reduce using rule 42 (output)
    OUTPUT_WRITELN  reduce using rule 42 (output)
    INPUT_READ      reduce using rule 42 (output)
    '{'             reduce using rule 42 (output)
    '}'             reduce using rule 42 (output)
    '+'             reduce using rule 42 (output)
    '-'             reduce using rule 42 (output)
    '%'             reduce using rule 42 (output)
    '?'             reduce using rule 42 (output)
    '!'             reduce using rule 42 (output)


State 454

   45 output: OUTPUT_WRITELN '(' STRING ')' ';' .

    NUM_INT         reduce using rule 45 (output)
    NUM_FLOAT       reduce using rule 45 (output)
    NIL_CNST        reduce using rule 45 (output)
    ID              reduce using rule 45 (output)
    RETURN_STM      reduce using rule 45 (output)
    T_INT           reduce using rule 45 (output)
    T_FLOAT         reduce using rule 45 (output)
    IF_STMT         reduce using rule 45 (output)
    ELSE_STMT       reduce using rule 45 (output)
    FOR_STMT        reduce using rule 45 (output)
    OUTPUT_WRITE    reduce using rule 45 (output)
    OUTPUT_WRITELN  reduce using rule 45 (output)
    INPUT_READ      reduce using rule 45 (output)
    '{'             reduce using rule 45 (output)
    '}'             reduce using rule 45 (output)
    '+'             reduce using rule 45 (output)
    '-'             reduce using rule 45 (output)
    '%'             reduce using rule 45 (output)
    '?'             reduce using rule 45 (output)
    '!'             reduce using rule 45 (output)


State 455

   43 output: OUTPUT_WRITELN '(' operation ')' ';' .

    NUM_INT         reduce using rule 43 (output)
    NUM_FLOAT       reduce using rule 43 (output)
    NIL_CNST        reduce using rule 43 (output)
    ID              reduce using rule 43 (output)
    RETURN_STM      reduce using rule 43 (output)
    T_INT           reduce using rule 43 (output)
    T_FLOAT         reduce using rule 43 (output)
    IF_STMT         reduce using rule 43 (output)
    ELSE_STMT       reduce using rule 43 (output)
    FOR_STMT        reduce using rule 43 (output)
    OUTPUT_WRITE    reduce using rule 43 (output)
    OUTPUT_WRITELN  reduce using rule 43 (output)
    INPUT_READ      reduce using rule 43 (output)
    '{'             reduce using rule 43 (output)
    '}'             reduce using rule 43 (output)
    '+'             reduce using rule 43 (output)
    '-'             reduce using rule 43 (output)
    '%'             reduce using rule 43 (output)
    '?'             reduce using rule 43 (output)
    '!'             reduce using rule 43 (output)


State 456

   46 input: INPUT_READ '(' expression ')' ';' .

    NUM_INT         reduce using rule 46 (input)
    NUM_FLOAT       reduce using rule 46 (input)
    NIL_CNST        reduce using rule 46 (input)
    ID              reduce using rule 46 (input)
    RETURN_STM      reduce using rule 46 (input)
    T_INT           reduce using rule 46 (input)
    T_FLOAT         reduce using rule 46 (input)
    IF_STMT         reduce using rule 46 (input)
    ELSE_STMT       reduce using rule 46 (input)
    FOR_STMT        reduce using rule 46 (input)
    OUTPUT_WRITE    reduce using rule 46 (input)
    OUTPUT_WRITELN  reduce using rule 46 (input)
    INPUT_READ      reduce using rule 46 (input)
    '{'             reduce using rule 46 (input)
    '}'             reduce using rule 46 (input)
    '+'             reduce using rule 46 (input)
    '-'             reduce using rule 46 (input)
    '%'             reduce using rule 46 (input)
    '?'             reduce using rule 46 (input)
    '!'             reduce using rule 46 (input)


State 457

   47 func_calling: ID '(' lst_params ')' .

    ')'         reduce using rule 47 (func_calling)
    ','         reduce using rule 47 (func_calling)
    AND         reduce using rule 47 (func_calling)
    OR          reduce using rule 47 (func_calling)
    GREATER     reduce using rule 47 (func_calling)
    GREATER_EQ  reduce using rule 47 (func_calling)
    LESS        reduce using rule 47 (func_calling)
    LESS_EQ     reduce using rule 47 (func_calling)
    EQUAL       reduce using rule 47 (func_calling)
    NOT_EQ      reduce using rule 47 (func_calling)
    '+'         reduce using rule 47 (func_calling)
    '-'         reduce using rule 47 (func_calling)
    '*'         reduce using rule 47 (func_calling)
    '/'         reduce using rule 47 (func_calling)


State 458

   47 func_calling: ID '(' lst_params ')' .

    ')'         reduce using rule 47 (func_calling)
    AND         reduce using rule 47 (func_calling)
    OR          reduce using rule 47 (func_calling)
    GREATER     reduce using rule 47 (func_calling)
    GREATER_EQ  reduce using rule 47 (func_calling)
    LESS        reduce using rule 47 (func_calling)
    LESS_EQ     reduce using rule 47 (func_calling)
    EQUAL       reduce using rule 47 (func_calling)
    NOT_EQ      reduce using rule 47 (func_calling)
    '+'         reduce using rule 47 (func_calling)
    '-'         reduce using rule 47 (func_calling)
    '*'         reduce using rule 47 (func_calling)
    '/'         reduce using rule 47 (func_calling)


State 459

   34 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT . command

    NUM_INT         shift, and go to state 29
    NUM_FLOAT       shift, and go to state 30
    NIL_CNST        shift, and go to state 31
    ID              shift, and go to state 32
    RETURN_STM      shift, and go to state 238
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 239
    FOR_STMT        shift, and go to state 240
    OUTPUT_WRITE    shift, and go to state 241
    OUTPUT_WRITELN  shift, and go to state 242
    INPUT_READ      shift, and go to state 243
    '{'             shift, and go to state 244
    '+'             shift, and go to state 40
    '-'             shift, and go to state 41
    '%'             shift, and go to state 42
    '?'             shift, and go to state 43
    '!'             shift, and go to state 44

    var_declaration   go to state 245
    unq_declaration   go to state 246
    command           go to state 460
    conditional_stmt  go to state 247
    return_stmt       go to state 248
    init_variable     go to state 249
    iteration         go to state 250
    init_stmt         go to state 251
    output            go to state 252
    input             go to state 253
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 151
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 254
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 460

   34 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT command .

    NUM_INT         reduce using rule 34 (conditional_stmt)
    NUM_FLOAT       reduce using rule 34 (conditional_stmt)
    NIL_CNST        reduce using rule 34 (conditional_stmt)
    ID              reduce using rule 34 (conditional_stmt)
    RETURN_STM      reduce using rule 34 (conditional_stmt)
    T_INT           reduce using rule 34 (conditional_stmt)
    T_FLOAT         reduce using rule 34 (conditional_stmt)
    IF_STMT         reduce using rule 34 (conditional_stmt)
    ELSE_STMT       reduce using rule 34 (conditional_stmt)
    FOR_STMT        reduce using rule 34 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 34 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 34 (conditional_stmt)
    INPUT_READ      reduce using rule 34 (conditional_stmt)
    '{'             reduce using rule 34 (conditional_stmt)
    '}'             reduce using rule 34 (conditional_stmt)
    '+'             reduce using rule 34 (conditional_stmt)
    '-'             reduce using rule 34 (conditional_stmt)
    '%'             reduce using rule 34 (conditional_stmt)
    '?'             reduce using rule 34 (conditional_stmt)
    '!'             reduce using rule 34 (conditional_stmt)
