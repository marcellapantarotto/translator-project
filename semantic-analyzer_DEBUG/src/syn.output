Grammar

    0 $accept: program $end

    1 program: lst_declarations
    2        | %empty

    3 lst_declarations: declaration lst_declarations
    4                 | declaration

    5 declaration: func_declaration
    6            | var_declaration
    7            | error

    8 $@1: %empty

    9 func_declaration: unq_declaration $@1 '(' parameters ')' '{' block_commands '}'

   10 var_declaration: unq_declaration ';'

   11 unq_declaration: type ID

   12 parameters: lst_parameters
   13           | %empty

   14 lst_parameters: unq_declaration ',' lst_parameters
   15               | unq_declaration

   16 calling_parameters: lst_calling_parameters
   17                   | %empty

   18 lst_calling_parameters: operation ',' lst_calling_parameters
   19                       | operation

   20 block_commands: command block_commands
   21               | command

   22 command: var_declaration
   23        | init_variable
   24        | conditional_stmt
   25        | return_stmt
   26        | iteration
   27        | input
   28        | output

   29 $@2: %empty

   30 command: $@2 '{' block_commands '}'
   31        | operation ';'
   32        | error

   33 init_variable: init_stmt ';'

   34 conditional_stmt: IF_STMT '(' operation ')' command
   35                 | IF_STMT '(' operation ')' command ELSE_STMT command

   36 return_stmt: RETURN_STM operation ';'

   37 iteration: FOR_STMT '(' loop_condition ')' command

   38 loop_condition: init_stmt ';' operation ';' update_stmt

   39 init_stmt: ID '=' operation

   40 update_stmt: init_stmt
   41            | %empty

   42 output: OUTPUT_WRITE '(' operation ')' ';'
   43       | OUTPUT_WRITELN '(' operation ')' ';'
   44       | OUTPUT_WRITE '(' STRING ')' ';'
   45       | OUTPUT_WRITELN '(' STRING ')' ';'

   46 input: INPUT_READ '(' expression ')' ';'

   47 $@3: %empty

   48 $@4: %empty

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')'

   50 expression: func_calling
   51           | single_operation
   52           | const
   53           | ID

   54 const: number
   55      | NIL_CNST

   56 number: NUM_INT
   57       | NUM_FLOAT

   58 type: type_lst
   59     | type_number

   60 type_lst: type_number T_LIST

   61 type_number: T_INT
   62            | T_FLOAT

   63 operation: arith_binary
   64          | lst_binary
   65          | operation relational_op expression
   66          | operation logical_op expression

   67 single_operation: arith_single
   68                 | lst_single
   69                 | '!' expression

   70 arith_binary: arith_binary '+' expression
   71             | arith_binary '-' expression
   72             | arith_binary '*' expression
   73             | arith_binary '/' expression
   74             | expression

   75 arith_single: '+' expression
   76             | '-' expression

   77 lst_single: '%' expression
   78           | '?' expression

   79 lst_binary: expression FILTER expression
   80           | expression MAP expression
   81           | expression ':' expression

   82 logical_op: AND
   83           | OR

   84 relational_op: GREATER
   85              | GREATER_EQ
   86              | LESS
   87              | LESS_EQ
   88              | EQUAL
   89              | NOT_EQ


Terminals, with rules where they appear

    $end (0) 0
    '!' <token> (33) 69
    '%' <token> (37) 77
    '(' <token> (40) 9 34 35 37 42 43 44 45 46 49
    ')' <token> (41) 9 34 35 37 42 43 44 45 46 49
    '*' <token> (42) 72
    '+' <token> (43) 70 75
    ',' <token> (44) 14 18
    '-' <token> (45) 71 76
    '/' <token> (47) 73
    ':' <token> (58) 81
    ';' <token> (59) 10 31 33 36 38 42 43 44 45 46
    '=' <token> (61) 39
    '?' <token> (63) 78
    '{' <token> (123) 9 30
    '}' <token> (125) 9 30
    error (256) 7 32
    NUM_INT <token> (258) 56
    NUM_FLOAT <token> (259) 57
    STRING <token> (260) 44 45
    NIL_CNST <token> (261) 55
    ID <token> (262) 11 39 49 53
    RETURN_STM <token> (263) 36
    T_INT <token> (264) 61
    T_FLOAT <token> (265) 62
    T_LIST <token> (266) 60
    IF_STMT <token> (267) 34 35
    ELSE_STMT <token> (268) 35
    FOR_STMT <token> (269) 37
    OUTPUT_WRITE <token> (270) 42 44
    OUTPUT_WRITELN <token> (271) 43 45
    INPUT_READ <token> (272) 46
    AND <token> (273) 82
    OR <token> (274) 83
    GREATER <token> (275) 84
    GREATER_EQ <token> (276) 85
    LESS <token> (277) 86
    LESS_EQ <token> (278) 87
    EQUAL <token> (279) 88
    NOT_EQ <token> (280) 89
    FILTER <token> (281) 79
    MAP <token> (282) 80


Nonterminals, with rules where they appear

    $accept (43)
        on left: 0
    program <node> (44)
        on left: 1 2
        on right: 0
    lst_declarations <node> (45)
        on left: 3 4
        on right: 1 3
    declaration <node> (46)
        on left: 5 6 7
        on right: 3 4
    func_declaration <node> (47)
        on left: 9
        on right: 5
    $@1 (48)
        on left: 8
        on right: 9
    var_declaration <node> (49)
        on left: 10
        on right: 6 22
    unq_declaration <node> (50)
        on left: 11
        on right: 9 10 14 15
    parameters <node> (51)
        on left: 12 13
        on right: 9
    lst_parameters <node> (52)
        on left: 14 15
        on right: 12 14
    calling_parameters <node> (53)
        on left: 16 17
        on right: 49
    lst_calling_parameters <node> (54)
        on left: 18 19
        on right: 16 18
    block_commands <node> (55)
        on left: 20 21
        on right: 9 20 30
    command <node> (56)
        on left: 22 23 24 25 26 27 28 30 31 32
        on right: 20 21 34 35 37
    $@2 (57)
        on left: 29
        on right: 30
    init_variable <node> (58)
        on left: 33
        on right: 23
    conditional_stmt <node> (59)
        on left: 34 35
        on right: 24
    return_stmt <node> (60)
        on left: 36
        on right: 25
    iteration <node> (61)
        on left: 37
        on right: 26
    loop_condition <node> (62)
        on left: 38
        on right: 37
    init_stmt <node> (63)
        on left: 39
        on right: 33 38 40
    update_stmt <node> (64)
        on left: 40 41
        on right: 38
    output <node> (65)
        on left: 42 43 44 45
        on right: 28
    input <node> (66)
        on left: 46
        on right: 27
    func_calling <node> (67)
        on left: 49
        on right: 50
    $@3 (68)
        on left: 47
        on right: 49
    $@4 (69)
        on left: 48
        on right: 49
    expression <node> (70)
        on left: 50 51 52 53
        on right: 46 65 66 69 70 71 72 73 74 75 76 77 78 79 80 81
    const <node> (71)
        on left: 54 55
        on right: 52
    number <node> (72)
        on left: 56 57
        on right: 54
    type <node> (73)
        on left: 58 59
        on right: 11
    type_lst <node> (74)
        on left: 60
        on right: 58
    type_number <node> (75)
        on left: 61 62
        on right: 59 60
    operation <node> (76)
        on left: 63 64 65 66
        on right: 18 19 31 34 35 36 38 39 42 43 65 66
    single_operation <node> (77)
        on left: 67 68 69
        on right: 51
    arith_binary <node> (78)
        on left: 70 71 72 73 74
        on right: 63 70 71 72 73
    arith_single <node> (79)
        on left: 75 76
        on right: 67
    lst_single <node> (80)
        on left: 77 78
        on right: 68
    lst_binary <node> (81)
        on left: 79 80 81
        on right: 64
    logical_op <node> (82)
        on left: 82 83
        on right: 66
    relational_op <node> (83)
        on left: 84 85 86 87 88 89
        on right: 65


State 0

    0 $accept: • program $end

    error    shift, and go to state 1
    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    $end  reduce using rule 2 (program)

    program           go to state 4
    lst_declarations  go to state 5
    declaration       go to state 6
    func_declaration  go to state 7
    var_declaration   go to state 8
    unq_declaration   go to state 9
    type              go to state 10
    type_lst          go to state 11
    type_number       go to state 12


State 1

    7 declaration: error •

    $end     reduce using rule 7 (declaration)
    error    reduce using rule 7 (declaration)
    T_INT    reduce using rule 7 (declaration)
    T_FLOAT  reduce using rule 7 (declaration)


State 2

   61 type_number: T_INT •

    ID      reduce using rule 61 (type_number)
    T_LIST  reduce using rule 61 (type_number)


State 3

   62 type_number: T_FLOAT •

    ID      reduce using rule 62 (type_number)
    T_LIST  reduce using rule 62 (type_number)


State 4

    0 $accept: program • $end

    $end  shift, and go to state 13


State 5

    1 program: lst_declarations •

    $end  reduce using rule 1 (program)


State 6

    3 lst_declarations: declaration • lst_declarations
    4                 | declaration •

    error    shift, and go to state 1
    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    $end  reduce using rule 4 (lst_declarations)

    lst_declarations  go to state 14
    declaration       go to state 6
    func_declaration  go to state 7
    var_declaration   go to state 8
    unq_declaration   go to state 9
    type              go to state 10
    type_lst          go to state 11
    type_number       go to state 12


State 7

    5 declaration: func_declaration •

    $end     reduce using rule 5 (declaration)
    error    reduce using rule 5 (declaration)
    T_INT    reduce using rule 5 (declaration)
    T_FLOAT  reduce using rule 5 (declaration)


State 8

    6 declaration: var_declaration •

    $end     reduce using rule 6 (declaration)
    error    reduce using rule 6 (declaration)
    T_INT    reduce using rule 6 (declaration)
    T_FLOAT  reduce using rule 6 (declaration)


State 9

    9 func_declaration: unq_declaration • $@1 '(' parameters ')' '{' block_commands '}'
   10 var_declaration: unq_declaration • ';'

    ';'  shift, and go to state 15

    '('  reduce using rule 8 ($@1)

    $@1  go to state 16


State 10

   11 unq_declaration: type • ID

    ID  shift, and go to state 17


State 11

   58 type: type_lst •

    ID  reduce using rule 58 (type)


State 12

   59 type: type_number •
   60 type_lst: type_number • T_LIST

    T_LIST  shift, and go to state 18

    ID  reduce using rule 59 (type)


State 13

    0 $accept: program $end •

    $default  accept


State 14

    3 lst_declarations: declaration lst_declarations •

    $end  reduce using rule 3 (lst_declarations)


State 15

   10 var_declaration: unq_declaration ';' •

    $end     reduce using rule 10 (var_declaration)
    error    reduce using rule 10 (var_declaration)
    T_INT    reduce using rule 10 (var_declaration)
    T_FLOAT  reduce using rule 10 (var_declaration)


State 16

    9 func_declaration: unq_declaration $@1 • '(' parameters ')' '{' block_commands '}'

    '('  shift, and go to state 19


State 17

   11 unq_declaration: type ID •

    '('  reduce using rule 11 (unq_declaration)
    ';'  reduce using rule 11 (unq_declaration)


State 18

   60 type_lst: type_number T_LIST •

    ID  reduce using rule 60 (type_lst)


State 19

    9 func_declaration: unq_declaration $@1 '(' • parameters ')' '{' block_commands '}'

    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    ')'  reduce using rule 13 (parameters)

    unq_declaration  go to state 20
    parameters       go to state 21
    lst_parameters   go to state 22
    type             go to state 152
    type_lst         go to state 11
    type_number      go to state 12


State 20

   14 lst_parameters: unq_declaration • ',' lst_parameters
   15               | unq_declaration •

    ','  shift, and go to state 23

    ')'  reduce using rule 15 (lst_parameters)


State 21

    9 func_declaration: unq_declaration $@1 '(' parameters • ')' '{' block_commands '}'

    ')'  shift, and go to state 24


State 22

   12 parameters: lst_parameters •

    ')'  reduce using rule 12 (parameters)


State 23

   14 lst_parameters: unq_declaration ',' • lst_parameters

    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    unq_declaration  go to state 20
    lst_parameters   go to state 25
    type             go to state 152
    type_lst         go to state 11
    type_number      go to state 12


State 24

    9 func_declaration: unq_declaration $@1 '(' parameters ')' • '{' block_commands '}'

    '{'  shift, and go to state 26


State 25

   14 lst_parameters: unq_declaration ',' lst_parameters •

    ')'  reduce using rule 14 (lst_parameters)


State 26

    9 func_declaration: unq_declaration $@1 '(' parameters ')' '{' • block_commands '}'

    error           shift, and go to state 27
    NUM_INT         shift, and go to state 28
    NUM_FLOAT       shift, and go to state 29
    NIL_CNST        shift, and go to state 30
    ID              shift, and go to state 31
    RETURN_STM      shift, and go to state 32
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 33
    FOR_STMT        shift, and go to state 34
    OUTPUT_WRITE    shift, and go to state 35
    OUTPUT_WRITELN  shift, and go to state 36
    INPUT_READ      shift, and go to state 37
    '+'             shift, and go to state 38
    '-'             shift, and go to state 39
    '%'             shift, and go to state 40
    '?'             shift, and go to state 41
    '!'             shift, and go to state 42

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 43
    unq_declaration   go to state 44
    block_commands    go to state 45
    command           go to state 46
    $@2               go to state 47
    init_variable     go to state 48
    conditional_stmt  go to state 49
    return_stmt       go to state 50
    iteration         go to state 51
    init_stmt         go to state 52
    output            go to state 53
    input             go to state 54
    func_calling      go to state 55
    expression        go to state 56
    const             go to state 57
    number            go to state 58
    type              go to state 153
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 59
    single_operation  go to state 60
    arith_binary      go to state 61
    arith_single      go to state 62
    lst_single        go to state 63
    lst_binary        go to state 64


State 27

   32 command: error •

    error           reduce using rule 32 (command)
    NUM_INT         reduce using rule 32 (command)
    NUM_FLOAT       reduce using rule 32 (command)
    NIL_CNST        reduce using rule 32 (command)
    ID              reduce using rule 32 (command)
    RETURN_STM      reduce using rule 32 (command)
    T_INT           reduce using rule 32 (command)
    T_FLOAT         reduce using rule 32 (command)
    IF_STMT         reduce using rule 32 (command)
    FOR_STMT        reduce using rule 32 (command)
    OUTPUT_WRITE    reduce using rule 32 (command)
    OUTPUT_WRITELN  reduce using rule 32 (command)
    INPUT_READ      reduce using rule 32 (command)
    '{'             reduce using rule 32 (command)
    '}'             reduce using rule 32 (command)
    '+'             reduce using rule 32 (command)
    '-'             reduce using rule 32 (command)
    '%'             reduce using rule 32 (command)
    '?'             reduce using rule 32 (command)
    '!'             reduce using rule 32 (command)


State 28

   56 number: NUM_INT •

    ';'         reduce using rule 56 (number)
    AND         reduce using rule 56 (number)
    OR          reduce using rule 56 (number)
    GREATER     reduce using rule 56 (number)
    GREATER_EQ  reduce using rule 56 (number)
    LESS        reduce using rule 56 (number)
    LESS_EQ     reduce using rule 56 (number)
    EQUAL       reduce using rule 56 (number)
    NOT_EQ      reduce using rule 56 (number)
    '+'         reduce using rule 56 (number)
    '-'         reduce using rule 56 (number)
    '*'         reduce using rule 56 (number)
    '/'         reduce using rule 56 (number)
    FILTER      reduce using rule 56 (number)
    MAP         reduce using rule 56 (number)
    ':'         reduce using rule 56 (number)


State 29

   57 number: NUM_FLOAT •

    ';'         reduce using rule 57 (number)
    AND         reduce using rule 57 (number)
    OR          reduce using rule 57 (number)
    GREATER     reduce using rule 57 (number)
    GREATER_EQ  reduce using rule 57 (number)
    LESS        reduce using rule 57 (number)
    LESS_EQ     reduce using rule 57 (number)
    EQUAL       reduce using rule 57 (number)
    NOT_EQ      reduce using rule 57 (number)
    '+'         reduce using rule 57 (number)
    '-'         reduce using rule 57 (number)
    '*'         reduce using rule 57 (number)
    '/'         reduce using rule 57 (number)
    FILTER      reduce using rule 57 (number)
    MAP         reduce using rule 57 (number)
    ':'         reduce using rule 57 (number)


State 30

   55 const: NIL_CNST •

    ';'         reduce using rule 55 (const)
    AND         reduce using rule 55 (const)
    OR          reduce using rule 55 (const)
    GREATER     reduce using rule 55 (const)
    GREATER_EQ  reduce using rule 55 (const)
    LESS        reduce using rule 55 (const)
    LESS_EQ     reduce using rule 55 (const)
    EQUAL       reduce using rule 55 (const)
    NOT_EQ      reduce using rule 55 (const)
    '+'         reduce using rule 55 (const)
    '-'         reduce using rule 55 (const)
    '*'         reduce using rule 55 (const)
    '/'         reduce using rule 55 (const)
    FILTER      reduce using rule 55 (const)
    MAP         reduce using rule 55 (const)
    ':'         reduce using rule 55 (const)


State 31

   39 init_stmt: ID • '=' operation
   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   53 expression: ID •

    '('  shift, and go to state 65
    '='  shift, and go to state 66

    ';'         reduce using rule 53 (expression)
    AND         reduce using rule 53 (expression)
    OR          reduce using rule 53 (expression)
    GREATER     reduce using rule 53 (expression)
    GREATER_EQ  reduce using rule 53 (expression)
    LESS        reduce using rule 53 (expression)
    LESS_EQ     reduce using rule 53 (expression)
    EQUAL       reduce using rule 53 (expression)
    NOT_EQ      reduce using rule 53 (expression)
    '+'         reduce using rule 53 (expression)
    '-'         reduce using rule 53 (expression)
    '*'         reduce using rule 53 (expression)
    '/'         reduce using rule 53 (expression)
    FILTER      reduce using rule 53 (expression)
    MAP         reduce using rule 53 (expression)
    ':'         reduce using rule 53 (expression)


State 32

   36 return_stmt: RETURN_STM • operation ';'

    NUM_INT    shift, and go to state 28
    NUM_FLOAT  shift, and go to state 29
    NIL_CNST   shift, and go to state 30
    ID         shift, and go to state 67
    '+'        shift, and go to state 38
    '-'        shift, and go to state 39
    '%'        shift, and go to state 40
    '?'        shift, and go to state 41
    '!'        shift, and go to state 42

    func_calling      go to state 55
    expression        go to state 56
    const             go to state 57
    number            go to state 58
    operation         go to state 68
    single_operation  go to state 60
    arith_binary      go to state 61
    arith_single      go to state 62
    lst_single        go to state 63
    lst_binary        go to state 64


State 33

   34 conditional_stmt: IF_STMT • '(' operation ')' command
   35                 | IF_STMT • '(' operation ')' command ELSE_STMT command

    '('  shift, and go to state 69


State 34

   37 iteration: FOR_STMT • '(' loop_condition ')' command

    '('  shift, and go to state 70


State 35

   42 output: OUTPUT_WRITE • '(' operation ')' ';'
   44       | OUTPUT_WRITE • '(' STRING ')' ';'

    '('  shift, and go to state 71


State 36

   43 output: OUTPUT_WRITELN • '(' operation ')' ';'
   45       | OUTPUT_WRITELN • '(' STRING ')' ';'

    '('  shift, and go to state 72


State 37

   46 input: INPUT_READ • '(' expression ')' ';'

    '('  shift, and go to state 73


State 38

   75 arith_single: '+' • expression

    NUM_INT    shift, and go to state 28
    NUM_FLOAT  shift, and go to state 29
    NIL_CNST   shift, and go to state 30
    ID         shift, and go to state 67
    '+'        shift, and go to state 38
    '-'        shift, and go to state 39
    '%'        shift, and go to state 40
    '?'        shift, and go to state 41
    '!'        shift, and go to state 42

    func_calling      go to state 55
    expression        go to state 74
    const             go to state 57
    number            go to state 58
    single_operation  go to state 60
    arith_single      go to state 62
    lst_single        go to state 63


State 39

   76 arith_single: '-' • expression

    NUM_INT    shift, and go to state 28
    NUM_FLOAT  shift, and go to state 29
    NIL_CNST   shift, and go to state 30
    ID         shift, and go to state 67
    '+'        shift, and go to state 38
    '-'        shift, and go to state 39
    '%'        shift, and go to state 40
    '?'        shift, and go to state 41
    '!'        shift, and go to state 42

    func_calling      go to state 55
    expression        go to state 75
    const             go to state 57
    number            go to state 58
    single_operation  go to state 60
    arith_single      go to state 62
    lst_single        go to state 63


State 40

   77 lst_single: '%' • expression

    NUM_INT    shift, and go to state 28
    NUM_FLOAT  shift, and go to state 29
    NIL_CNST   shift, and go to state 30
    ID         shift, and go to state 67
    '+'        shift, and go to state 38
    '-'        shift, and go to state 39
    '%'        shift, and go to state 40
    '?'        shift, and go to state 41
    '!'        shift, and go to state 42

    func_calling      go to state 55
    expression        go to state 76
    const             go to state 57
    number            go to state 58
    single_operation  go to state 60
    arith_single      go to state 62
    lst_single        go to state 63


State 41

   78 lst_single: '?' • expression

    NUM_INT    shift, and go to state 28
    NUM_FLOAT  shift, and go to state 29
    NIL_CNST   shift, and go to state 30
    ID         shift, and go to state 67
    '+'        shift, and go to state 38
    '-'        shift, and go to state 39
    '%'        shift, and go to state 40
    '?'        shift, and go to state 41
    '!'        shift, and go to state 42

    func_calling      go to state 55
    expression        go to state 77
    const             go to state 57
    number            go to state 58
    single_operation  go to state 60
    arith_single      go to state 62
    lst_single        go to state 63


State 42

   69 single_operation: '!' • expression

    NUM_INT    shift, and go to state 28
    NUM_FLOAT  shift, and go to state 29
    NIL_CNST   shift, and go to state 30
    ID         shift, and go to state 67
    '+'        shift, and go to state 38
    '-'        shift, and go to state 39
    '%'        shift, and go to state 40
    '?'        shift, and go to state 41
    '!'        shift, and go to state 42

    func_calling      go to state 55
    expression        go to state 78
    const             go to state 57
    number            go to state 58
    single_operation  go to state 60
    arith_single      go to state 62
    lst_single        go to state 63


State 43

   22 command: var_declaration •

    error           reduce using rule 22 (command)
    NUM_INT         reduce using rule 22 (command)
    NUM_FLOAT       reduce using rule 22 (command)
    NIL_CNST        reduce using rule 22 (command)
    ID              reduce using rule 22 (command)
    RETURN_STM      reduce using rule 22 (command)
    T_INT           reduce using rule 22 (command)
    T_FLOAT         reduce using rule 22 (command)
    IF_STMT         reduce using rule 22 (command)
    FOR_STMT        reduce using rule 22 (command)
    OUTPUT_WRITE    reduce using rule 22 (command)
    OUTPUT_WRITELN  reduce using rule 22 (command)
    INPUT_READ      reduce using rule 22 (command)
    '{'             reduce using rule 22 (command)
    '}'             reduce using rule 22 (command)
    '+'             reduce using rule 22 (command)
    '-'             reduce using rule 22 (command)
    '%'             reduce using rule 22 (command)
    '?'             reduce using rule 22 (command)
    '!'             reduce using rule 22 (command)


State 44

   10 var_declaration: unq_declaration • ';'

    ';'  shift, and go to state 154


State 45

    9 func_declaration: unq_declaration $@1 '(' parameters ')' '{' block_commands • '}'

    '}'  shift, and go to state 79


State 46

   20 block_commands: command • block_commands
   21               | command •

    error           shift, and go to state 27
    NUM_INT         shift, and go to state 28
    NUM_FLOAT       shift, and go to state 29
    NIL_CNST        shift, and go to state 30
    ID              shift, and go to state 31
    RETURN_STM      shift, and go to state 32
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 33
    FOR_STMT        shift, and go to state 34
    OUTPUT_WRITE    shift, and go to state 35
    OUTPUT_WRITELN  shift, and go to state 36
    INPUT_READ      shift, and go to state 37
    '+'             shift, and go to state 38
    '-'             shift, and go to state 39
    '%'             shift, and go to state 40
    '?'             shift, and go to state 41
    '!'             shift, and go to state 42

    '{'  reduce using rule 29 ($@2)
    '}'  reduce using rule 21 (block_commands)

    var_declaration   go to state 43
    unq_declaration   go to state 44
    block_commands    go to state 80
    command           go to state 46
    $@2               go to state 47
    init_variable     go to state 48
    conditional_stmt  go to state 49
    return_stmt       go to state 50
    iteration         go to state 51
    init_stmt         go to state 52
    output            go to state 53
    input             go to state 54
    func_calling      go to state 55
    expression        go to state 56
    const             go to state 57
    number            go to state 58
    type              go to state 153
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 59
    single_operation  go to state 60
    arith_binary      go to state 61
    arith_single      go to state 62
    lst_single        go to state 63
    lst_binary        go to state 64


State 47

   30 command: $@2 • '{' block_commands '}'

    '{'  shift, and go to state 81


State 48

   23 command: init_variable •

    error           reduce using rule 23 (command)
    NUM_INT         reduce using rule 23 (command)
    NUM_FLOAT       reduce using rule 23 (command)
    NIL_CNST        reduce using rule 23 (command)
    ID              reduce using rule 23 (command)
    RETURN_STM      reduce using rule 23 (command)
    T_INT           reduce using rule 23 (command)
    T_FLOAT         reduce using rule 23 (command)
    IF_STMT         reduce using rule 23 (command)
    FOR_STMT        reduce using rule 23 (command)
    OUTPUT_WRITE    reduce using rule 23 (command)
    OUTPUT_WRITELN  reduce using rule 23 (command)
    INPUT_READ      reduce using rule 23 (command)
    '{'             reduce using rule 23 (command)
    '}'             reduce using rule 23 (command)
    '+'             reduce using rule 23 (command)
    '-'             reduce using rule 23 (command)
    '%'             reduce using rule 23 (command)
    '?'             reduce using rule 23 (command)
    '!'             reduce using rule 23 (command)


State 49

   24 command: conditional_stmt •

    error           reduce using rule 24 (command)
    NUM_INT         reduce using rule 24 (command)
    NUM_FLOAT       reduce using rule 24 (command)
    NIL_CNST        reduce using rule 24 (command)
    ID              reduce using rule 24 (command)
    RETURN_STM      reduce using rule 24 (command)
    T_INT           reduce using rule 24 (command)
    T_FLOAT         reduce using rule 24 (command)
    IF_STMT         reduce using rule 24 (command)
    FOR_STMT        reduce using rule 24 (command)
    OUTPUT_WRITE    reduce using rule 24 (command)
    OUTPUT_WRITELN  reduce using rule 24 (command)
    INPUT_READ      reduce using rule 24 (command)
    '{'             reduce using rule 24 (command)
    '}'             reduce using rule 24 (command)
    '+'             reduce using rule 24 (command)
    '-'             reduce using rule 24 (command)
    '%'             reduce using rule 24 (command)
    '?'             reduce using rule 24 (command)
    '!'             reduce using rule 24 (command)


State 50

   25 command: return_stmt •

    error           reduce using rule 25 (command)
    NUM_INT         reduce using rule 25 (command)
    NUM_FLOAT       reduce using rule 25 (command)
    NIL_CNST        reduce using rule 25 (command)
    ID              reduce using rule 25 (command)
    RETURN_STM      reduce using rule 25 (command)
    T_INT           reduce using rule 25 (command)
    T_FLOAT         reduce using rule 25 (command)
    IF_STMT         reduce using rule 25 (command)
    FOR_STMT        reduce using rule 25 (command)
    OUTPUT_WRITE    reduce using rule 25 (command)
    OUTPUT_WRITELN  reduce using rule 25 (command)
    INPUT_READ      reduce using rule 25 (command)
    '{'             reduce using rule 25 (command)
    '}'             reduce using rule 25 (command)
    '+'             reduce using rule 25 (command)
    '-'             reduce using rule 25 (command)
    '%'             reduce using rule 25 (command)
    '?'             reduce using rule 25 (command)
    '!'             reduce using rule 25 (command)


State 51

   26 command: iteration •

    error           reduce using rule 26 (command)
    NUM_INT         reduce using rule 26 (command)
    NUM_FLOAT       reduce using rule 26 (command)
    NIL_CNST        reduce using rule 26 (command)
    ID              reduce using rule 26 (command)
    RETURN_STM      reduce using rule 26 (command)
    T_INT           reduce using rule 26 (command)
    T_FLOAT         reduce using rule 26 (command)
    IF_STMT         reduce using rule 26 (command)
    FOR_STMT        reduce using rule 26 (command)
    OUTPUT_WRITE    reduce using rule 26 (command)
    OUTPUT_WRITELN  reduce using rule 26 (command)
    INPUT_READ      reduce using rule 26 (command)
    '{'             reduce using rule 26 (command)
    '}'             reduce using rule 26 (command)
    '+'             reduce using rule 26 (command)
    '-'             reduce using rule 26 (command)
    '%'             reduce using rule 26 (command)
    '?'             reduce using rule 26 (command)
    '!'             reduce using rule 26 (command)


State 52

   33 init_variable: init_stmt • ';'

    ';'  shift, and go to state 82


State 53

   28 command: output •

    error           reduce using rule 28 (command)
    NUM_INT         reduce using rule 28 (command)
    NUM_FLOAT       reduce using rule 28 (command)
    NIL_CNST        reduce using rule 28 (command)
    ID              reduce using rule 28 (command)
    RETURN_STM      reduce using rule 28 (command)
    T_INT           reduce using rule 28 (command)
    T_FLOAT         reduce using rule 28 (command)
    IF_STMT         reduce using rule 28 (command)
    FOR_STMT        reduce using rule 28 (command)
    OUTPUT_WRITE    reduce using rule 28 (command)
    OUTPUT_WRITELN  reduce using rule 28 (command)
    INPUT_READ      reduce using rule 28 (command)
    '{'             reduce using rule 28 (command)
    '}'             reduce using rule 28 (command)
    '+'             reduce using rule 28 (command)
    '-'             reduce using rule 28 (command)
    '%'             reduce using rule 28 (command)
    '?'             reduce using rule 28 (command)
    '!'             reduce using rule 28 (command)


State 54

   27 command: input •

    error           reduce using rule 27 (command)
    NUM_INT         reduce using rule 27 (command)
    NUM_FLOAT       reduce using rule 27 (command)
    NIL_CNST        reduce using rule 27 (command)
    ID              reduce using rule 27 (command)
    RETURN_STM      reduce using rule 27 (command)
    T_INT           reduce using rule 27 (command)
    T_FLOAT         reduce using rule 27 (command)
    IF_STMT         reduce using rule 27 (command)
    FOR_STMT        reduce using rule 27 (command)
    OUTPUT_WRITE    reduce using rule 27 (command)
    OUTPUT_WRITELN  reduce using rule 27 (command)
    INPUT_READ      reduce using rule 27 (command)
    '{'             reduce using rule 27 (command)
    '}'             reduce using rule 27 (command)
    '+'             reduce using rule 27 (command)
    '-'             reduce using rule 27 (command)
    '%'             reduce using rule 27 (command)
    '?'             reduce using rule 27 (command)
    '!'             reduce using rule 27 (command)


State 55

   50 expression: func_calling •

    ';'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)
    FILTER      reduce using rule 50 (expression)
    MAP         reduce using rule 50 (expression)
    ':'         reduce using rule 50 (expression)


State 56

   74 arith_binary: expression •
   79 lst_binary: expression • FILTER expression
   80           | expression • MAP expression
   81           | expression • ':' expression

    FILTER  shift, and go to state 83
    MAP     shift, and go to state 84
    ':'     shift, and go to state 85

    ';'         reduce using rule 74 (arith_binary)
    AND         reduce using rule 74 (arith_binary)
    OR          reduce using rule 74 (arith_binary)
    GREATER     reduce using rule 74 (arith_binary)
    GREATER_EQ  reduce using rule 74 (arith_binary)
    LESS        reduce using rule 74 (arith_binary)
    LESS_EQ     reduce using rule 74 (arith_binary)
    EQUAL       reduce using rule 74 (arith_binary)
    NOT_EQ      reduce using rule 74 (arith_binary)
    '+'         reduce using rule 74 (arith_binary)
    '-'         reduce using rule 74 (arith_binary)
    '*'         reduce using rule 74 (arith_binary)
    '/'         reduce using rule 74 (arith_binary)


State 57

   52 expression: const •

    ';'         reduce using rule 52 (expression)
    AND         reduce using rule 52 (expression)
    OR          reduce using rule 52 (expression)
    GREATER     reduce using rule 52 (expression)
    GREATER_EQ  reduce using rule 52 (expression)
    LESS        reduce using rule 52 (expression)
    LESS_EQ     reduce using rule 52 (expression)
    EQUAL       reduce using rule 52 (expression)
    NOT_EQ      reduce using rule 52 (expression)
    '+'         reduce using rule 52 (expression)
    '-'         reduce using rule 52 (expression)
    '*'         reduce using rule 52 (expression)
    '/'         reduce using rule 52 (expression)
    FILTER      reduce using rule 52 (expression)
    MAP         reduce using rule 52 (expression)
    ':'         reduce using rule 52 (expression)


State 58

   54 const: number •

    ';'         reduce using rule 54 (const)
    AND         reduce using rule 54 (const)
    OR          reduce using rule 54 (const)
    GREATER     reduce using rule 54 (const)
    GREATER_EQ  reduce using rule 54 (const)
    LESS        reduce using rule 54 (const)
    LESS_EQ     reduce using rule 54 (const)
    EQUAL       reduce using rule 54 (const)
    NOT_EQ      reduce using rule 54 (const)
    '+'         reduce using rule 54 (const)
    '-'         reduce using rule 54 (const)
    '*'         reduce using rule 54 (const)
    '/'         reduce using rule 54 (const)
    FILTER      reduce using rule 54 (const)
    MAP         reduce using rule 54 (const)
    ':'         reduce using rule 54 (const)


State 59

   31 command: operation • ';'
   65 operation: operation • relational_op expression
   66          | operation • logical_op expression

    ';'         shift, and go to state 86
    AND         shift, and go to state 87
    OR          shift, and go to state 88
    GREATER     shift, and go to state 89
    GREATER_EQ  shift, and go to state 90
    LESS        shift, and go to state 91
    LESS_EQ     shift, and go to state 92
    EQUAL       shift, and go to state 93
    NOT_EQ      shift, and go to state 94

    logical_op     go to state 95
    relational_op  go to state 96


State 60

   51 expression: single_operation •

    ';'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)
    FILTER      reduce using rule 51 (expression)
    MAP         reduce using rule 51 (expression)
    ':'         reduce using rule 51 (expression)


State 61

   63 operation: arith_binary •
   70 arith_binary: arith_binary • '+' expression
   71             | arith_binary • '-' expression
   72             | arith_binary • '*' expression
   73             | arith_binary • '/' expression

    '+'  shift, and go to state 97
    '-'  shift, and go to state 98
    '*'  shift, and go to state 99
    '/'  shift, and go to state 100

    ';'         reduce using rule 63 (operation)
    AND         reduce using rule 63 (operation)
    OR          reduce using rule 63 (operation)
    GREATER     reduce using rule 63 (operation)
    GREATER_EQ  reduce using rule 63 (operation)
    LESS        reduce using rule 63 (operation)
    LESS_EQ     reduce using rule 63 (operation)
    EQUAL       reduce using rule 63 (operation)
    NOT_EQ      reduce using rule 63 (operation)


State 62

   67 single_operation: arith_single •

    ';'         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)
    '+'         reduce using rule 67 (single_operation)
    '-'         reduce using rule 67 (single_operation)
    '*'         reduce using rule 67 (single_operation)
    '/'         reduce using rule 67 (single_operation)
    FILTER      reduce using rule 67 (single_operation)
    MAP         reduce using rule 67 (single_operation)
    ':'         reduce using rule 67 (single_operation)


State 63

   68 single_operation: lst_single •

    ';'         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)
    '+'         reduce using rule 68 (single_operation)
    '-'         reduce using rule 68 (single_operation)
    '*'         reduce using rule 68 (single_operation)
    '/'         reduce using rule 68 (single_operation)
    FILTER      reduce using rule 68 (single_operation)
    MAP         reduce using rule 68 (single_operation)
    ':'         reduce using rule 68 (single_operation)


State 64

   64 operation: lst_binary •

    ';'         reduce using rule 64 (operation)
    AND         reduce using rule 64 (operation)
    OR          reduce using rule 64 (operation)
    GREATER     reduce using rule 64 (operation)
    GREATER_EQ  reduce using rule 64 (operation)
    LESS        reduce using rule 64 (operation)
    LESS_EQ     reduce using rule 64 (operation)
    EQUAL       reduce using rule 64 (operation)
    NOT_EQ      reduce using rule 64 (operation)


State 65

   49 func_calling: ID '(' • $@3 calling_parameters $@4 ')'

    NUM_INT    reduce using rule 47 ($@3)
    NUM_FLOAT  reduce using rule 47 ($@3)
    NIL_CNST   reduce using rule 47 ($@3)
    ID         reduce using rule 47 ($@3)
    ')'        reduce using rule 47 ($@3)
    '+'        reduce using rule 47 ($@3)
    '-'        reduce using rule 47 ($@3)
    '%'        reduce using rule 47 ($@3)
    '?'        reduce using rule 47 ($@3)
    '!'        reduce using rule 47 ($@3)

    $@3  go to state 101


State 66

   39 init_stmt: ID '=' • operation

    NUM_INT    shift, and go to state 28
    NUM_FLOAT  shift, and go to state 29
    NIL_CNST   shift, and go to state 30
    ID         shift, and go to state 67
    '+'        shift, and go to state 38
    '-'        shift, and go to state 39
    '%'        shift, and go to state 40
    '?'        shift, and go to state 41
    '!'        shift, and go to state 42

    func_calling      go to state 55
    expression        go to state 56
    const             go to state 57
    number            go to state 58
    operation         go to state 102
    single_operation  go to state 60
    arith_binary      go to state 61
    arith_single      go to state 62
    lst_single        go to state 63
    lst_binary        go to state 64


State 67

   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   53 expression: ID •

    '('  shift, and go to state 65

    ';'         reduce using rule 53 (expression)
    AND         reduce using rule 53 (expression)
    OR          reduce using rule 53 (expression)
    GREATER     reduce using rule 53 (expression)
    GREATER_EQ  reduce using rule 53 (expression)
    LESS        reduce using rule 53 (expression)
    LESS_EQ     reduce using rule 53 (expression)
    EQUAL       reduce using rule 53 (expression)
    NOT_EQ      reduce using rule 53 (expression)
    '+'         reduce using rule 53 (expression)
    '-'         reduce using rule 53 (expression)
    '*'         reduce using rule 53 (expression)
    '/'         reduce using rule 53 (expression)
    FILTER      reduce using rule 53 (expression)
    MAP         reduce using rule 53 (expression)
    ':'         reduce using rule 53 (expression)


State 68

   36 return_stmt: RETURN_STM operation • ';'
   65 operation: operation • relational_op expression
   66          | operation • logical_op expression

    ';'         shift, and go to state 103
    AND         shift, and go to state 87
    OR          shift, and go to state 88
    GREATER     shift, and go to state 89
    GREATER_EQ  shift, and go to state 90
    LESS        shift, and go to state 91
    LESS_EQ     shift, and go to state 92
    EQUAL       shift, and go to state 93
    NOT_EQ      shift, and go to state 94

    logical_op     go to state 95
    relational_op  go to state 96


State 69

   34 conditional_stmt: IF_STMT '(' • operation ')' command
   35                 | IF_STMT '(' • operation ')' command ELSE_STMT command

    NUM_INT    shift, and go to state 155
    NUM_FLOAT  shift, and go to state 156
    NIL_CNST   shift, and go to state 157
    ID         shift, and go to state 158
    '+'        shift, and go to state 159
    '-'        shift, and go to state 160
    '%'        shift, and go to state 161
    '?'        shift, and go to state 162
    '!'        shift, and go to state 163

    func_calling      go to state 164
    expression        go to state 165
    const             go to state 166
    number            go to state 167
    operation         go to state 104
    single_operation  go to state 168
    arith_binary      go to state 169
    arith_single      go to state 170
    lst_single        go to state 171
    lst_binary        go to state 172


State 70

   37 iteration: FOR_STMT '(' • loop_condition ')' command

    ID  shift, and go to state 105

    loop_condition  go to state 106
    init_stmt       go to state 107


State 71

   42 output: OUTPUT_WRITE '(' • operation ')' ';'
   44       | OUTPUT_WRITE '(' • STRING ')' ';'

    NUM_INT    shift, and go to state 155
    NUM_FLOAT  shift, and go to state 156
    STRING     shift, and go to state 108
    NIL_CNST   shift, and go to state 157
    ID         shift, and go to state 158
    '+'        shift, and go to state 159
    '-'        shift, and go to state 160
    '%'        shift, and go to state 161
    '?'        shift, and go to state 162
    '!'        shift, and go to state 163

    func_calling      go to state 164
    expression        go to state 165
    const             go to state 166
    number            go to state 167
    operation         go to state 109
    single_operation  go to state 168
    arith_binary      go to state 169
    arith_single      go to state 170
    lst_single        go to state 171
    lst_binary        go to state 172


State 72

   43 output: OUTPUT_WRITELN '(' • operation ')' ';'
   45       | OUTPUT_WRITELN '(' • STRING ')' ';'

    NUM_INT    shift, and go to state 155
    NUM_FLOAT  shift, and go to state 156
    STRING     shift, and go to state 110
    NIL_CNST   shift, and go to state 157
    ID         shift, and go to state 158
    '+'        shift, and go to state 159
    '-'        shift, and go to state 160
    '%'        shift, and go to state 161
    '?'        shift, and go to state 162
    '!'        shift, and go to state 163

    func_calling      go to state 164
    expression        go to state 165
    const             go to state 166
    number            go to state 167
    operation         go to state 111
    single_operation  go to state 168
    arith_binary      go to state 169
    arith_single      go to state 170
    lst_single        go to state 171
    lst_binary        go to state 172


State 73

   46 input: INPUT_READ '(' • expression ')' ';'

    NUM_INT    shift, and go to state 173
    NUM_FLOAT  shift, and go to state 174
    NIL_CNST   shift, and go to state 175
    ID         shift, and go to state 176
    '+'        shift, and go to state 177
    '-'        shift, and go to state 178
    '%'        shift, and go to state 179
    '?'        shift, and go to state 180
    '!'        shift, and go to state 181

    func_calling      go to state 182
    expression        go to state 112
    const             go to state 183
    number            go to state 184
    single_operation  go to state 185
    arith_single      go to state 186
    lst_single        go to state 187


State 74

   75 arith_single: '+' expression •

    ';'         reduce using rule 75 (arith_single)
    AND         reduce using rule 75 (arith_single)
    OR          reduce using rule 75 (arith_single)
    GREATER     reduce using rule 75 (arith_single)
    GREATER_EQ  reduce using rule 75 (arith_single)
    LESS        reduce using rule 75 (arith_single)
    LESS_EQ     reduce using rule 75 (arith_single)
    EQUAL       reduce using rule 75 (arith_single)
    NOT_EQ      reduce using rule 75 (arith_single)
    '+'         reduce using rule 75 (arith_single)
    '-'         reduce using rule 75 (arith_single)
    '*'         reduce using rule 75 (arith_single)
    '/'         reduce using rule 75 (arith_single)
    FILTER      reduce using rule 75 (arith_single)
    MAP         reduce using rule 75 (arith_single)
    ':'         reduce using rule 75 (arith_single)


State 75

   76 arith_single: '-' expression •

    ';'         reduce using rule 76 (arith_single)
    AND         reduce using rule 76 (arith_single)
    OR          reduce using rule 76 (arith_single)
    GREATER     reduce using rule 76 (arith_single)
    GREATER_EQ  reduce using rule 76 (arith_single)
    LESS        reduce using rule 76 (arith_single)
    LESS_EQ     reduce using rule 76 (arith_single)
    EQUAL       reduce using rule 76 (arith_single)
    NOT_EQ      reduce using rule 76 (arith_single)
    '+'         reduce using rule 76 (arith_single)
    '-'         reduce using rule 76 (arith_single)
    '*'         reduce using rule 76 (arith_single)
    '/'         reduce using rule 76 (arith_single)
    FILTER      reduce using rule 76 (arith_single)
    MAP         reduce using rule 76 (arith_single)
    ':'         reduce using rule 76 (arith_single)


State 76

   77 lst_single: '%' expression •

    ';'         reduce using rule 77 (lst_single)
    AND         reduce using rule 77 (lst_single)
    OR          reduce using rule 77 (lst_single)
    GREATER     reduce using rule 77 (lst_single)
    GREATER_EQ  reduce using rule 77 (lst_single)
    LESS        reduce using rule 77 (lst_single)
    LESS_EQ     reduce using rule 77 (lst_single)
    EQUAL       reduce using rule 77 (lst_single)
    NOT_EQ      reduce using rule 77 (lst_single)
    '+'         reduce using rule 77 (lst_single)
    '-'         reduce using rule 77 (lst_single)
    '*'         reduce using rule 77 (lst_single)
    '/'         reduce using rule 77 (lst_single)
    FILTER      reduce using rule 77 (lst_single)
    MAP         reduce using rule 77 (lst_single)
    ':'         reduce using rule 77 (lst_single)


State 77

   78 lst_single: '?' expression •

    ';'         reduce using rule 78 (lst_single)
    AND         reduce using rule 78 (lst_single)
    OR          reduce using rule 78 (lst_single)
    GREATER     reduce using rule 78 (lst_single)
    GREATER_EQ  reduce using rule 78 (lst_single)
    LESS        reduce using rule 78 (lst_single)
    LESS_EQ     reduce using rule 78 (lst_single)
    EQUAL       reduce using rule 78 (lst_single)
    NOT_EQ      reduce using rule 78 (lst_single)
    '+'         reduce using rule 78 (lst_single)
    '-'         reduce using rule 78 (lst_single)
    '*'         reduce using rule 78 (lst_single)
    '/'         reduce using rule 78 (lst_single)
    FILTER      reduce using rule 78 (lst_single)
    MAP         reduce using rule 78 (lst_single)
    ':'         reduce using rule 78 (lst_single)


State 78

   69 single_operation: '!' expression •

    ';'         reduce using rule 69 (single_operation)
    AND         reduce using rule 69 (single_operation)
    OR          reduce using rule 69 (single_operation)
    GREATER     reduce using rule 69 (single_operation)
    GREATER_EQ  reduce using rule 69 (single_operation)
    LESS        reduce using rule 69 (single_operation)
    LESS_EQ     reduce using rule 69 (single_operation)
    EQUAL       reduce using rule 69 (single_operation)
    NOT_EQ      reduce using rule 69 (single_operation)
    '+'         reduce using rule 69 (single_operation)
    '-'         reduce using rule 69 (single_operation)
    '*'         reduce using rule 69 (single_operation)
    '/'         reduce using rule 69 (single_operation)
    FILTER      reduce using rule 69 (single_operation)
    MAP         reduce using rule 69 (single_operation)
    ':'         reduce using rule 69 (single_operation)


State 79

    9 func_declaration: unq_declaration $@1 '(' parameters ')' '{' block_commands '}' •

    $end     reduce using rule 9 (func_declaration)
    error    reduce using rule 9 (func_declaration)
    T_INT    reduce using rule 9 (func_declaration)
    T_FLOAT  reduce using rule 9 (func_declaration)


State 80

   20 block_commands: command block_commands •

    '}'  reduce using rule 20 (block_commands)


State 81

   30 command: $@2 '{' • block_commands '}'

    error           shift, and go to state 27
    NUM_INT         shift, and go to state 28
    NUM_FLOAT       shift, and go to state 29
    NIL_CNST        shift, and go to state 30
    ID              shift, and go to state 31
    RETURN_STM      shift, and go to state 32
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 33
    FOR_STMT        shift, and go to state 34
    OUTPUT_WRITE    shift, and go to state 35
    OUTPUT_WRITELN  shift, and go to state 36
    INPUT_READ      shift, and go to state 37
    '+'             shift, and go to state 38
    '-'             shift, and go to state 39
    '%'             shift, and go to state 40
    '?'             shift, and go to state 41
    '!'             shift, and go to state 42

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 43
    unq_declaration   go to state 44
    block_commands    go to state 113
    command           go to state 46
    $@2               go to state 47
    init_variable     go to state 48
    conditional_stmt  go to state 49
    return_stmt       go to state 50
    iteration         go to state 51
    init_stmt         go to state 52
    output            go to state 53
    input             go to state 54
    func_calling      go to state 55
    expression        go to state 56
    const             go to state 57
    number            go to state 58
    type              go to state 153
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 59
    single_operation  go to state 60
    arith_binary      go to state 61
    arith_single      go to state 62
    lst_single        go to state 63
    lst_binary        go to state 64


State 82

   33 init_variable: init_stmt ';' •

    error           reduce using rule 33 (init_variable)
    NUM_INT         reduce using rule 33 (init_variable)
    NUM_FLOAT       reduce using rule 33 (init_variable)
    NIL_CNST        reduce using rule 33 (init_variable)
    ID              reduce using rule 33 (init_variable)
    RETURN_STM      reduce using rule 33 (init_variable)
    T_INT           reduce using rule 33 (init_variable)
    T_FLOAT         reduce using rule 33 (init_variable)
    IF_STMT         reduce using rule 33 (init_variable)
    FOR_STMT        reduce using rule 33 (init_variable)
    OUTPUT_WRITE    reduce using rule 33 (init_variable)
    OUTPUT_WRITELN  reduce using rule 33 (init_variable)
    INPUT_READ      reduce using rule 33 (init_variable)
    '{'             reduce using rule 33 (init_variable)
    '}'             reduce using rule 33 (init_variable)
    '+'             reduce using rule 33 (init_variable)
    '-'             reduce using rule 33 (init_variable)
    '%'             reduce using rule 33 (init_variable)
    '?'             reduce using rule 33 (init_variable)
    '!'             reduce using rule 33 (init_variable)


State 83

   79 lst_binary: expression FILTER • expression

    NUM_INT    shift, and go to state 188
    NUM_FLOAT  shift, and go to state 189
    NIL_CNST   shift, and go to state 190
    ID         shift, and go to state 191
    '+'        shift, and go to state 192
    '-'        shift, and go to state 193
    '%'        shift, and go to state 194
    '?'        shift, and go to state 195
    '!'        shift, and go to state 196

    func_calling      go to state 197
    expression        go to state 114
    const             go to state 198
    number            go to state 199
    single_operation  go to state 200
    arith_single      go to state 201
    lst_single        go to state 202


State 84

   80 lst_binary: expression MAP • expression

    NUM_INT    shift, and go to state 188
    NUM_FLOAT  shift, and go to state 189
    NIL_CNST   shift, and go to state 190
    ID         shift, and go to state 191
    '+'        shift, and go to state 192
    '-'        shift, and go to state 193
    '%'        shift, and go to state 194
    '?'        shift, and go to state 195
    '!'        shift, and go to state 196

    func_calling      go to state 197
    expression        go to state 115
    const             go to state 198
    number            go to state 199
    single_operation  go to state 200
    arith_single      go to state 201
    lst_single        go to state 202


State 85

   81 lst_binary: expression ':' • expression

    NUM_INT    shift, and go to state 188
    NUM_FLOAT  shift, and go to state 189
    NIL_CNST   shift, and go to state 190
    ID         shift, and go to state 191
    '+'        shift, and go to state 192
    '-'        shift, and go to state 193
    '%'        shift, and go to state 194
    '?'        shift, and go to state 195
    '!'        shift, and go to state 196

    func_calling      go to state 197
    expression        go to state 116
    const             go to state 198
    number            go to state 199
    single_operation  go to state 200
    arith_single      go to state 201
    lst_single        go to state 202


State 86

   31 command: operation ';' •

    error           reduce using rule 31 (command)
    NUM_INT         reduce using rule 31 (command)
    NUM_FLOAT       reduce using rule 31 (command)
    NIL_CNST        reduce using rule 31 (command)
    ID              reduce using rule 31 (command)
    RETURN_STM      reduce using rule 31 (command)
    T_INT           reduce using rule 31 (command)
    T_FLOAT         reduce using rule 31 (command)
    IF_STMT         reduce using rule 31 (command)
    FOR_STMT        reduce using rule 31 (command)
    OUTPUT_WRITE    reduce using rule 31 (command)
    OUTPUT_WRITELN  reduce using rule 31 (command)
    INPUT_READ      reduce using rule 31 (command)
    '{'             reduce using rule 31 (command)
    '}'             reduce using rule 31 (command)
    '+'             reduce using rule 31 (command)
    '-'             reduce using rule 31 (command)
    '%'             reduce using rule 31 (command)
    '?'             reduce using rule 31 (command)
    '!'             reduce using rule 31 (command)


State 87

   82 logical_op: AND •

    NUM_INT    reduce using rule 82 (logical_op)
    NUM_FLOAT  reduce using rule 82 (logical_op)
    NIL_CNST   reduce using rule 82 (logical_op)
    ID         reduce using rule 82 (logical_op)
    '+'        reduce using rule 82 (logical_op)
    '-'        reduce using rule 82 (logical_op)
    '%'        reduce using rule 82 (logical_op)
    '?'        reduce using rule 82 (logical_op)
    '!'        reduce using rule 82 (logical_op)


State 88

   83 logical_op: OR •

    NUM_INT    reduce using rule 83 (logical_op)
    NUM_FLOAT  reduce using rule 83 (logical_op)
    NIL_CNST   reduce using rule 83 (logical_op)
    ID         reduce using rule 83 (logical_op)
    '+'        reduce using rule 83 (logical_op)
    '-'        reduce using rule 83 (logical_op)
    '%'        reduce using rule 83 (logical_op)
    '?'        reduce using rule 83 (logical_op)
    '!'        reduce using rule 83 (logical_op)


State 89

   84 relational_op: GREATER •

    NUM_INT    reduce using rule 84 (relational_op)
    NUM_FLOAT  reduce using rule 84 (relational_op)
    NIL_CNST   reduce using rule 84 (relational_op)
    ID         reduce using rule 84 (relational_op)
    '+'        reduce using rule 84 (relational_op)
    '-'        reduce using rule 84 (relational_op)
    '%'        reduce using rule 84 (relational_op)
    '?'        reduce using rule 84 (relational_op)
    '!'        reduce using rule 84 (relational_op)


State 90

   85 relational_op: GREATER_EQ •

    NUM_INT    reduce using rule 85 (relational_op)
    NUM_FLOAT  reduce using rule 85 (relational_op)
    NIL_CNST   reduce using rule 85 (relational_op)
    ID         reduce using rule 85 (relational_op)
    '+'        reduce using rule 85 (relational_op)
    '-'        reduce using rule 85 (relational_op)
    '%'        reduce using rule 85 (relational_op)
    '?'        reduce using rule 85 (relational_op)
    '!'        reduce using rule 85 (relational_op)


State 91

   86 relational_op: LESS •

    NUM_INT    reduce using rule 86 (relational_op)
    NUM_FLOAT  reduce using rule 86 (relational_op)
    NIL_CNST   reduce using rule 86 (relational_op)
    ID         reduce using rule 86 (relational_op)
    '+'        reduce using rule 86 (relational_op)
    '-'        reduce using rule 86 (relational_op)
    '%'        reduce using rule 86 (relational_op)
    '?'        reduce using rule 86 (relational_op)
    '!'        reduce using rule 86 (relational_op)


State 92

   87 relational_op: LESS_EQ •

    NUM_INT    reduce using rule 87 (relational_op)
    NUM_FLOAT  reduce using rule 87 (relational_op)
    NIL_CNST   reduce using rule 87 (relational_op)
    ID         reduce using rule 87 (relational_op)
    '+'        reduce using rule 87 (relational_op)
    '-'        reduce using rule 87 (relational_op)
    '%'        reduce using rule 87 (relational_op)
    '?'        reduce using rule 87 (relational_op)
    '!'        reduce using rule 87 (relational_op)


State 93

   88 relational_op: EQUAL •

    NUM_INT    reduce using rule 88 (relational_op)
    NUM_FLOAT  reduce using rule 88 (relational_op)
    NIL_CNST   reduce using rule 88 (relational_op)
    ID         reduce using rule 88 (relational_op)
    '+'        reduce using rule 88 (relational_op)
    '-'        reduce using rule 88 (relational_op)
    '%'        reduce using rule 88 (relational_op)
    '?'        reduce using rule 88 (relational_op)
    '!'        reduce using rule 88 (relational_op)


State 94

   89 relational_op: NOT_EQ •

    NUM_INT    reduce using rule 89 (relational_op)
    NUM_FLOAT  reduce using rule 89 (relational_op)
    NIL_CNST   reduce using rule 89 (relational_op)
    ID         reduce using rule 89 (relational_op)
    '+'        reduce using rule 89 (relational_op)
    '-'        reduce using rule 89 (relational_op)
    '%'        reduce using rule 89 (relational_op)
    '?'        reduce using rule 89 (relational_op)
    '!'        reduce using rule 89 (relational_op)


State 95

   66 operation: operation logical_op • expression

    NUM_INT    shift, and go to state 188
    NUM_FLOAT  shift, and go to state 189
    NIL_CNST   shift, and go to state 190
    ID         shift, and go to state 191
    '+'        shift, and go to state 192
    '-'        shift, and go to state 193
    '%'        shift, and go to state 194
    '?'        shift, and go to state 195
    '!'        shift, and go to state 196

    func_calling      go to state 197
    expression        go to state 117
    const             go to state 198
    number            go to state 199
    single_operation  go to state 200
    arith_single      go to state 201
    lst_single        go to state 202


State 96

   65 operation: operation relational_op • expression

    NUM_INT    shift, and go to state 188
    NUM_FLOAT  shift, and go to state 189
    NIL_CNST   shift, and go to state 190
    ID         shift, and go to state 191
    '+'        shift, and go to state 192
    '-'        shift, and go to state 193
    '%'        shift, and go to state 194
    '?'        shift, and go to state 195
    '!'        shift, and go to state 196

    func_calling      go to state 197
    expression        go to state 118
    const             go to state 198
    number            go to state 199
    single_operation  go to state 200
    arith_single      go to state 201
    lst_single        go to state 202


State 97

   70 arith_binary: arith_binary '+' • expression

    NUM_INT    shift, and go to state 203
    NUM_FLOAT  shift, and go to state 204
    NIL_CNST   shift, and go to state 205
    ID         shift, and go to state 206
    '+'        shift, and go to state 207
    '-'        shift, and go to state 208
    '%'        shift, and go to state 209
    '?'        shift, and go to state 210
    '!'        shift, and go to state 211

    func_calling      go to state 212
    expression        go to state 119
    const             go to state 213
    number            go to state 214
    single_operation  go to state 215
    arith_single      go to state 216
    lst_single        go to state 217


State 98

   71 arith_binary: arith_binary '-' • expression

    NUM_INT    shift, and go to state 203
    NUM_FLOAT  shift, and go to state 204
    NIL_CNST   shift, and go to state 205
    ID         shift, and go to state 206
    '+'        shift, and go to state 207
    '-'        shift, and go to state 208
    '%'        shift, and go to state 209
    '?'        shift, and go to state 210
    '!'        shift, and go to state 211

    func_calling      go to state 212
    expression        go to state 120
    const             go to state 213
    number            go to state 214
    single_operation  go to state 215
    arith_single      go to state 216
    lst_single        go to state 217


State 99

   72 arith_binary: arith_binary '*' • expression

    NUM_INT    shift, and go to state 203
    NUM_FLOAT  shift, and go to state 204
    NIL_CNST   shift, and go to state 205
    ID         shift, and go to state 206
    '+'        shift, and go to state 207
    '-'        shift, and go to state 208
    '%'        shift, and go to state 209
    '?'        shift, and go to state 210
    '!'        shift, and go to state 211

    func_calling      go to state 212
    expression        go to state 121
    const             go to state 213
    number            go to state 214
    single_operation  go to state 215
    arith_single      go to state 216
    lst_single        go to state 217


State 100

   73 arith_binary: arith_binary '/' • expression

    NUM_INT    shift, and go to state 203
    NUM_FLOAT  shift, and go to state 204
    NIL_CNST   shift, and go to state 205
    ID         shift, and go to state 206
    '+'        shift, and go to state 207
    '-'        shift, and go to state 208
    '%'        shift, and go to state 209
    '?'        shift, and go to state 210
    '!'        shift, and go to state 211

    func_calling      go to state 212
    expression        go to state 122
    const             go to state 213
    number            go to state 214
    single_operation  go to state 215
    arith_single      go to state 216
    lst_single        go to state 217


State 101

   49 func_calling: ID '(' $@3 • calling_parameters $@4 ')'

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 123
    lst_calling_parameters  go to state 124
    func_calling            go to state 227
    expression              go to state 228
    const                   go to state 229
    number                  go to state 230
    operation               go to state 125
    single_operation        go to state 231
    arith_binary            go to state 232
    arith_single            go to state 233
    lst_single              go to state 234
    lst_binary              go to state 235


State 102

   39 init_stmt: ID '=' operation •
   65 operation: operation • relational_op expression
   66          | operation • logical_op expression

    AND         shift, and go to state 87
    OR          shift, and go to state 88
    GREATER     shift, and go to state 89
    GREATER_EQ  shift, and go to state 90
    LESS        shift, and go to state 91
    LESS_EQ     shift, and go to state 92
    EQUAL       shift, and go to state 93
    NOT_EQ      shift, and go to state 94

    ';'  reduce using rule 39 (init_stmt)

    logical_op     go to state 95
    relational_op  go to state 96


State 103

   36 return_stmt: RETURN_STM operation ';' •

    error           reduce using rule 36 (return_stmt)
    NUM_INT         reduce using rule 36 (return_stmt)
    NUM_FLOAT       reduce using rule 36 (return_stmt)
    NIL_CNST        reduce using rule 36 (return_stmt)
    ID              reduce using rule 36 (return_stmt)
    RETURN_STM      reduce using rule 36 (return_stmt)
    T_INT           reduce using rule 36 (return_stmt)
    T_FLOAT         reduce using rule 36 (return_stmt)
    IF_STMT         reduce using rule 36 (return_stmt)
    FOR_STMT        reduce using rule 36 (return_stmt)
    OUTPUT_WRITE    reduce using rule 36 (return_stmt)
    OUTPUT_WRITELN  reduce using rule 36 (return_stmt)
    INPUT_READ      reduce using rule 36 (return_stmt)
    '{'             reduce using rule 36 (return_stmt)
    '}'             reduce using rule 36 (return_stmt)
    '+'             reduce using rule 36 (return_stmt)
    '-'             reduce using rule 36 (return_stmt)
    '%'             reduce using rule 36 (return_stmt)
    '?'             reduce using rule 36 (return_stmt)
    '!'             reduce using rule 36 (return_stmt)


State 104

   34 conditional_stmt: IF_STMT '(' operation • ')' command
   35                 | IF_STMT '(' operation • ')' command ELSE_STMT command
   65 operation: operation • relational_op expression
   66          | operation • logical_op expression

    ')'         shift, and go to state 126
    AND         shift, and go to state 87
    OR          shift, and go to state 88
    GREATER     shift, and go to state 89
    GREATER_EQ  shift, and go to state 90
    LESS        shift, and go to state 91
    LESS_EQ     shift, and go to state 92
    EQUAL       shift, and go to state 93
    NOT_EQ      shift, and go to state 94

    logical_op     go to state 236
    relational_op  go to state 237


State 105

   39 init_stmt: ID • '=' operation

    '='  shift, and go to state 66


State 106

   37 iteration: FOR_STMT '(' loop_condition • ')' command

    ')'  shift, and go to state 127


State 107

   38 loop_condition: init_stmt • ';' operation ';' update_stmt

    ';'  shift, and go to state 128


State 108

   44 output: OUTPUT_WRITE '(' STRING • ')' ';'

    ')'  shift, and go to state 129


State 109

   42 output: OUTPUT_WRITE '(' operation • ')' ';'
   65 operation: operation • relational_op expression
   66          | operation • logical_op expression

    ')'         shift, and go to state 130
    AND         shift, and go to state 87
    OR          shift, and go to state 88
    GREATER     shift, and go to state 89
    GREATER_EQ  shift, and go to state 90
    LESS        shift, and go to state 91
    LESS_EQ     shift, and go to state 92
    EQUAL       shift, and go to state 93
    NOT_EQ      shift, and go to state 94

    logical_op     go to state 236
    relational_op  go to state 237


State 110

   45 output: OUTPUT_WRITELN '(' STRING • ')' ';'

    ')'  shift, and go to state 131


State 111

   43 output: OUTPUT_WRITELN '(' operation • ')' ';'
   65 operation: operation • relational_op expression
   66          | operation • logical_op expression

    ')'         shift, and go to state 132
    AND         shift, and go to state 87
    OR          shift, and go to state 88
    GREATER     shift, and go to state 89
    GREATER_EQ  shift, and go to state 90
    LESS        shift, and go to state 91
    LESS_EQ     shift, and go to state 92
    EQUAL       shift, and go to state 93
    NOT_EQ      shift, and go to state 94

    logical_op     go to state 236
    relational_op  go to state 237


State 112

   46 input: INPUT_READ '(' expression • ')' ';'

    ')'  shift, and go to state 133


State 113

   30 command: $@2 '{' block_commands • '}'

    '}'  shift, and go to state 134


State 114

   79 lst_binary: expression FILTER expression •

    ';'         reduce using rule 79 (lst_binary)
    AND         reduce using rule 79 (lst_binary)
    OR          reduce using rule 79 (lst_binary)
    GREATER     reduce using rule 79 (lst_binary)
    GREATER_EQ  reduce using rule 79 (lst_binary)
    LESS        reduce using rule 79 (lst_binary)
    LESS_EQ     reduce using rule 79 (lst_binary)
    EQUAL       reduce using rule 79 (lst_binary)
    NOT_EQ      reduce using rule 79 (lst_binary)


State 115

   80 lst_binary: expression MAP expression •

    ';'         reduce using rule 80 (lst_binary)
    AND         reduce using rule 80 (lst_binary)
    OR          reduce using rule 80 (lst_binary)
    GREATER     reduce using rule 80 (lst_binary)
    GREATER_EQ  reduce using rule 80 (lst_binary)
    LESS        reduce using rule 80 (lst_binary)
    LESS_EQ     reduce using rule 80 (lst_binary)
    EQUAL       reduce using rule 80 (lst_binary)
    NOT_EQ      reduce using rule 80 (lst_binary)


State 116

   81 lst_binary: expression ':' expression •

    ';'         reduce using rule 81 (lst_binary)
    AND         reduce using rule 81 (lst_binary)
    OR          reduce using rule 81 (lst_binary)
    GREATER     reduce using rule 81 (lst_binary)
    GREATER_EQ  reduce using rule 81 (lst_binary)
    LESS        reduce using rule 81 (lst_binary)
    LESS_EQ     reduce using rule 81 (lst_binary)
    EQUAL       reduce using rule 81 (lst_binary)
    NOT_EQ      reduce using rule 81 (lst_binary)


State 117

   66 operation: operation logical_op expression •

    ';'         reduce using rule 66 (operation)
    AND         reduce using rule 66 (operation)
    OR          reduce using rule 66 (operation)
    GREATER     reduce using rule 66 (operation)
    GREATER_EQ  reduce using rule 66 (operation)
    LESS        reduce using rule 66 (operation)
    LESS_EQ     reduce using rule 66 (operation)
    EQUAL       reduce using rule 66 (operation)
    NOT_EQ      reduce using rule 66 (operation)


State 118

   65 operation: operation relational_op expression •

    ';'         reduce using rule 65 (operation)
    AND         reduce using rule 65 (operation)
    OR          reduce using rule 65 (operation)
    GREATER     reduce using rule 65 (operation)
    GREATER_EQ  reduce using rule 65 (operation)
    LESS        reduce using rule 65 (operation)
    LESS_EQ     reduce using rule 65 (operation)
    EQUAL       reduce using rule 65 (operation)
    NOT_EQ      reduce using rule 65 (operation)


State 119

   70 arith_binary: arith_binary '+' expression •

    ';'         reduce using rule 70 (arith_binary)
    AND         reduce using rule 70 (arith_binary)
    OR          reduce using rule 70 (arith_binary)
    GREATER     reduce using rule 70 (arith_binary)
    GREATER_EQ  reduce using rule 70 (arith_binary)
    LESS        reduce using rule 70 (arith_binary)
    LESS_EQ     reduce using rule 70 (arith_binary)
    EQUAL       reduce using rule 70 (arith_binary)
    NOT_EQ      reduce using rule 70 (arith_binary)
    '+'         reduce using rule 70 (arith_binary)
    '-'         reduce using rule 70 (arith_binary)
    '*'         reduce using rule 70 (arith_binary)
    '/'         reduce using rule 70 (arith_binary)


State 120

   71 arith_binary: arith_binary '-' expression •

    ';'         reduce using rule 71 (arith_binary)
    AND         reduce using rule 71 (arith_binary)
    OR          reduce using rule 71 (arith_binary)
    GREATER     reduce using rule 71 (arith_binary)
    GREATER_EQ  reduce using rule 71 (arith_binary)
    LESS        reduce using rule 71 (arith_binary)
    LESS_EQ     reduce using rule 71 (arith_binary)
    EQUAL       reduce using rule 71 (arith_binary)
    NOT_EQ      reduce using rule 71 (arith_binary)
    '+'         reduce using rule 71 (arith_binary)
    '-'         reduce using rule 71 (arith_binary)
    '*'         reduce using rule 71 (arith_binary)
    '/'         reduce using rule 71 (arith_binary)


State 121

   72 arith_binary: arith_binary '*' expression •

    ';'         reduce using rule 72 (arith_binary)
    AND         reduce using rule 72 (arith_binary)
    OR          reduce using rule 72 (arith_binary)
    GREATER     reduce using rule 72 (arith_binary)
    GREATER_EQ  reduce using rule 72 (arith_binary)
    LESS        reduce using rule 72 (arith_binary)
    LESS_EQ     reduce using rule 72 (arith_binary)
    EQUAL       reduce using rule 72 (arith_binary)
    NOT_EQ      reduce using rule 72 (arith_binary)
    '+'         reduce using rule 72 (arith_binary)
    '-'         reduce using rule 72 (arith_binary)
    '*'         reduce using rule 72 (arith_binary)
    '/'         reduce using rule 72 (arith_binary)


State 122

   73 arith_binary: arith_binary '/' expression •

    ';'         reduce using rule 73 (arith_binary)
    AND         reduce using rule 73 (arith_binary)
    OR          reduce using rule 73 (arith_binary)
    GREATER     reduce using rule 73 (arith_binary)
    GREATER_EQ  reduce using rule 73 (arith_binary)
    LESS        reduce using rule 73 (arith_binary)
    LESS_EQ     reduce using rule 73 (arith_binary)
    EQUAL       reduce using rule 73 (arith_binary)
    NOT_EQ      reduce using rule 73 (arith_binary)
    '+'         reduce using rule 73 (arith_binary)
    '-'         reduce using rule 73 (arith_binary)
    '*'         reduce using rule 73 (arith_binary)
    '/'         reduce using rule 73 (arith_binary)


State 123

   49 func_calling: ID '(' $@3 calling_parameters • $@4 ')'

    ')'  reduce using rule 48 ($@4)

    $@4  go to state 135


State 124

   16 calling_parameters: lst_calling_parameters •

    ')'  reduce using rule 16 (calling_parameters)


State 125

   18 lst_calling_parameters: operation • ',' lst_calling_parameters
   19                       | operation •
   65 operation: operation • relational_op expression
   66          | operation • logical_op expression

    ','         shift, and go to state 136
    AND         shift, and go to state 87
    OR          shift, and go to state 88
    GREATER     shift, and go to state 89
    GREATER_EQ  shift, and go to state 90
    LESS        shift, and go to state 91
    LESS_EQ     shift, and go to state 92
    EQUAL       shift, and go to state 93
    NOT_EQ      shift, and go to state 94

    ')'  reduce using rule 19 (lst_calling_parameters)

    logical_op     go to state 238
    relational_op  go to state 239


State 126

   34 conditional_stmt: IF_STMT '(' operation ')' • command
   35                 | IF_STMT '(' operation ')' • command ELSE_STMT command

    error           shift, and go to state 240
    NUM_INT         shift, and go to state 28
    NUM_FLOAT       shift, and go to state 29
    NIL_CNST        shift, and go to state 30
    ID              shift, and go to state 31
    RETURN_STM      shift, and go to state 241
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 242
    FOR_STMT        shift, and go to state 243
    OUTPUT_WRITE    shift, and go to state 244
    OUTPUT_WRITELN  shift, and go to state 245
    INPUT_READ      shift, and go to state 246
    '+'             shift, and go to state 38
    '-'             shift, and go to state 39
    '%'             shift, and go to state 40
    '?'             shift, and go to state 41
    '!'             shift, and go to state 42

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 247
    unq_declaration   go to state 248
    command           go to state 137
    $@2               go to state 249
    init_variable     go to state 250
    conditional_stmt  go to state 251
    return_stmt       go to state 252
    iteration         go to state 253
    init_stmt         go to state 254
    output            go to state 255
    input             go to state 256
    func_calling      go to state 55
    expression        go to state 56
    const             go to state 57
    number            go to state 58
    type              go to state 153
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 257
    single_operation  go to state 60
    arith_binary      go to state 61
    arith_single      go to state 62
    lst_single        go to state 63
    lst_binary        go to state 64


State 127

   37 iteration: FOR_STMT '(' loop_condition ')' • command

    error           shift, and go to state 27
    NUM_INT         shift, and go to state 28
    NUM_FLOAT       shift, and go to state 29
    NIL_CNST        shift, and go to state 30
    ID              shift, and go to state 31
    RETURN_STM      shift, and go to state 32
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 33
    FOR_STMT        shift, and go to state 34
    OUTPUT_WRITE    shift, and go to state 35
    OUTPUT_WRITELN  shift, and go to state 36
    INPUT_READ      shift, and go to state 37
    '+'             shift, and go to state 38
    '-'             shift, and go to state 39
    '%'             shift, and go to state 40
    '?'             shift, and go to state 41
    '!'             shift, and go to state 42

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 43
    unq_declaration   go to state 44
    command           go to state 138
    $@2               go to state 47
    init_variable     go to state 48
    conditional_stmt  go to state 49
    return_stmt       go to state 50
    iteration         go to state 51
    init_stmt         go to state 52
    output            go to state 53
    input             go to state 54
    func_calling      go to state 55
    expression        go to state 56
    const             go to state 57
    number            go to state 58
    type              go to state 153
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 59
    single_operation  go to state 60
    arith_binary      go to state 61
    arith_single      go to state 62
    lst_single        go to state 63
    lst_binary        go to state 64


State 128

   38 loop_condition: init_stmt ';' • operation ';' update_stmt

    NUM_INT    shift, and go to state 28
    NUM_FLOAT  shift, and go to state 29
    NIL_CNST   shift, and go to state 30
    ID         shift, and go to state 67
    '+'        shift, and go to state 38
    '-'        shift, and go to state 39
    '%'        shift, and go to state 40
    '?'        shift, and go to state 41
    '!'        shift, and go to state 42

    func_calling      go to state 55
    expression        go to state 56
    const             go to state 57
    number            go to state 58
    operation         go to state 139
    single_operation  go to state 60
    arith_binary      go to state 61
    arith_single      go to state 62
    lst_single        go to state 63
    lst_binary        go to state 64


State 129

   44 output: OUTPUT_WRITE '(' STRING ')' • ';'

    ';'  shift, and go to state 140


State 130

   42 output: OUTPUT_WRITE '(' operation ')' • ';'

    ';'  shift, and go to state 141


State 131

   45 output: OUTPUT_WRITELN '(' STRING ')' • ';'

    ';'  shift, and go to state 142


State 132

   43 output: OUTPUT_WRITELN '(' operation ')' • ';'

    ';'  shift, and go to state 143


State 133

   46 input: INPUT_READ '(' expression ')' • ';'

    ';'  shift, and go to state 144


State 134

   30 command: $@2 '{' block_commands '}' •

    error           reduce using rule 30 (command)
    NUM_INT         reduce using rule 30 (command)
    NUM_FLOAT       reduce using rule 30 (command)
    NIL_CNST        reduce using rule 30 (command)
    ID              reduce using rule 30 (command)
    RETURN_STM      reduce using rule 30 (command)
    T_INT           reduce using rule 30 (command)
    T_FLOAT         reduce using rule 30 (command)
    IF_STMT         reduce using rule 30 (command)
    FOR_STMT        reduce using rule 30 (command)
    OUTPUT_WRITE    reduce using rule 30 (command)
    OUTPUT_WRITELN  reduce using rule 30 (command)
    INPUT_READ      reduce using rule 30 (command)
    '{'             reduce using rule 30 (command)
    '}'             reduce using rule 30 (command)
    '+'             reduce using rule 30 (command)
    '-'             reduce using rule 30 (command)
    '%'             reduce using rule 30 (command)
    '?'             reduce using rule 30 (command)
    '!'             reduce using rule 30 (command)


State 135

   49 func_calling: ID '(' $@3 calling_parameters $@4 • ')'

    ')'  shift, and go to state 145


State 136

   18 lst_calling_parameters: operation ',' • lst_calling_parameters

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    lst_calling_parameters  go to state 146
    func_calling            go to state 227
    expression              go to state 228
    const                   go to state 229
    number                  go to state 230
    operation               go to state 125
    single_operation        go to state 231
    arith_binary            go to state 232
    arith_single            go to state 233
    lst_single              go to state 234
    lst_binary              go to state 235


State 137

   34 conditional_stmt: IF_STMT '(' operation ')' command •
   35                 | IF_STMT '(' operation ')' command • ELSE_STMT command

    ELSE_STMT  shift, and go to state 147

    error           reduce using rule 34 (conditional_stmt)
    NUM_INT         reduce using rule 34 (conditional_stmt)
    NUM_FLOAT       reduce using rule 34 (conditional_stmt)
    NIL_CNST        reduce using rule 34 (conditional_stmt)
    ID              reduce using rule 34 (conditional_stmt)
    RETURN_STM      reduce using rule 34 (conditional_stmt)
    T_INT           reduce using rule 34 (conditional_stmt)
    T_FLOAT         reduce using rule 34 (conditional_stmt)
    IF_STMT         reduce using rule 34 (conditional_stmt)
    FOR_STMT        reduce using rule 34 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 34 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 34 (conditional_stmt)
    INPUT_READ      reduce using rule 34 (conditional_stmt)
    '{'             reduce using rule 34 (conditional_stmt)
    '}'             reduce using rule 34 (conditional_stmt)
    '+'             reduce using rule 34 (conditional_stmt)
    '-'             reduce using rule 34 (conditional_stmt)
    '%'             reduce using rule 34 (conditional_stmt)
    '?'             reduce using rule 34 (conditional_stmt)
    '!'             reduce using rule 34 (conditional_stmt)


State 138

   37 iteration: FOR_STMT '(' loop_condition ')' command •

    error           reduce using rule 37 (iteration)
    NUM_INT         reduce using rule 37 (iteration)
    NUM_FLOAT       reduce using rule 37 (iteration)
    NIL_CNST        reduce using rule 37 (iteration)
    ID              reduce using rule 37 (iteration)
    RETURN_STM      reduce using rule 37 (iteration)
    T_INT           reduce using rule 37 (iteration)
    T_FLOAT         reduce using rule 37 (iteration)
    IF_STMT         reduce using rule 37 (iteration)
    FOR_STMT        reduce using rule 37 (iteration)
    OUTPUT_WRITE    reduce using rule 37 (iteration)
    OUTPUT_WRITELN  reduce using rule 37 (iteration)
    INPUT_READ      reduce using rule 37 (iteration)
    '{'             reduce using rule 37 (iteration)
    '}'             reduce using rule 37 (iteration)
    '+'             reduce using rule 37 (iteration)
    '-'             reduce using rule 37 (iteration)
    '%'             reduce using rule 37 (iteration)
    '?'             reduce using rule 37 (iteration)
    '!'             reduce using rule 37 (iteration)


State 139

   38 loop_condition: init_stmt ';' operation • ';' update_stmt
   65 operation: operation • relational_op expression
   66          | operation • logical_op expression

    ';'         shift, and go to state 148
    AND         shift, and go to state 87
    OR          shift, and go to state 88
    GREATER     shift, and go to state 89
    GREATER_EQ  shift, and go to state 90
    LESS        shift, and go to state 91
    LESS_EQ     shift, and go to state 92
    EQUAL       shift, and go to state 93
    NOT_EQ      shift, and go to state 94

    logical_op     go to state 95
    relational_op  go to state 96


State 140

   44 output: OUTPUT_WRITE '(' STRING ')' ';' •

    error           reduce using rule 44 (output)
    NUM_INT         reduce using rule 44 (output)
    NUM_FLOAT       reduce using rule 44 (output)
    NIL_CNST        reduce using rule 44 (output)
    ID              reduce using rule 44 (output)
    RETURN_STM      reduce using rule 44 (output)
    T_INT           reduce using rule 44 (output)
    T_FLOAT         reduce using rule 44 (output)
    IF_STMT         reduce using rule 44 (output)
    FOR_STMT        reduce using rule 44 (output)
    OUTPUT_WRITE    reduce using rule 44 (output)
    OUTPUT_WRITELN  reduce using rule 44 (output)
    INPUT_READ      reduce using rule 44 (output)
    '{'             reduce using rule 44 (output)
    '}'             reduce using rule 44 (output)
    '+'             reduce using rule 44 (output)
    '-'             reduce using rule 44 (output)
    '%'             reduce using rule 44 (output)
    '?'             reduce using rule 44 (output)
    '!'             reduce using rule 44 (output)


State 141

   42 output: OUTPUT_WRITE '(' operation ')' ';' •

    error           reduce using rule 42 (output)
    NUM_INT         reduce using rule 42 (output)
    NUM_FLOAT       reduce using rule 42 (output)
    NIL_CNST        reduce using rule 42 (output)
    ID              reduce using rule 42 (output)
    RETURN_STM      reduce using rule 42 (output)
    T_INT           reduce using rule 42 (output)
    T_FLOAT         reduce using rule 42 (output)
    IF_STMT         reduce using rule 42 (output)
    FOR_STMT        reduce using rule 42 (output)
    OUTPUT_WRITE    reduce using rule 42 (output)
    OUTPUT_WRITELN  reduce using rule 42 (output)
    INPUT_READ      reduce using rule 42 (output)
    '{'             reduce using rule 42 (output)
    '}'             reduce using rule 42 (output)
    '+'             reduce using rule 42 (output)
    '-'             reduce using rule 42 (output)
    '%'             reduce using rule 42 (output)
    '?'             reduce using rule 42 (output)
    '!'             reduce using rule 42 (output)


State 142

   45 output: OUTPUT_WRITELN '(' STRING ')' ';' •

    error           reduce using rule 45 (output)
    NUM_INT         reduce using rule 45 (output)
    NUM_FLOAT       reduce using rule 45 (output)
    NIL_CNST        reduce using rule 45 (output)
    ID              reduce using rule 45 (output)
    RETURN_STM      reduce using rule 45 (output)
    T_INT           reduce using rule 45 (output)
    T_FLOAT         reduce using rule 45 (output)
    IF_STMT         reduce using rule 45 (output)
    FOR_STMT        reduce using rule 45 (output)
    OUTPUT_WRITE    reduce using rule 45 (output)
    OUTPUT_WRITELN  reduce using rule 45 (output)
    INPUT_READ      reduce using rule 45 (output)
    '{'             reduce using rule 45 (output)
    '}'             reduce using rule 45 (output)
    '+'             reduce using rule 45 (output)
    '-'             reduce using rule 45 (output)
    '%'             reduce using rule 45 (output)
    '?'             reduce using rule 45 (output)
    '!'             reduce using rule 45 (output)


State 143

   43 output: OUTPUT_WRITELN '(' operation ')' ';' •

    error           reduce using rule 43 (output)
    NUM_INT         reduce using rule 43 (output)
    NUM_FLOAT       reduce using rule 43 (output)
    NIL_CNST        reduce using rule 43 (output)
    ID              reduce using rule 43 (output)
    RETURN_STM      reduce using rule 43 (output)
    T_INT           reduce using rule 43 (output)
    T_FLOAT         reduce using rule 43 (output)
    IF_STMT         reduce using rule 43 (output)
    FOR_STMT        reduce using rule 43 (output)
    OUTPUT_WRITE    reduce using rule 43 (output)
    OUTPUT_WRITELN  reduce using rule 43 (output)
    INPUT_READ      reduce using rule 43 (output)
    '{'             reduce using rule 43 (output)
    '}'             reduce using rule 43 (output)
    '+'             reduce using rule 43 (output)
    '-'             reduce using rule 43 (output)
    '%'             reduce using rule 43 (output)
    '?'             reduce using rule 43 (output)
    '!'             reduce using rule 43 (output)


State 144

   46 input: INPUT_READ '(' expression ')' ';' •

    error           reduce using rule 46 (input)
    NUM_INT         reduce using rule 46 (input)
    NUM_FLOAT       reduce using rule 46 (input)
    NIL_CNST        reduce using rule 46 (input)
    ID              reduce using rule 46 (input)
    RETURN_STM      reduce using rule 46 (input)
    T_INT           reduce using rule 46 (input)
    T_FLOAT         reduce using rule 46 (input)
    IF_STMT         reduce using rule 46 (input)
    FOR_STMT        reduce using rule 46 (input)
    OUTPUT_WRITE    reduce using rule 46 (input)
    OUTPUT_WRITELN  reduce using rule 46 (input)
    INPUT_READ      reduce using rule 46 (input)
    '{'             reduce using rule 46 (input)
    '}'             reduce using rule 46 (input)
    '+'             reduce using rule 46 (input)
    '-'             reduce using rule 46 (input)
    '%'             reduce using rule 46 (input)
    '?'             reduce using rule 46 (input)
    '!'             reduce using rule 46 (input)


State 145

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')' •

    ';'         reduce using rule 49 (func_calling)
    AND         reduce using rule 49 (func_calling)
    OR          reduce using rule 49 (func_calling)
    GREATER     reduce using rule 49 (func_calling)
    GREATER_EQ  reduce using rule 49 (func_calling)
    LESS        reduce using rule 49 (func_calling)
    LESS_EQ     reduce using rule 49 (func_calling)
    EQUAL       reduce using rule 49 (func_calling)
    NOT_EQ      reduce using rule 49 (func_calling)
    '+'         reduce using rule 49 (func_calling)
    '-'         reduce using rule 49 (func_calling)
    '*'         reduce using rule 49 (func_calling)
    '/'         reduce using rule 49 (func_calling)
    FILTER      reduce using rule 49 (func_calling)
    MAP         reduce using rule 49 (func_calling)
    ':'         reduce using rule 49 (func_calling)


State 146

   18 lst_calling_parameters: operation ',' lst_calling_parameters •

    ')'  reduce using rule 18 (lst_calling_parameters)


State 147

   35 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT • command

    error           shift, and go to state 27
    NUM_INT         shift, and go to state 28
    NUM_FLOAT       shift, and go to state 29
    NIL_CNST        shift, and go to state 30
    ID              shift, and go to state 31
    RETURN_STM      shift, and go to state 32
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 33
    FOR_STMT        shift, and go to state 34
    OUTPUT_WRITE    shift, and go to state 35
    OUTPUT_WRITELN  shift, and go to state 36
    INPUT_READ      shift, and go to state 37
    '+'             shift, and go to state 38
    '-'             shift, and go to state 39
    '%'             shift, and go to state 40
    '?'             shift, and go to state 41
    '!'             shift, and go to state 42

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 43
    unq_declaration   go to state 44
    command           go to state 149
    $@2               go to state 47
    init_variable     go to state 48
    conditional_stmt  go to state 49
    return_stmt       go to state 50
    iteration         go to state 51
    init_stmt         go to state 52
    output            go to state 53
    input             go to state 54
    func_calling      go to state 55
    expression        go to state 56
    const             go to state 57
    number            go to state 58
    type              go to state 153
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 59
    single_operation  go to state 60
    arith_binary      go to state 61
    arith_single      go to state 62
    lst_single        go to state 63
    lst_binary        go to state 64


State 148

   38 loop_condition: init_stmt ';' operation ';' • update_stmt

    ID  shift, and go to state 258

    ')'  reduce using rule 41 (update_stmt)

    init_stmt    go to state 150
    update_stmt  go to state 151


State 149

   35 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT command •

    error           reduce using rule 35 (conditional_stmt)
    NUM_INT         reduce using rule 35 (conditional_stmt)
    NUM_FLOAT       reduce using rule 35 (conditional_stmt)
    NIL_CNST        reduce using rule 35 (conditional_stmt)
    ID              reduce using rule 35 (conditional_stmt)
    RETURN_STM      reduce using rule 35 (conditional_stmt)
    T_INT           reduce using rule 35 (conditional_stmt)
    T_FLOAT         reduce using rule 35 (conditional_stmt)
    IF_STMT         reduce using rule 35 (conditional_stmt)
    FOR_STMT        reduce using rule 35 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 35 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 35 (conditional_stmt)
    INPUT_READ      reduce using rule 35 (conditional_stmt)
    '{'             reduce using rule 35 (conditional_stmt)
    '}'             reduce using rule 35 (conditional_stmt)
    '+'             reduce using rule 35 (conditional_stmt)
    '-'             reduce using rule 35 (conditional_stmt)
    '%'             reduce using rule 35 (conditional_stmt)
    '?'             reduce using rule 35 (conditional_stmt)
    '!'             reduce using rule 35 (conditional_stmt)


State 150

   40 update_stmt: init_stmt •

    ')'  reduce using rule 40 (update_stmt)


State 151

   38 loop_condition: init_stmt ';' operation ';' update_stmt •

    ')'  reduce using rule 38 (loop_condition)


State 152

   11 unq_declaration: type • ID

    ID  shift, and go to state 259


State 153

   11 unq_declaration: type • ID

    ID  shift, and go to state 260


State 154

   10 var_declaration: unq_declaration ';' •

    error           reduce using rule 10 (var_declaration)
    NUM_INT         reduce using rule 10 (var_declaration)
    NUM_FLOAT       reduce using rule 10 (var_declaration)
    NIL_CNST        reduce using rule 10 (var_declaration)
    ID              reduce using rule 10 (var_declaration)
    RETURN_STM      reduce using rule 10 (var_declaration)
    T_INT           reduce using rule 10 (var_declaration)
    T_FLOAT         reduce using rule 10 (var_declaration)
    IF_STMT         reduce using rule 10 (var_declaration)
    FOR_STMT        reduce using rule 10 (var_declaration)
    OUTPUT_WRITE    reduce using rule 10 (var_declaration)
    OUTPUT_WRITELN  reduce using rule 10 (var_declaration)
    INPUT_READ      reduce using rule 10 (var_declaration)
    '{'             reduce using rule 10 (var_declaration)
    '}'             reduce using rule 10 (var_declaration)
    '+'             reduce using rule 10 (var_declaration)
    '-'             reduce using rule 10 (var_declaration)
    '%'             reduce using rule 10 (var_declaration)
    '?'             reduce using rule 10 (var_declaration)
    '!'             reduce using rule 10 (var_declaration)


State 155

   56 number: NUM_INT •

    ')'         reduce using rule 56 (number)
    AND         reduce using rule 56 (number)
    OR          reduce using rule 56 (number)
    GREATER     reduce using rule 56 (number)
    GREATER_EQ  reduce using rule 56 (number)
    LESS        reduce using rule 56 (number)
    LESS_EQ     reduce using rule 56 (number)
    EQUAL       reduce using rule 56 (number)
    NOT_EQ      reduce using rule 56 (number)
    '+'         reduce using rule 56 (number)
    '-'         reduce using rule 56 (number)
    '*'         reduce using rule 56 (number)
    '/'         reduce using rule 56 (number)
    FILTER      reduce using rule 56 (number)
    MAP         reduce using rule 56 (number)
    ':'         reduce using rule 56 (number)


State 156

   57 number: NUM_FLOAT •

    ')'         reduce using rule 57 (number)
    AND         reduce using rule 57 (number)
    OR          reduce using rule 57 (number)
    GREATER     reduce using rule 57 (number)
    GREATER_EQ  reduce using rule 57 (number)
    LESS        reduce using rule 57 (number)
    LESS_EQ     reduce using rule 57 (number)
    EQUAL       reduce using rule 57 (number)
    NOT_EQ      reduce using rule 57 (number)
    '+'         reduce using rule 57 (number)
    '-'         reduce using rule 57 (number)
    '*'         reduce using rule 57 (number)
    '/'         reduce using rule 57 (number)
    FILTER      reduce using rule 57 (number)
    MAP         reduce using rule 57 (number)
    ':'         reduce using rule 57 (number)


State 157

   55 const: NIL_CNST •

    ')'         reduce using rule 55 (const)
    AND         reduce using rule 55 (const)
    OR          reduce using rule 55 (const)
    GREATER     reduce using rule 55 (const)
    GREATER_EQ  reduce using rule 55 (const)
    LESS        reduce using rule 55 (const)
    LESS_EQ     reduce using rule 55 (const)
    EQUAL       reduce using rule 55 (const)
    NOT_EQ      reduce using rule 55 (const)
    '+'         reduce using rule 55 (const)
    '-'         reduce using rule 55 (const)
    '*'         reduce using rule 55 (const)
    '/'         reduce using rule 55 (const)
    FILTER      reduce using rule 55 (const)
    MAP         reduce using rule 55 (const)
    ':'         reduce using rule 55 (const)


State 158

   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   53 expression: ID •

    '('  shift, and go to state 261

    ')'         reduce using rule 53 (expression)
    AND         reduce using rule 53 (expression)
    OR          reduce using rule 53 (expression)
    GREATER     reduce using rule 53 (expression)
    GREATER_EQ  reduce using rule 53 (expression)
    LESS        reduce using rule 53 (expression)
    LESS_EQ     reduce using rule 53 (expression)
    EQUAL       reduce using rule 53 (expression)
    NOT_EQ      reduce using rule 53 (expression)
    '+'         reduce using rule 53 (expression)
    '-'         reduce using rule 53 (expression)
    '*'         reduce using rule 53 (expression)
    '/'         reduce using rule 53 (expression)
    FILTER      reduce using rule 53 (expression)
    MAP         reduce using rule 53 (expression)
    ':'         reduce using rule 53 (expression)


State 159

   75 arith_single: '+' • expression

    NUM_INT    shift, and go to state 155
    NUM_FLOAT  shift, and go to state 156
    NIL_CNST   shift, and go to state 157
    ID         shift, and go to state 158
    '+'        shift, and go to state 159
    '-'        shift, and go to state 160
    '%'        shift, and go to state 161
    '?'        shift, and go to state 162
    '!'        shift, and go to state 163

    func_calling      go to state 164
    expression        go to state 262
    const             go to state 166
    number            go to state 167
    single_operation  go to state 168
    arith_single      go to state 170
    lst_single        go to state 171


State 160

   76 arith_single: '-' • expression

    NUM_INT    shift, and go to state 155
    NUM_FLOAT  shift, and go to state 156
    NIL_CNST   shift, and go to state 157
    ID         shift, and go to state 158
    '+'        shift, and go to state 159
    '-'        shift, and go to state 160
    '%'        shift, and go to state 161
    '?'        shift, and go to state 162
    '!'        shift, and go to state 163

    func_calling      go to state 164
    expression        go to state 263
    const             go to state 166
    number            go to state 167
    single_operation  go to state 168
    arith_single      go to state 170
    lst_single        go to state 171


State 161

   77 lst_single: '%' • expression

    NUM_INT    shift, and go to state 155
    NUM_FLOAT  shift, and go to state 156
    NIL_CNST   shift, and go to state 157
    ID         shift, and go to state 158
    '+'        shift, and go to state 159
    '-'        shift, and go to state 160
    '%'        shift, and go to state 161
    '?'        shift, and go to state 162
    '!'        shift, and go to state 163

    func_calling      go to state 164
    expression        go to state 264
    const             go to state 166
    number            go to state 167
    single_operation  go to state 168
    arith_single      go to state 170
    lst_single        go to state 171


State 162

   78 lst_single: '?' • expression

    NUM_INT    shift, and go to state 155
    NUM_FLOAT  shift, and go to state 156
    NIL_CNST   shift, and go to state 157
    ID         shift, and go to state 158
    '+'        shift, and go to state 159
    '-'        shift, and go to state 160
    '%'        shift, and go to state 161
    '?'        shift, and go to state 162
    '!'        shift, and go to state 163

    func_calling      go to state 164
    expression        go to state 265
    const             go to state 166
    number            go to state 167
    single_operation  go to state 168
    arith_single      go to state 170
    lst_single        go to state 171


State 163

   69 single_operation: '!' • expression

    NUM_INT    shift, and go to state 155
    NUM_FLOAT  shift, and go to state 156
    NIL_CNST   shift, and go to state 157
    ID         shift, and go to state 158
    '+'        shift, and go to state 159
    '-'        shift, and go to state 160
    '%'        shift, and go to state 161
    '?'        shift, and go to state 162
    '!'        shift, and go to state 163

    func_calling      go to state 164
    expression        go to state 266
    const             go to state 166
    number            go to state 167
    single_operation  go to state 168
    arith_single      go to state 170
    lst_single        go to state 171


State 164

   50 expression: func_calling •

    ')'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)
    FILTER      reduce using rule 50 (expression)
    MAP         reduce using rule 50 (expression)
    ':'         reduce using rule 50 (expression)


State 165

   74 arith_binary: expression •
   79 lst_binary: expression • FILTER expression
   80           | expression • MAP expression
   81           | expression • ':' expression

    FILTER  shift, and go to state 267
    MAP     shift, and go to state 268
    ':'     shift, and go to state 269

    ')'         reduce using rule 74 (arith_binary)
    AND         reduce using rule 74 (arith_binary)
    OR          reduce using rule 74 (arith_binary)
    GREATER     reduce using rule 74 (arith_binary)
    GREATER_EQ  reduce using rule 74 (arith_binary)
    LESS        reduce using rule 74 (arith_binary)
    LESS_EQ     reduce using rule 74 (arith_binary)
    EQUAL       reduce using rule 74 (arith_binary)
    NOT_EQ      reduce using rule 74 (arith_binary)
    '+'         reduce using rule 74 (arith_binary)
    '-'         reduce using rule 74 (arith_binary)
    '*'         reduce using rule 74 (arith_binary)
    '/'         reduce using rule 74 (arith_binary)


State 166

   52 expression: const •

    ')'         reduce using rule 52 (expression)
    AND         reduce using rule 52 (expression)
    OR          reduce using rule 52 (expression)
    GREATER     reduce using rule 52 (expression)
    GREATER_EQ  reduce using rule 52 (expression)
    LESS        reduce using rule 52 (expression)
    LESS_EQ     reduce using rule 52 (expression)
    EQUAL       reduce using rule 52 (expression)
    NOT_EQ      reduce using rule 52 (expression)
    '+'         reduce using rule 52 (expression)
    '-'         reduce using rule 52 (expression)
    '*'         reduce using rule 52 (expression)
    '/'         reduce using rule 52 (expression)
    FILTER      reduce using rule 52 (expression)
    MAP         reduce using rule 52 (expression)
    ':'         reduce using rule 52 (expression)


State 167

   54 const: number •

    ')'         reduce using rule 54 (const)
    AND         reduce using rule 54 (const)
    OR          reduce using rule 54 (const)
    GREATER     reduce using rule 54 (const)
    GREATER_EQ  reduce using rule 54 (const)
    LESS        reduce using rule 54 (const)
    LESS_EQ     reduce using rule 54 (const)
    EQUAL       reduce using rule 54 (const)
    NOT_EQ      reduce using rule 54 (const)
    '+'         reduce using rule 54 (const)
    '-'         reduce using rule 54 (const)
    '*'         reduce using rule 54 (const)
    '/'         reduce using rule 54 (const)
    FILTER      reduce using rule 54 (const)
    MAP         reduce using rule 54 (const)
    ':'         reduce using rule 54 (const)


State 168

   51 expression: single_operation •

    ')'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)
    FILTER      reduce using rule 51 (expression)
    MAP         reduce using rule 51 (expression)
    ':'         reduce using rule 51 (expression)


State 169

   63 operation: arith_binary •
   70 arith_binary: arith_binary • '+' expression
   71             | arith_binary • '-' expression
   72             | arith_binary • '*' expression
   73             | arith_binary • '/' expression

    '+'  shift, and go to state 270
    '-'  shift, and go to state 271
    '*'  shift, and go to state 272
    '/'  shift, and go to state 273

    ')'         reduce using rule 63 (operation)
    AND         reduce using rule 63 (operation)
    OR          reduce using rule 63 (operation)
    GREATER     reduce using rule 63 (operation)
    GREATER_EQ  reduce using rule 63 (operation)
    LESS        reduce using rule 63 (operation)
    LESS_EQ     reduce using rule 63 (operation)
    EQUAL       reduce using rule 63 (operation)
    NOT_EQ      reduce using rule 63 (operation)


State 170

   67 single_operation: arith_single •

    ')'         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)
    '+'         reduce using rule 67 (single_operation)
    '-'         reduce using rule 67 (single_operation)
    '*'         reduce using rule 67 (single_operation)
    '/'         reduce using rule 67 (single_operation)
    FILTER      reduce using rule 67 (single_operation)
    MAP         reduce using rule 67 (single_operation)
    ':'         reduce using rule 67 (single_operation)


State 171

   68 single_operation: lst_single •

    ')'         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)
    '+'         reduce using rule 68 (single_operation)
    '-'         reduce using rule 68 (single_operation)
    '*'         reduce using rule 68 (single_operation)
    '/'         reduce using rule 68 (single_operation)
    FILTER      reduce using rule 68 (single_operation)
    MAP         reduce using rule 68 (single_operation)
    ':'         reduce using rule 68 (single_operation)


State 172

   64 operation: lst_binary •

    ')'         reduce using rule 64 (operation)
    AND         reduce using rule 64 (operation)
    OR          reduce using rule 64 (operation)
    GREATER     reduce using rule 64 (operation)
    GREATER_EQ  reduce using rule 64 (operation)
    LESS        reduce using rule 64 (operation)
    LESS_EQ     reduce using rule 64 (operation)
    EQUAL       reduce using rule 64 (operation)
    NOT_EQ      reduce using rule 64 (operation)


State 173

   56 number: NUM_INT •

    ')'  reduce using rule 56 (number)


State 174

   57 number: NUM_FLOAT •

    ')'  reduce using rule 57 (number)


State 175

   55 const: NIL_CNST •

    ')'  reduce using rule 55 (const)


State 176

   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   53 expression: ID •

    '('  shift, and go to state 274

    ')'  reduce using rule 53 (expression)


State 177

   75 arith_single: '+' • expression

    NUM_INT    shift, and go to state 173
    NUM_FLOAT  shift, and go to state 174
    NIL_CNST   shift, and go to state 175
    ID         shift, and go to state 176
    '+'        shift, and go to state 177
    '-'        shift, and go to state 178
    '%'        shift, and go to state 179
    '?'        shift, and go to state 180
    '!'        shift, and go to state 181

    func_calling      go to state 182
    expression        go to state 275
    const             go to state 183
    number            go to state 184
    single_operation  go to state 185
    arith_single      go to state 186
    lst_single        go to state 187


State 178

   76 arith_single: '-' • expression

    NUM_INT    shift, and go to state 173
    NUM_FLOAT  shift, and go to state 174
    NIL_CNST   shift, and go to state 175
    ID         shift, and go to state 176
    '+'        shift, and go to state 177
    '-'        shift, and go to state 178
    '%'        shift, and go to state 179
    '?'        shift, and go to state 180
    '!'        shift, and go to state 181

    func_calling      go to state 182
    expression        go to state 276
    const             go to state 183
    number            go to state 184
    single_operation  go to state 185
    arith_single      go to state 186
    lst_single        go to state 187


State 179

   77 lst_single: '%' • expression

    NUM_INT    shift, and go to state 173
    NUM_FLOAT  shift, and go to state 174
    NIL_CNST   shift, and go to state 175
    ID         shift, and go to state 176
    '+'        shift, and go to state 177
    '-'        shift, and go to state 178
    '%'        shift, and go to state 179
    '?'        shift, and go to state 180
    '!'        shift, and go to state 181

    func_calling      go to state 182
    expression        go to state 277
    const             go to state 183
    number            go to state 184
    single_operation  go to state 185
    arith_single      go to state 186
    lst_single        go to state 187


State 180

   78 lst_single: '?' • expression

    NUM_INT    shift, and go to state 173
    NUM_FLOAT  shift, and go to state 174
    NIL_CNST   shift, and go to state 175
    ID         shift, and go to state 176
    '+'        shift, and go to state 177
    '-'        shift, and go to state 178
    '%'        shift, and go to state 179
    '?'        shift, and go to state 180
    '!'        shift, and go to state 181

    func_calling      go to state 182
    expression        go to state 278
    const             go to state 183
    number            go to state 184
    single_operation  go to state 185
    arith_single      go to state 186
    lst_single        go to state 187


State 181

   69 single_operation: '!' • expression

    NUM_INT    shift, and go to state 173
    NUM_FLOAT  shift, and go to state 174
    NIL_CNST   shift, and go to state 175
    ID         shift, and go to state 176
    '+'        shift, and go to state 177
    '-'        shift, and go to state 178
    '%'        shift, and go to state 179
    '?'        shift, and go to state 180
    '!'        shift, and go to state 181

    func_calling      go to state 182
    expression        go to state 279
    const             go to state 183
    number            go to state 184
    single_operation  go to state 185
    arith_single      go to state 186
    lst_single        go to state 187


State 182

   50 expression: func_calling •

    ')'  reduce using rule 50 (expression)


State 183

   52 expression: const •

    ')'  reduce using rule 52 (expression)


State 184

   54 const: number •

    ')'  reduce using rule 54 (const)


State 185

   51 expression: single_operation •

    ')'  reduce using rule 51 (expression)


State 186

   67 single_operation: arith_single •

    ')'  reduce using rule 67 (single_operation)


State 187

   68 single_operation: lst_single •

    ')'  reduce using rule 68 (single_operation)


State 188

   56 number: NUM_INT •

    ';'         reduce using rule 56 (number)
    AND         reduce using rule 56 (number)
    OR          reduce using rule 56 (number)
    GREATER     reduce using rule 56 (number)
    GREATER_EQ  reduce using rule 56 (number)
    LESS        reduce using rule 56 (number)
    LESS_EQ     reduce using rule 56 (number)
    EQUAL       reduce using rule 56 (number)
    NOT_EQ      reduce using rule 56 (number)


State 189

   57 number: NUM_FLOAT •

    ';'         reduce using rule 57 (number)
    AND         reduce using rule 57 (number)
    OR          reduce using rule 57 (number)
    GREATER     reduce using rule 57 (number)
    GREATER_EQ  reduce using rule 57 (number)
    LESS        reduce using rule 57 (number)
    LESS_EQ     reduce using rule 57 (number)
    EQUAL       reduce using rule 57 (number)
    NOT_EQ      reduce using rule 57 (number)


State 190

   55 const: NIL_CNST •

    ';'         reduce using rule 55 (const)
    AND         reduce using rule 55 (const)
    OR          reduce using rule 55 (const)
    GREATER     reduce using rule 55 (const)
    GREATER_EQ  reduce using rule 55 (const)
    LESS        reduce using rule 55 (const)
    LESS_EQ     reduce using rule 55 (const)
    EQUAL       reduce using rule 55 (const)
    NOT_EQ      reduce using rule 55 (const)


State 191

   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   53 expression: ID •

    '('  shift, and go to state 280

    ';'         reduce using rule 53 (expression)
    AND         reduce using rule 53 (expression)
    OR          reduce using rule 53 (expression)
    GREATER     reduce using rule 53 (expression)
    GREATER_EQ  reduce using rule 53 (expression)
    LESS        reduce using rule 53 (expression)
    LESS_EQ     reduce using rule 53 (expression)
    EQUAL       reduce using rule 53 (expression)
    NOT_EQ      reduce using rule 53 (expression)


State 192

   75 arith_single: '+' • expression

    NUM_INT    shift, and go to state 188
    NUM_FLOAT  shift, and go to state 189
    NIL_CNST   shift, and go to state 190
    ID         shift, and go to state 191
    '+'        shift, and go to state 192
    '-'        shift, and go to state 193
    '%'        shift, and go to state 194
    '?'        shift, and go to state 195
    '!'        shift, and go to state 196

    func_calling      go to state 197
    expression        go to state 281
    const             go to state 198
    number            go to state 199
    single_operation  go to state 200
    arith_single      go to state 201
    lst_single        go to state 202


State 193

   76 arith_single: '-' • expression

    NUM_INT    shift, and go to state 188
    NUM_FLOAT  shift, and go to state 189
    NIL_CNST   shift, and go to state 190
    ID         shift, and go to state 191
    '+'        shift, and go to state 192
    '-'        shift, and go to state 193
    '%'        shift, and go to state 194
    '?'        shift, and go to state 195
    '!'        shift, and go to state 196

    func_calling      go to state 197
    expression        go to state 282
    const             go to state 198
    number            go to state 199
    single_operation  go to state 200
    arith_single      go to state 201
    lst_single        go to state 202


State 194

   77 lst_single: '%' • expression

    NUM_INT    shift, and go to state 188
    NUM_FLOAT  shift, and go to state 189
    NIL_CNST   shift, and go to state 190
    ID         shift, and go to state 191
    '+'        shift, and go to state 192
    '-'        shift, and go to state 193
    '%'        shift, and go to state 194
    '?'        shift, and go to state 195
    '!'        shift, and go to state 196

    func_calling      go to state 197
    expression        go to state 283
    const             go to state 198
    number            go to state 199
    single_operation  go to state 200
    arith_single      go to state 201
    lst_single        go to state 202


State 195

   78 lst_single: '?' • expression

    NUM_INT    shift, and go to state 188
    NUM_FLOAT  shift, and go to state 189
    NIL_CNST   shift, and go to state 190
    ID         shift, and go to state 191
    '+'        shift, and go to state 192
    '-'        shift, and go to state 193
    '%'        shift, and go to state 194
    '?'        shift, and go to state 195
    '!'        shift, and go to state 196

    func_calling      go to state 197
    expression        go to state 284
    const             go to state 198
    number            go to state 199
    single_operation  go to state 200
    arith_single      go to state 201
    lst_single        go to state 202


State 196

   69 single_operation: '!' • expression

    NUM_INT    shift, and go to state 188
    NUM_FLOAT  shift, and go to state 189
    NIL_CNST   shift, and go to state 190
    ID         shift, and go to state 191
    '+'        shift, and go to state 192
    '-'        shift, and go to state 193
    '%'        shift, and go to state 194
    '?'        shift, and go to state 195
    '!'        shift, and go to state 196

    func_calling      go to state 197
    expression        go to state 285
    const             go to state 198
    number            go to state 199
    single_operation  go to state 200
    arith_single      go to state 201
    lst_single        go to state 202


State 197

   50 expression: func_calling •

    ';'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)


State 198

   52 expression: const •

    ';'         reduce using rule 52 (expression)
    AND         reduce using rule 52 (expression)
    OR          reduce using rule 52 (expression)
    GREATER     reduce using rule 52 (expression)
    GREATER_EQ  reduce using rule 52 (expression)
    LESS        reduce using rule 52 (expression)
    LESS_EQ     reduce using rule 52 (expression)
    EQUAL       reduce using rule 52 (expression)
    NOT_EQ      reduce using rule 52 (expression)


State 199

   54 const: number •

    ';'         reduce using rule 54 (const)
    AND         reduce using rule 54 (const)
    OR          reduce using rule 54 (const)
    GREATER     reduce using rule 54 (const)
    GREATER_EQ  reduce using rule 54 (const)
    LESS        reduce using rule 54 (const)
    LESS_EQ     reduce using rule 54 (const)
    EQUAL       reduce using rule 54 (const)
    NOT_EQ      reduce using rule 54 (const)


State 200

   51 expression: single_operation •

    ';'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)


State 201

   67 single_operation: arith_single •

    ';'         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)


State 202

   68 single_operation: lst_single •

    ';'         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)


State 203

   56 number: NUM_INT •

    ';'         reduce using rule 56 (number)
    AND         reduce using rule 56 (number)
    OR          reduce using rule 56 (number)
    GREATER     reduce using rule 56 (number)
    GREATER_EQ  reduce using rule 56 (number)
    LESS        reduce using rule 56 (number)
    LESS_EQ     reduce using rule 56 (number)
    EQUAL       reduce using rule 56 (number)
    NOT_EQ      reduce using rule 56 (number)
    '+'         reduce using rule 56 (number)
    '-'         reduce using rule 56 (number)
    '*'         reduce using rule 56 (number)
    '/'         reduce using rule 56 (number)


State 204

   57 number: NUM_FLOAT •

    ';'         reduce using rule 57 (number)
    AND         reduce using rule 57 (number)
    OR          reduce using rule 57 (number)
    GREATER     reduce using rule 57 (number)
    GREATER_EQ  reduce using rule 57 (number)
    LESS        reduce using rule 57 (number)
    LESS_EQ     reduce using rule 57 (number)
    EQUAL       reduce using rule 57 (number)
    NOT_EQ      reduce using rule 57 (number)
    '+'         reduce using rule 57 (number)
    '-'         reduce using rule 57 (number)
    '*'         reduce using rule 57 (number)
    '/'         reduce using rule 57 (number)


State 205

   55 const: NIL_CNST •

    ';'         reduce using rule 55 (const)
    AND         reduce using rule 55 (const)
    OR          reduce using rule 55 (const)
    GREATER     reduce using rule 55 (const)
    GREATER_EQ  reduce using rule 55 (const)
    LESS        reduce using rule 55 (const)
    LESS_EQ     reduce using rule 55 (const)
    EQUAL       reduce using rule 55 (const)
    NOT_EQ      reduce using rule 55 (const)
    '+'         reduce using rule 55 (const)
    '-'         reduce using rule 55 (const)
    '*'         reduce using rule 55 (const)
    '/'         reduce using rule 55 (const)


State 206

   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   53 expression: ID •

    '('  shift, and go to state 286

    ';'         reduce using rule 53 (expression)
    AND         reduce using rule 53 (expression)
    OR          reduce using rule 53 (expression)
    GREATER     reduce using rule 53 (expression)
    GREATER_EQ  reduce using rule 53 (expression)
    LESS        reduce using rule 53 (expression)
    LESS_EQ     reduce using rule 53 (expression)
    EQUAL       reduce using rule 53 (expression)
    NOT_EQ      reduce using rule 53 (expression)
    '+'         reduce using rule 53 (expression)
    '-'         reduce using rule 53 (expression)
    '*'         reduce using rule 53 (expression)
    '/'         reduce using rule 53 (expression)


State 207

   75 arith_single: '+' • expression

    NUM_INT    shift, and go to state 203
    NUM_FLOAT  shift, and go to state 204
    NIL_CNST   shift, and go to state 205
    ID         shift, and go to state 206
    '+'        shift, and go to state 207
    '-'        shift, and go to state 208
    '%'        shift, and go to state 209
    '?'        shift, and go to state 210
    '!'        shift, and go to state 211

    func_calling      go to state 212
    expression        go to state 287
    const             go to state 213
    number            go to state 214
    single_operation  go to state 215
    arith_single      go to state 216
    lst_single        go to state 217


State 208

   76 arith_single: '-' • expression

    NUM_INT    shift, and go to state 203
    NUM_FLOAT  shift, and go to state 204
    NIL_CNST   shift, and go to state 205
    ID         shift, and go to state 206
    '+'        shift, and go to state 207
    '-'        shift, and go to state 208
    '%'        shift, and go to state 209
    '?'        shift, and go to state 210
    '!'        shift, and go to state 211

    func_calling      go to state 212
    expression        go to state 288
    const             go to state 213
    number            go to state 214
    single_operation  go to state 215
    arith_single      go to state 216
    lst_single        go to state 217


State 209

   77 lst_single: '%' • expression

    NUM_INT    shift, and go to state 203
    NUM_FLOAT  shift, and go to state 204
    NIL_CNST   shift, and go to state 205
    ID         shift, and go to state 206
    '+'        shift, and go to state 207
    '-'        shift, and go to state 208
    '%'        shift, and go to state 209
    '?'        shift, and go to state 210
    '!'        shift, and go to state 211

    func_calling      go to state 212
    expression        go to state 289
    const             go to state 213
    number            go to state 214
    single_operation  go to state 215
    arith_single      go to state 216
    lst_single        go to state 217


State 210

   78 lst_single: '?' • expression

    NUM_INT    shift, and go to state 203
    NUM_FLOAT  shift, and go to state 204
    NIL_CNST   shift, and go to state 205
    ID         shift, and go to state 206
    '+'        shift, and go to state 207
    '-'        shift, and go to state 208
    '%'        shift, and go to state 209
    '?'        shift, and go to state 210
    '!'        shift, and go to state 211

    func_calling      go to state 212
    expression        go to state 290
    const             go to state 213
    number            go to state 214
    single_operation  go to state 215
    arith_single      go to state 216
    lst_single        go to state 217


State 211

   69 single_operation: '!' • expression

    NUM_INT    shift, and go to state 203
    NUM_FLOAT  shift, and go to state 204
    NIL_CNST   shift, and go to state 205
    ID         shift, and go to state 206
    '+'        shift, and go to state 207
    '-'        shift, and go to state 208
    '%'        shift, and go to state 209
    '?'        shift, and go to state 210
    '!'        shift, and go to state 211

    func_calling      go to state 212
    expression        go to state 291
    const             go to state 213
    number            go to state 214
    single_operation  go to state 215
    arith_single      go to state 216
    lst_single        go to state 217


State 212

   50 expression: func_calling •

    ';'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)


State 213

   52 expression: const •

    ';'         reduce using rule 52 (expression)
    AND         reduce using rule 52 (expression)
    OR          reduce using rule 52 (expression)
    GREATER     reduce using rule 52 (expression)
    GREATER_EQ  reduce using rule 52 (expression)
    LESS        reduce using rule 52 (expression)
    LESS_EQ     reduce using rule 52 (expression)
    EQUAL       reduce using rule 52 (expression)
    NOT_EQ      reduce using rule 52 (expression)
    '+'         reduce using rule 52 (expression)
    '-'         reduce using rule 52 (expression)
    '*'         reduce using rule 52 (expression)
    '/'         reduce using rule 52 (expression)


State 214

   54 const: number •

    ';'         reduce using rule 54 (const)
    AND         reduce using rule 54 (const)
    OR          reduce using rule 54 (const)
    GREATER     reduce using rule 54 (const)
    GREATER_EQ  reduce using rule 54 (const)
    LESS        reduce using rule 54 (const)
    LESS_EQ     reduce using rule 54 (const)
    EQUAL       reduce using rule 54 (const)
    NOT_EQ      reduce using rule 54 (const)
    '+'         reduce using rule 54 (const)
    '-'         reduce using rule 54 (const)
    '*'         reduce using rule 54 (const)
    '/'         reduce using rule 54 (const)


State 215

   51 expression: single_operation •

    ';'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)


State 216

   67 single_operation: arith_single •

    ';'         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)
    '+'         reduce using rule 67 (single_operation)
    '-'         reduce using rule 67 (single_operation)
    '*'         reduce using rule 67 (single_operation)
    '/'         reduce using rule 67 (single_operation)


State 217

   68 single_operation: lst_single •

    ';'         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)
    '+'         reduce using rule 68 (single_operation)
    '-'         reduce using rule 68 (single_operation)
    '*'         reduce using rule 68 (single_operation)
    '/'         reduce using rule 68 (single_operation)


State 218

   56 number: NUM_INT •

    ')'         reduce using rule 56 (number)
    ','         reduce using rule 56 (number)
    AND         reduce using rule 56 (number)
    OR          reduce using rule 56 (number)
    GREATER     reduce using rule 56 (number)
    GREATER_EQ  reduce using rule 56 (number)
    LESS        reduce using rule 56 (number)
    LESS_EQ     reduce using rule 56 (number)
    EQUAL       reduce using rule 56 (number)
    NOT_EQ      reduce using rule 56 (number)
    '+'         reduce using rule 56 (number)
    '-'         reduce using rule 56 (number)
    '*'         reduce using rule 56 (number)
    '/'         reduce using rule 56 (number)
    FILTER      reduce using rule 56 (number)
    MAP         reduce using rule 56 (number)
    ':'         reduce using rule 56 (number)


State 219

   57 number: NUM_FLOAT •

    ')'         reduce using rule 57 (number)
    ','         reduce using rule 57 (number)
    AND         reduce using rule 57 (number)
    OR          reduce using rule 57 (number)
    GREATER     reduce using rule 57 (number)
    GREATER_EQ  reduce using rule 57 (number)
    LESS        reduce using rule 57 (number)
    LESS_EQ     reduce using rule 57 (number)
    EQUAL       reduce using rule 57 (number)
    NOT_EQ      reduce using rule 57 (number)
    '+'         reduce using rule 57 (number)
    '-'         reduce using rule 57 (number)
    '*'         reduce using rule 57 (number)
    '/'         reduce using rule 57 (number)
    FILTER      reduce using rule 57 (number)
    MAP         reduce using rule 57 (number)
    ':'         reduce using rule 57 (number)


State 220

   55 const: NIL_CNST •

    ')'         reduce using rule 55 (const)
    ','         reduce using rule 55 (const)
    AND         reduce using rule 55 (const)
    OR          reduce using rule 55 (const)
    GREATER     reduce using rule 55 (const)
    GREATER_EQ  reduce using rule 55 (const)
    LESS        reduce using rule 55 (const)
    LESS_EQ     reduce using rule 55 (const)
    EQUAL       reduce using rule 55 (const)
    NOT_EQ      reduce using rule 55 (const)
    '+'         reduce using rule 55 (const)
    '-'         reduce using rule 55 (const)
    '*'         reduce using rule 55 (const)
    '/'         reduce using rule 55 (const)
    FILTER      reduce using rule 55 (const)
    MAP         reduce using rule 55 (const)
    ':'         reduce using rule 55 (const)


State 221

   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   53 expression: ID •

    '('  shift, and go to state 292

    ')'         reduce using rule 53 (expression)
    ','         reduce using rule 53 (expression)
    AND         reduce using rule 53 (expression)
    OR          reduce using rule 53 (expression)
    GREATER     reduce using rule 53 (expression)
    GREATER_EQ  reduce using rule 53 (expression)
    LESS        reduce using rule 53 (expression)
    LESS_EQ     reduce using rule 53 (expression)
    EQUAL       reduce using rule 53 (expression)
    NOT_EQ      reduce using rule 53 (expression)
    '+'         reduce using rule 53 (expression)
    '-'         reduce using rule 53 (expression)
    '*'         reduce using rule 53 (expression)
    '/'         reduce using rule 53 (expression)
    FILTER      reduce using rule 53 (expression)
    MAP         reduce using rule 53 (expression)
    ':'         reduce using rule 53 (expression)


State 222

   75 arith_single: '+' • expression

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    func_calling      go to state 227
    expression        go to state 293
    const             go to state 229
    number            go to state 230
    single_operation  go to state 231
    arith_single      go to state 233
    lst_single        go to state 234


State 223

   76 arith_single: '-' • expression

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    func_calling      go to state 227
    expression        go to state 294
    const             go to state 229
    number            go to state 230
    single_operation  go to state 231
    arith_single      go to state 233
    lst_single        go to state 234


State 224

   77 lst_single: '%' • expression

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    func_calling      go to state 227
    expression        go to state 295
    const             go to state 229
    number            go to state 230
    single_operation  go to state 231
    arith_single      go to state 233
    lst_single        go to state 234


State 225

   78 lst_single: '?' • expression

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    func_calling      go to state 227
    expression        go to state 296
    const             go to state 229
    number            go to state 230
    single_operation  go to state 231
    arith_single      go to state 233
    lst_single        go to state 234


State 226

   69 single_operation: '!' • expression

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    func_calling      go to state 227
    expression        go to state 297
    const             go to state 229
    number            go to state 230
    single_operation  go to state 231
    arith_single      go to state 233
    lst_single        go to state 234


State 227

   50 expression: func_calling •

    ')'         reduce using rule 50 (expression)
    ','         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)
    FILTER      reduce using rule 50 (expression)
    MAP         reduce using rule 50 (expression)
    ':'         reduce using rule 50 (expression)


State 228

   74 arith_binary: expression •
   79 lst_binary: expression • FILTER expression
   80           | expression • MAP expression
   81           | expression • ':' expression

    FILTER  shift, and go to state 298
    MAP     shift, and go to state 299
    ':'     shift, and go to state 300

    ')'         reduce using rule 74 (arith_binary)
    ','         reduce using rule 74 (arith_binary)
    AND         reduce using rule 74 (arith_binary)
    OR          reduce using rule 74 (arith_binary)
    GREATER     reduce using rule 74 (arith_binary)
    GREATER_EQ  reduce using rule 74 (arith_binary)
    LESS        reduce using rule 74 (arith_binary)
    LESS_EQ     reduce using rule 74 (arith_binary)
    EQUAL       reduce using rule 74 (arith_binary)
    NOT_EQ      reduce using rule 74 (arith_binary)
    '+'         reduce using rule 74 (arith_binary)
    '-'         reduce using rule 74 (arith_binary)
    '*'         reduce using rule 74 (arith_binary)
    '/'         reduce using rule 74 (arith_binary)


State 229

   52 expression: const •

    ')'         reduce using rule 52 (expression)
    ','         reduce using rule 52 (expression)
    AND         reduce using rule 52 (expression)
    OR          reduce using rule 52 (expression)
    GREATER     reduce using rule 52 (expression)
    GREATER_EQ  reduce using rule 52 (expression)
    LESS        reduce using rule 52 (expression)
    LESS_EQ     reduce using rule 52 (expression)
    EQUAL       reduce using rule 52 (expression)
    NOT_EQ      reduce using rule 52 (expression)
    '+'         reduce using rule 52 (expression)
    '-'         reduce using rule 52 (expression)
    '*'         reduce using rule 52 (expression)
    '/'         reduce using rule 52 (expression)
    FILTER      reduce using rule 52 (expression)
    MAP         reduce using rule 52 (expression)
    ':'         reduce using rule 52 (expression)


State 230

   54 const: number •

    ')'         reduce using rule 54 (const)
    ','         reduce using rule 54 (const)
    AND         reduce using rule 54 (const)
    OR          reduce using rule 54 (const)
    GREATER     reduce using rule 54 (const)
    GREATER_EQ  reduce using rule 54 (const)
    LESS        reduce using rule 54 (const)
    LESS_EQ     reduce using rule 54 (const)
    EQUAL       reduce using rule 54 (const)
    NOT_EQ      reduce using rule 54 (const)
    '+'         reduce using rule 54 (const)
    '-'         reduce using rule 54 (const)
    '*'         reduce using rule 54 (const)
    '/'         reduce using rule 54 (const)
    FILTER      reduce using rule 54 (const)
    MAP         reduce using rule 54 (const)
    ':'         reduce using rule 54 (const)


State 231

   51 expression: single_operation •

    ')'         reduce using rule 51 (expression)
    ','         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)
    FILTER      reduce using rule 51 (expression)
    MAP         reduce using rule 51 (expression)
    ':'         reduce using rule 51 (expression)


State 232

   63 operation: arith_binary •
   70 arith_binary: arith_binary • '+' expression
   71             | arith_binary • '-' expression
   72             | arith_binary • '*' expression
   73             | arith_binary • '/' expression

    '+'  shift, and go to state 301
    '-'  shift, and go to state 302
    '*'  shift, and go to state 303
    '/'  shift, and go to state 304

    ')'         reduce using rule 63 (operation)
    ','         reduce using rule 63 (operation)
    AND         reduce using rule 63 (operation)
    OR          reduce using rule 63 (operation)
    GREATER     reduce using rule 63 (operation)
    GREATER_EQ  reduce using rule 63 (operation)
    LESS        reduce using rule 63 (operation)
    LESS_EQ     reduce using rule 63 (operation)
    EQUAL       reduce using rule 63 (operation)
    NOT_EQ      reduce using rule 63 (operation)


State 233

   67 single_operation: arith_single •

    ')'         reduce using rule 67 (single_operation)
    ','         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)
    '+'         reduce using rule 67 (single_operation)
    '-'         reduce using rule 67 (single_operation)
    '*'         reduce using rule 67 (single_operation)
    '/'         reduce using rule 67 (single_operation)
    FILTER      reduce using rule 67 (single_operation)
    MAP         reduce using rule 67 (single_operation)
    ':'         reduce using rule 67 (single_operation)


State 234

   68 single_operation: lst_single •

    ')'         reduce using rule 68 (single_operation)
    ','         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)
    '+'         reduce using rule 68 (single_operation)
    '-'         reduce using rule 68 (single_operation)
    '*'         reduce using rule 68 (single_operation)
    '/'         reduce using rule 68 (single_operation)
    FILTER      reduce using rule 68 (single_operation)
    MAP         reduce using rule 68 (single_operation)
    ':'         reduce using rule 68 (single_operation)


State 235

   64 operation: lst_binary •

    ')'         reduce using rule 64 (operation)
    ','         reduce using rule 64 (operation)
    AND         reduce using rule 64 (operation)
    OR          reduce using rule 64 (operation)
    GREATER     reduce using rule 64 (operation)
    GREATER_EQ  reduce using rule 64 (operation)
    LESS        reduce using rule 64 (operation)
    LESS_EQ     reduce using rule 64 (operation)
    EQUAL       reduce using rule 64 (operation)
    NOT_EQ      reduce using rule 64 (operation)


State 236

   66 operation: operation logical_op • expression

    NUM_INT    shift, and go to state 305
    NUM_FLOAT  shift, and go to state 306
    NIL_CNST   shift, and go to state 307
    ID         shift, and go to state 308
    '+'        shift, and go to state 309
    '-'        shift, and go to state 310
    '%'        shift, and go to state 311
    '?'        shift, and go to state 312
    '!'        shift, and go to state 313

    func_calling      go to state 314
    expression        go to state 315
    const             go to state 316
    number            go to state 317
    single_operation  go to state 318
    arith_single      go to state 319
    lst_single        go to state 320


State 237

   65 operation: operation relational_op • expression

    NUM_INT    shift, and go to state 305
    NUM_FLOAT  shift, and go to state 306
    NIL_CNST   shift, and go to state 307
    ID         shift, and go to state 308
    '+'        shift, and go to state 309
    '-'        shift, and go to state 310
    '%'        shift, and go to state 311
    '?'        shift, and go to state 312
    '!'        shift, and go to state 313

    func_calling      go to state 314
    expression        go to state 321
    const             go to state 316
    number            go to state 317
    single_operation  go to state 318
    arith_single      go to state 319
    lst_single        go to state 320


State 238

   66 operation: operation logical_op • expression

    NUM_INT    shift, and go to state 322
    NUM_FLOAT  shift, and go to state 323
    NIL_CNST   shift, and go to state 324
    ID         shift, and go to state 325
    '+'        shift, and go to state 326
    '-'        shift, and go to state 327
    '%'        shift, and go to state 328
    '?'        shift, and go to state 329
    '!'        shift, and go to state 330

    func_calling      go to state 331
    expression        go to state 332
    const             go to state 333
    number            go to state 334
    single_operation  go to state 335
    arith_single      go to state 336
    lst_single        go to state 337


State 239

   65 operation: operation relational_op • expression

    NUM_INT    shift, and go to state 322
    NUM_FLOAT  shift, and go to state 323
    NIL_CNST   shift, and go to state 324
    ID         shift, and go to state 325
    '+'        shift, and go to state 326
    '-'        shift, and go to state 327
    '%'        shift, and go to state 328
    '?'        shift, and go to state 329
    '!'        shift, and go to state 330

    func_calling      go to state 331
    expression        go to state 338
    const             go to state 333
    number            go to state 334
    single_operation  go to state 335
    arith_single      go to state 336
    lst_single        go to state 337


State 240

   32 command: error •

    error           reduce using rule 32 (command)
    NUM_INT         reduce using rule 32 (command)
    NUM_FLOAT       reduce using rule 32 (command)
    NIL_CNST        reduce using rule 32 (command)
    ID              reduce using rule 32 (command)
    RETURN_STM      reduce using rule 32 (command)
    T_INT           reduce using rule 32 (command)
    T_FLOAT         reduce using rule 32 (command)
    IF_STMT         reduce using rule 32 (command)
    ELSE_STMT       reduce using rule 32 (command)
    FOR_STMT        reduce using rule 32 (command)
    OUTPUT_WRITE    reduce using rule 32 (command)
    OUTPUT_WRITELN  reduce using rule 32 (command)
    INPUT_READ      reduce using rule 32 (command)
    '{'             reduce using rule 32 (command)
    '}'             reduce using rule 32 (command)
    '+'             reduce using rule 32 (command)
    '-'             reduce using rule 32 (command)
    '%'             reduce using rule 32 (command)
    '?'             reduce using rule 32 (command)
    '!'             reduce using rule 32 (command)


State 241

   36 return_stmt: RETURN_STM • operation ';'

    NUM_INT    shift, and go to state 28
    NUM_FLOAT  shift, and go to state 29
    NIL_CNST   shift, and go to state 30
    ID         shift, and go to state 67
    '+'        shift, and go to state 38
    '-'        shift, and go to state 39
    '%'        shift, and go to state 40
    '?'        shift, and go to state 41
    '!'        shift, and go to state 42

    func_calling      go to state 55
    expression        go to state 56
    const             go to state 57
    number            go to state 58
    operation         go to state 339
    single_operation  go to state 60
    arith_binary      go to state 61
    arith_single      go to state 62
    lst_single        go to state 63
    lst_binary        go to state 64


State 242

   34 conditional_stmt: IF_STMT • '(' operation ')' command
   35                 | IF_STMT • '(' operation ')' command ELSE_STMT command

    '('  shift, and go to state 340


State 243

   37 iteration: FOR_STMT • '(' loop_condition ')' command

    '('  shift, and go to state 341


State 244

   42 output: OUTPUT_WRITE • '(' operation ')' ';'
   44       | OUTPUT_WRITE • '(' STRING ')' ';'

    '('  shift, and go to state 342


State 245

   43 output: OUTPUT_WRITELN • '(' operation ')' ';'
   45       | OUTPUT_WRITELN • '(' STRING ')' ';'

    '('  shift, and go to state 343


State 246

   46 input: INPUT_READ • '(' expression ')' ';'

    '('  shift, and go to state 344


State 247

   22 command: var_declaration •

    error           reduce using rule 22 (command)
    NUM_INT         reduce using rule 22 (command)
    NUM_FLOAT       reduce using rule 22 (command)
    NIL_CNST        reduce using rule 22 (command)
    ID              reduce using rule 22 (command)
    RETURN_STM      reduce using rule 22 (command)
    T_INT           reduce using rule 22 (command)
    T_FLOAT         reduce using rule 22 (command)
    IF_STMT         reduce using rule 22 (command)
    ELSE_STMT       reduce using rule 22 (command)
    FOR_STMT        reduce using rule 22 (command)
    OUTPUT_WRITE    reduce using rule 22 (command)
    OUTPUT_WRITELN  reduce using rule 22 (command)
    INPUT_READ      reduce using rule 22 (command)
    '{'             reduce using rule 22 (command)
    '}'             reduce using rule 22 (command)
    '+'             reduce using rule 22 (command)
    '-'             reduce using rule 22 (command)
    '%'             reduce using rule 22 (command)
    '?'             reduce using rule 22 (command)
    '!'             reduce using rule 22 (command)


State 248

   10 var_declaration: unq_declaration • ';'

    ';'  shift, and go to state 345


State 249

   30 command: $@2 • '{' block_commands '}'

    '{'  shift, and go to state 346


State 250

   23 command: init_variable •

    error           reduce using rule 23 (command)
    NUM_INT         reduce using rule 23 (command)
    NUM_FLOAT       reduce using rule 23 (command)
    NIL_CNST        reduce using rule 23 (command)
    ID              reduce using rule 23 (command)
    RETURN_STM      reduce using rule 23 (command)
    T_INT           reduce using rule 23 (command)
    T_FLOAT         reduce using rule 23 (command)
    IF_STMT         reduce using rule 23 (command)
    ELSE_STMT       reduce using rule 23 (command)
    FOR_STMT        reduce using rule 23 (command)
    OUTPUT_WRITE    reduce using rule 23 (command)
    OUTPUT_WRITELN  reduce using rule 23 (command)
    INPUT_READ      reduce using rule 23 (command)
    '{'             reduce using rule 23 (command)
    '}'             reduce using rule 23 (command)
    '+'             reduce using rule 23 (command)
    '-'             reduce using rule 23 (command)
    '%'             reduce using rule 23 (command)
    '?'             reduce using rule 23 (command)
    '!'             reduce using rule 23 (command)


State 251

   24 command: conditional_stmt •

    error           reduce using rule 24 (command)
    NUM_INT         reduce using rule 24 (command)
    NUM_FLOAT       reduce using rule 24 (command)
    NIL_CNST        reduce using rule 24 (command)
    ID              reduce using rule 24 (command)
    RETURN_STM      reduce using rule 24 (command)
    T_INT           reduce using rule 24 (command)
    T_FLOAT         reduce using rule 24 (command)
    IF_STMT         reduce using rule 24 (command)
    ELSE_STMT       reduce using rule 24 (command)
    FOR_STMT        reduce using rule 24 (command)
    OUTPUT_WRITE    reduce using rule 24 (command)
    OUTPUT_WRITELN  reduce using rule 24 (command)
    INPUT_READ      reduce using rule 24 (command)
    '{'             reduce using rule 24 (command)
    '}'             reduce using rule 24 (command)
    '+'             reduce using rule 24 (command)
    '-'             reduce using rule 24 (command)
    '%'             reduce using rule 24 (command)
    '?'             reduce using rule 24 (command)
    '!'             reduce using rule 24 (command)


State 252

   25 command: return_stmt •

    error           reduce using rule 25 (command)
    NUM_INT         reduce using rule 25 (command)
    NUM_FLOAT       reduce using rule 25 (command)
    NIL_CNST        reduce using rule 25 (command)
    ID              reduce using rule 25 (command)
    RETURN_STM      reduce using rule 25 (command)
    T_INT           reduce using rule 25 (command)
    T_FLOAT         reduce using rule 25 (command)
    IF_STMT         reduce using rule 25 (command)
    ELSE_STMT       reduce using rule 25 (command)
    FOR_STMT        reduce using rule 25 (command)
    OUTPUT_WRITE    reduce using rule 25 (command)
    OUTPUT_WRITELN  reduce using rule 25 (command)
    INPUT_READ      reduce using rule 25 (command)
    '{'             reduce using rule 25 (command)
    '}'             reduce using rule 25 (command)
    '+'             reduce using rule 25 (command)
    '-'             reduce using rule 25 (command)
    '%'             reduce using rule 25 (command)
    '?'             reduce using rule 25 (command)
    '!'             reduce using rule 25 (command)


State 253

   26 command: iteration •

    error           reduce using rule 26 (command)
    NUM_INT         reduce using rule 26 (command)
    NUM_FLOAT       reduce using rule 26 (command)
    NIL_CNST        reduce using rule 26 (command)
    ID              reduce using rule 26 (command)
    RETURN_STM      reduce using rule 26 (command)
    T_INT           reduce using rule 26 (command)
    T_FLOAT         reduce using rule 26 (command)
    IF_STMT         reduce using rule 26 (command)
    ELSE_STMT       reduce using rule 26 (command)
    FOR_STMT        reduce using rule 26 (command)
    OUTPUT_WRITE    reduce using rule 26 (command)
    OUTPUT_WRITELN  reduce using rule 26 (command)
    INPUT_READ      reduce using rule 26 (command)
    '{'             reduce using rule 26 (command)
    '}'             reduce using rule 26 (command)
    '+'             reduce using rule 26 (command)
    '-'             reduce using rule 26 (command)
    '%'             reduce using rule 26 (command)
    '?'             reduce using rule 26 (command)
    '!'             reduce using rule 26 (command)


State 254

   33 init_variable: init_stmt • ';'

    ';'  shift, and go to state 347


State 255

   28 command: output •

    error           reduce using rule 28 (command)
    NUM_INT         reduce using rule 28 (command)
    NUM_FLOAT       reduce using rule 28 (command)
    NIL_CNST        reduce using rule 28 (command)
    ID              reduce using rule 28 (command)
    RETURN_STM      reduce using rule 28 (command)
    T_INT           reduce using rule 28 (command)
    T_FLOAT         reduce using rule 28 (command)
    IF_STMT         reduce using rule 28 (command)
    ELSE_STMT       reduce using rule 28 (command)
    FOR_STMT        reduce using rule 28 (command)
    OUTPUT_WRITE    reduce using rule 28 (command)
    OUTPUT_WRITELN  reduce using rule 28 (command)
    INPUT_READ      reduce using rule 28 (command)
    '{'             reduce using rule 28 (command)
    '}'             reduce using rule 28 (command)
    '+'             reduce using rule 28 (command)
    '-'             reduce using rule 28 (command)
    '%'             reduce using rule 28 (command)
    '?'             reduce using rule 28 (command)
    '!'             reduce using rule 28 (command)


State 256

   27 command: input •

    error           reduce using rule 27 (command)
    NUM_INT         reduce using rule 27 (command)
    NUM_FLOAT       reduce using rule 27 (command)
    NIL_CNST        reduce using rule 27 (command)
    ID              reduce using rule 27 (command)
    RETURN_STM      reduce using rule 27 (command)
    T_INT           reduce using rule 27 (command)
    T_FLOAT         reduce using rule 27 (command)
    IF_STMT         reduce using rule 27 (command)
    ELSE_STMT       reduce using rule 27 (command)
    FOR_STMT        reduce using rule 27 (command)
    OUTPUT_WRITE    reduce using rule 27 (command)
    OUTPUT_WRITELN  reduce using rule 27 (command)
    INPUT_READ      reduce using rule 27 (command)
    '{'             reduce using rule 27 (command)
    '}'             reduce using rule 27 (command)
    '+'             reduce using rule 27 (command)
    '-'             reduce using rule 27 (command)
    '%'             reduce using rule 27 (command)
    '?'             reduce using rule 27 (command)
    '!'             reduce using rule 27 (command)


State 257

   31 command: operation • ';'
   65 operation: operation • relational_op expression
   66          | operation • logical_op expression

    ';'         shift, and go to state 348
    AND         shift, and go to state 87
    OR          shift, and go to state 88
    GREATER     shift, and go to state 89
    GREATER_EQ  shift, and go to state 90
    LESS        shift, and go to state 91
    LESS_EQ     shift, and go to state 92
    EQUAL       shift, and go to state 93
    NOT_EQ      shift, and go to state 94

    logical_op     go to state 95
    relational_op  go to state 96


State 258

   39 init_stmt: ID • '=' operation

    '='  shift, and go to state 349


State 259

   11 unq_declaration: type ID •

    ')'  reduce using rule 11 (unq_declaration)
    ','  reduce using rule 11 (unq_declaration)


State 260

   11 unq_declaration: type ID •

    ';'  reduce using rule 11 (unq_declaration)


State 261

   49 func_calling: ID '(' • $@3 calling_parameters $@4 ')'

    NUM_INT    reduce using rule 47 ($@3)
    NUM_FLOAT  reduce using rule 47 ($@3)
    NIL_CNST   reduce using rule 47 ($@3)
    ID         reduce using rule 47 ($@3)
    ')'        reduce using rule 47 ($@3)
    '+'        reduce using rule 47 ($@3)
    '-'        reduce using rule 47 ($@3)
    '%'        reduce using rule 47 ($@3)
    '?'        reduce using rule 47 ($@3)
    '!'        reduce using rule 47 ($@3)

    $@3  go to state 350


State 262

   75 arith_single: '+' expression •

    ')'         reduce using rule 75 (arith_single)
    AND         reduce using rule 75 (arith_single)
    OR          reduce using rule 75 (arith_single)
    GREATER     reduce using rule 75 (arith_single)
    GREATER_EQ  reduce using rule 75 (arith_single)
    LESS        reduce using rule 75 (arith_single)
    LESS_EQ     reduce using rule 75 (arith_single)
    EQUAL       reduce using rule 75 (arith_single)
    NOT_EQ      reduce using rule 75 (arith_single)
    '+'         reduce using rule 75 (arith_single)
    '-'         reduce using rule 75 (arith_single)
    '*'         reduce using rule 75 (arith_single)
    '/'         reduce using rule 75 (arith_single)
    FILTER      reduce using rule 75 (arith_single)
    MAP         reduce using rule 75 (arith_single)
    ':'         reduce using rule 75 (arith_single)


State 263

   76 arith_single: '-' expression •

    ')'         reduce using rule 76 (arith_single)
    AND         reduce using rule 76 (arith_single)
    OR          reduce using rule 76 (arith_single)
    GREATER     reduce using rule 76 (arith_single)
    GREATER_EQ  reduce using rule 76 (arith_single)
    LESS        reduce using rule 76 (arith_single)
    LESS_EQ     reduce using rule 76 (arith_single)
    EQUAL       reduce using rule 76 (arith_single)
    NOT_EQ      reduce using rule 76 (arith_single)
    '+'         reduce using rule 76 (arith_single)
    '-'         reduce using rule 76 (arith_single)
    '*'         reduce using rule 76 (arith_single)
    '/'         reduce using rule 76 (arith_single)
    FILTER      reduce using rule 76 (arith_single)
    MAP         reduce using rule 76 (arith_single)
    ':'         reduce using rule 76 (arith_single)


State 264

   77 lst_single: '%' expression •

    ')'         reduce using rule 77 (lst_single)
    AND         reduce using rule 77 (lst_single)
    OR          reduce using rule 77 (lst_single)
    GREATER     reduce using rule 77 (lst_single)
    GREATER_EQ  reduce using rule 77 (lst_single)
    LESS        reduce using rule 77 (lst_single)
    LESS_EQ     reduce using rule 77 (lst_single)
    EQUAL       reduce using rule 77 (lst_single)
    NOT_EQ      reduce using rule 77 (lst_single)
    '+'         reduce using rule 77 (lst_single)
    '-'         reduce using rule 77 (lst_single)
    '*'         reduce using rule 77 (lst_single)
    '/'         reduce using rule 77 (lst_single)
    FILTER      reduce using rule 77 (lst_single)
    MAP         reduce using rule 77 (lst_single)
    ':'         reduce using rule 77 (lst_single)


State 265

   78 lst_single: '?' expression •

    ')'         reduce using rule 78 (lst_single)
    AND         reduce using rule 78 (lst_single)
    OR          reduce using rule 78 (lst_single)
    GREATER     reduce using rule 78 (lst_single)
    GREATER_EQ  reduce using rule 78 (lst_single)
    LESS        reduce using rule 78 (lst_single)
    LESS_EQ     reduce using rule 78 (lst_single)
    EQUAL       reduce using rule 78 (lst_single)
    NOT_EQ      reduce using rule 78 (lst_single)
    '+'         reduce using rule 78 (lst_single)
    '-'         reduce using rule 78 (lst_single)
    '*'         reduce using rule 78 (lst_single)
    '/'         reduce using rule 78 (lst_single)
    FILTER      reduce using rule 78 (lst_single)
    MAP         reduce using rule 78 (lst_single)
    ':'         reduce using rule 78 (lst_single)


State 266

   69 single_operation: '!' expression •

    ')'         reduce using rule 69 (single_operation)
    AND         reduce using rule 69 (single_operation)
    OR          reduce using rule 69 (single_operation)
    GREATER     reduce using rule 69 (single_operation)
    GREATER_EQ  reduce using rule 69 (single_operation)
    LESS        reduce using rule 69 (single_operation)
    LESS_EQ     reduce using rule 69 (single_operation)
    EQUAL       reduce using rule 69 (single_operation)
    NOT_EQ      reduce using rule 69 (single_operation)
    '+'         reduce using rule 69 (single_operation)
    '-'         reduce using rule 69 (single_operation)
    '*'         reduce using rule 69 (single_operation)
    '/'         reduce using rule 69 (single_operation)
    FILTER      reduce using rule 69 (single_operation)
    MAP         reduce using rule 69 (single_operation)
    ':'         reduce using rule 69 (single_operation)


State 267

   79 lst_binary: expression FILTER • expression

    NUM_INT    shift, and go to state 305
    NUM_FLOAT  shift, and go to state 306
    NIL_CNST   shift, and go to state 307
    ID         shift, and go to state 308
    '+'        shift, and go to state 309
    '-'        shift, and go to state 310
    '%'        shift, and go to state 311
    '?'        shift, and go to state 312
    '!'        shift, and go to state 313

    func_calling      go to state 314
    expression        go to state 351
    const             go to state 316
    number            go to state 317
    single_operation  go to state 318
    arith_single      go to state 319
    lst_single        go to state 320


State 268

   80 lst_binary: expression MAP • expression

    NUM_INT    shift, and go to state 305
    NUM_FLOAT  shift, and go to state 306
    NIL_CNST   shift, and go to state 307
    ID         shift, and go to state 308
    '+'        shift, and go to state 309
    '-'        shift, and go to state 310
    '%'        shift, and go to state 311
    '?'        shift, and go to state 312
    '!'        shift, and go to state 313

    func_calling      go to state 314
    expression        go to state 352
    const             go to state 316
    number            go to state 317
    single_operation  go to state 318
    arith_single      go to state 319
    lst_single        go to state 320


State 269

   81 lst_binary: expression ':' • expression

    NUM_INT    shift, and go to state 305
    NUM_FLOAT  shift, and go to state 306
    NIL_CNST   shift, and go to state 307
    ID         shift, and go to state 308
    '+'        shift, and go to state 309
    '-'        shift, and go to state 310
    '%'        shift, and go to state 311
    '?'        shift, and go to state 312
    '!'        shift, and go to state 313

    func_calling      go to state 314
    expression        go to state 353
    const             go to state 316
    number            go to state 317
    single_operation  go to state 318
    arith_single      go to state 319
    lst_single        go to state 320


State 270

   70 arith_binary: arith_binary '+' • expression

    NUM_INT    shift, and go to state 354
    NUM_FLOAT  shift, and go to state 355
    NIL_CNST   shift, and go to state 356
    ID         shift, and go to state 357
    '+'        shift, and go to state 358
    '-'        shift, and go to state 359
    '%'        shift, and go to state 360
    '?'        shift, and go to state 361
    '!'        shift, and go to state 362

    func_calling      go to state 363
    expression        go to state 364
    const             go to state 365
    number            go to state 366
    single_operation  go to state 367
    arith_single      go to state 368
    lst_single        go to state 369


State 271

   71 arith_binary: arith_binary '-' • expression

    NUM_INT    shift, and go to state 354
    NUM_FLOAT  shift, and go to state 355
    NIL_CNST   shift, and go to state 356
    ID         shift, and go to state 357
    '+'        shift, and go to state 358
    '-'        shift, and go to state 359
    '%'        shift, and go to state 360
    '?'        shift, and go to state 361
    '!'        shift, and go to state 362

    func_calling      go to state 363
    expression        go to state 370
    const             go to state 365
    number            go to state 366
    single_operation  go to state 367
    arith_single      go to state 368
    lst_single        go to state 369


State 272

   72 arith_binary: arith_binary '*' • expression

    NUM_INT    shift, and go to state 354
    NUM_FLOAT  shift, and go to state 355
    NIL_CNST   shift, and go to state 356
    ID         shift, and go to state 357
    '+'        shift, and go to state 358
    '-'        shift, and go to state 359
    '%'        shift, and go to state 360
    '?'        shift, and go to state 361
    '!'        shift, and go to state 362

    func_calling      go to state 363
    expression        go to state 371
    const             go to state 365
    number            go to state 366
    single_operation  go to state 367
    arith_single      go to state 368
    lst_single        go to state 369


State 273

   73 arith_binary: arith_binary '/' • expression

    NUM_INT    shift, and go to state 354
    NUM_FLOAT  shift, and go to state 355
    NIL_CNST   shift, and go to state 356
    ID         shift, and go to state 357
    '+'        shift, and go to state 358
    '-'        shift, and go to state 359
    '%'        shift, and go to state 360
    '?'        shift, and go to state 361
    '!'        shift, and go to state 362

    func_calling      go to state 363
    expression        go to state 372
    const             go to state 365
    number            go to state 366
    single_operation  go to state 367
    arith_single      go to state 368
    lst_single        go to state 369


State 274

   49 func_calling: ID '(' • $@3 calling_parameters $@4 ')'

    NUM_INT    reduce using rule 47 ($@3)
    NUM_FLOAT  reduce using rule 47 ($@3)
    NIL_CNST   reduce using rule 47 ($@3)
    ID         reduce using rule 47 ($@3)
    ')'        reduce using rule 47 ($@3)
    '+'        reduce using rule 47 ($@3)
    '-'        reduce using rule 47 ($@3)
    '%'        reduce using rule 47 ($@3)
    '?'        reduce using rule 47 ($@3)
    '!'        reduce using rule 47 ($@3)

    $@3  go to state 373


State 275

   75 arith_single: '+' expression •

    ')'  reduce using rule 75 (arith_single)


State 276

   76 arith_single: '-' expression •

    ')'  reduce using rule 76 (arith_single)


State 277

   77 lst_single: '%' expression •

    ')'  reduce using rule 77 (lst_single)


State 278

   78 lst_single: '?' expression •

    ')'  reduce using rule 78 (lst_single)


State 279

   69 single_operation: '!' expression •

    ')'  reduce using rule 69 (single_operation)


State 280

   49 func_calling: ID '(' • $@3 calling_parameters $@4 ')'

    NUM_INT    reduce using rule 47 ($@3)
    NUM_FLOAT  reduce using rule 47 ($@3)
    NIL_CNST   reduce using rule 47 ($@3)
    ID         reduce using rule 47 ($@3)
    ')'        reduce using rule 47 ($@3)
    '+'        reduce using rule 47 ($@3)
    '-'        reduce using rule 47 ($@3)
    '%'        reduce using rule 47 ($@3)
    '?'        reduce using rule 47 ($@3)
    '!'        reduce using rule 47 ($@3)

    $@3  go to state 374


State 281

   75 arith_single: '+' expression •

    ';'         reduce using rule 75 (arith_single)
    AND         reduce using rule 75 (arith_single)
    OR          reduce using rule 75 (arith_single)
    GREATER     reduce using rule 75 (arith_single)
    GREATER_EQ  reduce using rule 75 (arith_single)
    LESS        reduce using rule 75 (arith_single)
    LESS_EQ     reduce using rule 75 (arith_single)
    EQUAL       reduce using rule 75 (arith_single)
    NOT_EQ      reduce using rule 75 (arith_single)


State 282

   76 arith_single: '-' expression •

    ';'         reduce using rule 76 (arith_single)
    AND         reduce using rule 76 (arith_single)
    OR          reduce using rule 76 (arith_single)
    GREATER     reduce using rule 76 (arith_single)
    GREATER_EQ  reduce using rule 76 (arith_single)
    LESS        reduce using rule 76 (arith_single)
    LESS_EQ     reduce using rule 76 (arith_single)
    EQUAL       reduce using rule 76 (arith_single)
    NOT_EQ      reduce using rule 76 (arith_single)


State 283

   77 lst_single: '%' expression •

    ';'         reduce using rule 77 (lst_single)
    AND         reduce using rule 77 (lst_single)
    OR          reduce using rule 77 (lst_single)
    GREATER     reduce using rule 77 (lst_single)
    GREATER_EQ  reduce using rule 77 (lst_single)
    LESS        reduce using rule 77 (lst_single)
    LESS_EQ     reduce using rule 77 (lst_single)
    EQUAL       reduce using rule 77 (lst_single)
    NOT_EQ      reduce using rule 77 (lst_single)


State 284

   78 lst_single: '?' expression •

    ';'         reduce using rule 78 (lst_single)
    AND         reduce using rule 78 (lst_single)
    OR          reduce using rule 78 (lst_single)
    GREATER     reduce using rule 78 (lst_single)
    GREATER_EQ  reduce using rule 78 (lst_single)
    LESS        reduce using rule 78 (lst_single)
    LESS_EQ     reduce using rule 78 (lst_single)
    EQUAL       reduce using rule 78 (lst_single)
    NOT_EQ      reduce using rule 78 (lst_single)


State 285

   69 single_operation: '!' expression •

    ';'         reduce using rule 69 (single_operation)
    AND         reduce using rule 69 (single_operation)
    OR          reduce using rule 69 (single_operation)
    GREATER     reduce using rule 69 (single_operation)
    GREATER_EQ  reduce using rule 69 (single_operation)
    LESS        reduce using rule 69 (single_operation)
    LESS_EQ     reduce using rule 69 (single_operation)
    EQUAL       reduce using rule 69 (single_operation)
    NOT_EQ      reduce using rule 69 (single_operation)


State 286

   49 func_calling: ID '(' • $@3 calling_parameters $@4 ')'

    NUM_INT    reduce using rule 47 ($@3)
    NUM_FLOAT  reduce using rule 47 ($@3)
    NIL_CNST   reduce using rule 47 ($@3)
    ID         reduce using rule 47 ($@3)
    ')'        reduce using rule 47 ($@3)
    '+'        reduce using rule 47 ($@3)
    '-'        reduce using rule 47 ($@3)
    '%'        reduce using rule 47 ($@3)
    '?'        reduce using rule 47 ($@3)
    '!'        reduce using rule 47 ($@3)

    $@3  go to state 375


State 287

   75 arith_single: '+' expression •

    ';'         reduce using rule 75 (arith_single)
    AND         reduce using rule 75 (arith_single)
    OR          reduce using rule 75 (arith_single)
    GREATER     reduce using rule 75 (arith_single)
    GREATER_EQ  reduce using rule 75 (arith_single)
    LESS        reduce using rule 75 (arith_single)
    LESS_EQ     reduce using rule 75 (arith_single)
    EQUAL       reduce using rule 75 (arith_single)
    NOT_EQ      reduce using rule 75 (arith_single)
    '+'         reduce using rule 75 (arith_single)
    '-'         reduce using rule 75 (arith_single)
    '*'         reduce using rule 75 (arith_single)
    '/'         reduce using rule 75 (arith_single)


State 288

   76 arith_single: '-' expression •

    ';'         reduce using rule 76 (arith_single)
    AND         reduce using rule 76 (arith_single)
    OR          reduce using rule 76 (arith_single)
    GREATER     reduce using rule 76 (arith_single)
    GREATER_EQ  reduce using rule 76 (arith_single)
    LESS        reduce using rule 76 (arith_single)
    LESS_EQ     reduce using rule 76 (arith_single)
    EQUAL       reduce using rule 76 (arith_single)
    NOT_EQ      reduce using rule 76 (arith_single)
    '+'         reduce using rule 76 (arith_single)
    '-'         reduce using rule 76 (arith_single)
    '*'         reduce using rule 76 (arith_single)
    '/'         reduce using rule 76 (arith_single)


State 289

   77 lst_single: '%' expression •

    ';'         reduce using rule 77 (lst_single)
    AND         reduce using rule 77 (lst_single)
    OR          reduce using rule 77 (lst_single)
    GREATER     reduce using rule 77 (lst_single)
    GREATER_EQ  reduce using rule 77 (lst_single)
    LESS        reduce using rule 77 (lst_single)
    LESS_EQ     reduce using rule 77 (lst_single)
    EQUAL       reduce using rule 77 (lst_single)
    NOT_EQ      reduce using rule 77 (lst_single)
    '+'         reduce using rule 77 (lst_single)
    '-'         reduce using rule 77 (lst_single)
    '*'         reduce using rule 77 (lst_single)
    '/'         reduce using rule 77 (lst_single)


State 290

   78 lst_single: '?' expression •

    ';'         reduce using rule 78 (lst_single)
    AND         reduce using rule 78 (lst_single)
    OR          reduce using rule 78 (lst_single)
    GREATER     reduce using rule 78 (lst_single)
    GREATER_EQ  reduce using rule 78 (lst_single)
    LESS        reduce using rule 78 (lst_single)
    LESS_EQ     reduce using rule 78 (lst_single)
    EQUAL       reduce using rule 78 (lst_single)
    NOT_EQ      reduce using rule 78 (lst_single)
    '+'         reduce using rule 78 (lst_single)
    '-'         reduce using rule 78 (lst_single)
    '*'         reduce using rule 78 (lst_single)
    '/'         reduce using rule 78 (lst_single)


State 291

   69 single_operation: '!' expression •

    ';'         reduce using rule 69 (single_operation)
    AND         reduce using rule 69 (single_operation)
    OR          reduce using rule 69 (single_operation)
    GREATER     reduce using rule 69 (single_operation)
    GREATER_EQ  reduce using rule 69 (single_operation)
    LESS        reduce using rule 69 (single_operation)
    LESS_EQ     reduce using rule 69 (single_operation)
    EQUAL       reduce using rule 69 (single_operation)
    NOT_EQ      reduce using rule 69 (single_operation)
    '+'         reduce using rule 69 (single_operation)
    '-'         reduce using rule 69 (single_operation)
    '*'         reduce using rule 69 (single_operation)
    '/'         reduce using rule 69 (single_operation)


State 292

   49 func_calling: ID '(' • $@3 calling_parameters $@4 ')'

    NUM_INT    reduce using rule 47 ($@3)
    NUM_FLOAT  reduce using rule 47 ($@3)
    NIL_CNST   reduce using rule 47 ($@3)
    ID         reduce using rule 47 ($@3)
    ')'        reduce using rule 47 ($@3)
    '+'        reduce using rule 47 ($@3)
    '-'        reduce using rule 47 ($@3)
    '%'        reduce using rule 47 ($@3)
    '?'        reduce using rule 47 ($@3)
    '!'        reduce using rule 47 ($@3)

    $@3  go to state 376


State 293

   75 arith_single: '+' expression •

    ')'         reduce using rule 75 (arith_single)
    ','         reduce using rule 75 (arith_single)
    AND         reduce using rule 75 (arith_single)
    OR          reduce using rule 75 (arith_single)
    GREATER     reduce using rule 75 (arith_single)
    GREATER_EQ  reduce using rule 75 (arith_single)
    LESS        reduce using rule 75 (arith_single)
    LESS_EQ     reduce using rule 75 (arith_single)
    EQUAL       reduce using rule 75 (arith_single)
    NOT_EQ      reduce using rule 75 (arith_single)
    '+'         reduce using rule 75 (arith_single)
    '-'         reduce using rule 75 (arith_single)
    '*'         reduce using rule 75 (arith_single)
    '/'         reduce using rule 75 (arith_single)
    FILTER      reduce using rule 75 (arith_single)
    MAP         reduce using rule 75 (arith_single)
    ':'         reduce using rule 75 (arith_single)


State 294

   76 arith_single: '-' expression •

    ')'         reduce using rule 76 (arith_single)
    ','         reduce using rule 76 (arith_single)
    AND         reduce using rule 76 (arith_single)
    OR          reduce using rule 76 (arith_single)
    GREATER     reduce using rule 76 (arith_single)
    GREATER_EQ  reduce using rule 76 (arith_single)
    LESS        reduce using rule 76 (arith_single)
    LESS_EQ     reduce using rule 76 (arith_single)
    EQUAL       reduce using rule 76 (arith_single)
    NOT_EQ      reduce using rule 76 (arith_single)
    '+'         reduce using rule 76 (arith_single)
    '-'         reduce using rule 76 (arith_single)
    '*'         reduce using rule 76 (arith_single)
    '/'         reduce using rule 76 (arith_single)
    FILTER      reduce using rule 76 (arith_single)
    MAP         reduce using rule 76 (arith_single)
    ':'         reduce using rule 76 (arith_single)


State 295

   77 lst_single: '%' expression •

    ')'         reduce using rule 77 (lst_single)
    ','         reduce using rule 77 (lst_single)
    AND         reduce using rule 77 (lst_single)
    OR          reduce using rule 77 (lst_single)
    GREATER     reduce using rule 77 (lst_single)
    GREATER_EQ  reduce using rule 77 (lst_single)
    LESS        reduce using rule 77 (lst_single)
    LESS_EQ     reduce using rule 77 (lst_single)
    EQUAL       reduce using rule 77 (lst_single)
    NOT_EQ      reduce using rule 77 (lst_single)
    '+'         reduce using rule 77 (lst_single)
    '-'         reduce using rule 77 (lst_single)
    '*'         reduce using rule 77 (lst_single)
    '/'         reduce using rule 77 (lst_single)
    FILTER      reduce using rule 77 (lst_single)
    MAP         reduce using rule 77 (lst_single)
    ':'         reduce using rule 77 (lst_single)


State 296

   78 lst_single: '?' expression •

    ')'         reduce using rule 78 (lst_single)
    ','         reduce using rule 78 (lst_single)
    AND         reduce using rule 78 (lst_single)
    OR          reduce using rule 78 (lst_single)
    GREATER     reduce using rule 78 (lst_single)
    GREATER_EQ  reduce using rule 78 (lst_single)
    LESS        reduce using rule 78 (lst_single)
    LESS_EQ     reduce using rule 78 (lst_single)
    EQUAL       reduce using rule 78 (lst_single)
    NOT_EQ      reduce using rule 78 (lst_single)
    '+'         reduce using rule 78 (lst_single)
    '-'         reduce using rule 78 (lst_single)
    '*'         reduce using rule 78 (lst_single)
    '/'         reduce using rule 78 (lst_single)
    FILTER      reduce using rule 78 (lst_single)
    MAP         reduce using rule 78 (lst_single)
    ':'         reduce using rule 78 (lst_single)


State 297

   69 single_operation: '!' expression •

    ')'         reduce using rule 69 (single_operation)
    ','         reduce using rule 69 (single_operation)
    AND         reduce using rule 69 (single_operation)
    OR          reduce using rule 69 (single_operation)
    GREATER     reduce using rule 69 (single_operation)
    GREATER_EQ  reduce using rule 69 (single_operation)
    LESS        reduce using rule 69 (single_operation)
    LESS_EQ     reduce using rule 69 (single_operation)
    EQUAL       reduce using rule 69 (single_operation)
    NOT_EQ      reduce using rule 69 (single_operation)
    '+'         reduce using rule 69 (single_operation)
    '-'         reduce using rule 69 (single_operation)
    '*'         reduce using rule 69 (single_operation)
    '/'         reduce using rule 69 (single_operation)
    FILTER      reduce using rule 69 (single_operation)
    MAP         reduce using rule 69 (single_operation)
    ':'         reduce using rule 69 (single_operation)


State 298

   79 lst_binary: expression FILTER • expression

    NUM_INT    shift, and go to state 322
    NUM_FLOAT  shift, and go to state 323
    NIL_CNST   shift, and go to state 324
    ID         shift, and go to state 325
    '+'        shift, and go to state 326
    '-'        shift, and go to state 327
    '%'        shift, and go to state 328
    '?'        shift, and go to state 329
    '!'        shift, and go to state 330

    func_calling      go to state 331
    expression        go to state 377
    const             go to state 333
    number            go to state 334
    single_operation  go to state 335
    arith_single      go to state 336
    lst_single        go to state 337


State 299

   80 lst_binary: expression MAP • expression

    NUM_INT    shift, and go to state 322
    NUM_FLOAT  shift, and go to state 323
    NIL_CNST   shift, and go to state 324
    ID         shift, and go to state 325
    '+'        shift, and go to state 326
    '-'        shift, and go to state 327
    '%'        shift, and go to state 328
    '?'        shift, and go to state 329
    '!'        shift, and go to state 330

    func_calling      go to state 331
    expression        go to state 378
    const             go to state 333
    number            go to state 334
    single_operation  go to state 335
    arith_single      go to state 336
    lst_single        go to state 337


State 300

   81 lst_binary: expression ':' • expression

    NUM_INT    shift, and go to state 322
    NUM_FLOAT  shift, and go to state 323
    NIL_CNST   shift, and go to state 324
    ID         shift, and go to state 325
    '+'        shift, and go to state 326
    '-'        shift, and go to state 327
    '%'        shift, and go to state 328
    '?'        shift, and go to state 329
    '!'        shift, and go to state 330

    func_calling      go to state 331
    expression        go to state 379
    const             go to state 333
    number            go to state 334
    single_operation  go to state 335
    arith_single      go to state 336
    lst_single        go to state 337


State 301

   70 arith_binary: arith_binary '+' • expression

    NUM_INT    shift, and go to state 380
    NUM_FLOAT  shift, and go to state 381
    NIL_CNST   shift, and go to state 382
    ID         shift, and go to state 383
    '+'        shift, and go to state 384
    '-'        shift, and go to state 385
    '%'        shift, and go to state 386
    '?'        shift, and go to state 387
    '!'        shift, and go to state 388

    func_calling      go to state 389
    expression        go to state 390
    const             go to state 391
    number            go to state 392
    single_operation  go to state 393
    arith_single      go to state 394
    lst_single        go to state 395


State 302

   71 arith_binary: arith_binary '-' • expression

    NUM_INT    shift, and go to state 380
    NUM_FLOAT  shift, and go to state 381
    NIL_CNST   shift, and go to state 382
    ID         shift, and go to state 383
    '+'        shift, and go to state 384
    '-'        shift, and go to state 385
    '%'        shift, and go to state 386
    '?'        shift, and go to state 387
    '!'        shift, and go to state 388

    func_calling      go to state 389
    expression        go to state 396
    const             go to state 391
    number            go to state 392
    single_operation  go to state 393
    arith_single      go to state 394
    lst_single        go to state 395


State 303

   72 arith_binary: arith_binary '*' • expression

    NUM_INT    shift, and go to state 380
    NUM_FLOAT  shift, and go to state 381
    NIL_CNST   shift, and go to state 382
    ID         shift, and go to state 383
    '+'        shift, and go to state 384
    '-'        shift, and go to state 385
    '%'        shift, and go to state 386
    '?'        shift, and go to state 387
    '!'        shift, and go to state 388

    func_calling      go to state 389
    expression        go to state 397
    const             go to state 391
    number            go to state 392
    single_operation  go to state 393
    arith_single      go to state 394
    lst_single        go to state 395


State 304

   73 arith_binary: arith_binary '/' • expression

    NUM_INT    shift, and go to state 380
    NUM_FLOAT  shift, and go to state 381
    NIL_CNST   shift, and go to state 382
    ID         shift, and go to state 383
    '+'        shift, and go to state 384
    '-'        shift, and go to state 385
    '%'        shift, and go to state 386
    '?'        shift, and go to state 387
    '!'        shift, and go to state 388

    func_calling      go to state 389
    expression        go to state 398
    const             go to state 391
    number            go to state 392
    single_operation  go to state 393
    arith_single      go to state 394
    lst_single        go to state 395


State 305

   56 number: NUM_INT •

    ')'         reduce using rule 56 (number)
    AND         reduce using rule 56 (number)
    OR          reduce using rule 56 (number)
    GREATER     reduce using rule 56 (number)
    GREATER_EQ  reduce using rule 56 (number)
    LESS        reduce using rule 56 (number)
    LESS_EQ     reduce using rule 56 (number)
    EQUAL       reduce using rule 56 (number)
    NOT_EQ      reduce using rule 56 (number)


State 306

   57 number: NUM_FLOAT •

    ')'         reduce using rule 57 (number)
    AND         reduce using rule 57 (number)
    OR          reduce using rule 57 (number)
    GREATER     reduce using rule 57 (number)
    GREATER_EQ  reduce using rule 57 (number)
    LESS        reduce using rule 57 (number)
    LESS_EQ     reduce using rule 57 (number)
    EQUAL       reduce using rule 57 (number)
    NOT_EQ      reduce using rule 57 (number)


State 307

   55 const: NIL_CNST •

    ')'         reduce using rule 55 (const)
    AND         reduce using rule 55 (const)
    OR          reduce using rule 55 (const)
    GREATER     reduce using rule 55 (const)
    GREATER_EQ  reduce using rule 55 (const)
    LESS        reduce using rule 55 (const)
    LESS_EQ     reduce using rule 55 (const)
    EQUAL       reduce using rule 55 (const)
    NOT_EQ      reduce using rule 55 (const)


State 308

   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   53 expression: ID •

    '('  shift, and go to state 399

    ')'         reduce using rule 53 (expression)
    AND         reduce using rule 53 (expression)
    OR          reduce using rule 53 (expression)
    GREATER     reduce using rule 53 (expression)
    GREATER_EQ  reduce using rule 53 (expression)
    LESS        reduce using rule 53 (expression)
    LESS_EQ     reduce using rule 53 (expression)
    EQUAL       reduce using rule 53 (expression)
    NOT_EQ      reduce using rule 53 (expression)


State 309

   75 arith_single: '+' • expression

    NUM_INT    shift, and go to state 305
    NUM_FLOAT  shift, and go to state 306
    NIL_CNST   shift, and go to state 307
    ID         shift, and go to state 308
    '+'        shift, and go to state 309
    '-'        shift, and go to state 310
    '%'        shift, and go to state 311
    '?'        shift, and go to state 312
    '!'        shift, and go to state 313

    func_calling      go to state 314
    expression        go to state 400
    const             go to state 316
    number            go to state 317
    single_operation  go to state 318
    arith_single      go to state 319
    lst_single        go to state 320


State 310

   76 arith_single: '-' • expression

    NUM_INT    shift, and go to state 305
    NUM_FLOAT  shift, and go to state 306
    NIL_CNST   shift, and go to state 307
    ID         shift, and go to state 308
    '+'        shift, and go to state 309
    '-'        shift, and go to state 310
    '%'        shift, and go to state 311
    '?'        shift, and go to state 312
    '!'        shift, and go to state 313

    func_calling      go to state 314
    expression        go to state 401
    const             go to state 316
    number            go to state 317
    single_operation  go to state 318
    arith_single      go to state 319
    lst_single        go to state 320


State 311

   77 lst_single: '%' • expression

    NUM_INT    shift, and go to state 305
    NUM_FLOAT  shift, and go to state 306
    NIL_CNST   shift, and go to state 307
    ID         shift, and go to state 308
    '+'        shift, and go to state 309
    '-'        shift, and go to state 310
    '%'        shift, and go to state 311
    '?'        shift, and go to state 312
    '!'        shift, and go to state 313

    func_calling      go to state 314
    expression        go to state 402
    const             go to state 316
    number            go to state 317
    single_operation  go to state 318
    arith_single      go to state 319
    lst_single        go to state 320


State 312

   78 lst_single: '?' • expression

    NUM_INT    shift, and go to state 305
    NUM_FLOAT  shift, and go to state 306
    NIL_CNST   shift, and go to state 307
    ID         shift, and go to state 308
    '+'        shift, and go to state 309
    '-'        shift, and go to state 310
    '%'        shift, and go to state 311
    '?'        shift, and go to state 312
    '!'        shift, and go to state 313

    func_calling      go to state 314
    expression        go to state 403
    const             go to state 316
    number            go to state 317
    single_operation  go to state 318
    arith_single      go to state 319
    lst_single        go to state 320


State 313

   69 single_operation: '!' • expression

    NUM_INT    shift, and go to state 305
    NUM_FLOAT  shift, and go to state 306
    NIL_CNST   shift, and go to state 307
    ID         shift, and go to state 308
    '+'        shift, and go to state 309
    '-'        shift, and go to state 310
    '%'        shift, and go to state 311
    '?'        shift, and go to state 312
    '!'        shift, and go to state 313

    func_calling      go to state 314
    expression        go to state 404
    const             go to state 316
    number            go to state 317
    single_operation  go to state 318
    arith_single      go to state 319
    lst_single        go to state 320


State 314

   50 expression: func_calling •

    ')'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)


State 315

   66 operation: operation logical_op expression •

    ')'         reduce using rule 66 (operation)
    AND         reduce using rule 66 (operation)
    OR          reduce using rule 66 (operation)
    GREATER     reduce using rule 66 (operation)
    GREATER_EQ  reduce using rule 66 (operation)
    LESS        reduce using rule 66 (operation)
    LESS_EQ     reduce using rule 66 (operation)
    EQUAL       reduce using rule 66 (operation)
    NOT_EQ      reduce using rule 66 (operation)


State 316

   52 expression: const •

    ')'         reduce using rule 52 (expression)
    AND         reduce using rule 52 (expression)
    OR          reduce using rule 52 (expression)
    GREATER     reduce using rule 52 (expression)
    GREATER_EQ  reduce using rule 52 (expression)
    LESS        reduce using rule 52 (expression)
    LESS_EQ     reduce using rule 52 (expression)
    EQUAL       reduce using rule 52 (expression)
    NOT_EQ      reduce using rule 52 (expression)


State 317

   54 const: number •

    ')'         reduce using rule 54 (const)
    AND         reduce using rule 54 (const)
    OR          reduce using rule 54 (const)
    GREATER     reduce using rule 54 (const)
    GREATER_EQ  reduce using rule 54 (const)
    LESS        reduce using rule 54 (const)
    LESS_EQ     reduce using rule 54 (const)
    EQUAL       reduce using rule 54 (const)
    NOT_EQ      reduce using rule 54 (const)


State 318

   51 expression: single_operation •

    ')'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)


State 319

   67 single_operation: arith_single •

    ')'         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)


State 320

   68 single_operation: lst_single •

    ')'         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)


State 321

   65 operation: operation relational_op expression •

    ')'         reduce using rule 65 (operation)
    AND         reduce using rule 65 (operation)
    OR          reduce using rule 65 (operation)
    GREATER     reduce using rule 65 (operation)
    GREATER_EQ  reduce using rule 65 (operation)
    LESS        reduce using rule 65 (operation)
    LESS_EQ     reduce using rule 65 (operation)
    EQUAL       reduce using rule 65 (operation)
    NOT_EQ      reduce using rule 65 (operation)


State 322

   56 number: NUM_INT •

    ')'         reduce using rule 56 (number)
    ','         reduce using rule 56 (number)
    AND         reduce using rule 56 (number)
    OR          reduce using rule 56 (number)
    GREATER     reduce using rule 56 (number)
    GREATER_EQ  reduce using rule 56 (number)
    LESS        reduce using rule 56 (number)
    LESS_EQ     reduce using rule 56 (number)
    EQUAL       reduce using rule 56 (number)
    NOT_EQ      reduce using rule 56 (number)


State 323

   57 number: NUM_FLOAT •

    ')'         reduce using rule 57 (number)
    ','         reduce using rule 57 (number)
    AND         reduce using rule 57 (number)
    OR          reduce using rule 57 (number)
    GREATER     reduce using rule 57 (number)
    GREATER_EQ  reduce using rule 57 (number)
    LESS        reduce using rule 57 (number)
    LESS_EQ     reduce using rule 57 (number)
    EQUAL       reduce using rule 57 (number)
    NOT_EQ      reduce using rule 57 (number)


State 324

   55 const: NIL_CNST •

    ')'         reduce using rule 55 (const)
    ','         reduce using rule 55 (const)
    AND         reduce using rule 55 (const)
    OR          reduce using rule 55 (const)
    GREATER     reduce using rule 55 (const)
    GREATER_EQ  reduce using rule 55 (const)
    LESS        reduce using rule 55 (const)
    LESS_EQ     reduce using rule 55 (const)
    EQUAL       reduce using rule 55 (const)
    NOT_EQ      reduce using rule 55 (const)


State 325

   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   53 expression: ID •

    '('  shift, and go to state 405

    ')'         reduce using rule 53 (expression)
    ','         reduce using rule 53 (expression)
    AND         reduce using rule 53 (expression)
    OR          reduce using rule 53 (expression)
    GREATER     reduce using rule 53 (expression)
    GREATER_EQ  reduce using rule 53 (expression)
    LESS        reduce using rule 53 (expression)
    LESS_EQ     reduce using rule 53 (expression)
    EQUAL       reduce using rule 53 (expression)
    NOT_EQ      reduce using rule 53 (expression)


State 326

   75 arith_single: '+' • expression

    NUM_INT    shift, and go to state 322
    NUM_FLOAT  shift, and go to state 323
    NIL_CNST   shift, and go to state 324
    ID         shift, and go to state 325
    '+'        shift, and go to state 326
    '-'        shift, and go to state 327
    '%'        shift, and go to state 328
    '?'        shift, and go to state 329
    '!'        shift, and go to state 330

    func_calling      go to state 331
    expression        go to state 406
    const             go to state 333
    number            go to state 334
    single_operation  go to state 335
    arith_single      go to state 336
    lst_single        go to state 337


State 327

   76 arith_single: '-' • expression

    NUM_INT    shift, and go to state 322
    NUM_FLOAT  shift, and go to state 323
    NIL_CNST   shift, and go to state 324
    ID         shift, and go to state 325
    '+'        shift, and go to state 326
    '-'        shift, and go to state 327
    '%'        shift, and go to state 328
    '?'        shift, and go to state 329
    '!'        shift, and go to state 330

    func_calling      go to state 331
    expression        go to state 407
    const             go to state 333
    number            go to state 334
    single_operation  go to state 335
    arith_single      go to state 336
    lst_single        go to state 337


State 328

   77 lst_single: '%' • expression

    NUM_INT    shift, and go to state 322
    NUM_FLOAT  shift, and go to state 323
    NIL_CNST   shift, and go to state 324
    ID         shift, and go to state 325
    '+'        shift, and go to state 326
    '-'        shift, and go to state 327
    '%'        shift, and go to state 328
    '?'        shift, and go to state 329
    '!'        shift, and go to state 330

    func_calling      go to state 331
    expression        go to state 408
    const             go to state 333
    number            go to state 334
    single_operation  go to state 335
    arith_single      go to state 336
    lst_single        go to state 337


State 329

   78 lst_single: '?' • expression

    NUM_INT    shift, and go to state 322
    NUM_FLOAT  shift, and go to state 323
    NIL_CNST   shift, and go to state 324
    ID         shift, and go to state 325
    '+'        shift, and go to state 326
    '-'        shift, and go to state 327
    '%'        shift, and go to state 328
    '?'        shift, and go to state 329
    '!'        shift, and go to state 330

    func_calling      go to state 331
    expression        go to state 409
    const             go to state 333
    number            go to state 334
    single_operation  go to state 335
    arith_single      go to state 336
    lst_single        go to state 337


State 330

   69 single_operation: '!' • expression

    NUM_INT    shift, and go to state 322
    NUM_FLOAT  shift, and go to state 323
    NIL_CNST   shift, and go to state 324
    ID         shift, and go to state 325
    '+'        shift, and go to state 326
    '-'        shift, and go to state 327
    '%'        shift, and go to state 328
    '?'        shift, and go to state 329
    '!'        shift, and go to state 330

    func_calling      go to state 331
    expression        go to state 410
    const             go to state 333
    number            go to state 334
    single_operation  go to state 335
    arith_single      go to state 336
    lst_single        go to state 337


State 331

   50 expression: func_calling •

    ')'         reduce using rule 50 (expression)
    ','         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)


State 332

   66 operation: operation logical_op expression •

    ')'         reduce using rule 66 (operation)
    ','         reduce using rule 66 (operation)
    AND         reduce using rule 66 (operation)
    OR          reduce using rule 66 (operation)
    GREATER     reduce using rule 66 (operation)
    GREATER_EQ  reduce using rule 66 (operation)
    LESS        reduce using rule 66 (operation)
    LESS_EQ     reduce using rule 66 (operation)
    EQUAL       reduce using rule 66 (operation)
    NOT_EQ      reduce using rule 66 (operation)


State 333

   52 expression: const •

    ')'         reduce using rule 52 (expression)
    ','         reduce using rule 52 (expression)
    AND         reduce using rule 52 (expression)
    OR          reduce using rule 52 (expression)
    GREATER     reduce using rule 52 (expression)
    GREATER_EQ  reduce using rule 52 (expression)
    LESS        reduce using rule 52 (expression)
    LESS_EQ     reduce using rule 52 (expression)
    EQUAL       reduce using rule 52 (expression)
    NOT_EQ      reduce using rule 52 (expression)


State 334

   54 const: number •

    ')'         reduce using rule 54 (const)
    ','         reduce using rule 54 (const)
    AND         reduce using rule 54 (const)
    OR          reduce using rule 54 (const)
    GREATER     reduce using rule 54 (const)
    GREATER_EQ  reduce using rule 54 (const)
    LESS        reduce using rule 54 (const)
    LESS_EQ     reduce using rule 54 (const)
    EQUAL       reduce using rule 54 (const)
    NOT_EQ      reduce using rule 54 (const)


State 335

   51 expression: single_operation •

    ')'         reduce using rule 51 (expression)
    ','         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)


State 336

   67 single_operation: arith_single •

    ')'         reduce using rule 67 (single_operation)
    ','         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)


State 337

   68 single_operation: lst_single •

    ')'         reduce using rule 68 (single_operation)
    ','         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)


State 338

   65 operation: operation relational_op expression •

    ')'         reduce using rule 65 (operation)
    ','         reduce using rule 65 (operation)
    AND         reduce using rule 65 (operation)
    OR          reduce using rule 65 (operation)
    GREATER     reduce using rule 65 (operation)
    GREATER_EQ  reduce using rule 65 (operation)
    LESS        reduce using rule 65 (operation)
    LESS_EQ     reduce using rule 65 (operation)
    EQUAL       reduce using rule 65 (operation)
    NOT_EQ      reduce using rule 65 (operation)


State 339

   36 return_stmt: RETURN_STM operation • ';'
   65 operation: operation • relational_op expression
   66          | operation • logical_op expression

    ';'         shift, and go to state 411
    AND         shift, and go to state 87
    OR          shift, and go to state 88
    GREATER     shift, and go to state 89
    GREATER_EQ  shift, and go to state 90
    LESS        shift, and go to state 91
    LESS_EQ     shift, and go to state 92
    EQUAL       shift, and go to state 93
    NOT_EQ      shift, and go to state 94

    logical_op     go to state 95
    relational_op  go to state 96


State 340

   34 conditional_stmt: IF_STMT '(' • operation ')' command
   35                 | IF_STMT '(' • operation ')' command ELSE_STMT command

    NUM_INT    shift, and go to state 155
    NUM_FLOAT  shift, and go to state 156
    NIL_CNST   shift, and go to state 157
    ID         shift, and go to state 158
    '+'        shift, and go to state 159
    '-'        shift, and go to state 160
    '%'        shift, and go to state 161
    '?'        shift, and go to state 162
    '!'        shift, and go to state 163

    func_calling      go to state 164
    expression        go to state 165
    const             go to state 166
    number            go to state 167
    operation         go to state 412
    single_operation  go to state 168
    arith_binary      go to state 169
    arith_single      go to state 170
    lst_single        go to state 171
    lst_binary        go to state 172


State 341

   37 iteration: FOR_STMT '(' • loop_condition ')' command

    ID  shift, and go to state 105

    loop_condition  go to state 413
    init_stmt       go to state 107


State 342

   42 output: OUTPUT_WRITE '(' • operation ')' ';'
   44       | OUTPUT_WRITE '(' • STRING ')' ';'

    NUM_INT    shift, and go to state 155
    NUM_FLOAT  shift, and go to state 156
    STRING     shift, and go to state 414
    NIL_CNST   shift, and go to state 157
    ID         shift, and go to state 158
    '+'        shift, and go to state 159
    '-'        shift, and go to state 160
    '%'        shift, and go to state 161
    '?'        shift, and go to state 162
    '!'        shift, and go to state 163

    func_calling      go to state 164
    expression        go to state 165
    const             go to state 166
    number            go to state 167
    operation         go to state 415
    single_operation  go to state 168
    arith_binary      go to state 169
    arith_single      go to state 170
    lst_single        go to state 171
    lst_binary        go to state 172


State 343

   43 output: OUTPUT_WRITELN '(' • operation ')' ';'
   45       | OUTPUT_WRITELN '(' • STRING ')' ';'

    NUM_INT    shift, and go to state 155
    NUM_FLOAT  shift, and go to state 156
    STRING     shift, and go to state 416
    NIL_CNST   shift, and go to state 157
    ID         shift, and go to state 158
    '+'        shift, and go to state 159
    '-'        shift, and go to state 160
    '%'        shift, and go to state 161
    '?'        shift, and go to state 162
    '!'        shift, and go to state 163

    func_calling      go to state 164
    expression        go to state 165
    const             go to state 166
    number            go to state 167
    operation         go to state 417
    single_operation  go to state 168
    arith_binary      go to state 169
    arith_single      go to state 170
    lst_single        go to state 171
    lst_binary        go to state 172


State 344

   46 input: INPUT_READ '(' • expression ')' ';'

    NUM_INT    shift, and go to state 173
    NUM_FLOAT  shift, and go to state 174
    NIL_CNST   shift, and go to state 175
    ID         shift, and go to state 176
    '+'        shift, and go to state 177
    '-'        shift, and go to state 178
    '%'        shift, and go to state 179
    '?'        shift, and go to state 180
    '!'        shift, and go to state 181

    func_calling      go to state 182
    expression        go to state 418
    const             go to state 183
    number            go to state 184
    single_operation  go to state 185
    arith_single      go to state 186
    lst_single        go to state 187


State 345

   10 var_declaration: unq_declaration ';' •

    error           reduce using rule 10 (var_declaration)
    NUM_INT         reduce using rule 10 (var_declaration)
    NUM_FLOAT       reduce using rule 10 (var_declaration)
    NIL_CNST        reduce using rule 10 (var_declaration)
    ID              reduce using rule 10 (var_declaration)
    RETURN_STM      reduce using rule 10 (var_declaration)
    T_INT           reduce using rule 10 (var_declaration)
    T_FLOAT         reduce using rule 10 (var_declaration)
    IF_STMT         reduce using rule 10 (var_declaration)
    ELSE_STMT       reduce using rule 10 (var_declaration)
    FOR_STMT        reduce using rule 10 (var_declaration)
    OUTPUT_WRITE    reduce using rule 10 (var_declaration)
    OUTPUT_WRITELN  reduce using rule 10 (var_declaration)
    INPUT_READ      reduce using rule 10 (var_declaration)
    '{'             reduce using rule 10 (var_declaration)
    '}'             reduce using rule 10 (var_declaration)
    '+'             reduce using rule 10 (var_declaration)
    '-'             reduce using rule 10 (var_declaration)
    '%'             reduce using rule 10 (var_declaration)
    '?'             reduce using rule 10 (var_declaration)
    '!'             reduce using rule 10 (var_declaration)


State 346

   30 command: $@2 '{' • block_commands '}'

    error           shift, and go to state 27
    NUM_INT         shift, and go to state 28
    NUM_FLOAT       shift, and go to state 29
    NIL_CNST        shift, and go to state 30
    ID              shift, and go to state 31
    RETURN_STM      shift, and go to state 32
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 33
    FOR_STMT        shift, and go to state 34
    OUTPUT_WRITE    shift, and go to state 35
    OUTPUT_WRITELN  shift, and go to state 36
    INPUT_READ      shift, and go to state 37
    '+'             shift, and go to state 38
    '-'             shift, and go to state 39
    '%'             shift, and go to state 40
    '?'             shift, and go to state 41
    '!'             shift, and go to state 42

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 43
    unq_declaration   go to state 44
    block_commands    go to state 419
    command           go to state 46
    $@2               go to state 47
    init_variable     go to state 48
    conditional_stmt  go to state 49
    return_stmt       go to state 50
    iteration         go to state 51
    init_stmt         go to state 52
    output            go to state 53
    input             go to state 54
    func_calling      go to state 55
    expression        go to state 56
    const             go to state 57
    number            go to state 58
    type              go to state 153
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 59
    single_operation  go to state 60
    arith_binary      go to state 61
    arith_single      go to state 62
    lst_single        go to state 63
    lst_binary        go to state 64


State 347

   33 init_variable: init_stmt ';' •

    error           reduce using rule 33 (init_variable)
    NUM_INT         reduce using rule 33 (init_variable)
    NUM_FLOAT       reduce using rule 33 (init_variable)
    NIL_CNST        reduce using rule 33 (init_variable)
    ID              reduce using rule 33 (init_variable)
    RETURN_STM      reduce using rule 33 (init_variable)
    T_INT           reduce using rule 33 (init_variable)
    T_FLOAT         reduce using rule 33 (init_variable)
    IF_STMT         reduce using rule 33 (init_variable)
    ELSE_STMT       reduce using rule 33 (init_variable)
    FOR_STMT        reduce using rule 33 (init_variable)
    OUTPUT_WRITE    reduce using rule 33 (init_variable)
    OUTPUT_WRITELN  reduce using rule 33 (init_variable)
    INPUT_READ      reduce using rule 33 (init_variable)
    '{'             reduce using rule 33 (init_variable)
    '}'             reduce using rule 33 (init_variable)
    '+'             reduce using rule 33 (init_variable)
    '-'             reduce using rule 33 (init_variable)
    '%'             reduce using rule 33 (init_variable)
    '?'             reduce using rule 33 (init_variable)
    '!'             reduce using rule 33 (init_variable)


State 348

   31 command: operation ';' •

    error           reduce using rule 31 (command)
    NUM_INT         reduce using rule 31 (command)
    NUM_FLOAT       reduce using rule 31 (command)
    NIL_CNST        reduce using rule 31 (command)
    ID              reduce using rule 31 (command)
    RETURN_STM      reduce using rule 31 (command)
    T_INT           reduce using rule 31 (command)
    T_FLOAT         reduce using rule 31 (command)
    IF_STMT         reduce using rule 31 (command)
    ELSE_STMT       reduce using rule 31 (command)
    FOR_STMT        reduce using rule 31 (command)
    OUTPUT_WRITE    reduce using rule 31 (command)
    OUTPUT_WRITELN  reduce using rule 31 (command)
    INPUT_READ      reduce using rule 31 (command)
    '{'             reduce using rule 31 (command)
    '}'             reduce using rule 31 (command)
    '+'             reduce using rule 31 (command)
    '-'             reduce using rule 31 (command)
    '%'             reduce using rule 31 (command)
    '?'             reduce using rule 31 (command)
    '!'             reduce using rule 31 (command)


State 349

   39 init_stmt: ID '=' • operation

    NUM_INT    shift, and go to state 155
    NUM_FLOAT  shift, and go to state 156
    NIL_CNST   shift, and go to state 157
    ID         shift, and go to state 158
    '+'        shift, and go to state 159
    '-'        shift, and go to state 160
    '%'        shift, and go to state 161
    '?'        shift, and go to state 162
    '!'        shift, and go to state 163

    func_calling      go to state 164
    expression        go to state 165
    const             go to state 166
    number            go to state 167
    operation         go to state 420
    single_operation  go to state 168
    arith_binary      go to state 169
    arith_single      go to state 170
    lst_single        go to state 171
    lst_binary        go to state 172


State 350

   49 func_calling: ID '(' $@3 • calling_parameters $@4 ')'

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 421
    lst_calling_parameters  go to state 124
    func_calling            go to state 227
    expression              go to state 228
    const                   go to state 229
    number                  go to state 230
    operation               go to state 125
    single_operation        go to state 231
    arith_binary            go to state 232
    arith_single            go to state 233
    lst_single              go to state 234
    lst_binary              go to state 235


State 351

   79 lst_binary: expression FILTER expression •

    ')'         reduce using rule 79 (lst_binary)
    AND         reduce using rule 79 (lst_binary)
    OR          reduce using rule 79 (lst_binary)
    GREATER     reduce using rule 79 (lst_binary)
    GREATER_EQ  reduce using rule 79 (lst_binary)
    LESS        reduce using rule 79 (lst_binary)
    LESS_EQ     reduce using rule 79 (lst_binary)
    EQUAL       reduce using rule 79 (lst_binary)
    NOT_EQ      reduce using rule 79 (lst_binary)


State 352

   80 lst_binary: expression MAP expression •

    ')'         reduce using rule 80 (lst_binary)
    AND         reduce using rule 80 (lst_binary)
    OR          reduce using rule 80 (lst_binary)
    GREATER     reduce using rule 80 (lst_binary)
    GREATER_EQ  reduce using rule 80 (lst_binary)
    LESS        reduce using rule 80 (lst_binary)
    LESS_EQ     reduce using rule 80 (lst_binary)
    EQUAL       reduce using rule 80 (lst_binary)
    NOT_EQ      reduce using rule 80 (lst_binary)


State 353

   81 lst_binary: expression ':' expression •

    ')'         reduce using rule 81 (lst_binary)
    AND         reduce using rule 81 (lst_binary)
    OR          reduce using rule 81 (lst_binary)
    GREATER     reduce using rule 81 (lst_binary)
    GREATER_EQ  reduce using rule 81 (lst_binary)
    LESS        reduce using rule 81 (lst_binary)
    LESS_EQ     reduce using rule 81 (lst_binary)
    EQUAL       reduce using rule 81 (lst_binary)
    NOT_EQ      reduce using rule 81 (lst_binary)


State 354

   56 number: NUM_INT •

    ')'         reduce using rule 56 (number)
    AND         reduce using rule 56 (number)
    OR          reduce using rule 56 (number)
    GREATER     reduce using rule 56 (number)
    GREATER_EQ  reduce using rule 56 (number)
    LESS        reduce using rule 56 (number)
    LESS_EQ     reduce using rule 56 (number)
    EQUAL       reduce using rule 56 (number)
    NOT_EQ      reduce using rule 56 (number)
    '+'         reduce using rule 56 (number)
    '-'         reduce using rule 56 (number)
    '*'         reduce using rule 56 (number)
    '/'         reduce using rule 56 (number)


State 355

   57 number: NUM_FLOAT •

    ')'         reduce using rule 57 (number)
    AND         reduce using rule 57 (number)
    OR          reduce using rule 57 (number)
    GREATER     reduce using rule 57 (number)
    GREATER_EQ  reduce using rule 57 (number)
    LESS        reduce using rule 57 (number)
    LESS_EQ     reduce using rule 57 (number)
    EQUAL       reduce using rule 57 (number)
    NOT_EQ      reduce using rule 57 (number)
    '+'         reduce using rule 57 (number)
    '-'         reduce using rule 57 (number)
    '*'         reduce using rule 57 (number)
    '/'         reduce using rule 57 (number)


State 356

   55 const: NIL_CNST •

    ')'         reduce using rule 55 (const)
    AND         reduce using rule 55 (const)
    OR          reduce using rule 55 (const)
    GREATER     reduce using rule 55 (const)
    GREATER_EQ  reduce using rule 55 (const)
    LESS        reduce using rule 55 (const)
    LESS_EQ     reduce using rule 55 (const)
    EQUAL       reduce using rule 55 (const)
    NOT_EQ      reduce using rule 55 (const)
    '+'         reduce using rule 55 (const)
    '-'         reduce using rule 55 (const)
    '*'         reduce using rule 55 (const)
    '/'         reduce using rule 55 (const)


State 357

   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   53 expression: ID •

    '('  shift, and go to state 422

    ')'         reduce using rule 53 (expression)
    AND         reduce using rule 53 (expression)
    OR          reduce using rule 53 (expression)
    GREATER     reduce using rule 53 (expression)
    GREATER_EQ  reduce using rule 53 (expression)
    LESS        reduce using rule 53 (expression)
    LESS_EQ     reduce using rule 53 (expression)
    EQUAL       reduce using rule 53 (expression)
    NOT_EQ      reduce using rule 53 (expression)
    '+'         reduce using rule 53 (expression)
    '-'         reduce using rule 53 (expression)
    '*'         reduce using rule 53 (expression)
    '/'         reduce using rule 53 (expression)


State 358

   75 arith_single: '+' • expression

    NUM_INT    shift, and go to state 354
    NUM_FLOAT  shift, and go to state 355
    NIL_CNST   shift, and go to state 356
    ID         shift, and go to state 357
    '+'        shift, and go to state 358
    '-'        shift, and go to state 359
    '%'        shift, and go to state 360
    '?'        shift, and go to state 361
    '!'        shift, and go to state 362

    func_calling      go to state 363
    expression        go to state 423
    const             go to state 365
    number            go to state 366
    single_operation  go to state 367
    arith_single      go to state 368
    lst_single        go to state 369


State 359

   76 arith_single: '-' • expression

    NUM_INT    shift, and go to state 354
    NUM_FLOAT  shift, and go to state 355
    NIL_CNST   shift, and go to state 356
    ID         shift, and go to state 357
    '+'        shift, and go to state 358
    '-'        shift, and go to state 359
    '%'        shift, and go to state 360
    '?'        shift, and go to state 361
    '!'        shift, and go to state 362

    func_calling      go to state 363
    expression        go to state 424
    const             go to state 365
    number            go to state 366
    single_operation  go to state 367
    arith_single      go to state 368
    lst_single        go to state 369


State 360

   77 lst_single: '%' • expression

    NUM_INT    shift, and go to state 354
    NUM_FLOAT  shift, and go to state 355
    NIL_CNST   shift, and go to state 356
    ID         shift, and go to state 357
    '+'        shift, and go to state 358
    '-'        shift, and go to state 359
    '%'        shift, and go to state 360
    '?'        shift, and go to state 361
    '!'        shift, and go to state 362

    func_calling      go to state 363
    expression        go to state 425
    const             go to state 365
    number            go to state 366
    single_operation  go to state 367
    arith_single      go to state 368
    lst_single        go to state 369


State 361

   78 lst_single: '?' • expression

    NUM_INT    shift, and go to state 354
    NUM_FLOAT  shift, and go to state 355
    NIL_CNST   shift, and go to state 356
    ID         shift, and go to state 357
    '+'        shift, and go to state 358
    '-'        shift, and go to state 359
    '%'        shift, and go to state 360
    '?'        shift, and go to state 361
    '!'        shift, and go to state 362

    func_calling      go to state 363
    expression        go to state 426
    const             go to state 365
    number            go to state 366
    single_operation  go to state 367
    arith_single      go to state 368
    lst_single        go to state 369


State 362

   69 single_operation: '!' • expression

    NUM_INT    shift, and go to state 354
    NUM_FLOAT  shift, and go to state 355
    NIL_CNST   shift, and go to state 356
    ID         shift, and go to state 357
    '+'        shift, and go to state 358
    '-'        shift, and go to state 359
    '%'        shift, and go to state 360
    '?'        shift, and go to state 361
    '!'        shift, and go to state 362

    func_calling      go to state 363
    expression        go to state 427
    const             go to state 365
    number            go to state 366
    single_operation  go to state 367
    arith_single      go to state 368
    lst_single        go to state 369


State 363

   50 expression: func_calling •

    ')'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)


State 364

   70 arith_binary: arith_binary '+' expression •

    ')'         reduce using rule 70 (arith_binary)
    AND         reduce using rule 70 (arith_binary)
    OR          reduce using rule 70 (arith_binary)
    GREATER     reduce using rule 70 (arith_binary)
    GREATER_EQ  reduce using rule 70 (arith_binary)
    LESS        reduce using rule 70 (arith_binary)
    LESS_EQ     reduce using rule 70 (arith_binary)
    EQUAL       reduce using rule 70 (arith_binary)
    NOT_EQ      reduce using rule 70 (arith_binary)
    '+'         reduce using rule 70 (arith_binary)
    '-'         reduce using rule 70 (arith_binary)
    '*'         reduce using rule 70 (arith_binary)
    '/'         reduce using rule 70 (arith_binary)


State 365

   52 expression: const •

    ')'         reduce using rule 52 (expression)
    AND         reduce using rule 52 (expression)
    OR          reduce using rule 52 (expression)
    GREATER     reduce using rule 52 (expression)
    GREATER_EQ  reduce using rule 52 (expression)
    LESS        reduce using rule 52 (expression)
    LESS_EQ     reduce using rule 52 (expression)
    EQUAL       reduce using rule 52 (expression)
    NOT_EQ      reduce using rule 52 (expression)
    '+'         reduce using rule 52 (expression)
    '-'         reduce using rule 52 (expression)
    '*'         reduce using rule 52 (expression)
    '/'         reduce using rule 52 (expression)


State 366

   54 const: number •

    ')'         reduce using rule 54 (const)
    AND         reduce using rule 54 (const)
    OR          reduce using rule 54 (const)
    GREATER     reduce using rule 54 (const)
    GREATER_EQ  reduce using rule 54 (const)
    LESS        reduce using rule 54 (const)
    LESS_EQ     reduce using rule 54 (const)
    EQUAL       reduce using rule 54 (const)
    NOT_EQ      reduce using rule 54 (const)
    '+'         reduce using rule 54 (const)
    '-'         reduce using rule 54 (const)
    '*'         reduce using rule 54 (const)
    '/'         reduce using rule 54 (const)


State 367

   51 expression: single_operation •

    ')'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)


State 368

   67 single_operation: arith_single •

    ')'         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)
    '+'         reduce using rule 67 (single_operation)
    '-'         reduce using rule 67 (single_operation)
    '*'         reduce using rule 67 (single_operation)
    '/'         reduce using rule 67 (single_operation)


State 369

   68 single_operation: lst_single •

    ')'         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)
    '+'         reduce using rule 68 (single_operation)
    '-'         reduce using rule 68 (single_operation)
    '*'         reduce using rule 68 (single_operation)
    '/'         reduce using rule 68 (single_operation)


State 370

   71 arith_binary: arith_binary '-' expression •

    ')'         reduce using rule 71 (arith_binary)
    AND         reduce using rule 71 (arith_binary)
    OR          reduce using rule 71 (arith_binary)
    GREATER     reduce using rule 71 (arith_binary)
    GREATER_EQ  reduce using rule 71 (arith_binary)
    LESS        reduce using rule 71 (arith_binary)
    LESS_EQ     reduce using rule 71 (arith_binary)
    EQUAL       reduce using rule 71 (arith_binary)
    NOT_EQ      reduce using rule 71 (arith_binary)
    '+'         reduce using rule 71 (arith_binary)
    '-'         reduce using rule 71 (arith_binary)
    '*'         reduce using rule 71 (arith_binary)
    '/'         reduce using rule 71 (arith_binary)


State 371

   72 arith_binary: arith_binary '*' expression •

    ')'         reduce using rule 72 (arith_binary)
    AND         reduce using rule 72 (arith_binary)
    OR          reduce using rule 72 (arith_binary)
    GREATER     reduce using rule 72 (arith_binary)
    GREATER_EQ  reduce using rule 72 (arith_binary)
    LESS        reduce using rule 72 (arith_binary)
    LESS_EQ     reduce using rule 72 (arith_binary)
    EQUAL       reduce using rule 72 (arith_binary)
    NOT_EQ      reduce using rule 72 (arith_binary)
    '+'         reduce using rule 72 (arith_binary)
    '-'         reduce using rule 72 (arith_binary)
    '*'         reduce using rule 72 (arith_binary)
    '/'         reduce using rule 72 (arith_binary)


State 372

   73 arith_binary: arith_binary '/' expression •

    ')'         reduce using rule 73 (arith_binary)
    AND         reduce using rule 73 (arith_binary)
    OR          reduce using rule 73 (arith_binary)
    GREATER     reduce using rule 73 (arith_binary)
    GREATER_EQ  reduce using rule 73 (arith_binary)
    LESS        reduce using rule 73 (arith_binary)
    LESS_EQ     reduce using rule 73 (arith_binary)
    EQUAL       reduce using rule 73 (arith_binary)
    NOT_EQ      reduce using rule 73 (arith_binary)
    '+'         reduce using rule 73 (arith_binary)
    '-'         reduce using rule 73 (arith_binary)
    '*'         reduce using rule 73 (arith_binary)
    '/'         reduce using rule 73 (arith_binary)


State 373

   49 func_calling: ID '(' $@3 • calling_parameters $@4 ')'

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 428
    lst_calling_parameters  go to state 124
    func_calling            go to state 227
    expression              go to state 228
    const                   go to state 229
    number                  go to state 230
    operation               go to state 125
    single_operation        go to state 231
    arith_binary            go to state 232
    arith_single            go to state 233
    lst_single              go to state 234
    lst_binary              go to state 235


State 374

   49 func_calling: ID '(' $@3 • calling_parameters $@4 ')'

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 429
    lst_calling_parameters  go to state 124
    func_calling            go to state 227
    expression              go to state 228
    const                   go to state 229
    number                  go to state 230
    operation               go to state 125
    single_operation        go to state 231
    arith_binary            go to state 232
    arith_single            go to state 233
    lst_single              go to state 234
    lst_binary              go to state 235


State 375

   49 func_calling: ID '(' $@3 • calling_parameters $@4 ')'

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 430
    lst_calling_parameters  go to state 124
    func_calling            go to state 227
    expression              go to state 228
    const                   go to state 229
    number                  go to state 230
    operation               go to state 125
    single_operation        go to state 231
    arith_binary            go to state 232
    arith_single            go to state 233
    lst_single              go to state 234
    lst_binary              go to state 235


State 376

   49 func_calling: ID '(' $@3 • calling_parameters $@4 ')'

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 431
    lst_calling_parameters  go to state 124
    func_calling            go to state 227
    expression              go to state 228
    const                   go to state 229
    number                  go to state 230
    operation               go to state 125
    single_operation        go to state 231
    arith_binary            go to state 232
    arith_single            go to state 233
    lst_single              go to state 234
    lst_binary              go to state 235


State 377

   79 lst_binary: expression FILTER expression •

    ')'         reduce using rule 79 (lst_binary)
    ','         reduce using rule 79 (lst_binary)
    AND         reduce using rule 79 (lst_binary)
    OR          reduce using rule 79 (lst_binary)
    GREATER     reduce using rule 79 (lst_binary)
    GREATER_EQ  reduce using rule 79 (lst_binary)
    LESS        reduce using rule 79 (lst_binary)
    LESS_EQ     reduce using rule 79 (lst_binary)
    EQUAL       reduce using rule 79 (lst_binary)
    NOT_EQ      reduce using rule 79 (lst_binary)


State 378

   80 lst_binary: expression MAP expression •

    ')'         reduce using rule 80 (lst_binary)
    ','         reduce using rule 80 (lst_binary)
    AND         reduce using rule 80 (lst_binary)
    OR          reduce using rule 80 (lst_binary)
    GREATER     reduce using rule 80 (lst_binary)
    GREATER_EQ  reduce using rule 80 (lst_binary)
    LESS        reduce using rule 80 (lst_binary)
    LESS_EQ     reduce using rule 80 (lst_binary)
    EQUAL       reduce using rule 80 (lst_binary)
    NOT_EQ      reduce using rule 80 (lst_binary)


State 379

   81 lst_binary: expression ':' expression •

    ')'         reduce using rule 81 (lst_binary)
    ','         reduce using rule 81 (lst_binary)
    AND         reduce using rule 81 (lst_binary)
    OR          reduce using rule 81 (lst_binary)
    GREATER     reduce using rule 81 (lst_binary)
    GREATER_EQ  reduce using rule 81 (lst_binary)
    LESS        reduce using rule 81 (lst_binary)
    LESS_EQ     reduce using rule 81 (lst_binary)
    EQUAL       reduce using rule 81 (lst_binary)
    NOT_EQ      reduce using rule 81 (lst_binary)


State 380

   56 number: NUM_INT •

    ')'         reduce using rule 56 (number)
    ','         reduce using rule 56 (number)
    AND         reduce using rule 56 (number)
    OR          reduce using rule 56 (number)
    GREATER     reduce using rule 56 (number)
    GREATER_EQ  reduce using rule 56 (number)
    LESS        reduce using rule 56 (number)
    LESS_EQ     reduce using rule 56 (number)
    EQUAL       reduce using rule 56 (number)
    NOT_EQ      reduce using rule 56 (number)
    '+'         reduce using rule 56 (number)
    '-'         reduce using rule 56 (number)
    '*'         reduce using rule 56 (number)
    '/'         reduce using rule 56 (number)


State 381

   57 number: NUM_FLOAT •

    ')'         reduce using rule 57 (number)
    ','         reduce using rule 57 (number)
    AND         reduce using rule 57 (number)
    OR          reduce using rule 57 (number)
    GREATER     reduce using rule 57 (number)
    GREATER_EQ  reduce using rule 57 (number)
    LESS        reduce using rule 57 (number)
    LESS_EQ     reduce using rule 57 (number)
    EQUAL       reduce using rule 57 (number)
    NOT_EQ      reduce using rule 57 (number)
    '+'         reduce using rule 57 (number)
    '-'         reduce using rule 57 (number)
    '*'         reduce using rule 57 (number)
    '/'         reduce using rule 57 (number)


State 382

   55 const: NIL_CNST •

    ')'         reduce using rule 55 (const)
    ','         reduce using rule 55 (const)
    AND         reduce using rule 55 (const)
    OR          reduce using rule 55 (const)
    GREATER     reduce using rule 55 (const)
    GREATER_EQ  reduce using rule 55 (const)
    LESS        reduce using rule 55 (const)
    LESS_EQ     reduce using rule 55 (const)
    EQUAL       reduce using rule 55 (const)
    NOT_EQ      reduce using rule 55 (const)
    '+'         reduce using rule 55 (const)
    '-'         reduce using rule 55 (const)
    '*'         reduce using rule 55 (const)
    '/'         reduce using rule 55 (const)


State 383

   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   53 expression: ID •

    '('  shift, and go to state 432

    ')'         reduce using rule 53 (expression)
    ','         reduce using rule 53 (expression)
    AND         reduce using rule 53 (expression)
    OR          reduce using rule 53 (expression)
    GREATER     reduce using rule 53 (expression)
    GREATER_EQ  reduce using rule 53 (expression)
    LESS        reduce using rule 53 (expression)
    LESS_EQ     reduce using rule 53 (expression)
    EQUAL       reduce using rule 53 (expression)
    NOT_EQ      reduce using rule 53 (expression)
    '+'         reduce using rule 53 (expression)
    '-'         reduce using rule 53 (expression)
    '*'         reduce using rule 53 (expression)
    '/'         reduce using rule 53 (expression)


State 384

   75 arith_single: '+' • expression

    NUM_INT    shift, and go to state 380
    NUM_FLOAT  shift, and go to state 381
    NIL_CNST   shift, and go to state 382
    ID         shift, and go to state 383
    '+'        shift, and go to state 384
    '-'        shift, and go to state 385
    '%'        shift, and go to state 386
    '?'        shift, and go to state 387
    '!'        shift, and go to state 388

    func_calling      go to state 389
    expression        go to state 433
    const             go to state 391
    number            go to state 392
    single_operation  go to state 393
    arith_single      go to state 394
    lst_single        go to state 395


State 385

   76 arith_single: '-' • expression

    NUM_INT    shift, and go to state 380
    NUM_FLOAT  shift, and go to state 381
    NIL_CNST   shift, and go to state 382
    ID         shift, and go to state 383
    '+'        shift, and go to state 384
    '-'        shift, and go to state 385
    '%'        shift, and go to state 386
    '?'        shift, and go to state 387
    '!'        shift, and go to state 388

    func_calling      go to state 389
    expression        go to state 434
    const             go to state 391
    number            go to state 392
    single_operation  go to state 393
    arith_single      go to state 394
    lst_single        go to state 395


State 386

   77 lst_single: '%' • expression

    NUM_INT    shift, and go to state 380
    NUM_FLOAT  shift, and go to state 381
    NIL_CNST   shift, and go to state 382
    ID         shift, and go to state 383
    '+'        shift, and go to state 384
    '-'        shift, and go to state 385
    '%'        shift, and go to state 386
    '?'        shift, and go to state 387
    '!'        shift, and go to state 388

    func_calling      go to state 389
    expression        go to state 435
    const             go to state 391
    number            go to state 392
    single_operation  go to state 393
    arith_single      go to state 394
    lst_single        go to state 395


State 387

   78 lst_single: '?' • expression

    NUM_INT    shift, and go to state 380
    NUM_FLOAT  shift, and go to state 381
    NIL_CNST   shift, and go to state 382
    ID         shift, and go to state 383
    '+'        shift, and go to state 384
    '-'        shift, and go to state 385
    '%'        shift, and go to state 386
    '?'        shift, and go to state 387
    '!'        shift, and go to state 388

    func_calling      go to state 389
    expression        go to state 436
    const             go to state 391
    number            go to state 392
    single_operation  go to state 393
    arith_single      go to state 394
    lst_single        go to state 395


State 388

   69 single_operation: '!' • expression

    NUM_INT    shift, and go to state 380
    NUM_FLOAT  shift, and go to state 381
    NIL_CNST   shift, and go to state 382
    ID         shift, and go to state 383
    '+'        shift, and go to state 384
    '-'        shift, and go to state 385
    '%'        shift, and go to state 386
    '?'        shift, and go to state 387
    '!'        shift, and go to state 388

    func_calling      go to state 389
    expression        go to state 437
    const             go to state 391
    number            go to state 392
    single_operation  go to state 393
    arith_single      go to state 394
    lst_single        go to state 395


State 389

   50 expression: func_calling •

    ')'         reduce using rule 50 (expression)
    ','         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)


State 390

   70 arith_binary: arith_binary '+' expression •

    ')'         reduce using rule 70 (arith_binary)
    ','         reduce using rule 70 (arith_binary)
    AND         reduce using rule 70 (arith_binary)
    OR          reduce using rule 70 (arith_binary)
    GREATER     reduce using rule 70 (arith_binary)
    GREATER_EQ  reduce using rule 70 (arith_binary)
    LESS        reduce using rule 70 (arith_binary)
    LESS_EQ     reduce using rule 70 (arith_binary)
    EQUAL       reduce using rule 70 (arith_binary)
    NOT_EQ      reduce using rule 70 (arith_binary)
    '+'         reduce using rule 70 (arith_binary)
    '-'         reduce using rule 70 (arith_binary)
    '*'         reduce using rule 70 (arith_binary)
    '/'         reduce using rule 70 (arith_binary)


State 391

   52 expression: const •

    ')'         reduce using rule 52 (expression)
    ','         reduce using rule 52 (expression)
    AND         reduce using rule 52 (expression)
    OR          reduce using rule 52 (expression)
    GREATER     reduce using rule 52 (expression)
    GREATER_EQ  reduce using rule 52 (expression)
    LESS        reduce using rule 52 (expression)
    LESS_EQ     reduce using rule 52 (expression)
    EQUAL       reduce using rule 52 (expression)
    NOT_EQ      reduce using rule 52 (expression)
    '+'         reduce using rule 52 (expression)
    '-'         reduce using rule 52 (expression)
    '*'         reduce using rule 52 (expression)
    '/'         reduce using rule 52 (expression)


State 392

   54 const: number •

    ')'         reduce using rule 54 (const)
    ','         reduce using rule 54 (const)
    AND         reduce using rule 54 (const)
    OR          reduce using rule 54 (const)
    GREATER     reduce using rule 54 (const)
    GREATER_EQ  reduce using rule 54 (const)
    LESS        reduce using rule 54 (const)
    LESS_EQ     reduce using rule 54 (const)
    EQUAL       reduce using rule 54 (const)
    NOT_EQ      reduce using rule 54 (const)
    '+'         reduce using rule 54 (const)
    '-'         reduce using rule 54 (const)
    '*'         reduce using rule 54 (const)
    '/'         reduce using rule 54 (const)


State 393

   51 expression: single_operation •

    ')'         reduce using rule 51 (expression)
    ','         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)


State 394

   67 single_operation: arith_single •

    ')'         reduce using rule 67 (single_operation)
    ','         reduce using rule 67 (single_operation)
    AND         reduce using rule 67 (single_operation)
    OR          reduce using rule 67 (single_operation)
    GREATER     reduce using rule 67 (single_operation)
    GREATER_EQ  reduce using rule 67 (single_operation)
    LESS        reduce using rule 67 (single_operation)
    LESS_EQ     reduce using rule 67 (single_operation)
    EQUAL       reduce using rule 67 (single_operation)
    NOT_EQ      reduce using rule 67 (single_operation)
    '+'         reduce using rule 67 (single_operation)
    '-'         reduce using rule 67 (single_operation)
    '*'         reduce using rule 67 (single_operation)
    '/'         reduce using rule 67 (single_operation)


State 395

   68 single_operation: lst_single •

    ')'         reduce using rule 68 (single_operation)
    ','         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)
    '+'         reduce using rule 68 (single_operation)
    '-'         reduce using rule 68 (single_operation)
    '*'         reduce using rule 68 (single_operation)
    '/'         reduce using rule 68 (single_operation)


State 396

   71 arith_binary: arith_binary '-' expression •

    ')'         reduce using rule 71 (arith_binary)
    ','         reduce using rule 71 (arith_binary)
    AND         reduce using rule 71 (arith_binary)
    OR          reduce using rule 71 (arith_binary)
    GREATER     reduce using rule 71 (arith_binary)
    GREATER_EQ  reduce using rule 71 (arith_binary)
    LESS        reduce using rule 71 (arith_binary)
    LESS_EQ     reduce using rule 71 (arith_binary)
    EQUAL       reduce using rule 71 (arith_binary)
    NOT_EQ      reduce using rule 71 (arith_binary)
    '+'         reduce using rule 71 (arith_binary)
    '-'         reduce using rule 71 (arith_binary)
    '*'         reduce using rule 71 (arith_binary)
    '/'         reduce using rule 71 (arith_binary)


State 397

   72 arith_binary: arith_binary '*' expression •

    ')'         reduce using rule 72 (arith_binary)
    ','         reduce using rule 72 (arith_binary)
    AND         reduce using rule 72 (arith_binary)
    OR          reduce using rule 72 (arith_binary)
    GREATER     reduce using rule 72 (arith_binary)
    GREATER_EQ  reduce using rule 72 (arith_binary)
    LESS        reduce using rule 72 (arith_binary)
    LESS_EQ     reduce using rule 72 (arith_binary)
    EQUAL       reduce using rule 72 (arith_binary)
    NOT_EQ      reduce using rule 72 (arith_binary)
    '+'         reduce using rule 72 (arith_binary)
    '-'         reduce using rule 72 (arith_binary)
    '*'         reduce using rule 72 (arith_binary)
    '/'         reduce using rule 72 (arith_binary)


State 398

   73 arith_binary: arith_binary '/' expression •

    ')'         reduce using rule 73 (arith_binary)
    ','         reduce using rule 73 (arith_binary)
    AND         reduce using rule 73 (arith_binary)
    OR          reduce using rule 73 (arith_binary)
    GREATER     reduce using rule 73 (arith_binary)
    GREATER_EQ  reduce using rule 73 (arith_binary)
    LESS        reduce using rule 73 (arith_binary)
    LESS_EQ     reduce using rule 73 (arith_binary)
    EQUAL       reduce using rule 73 (arith_binary)
    NOT_EQ      reduce using rule 73 (arith_binary)
    '+'         reduce using rule 73 (arith_binary)
    '-'         reduce using rule 73 (arith_binary)
    '*'         reduce using rule 73 (arith_binary)
    '/'         reduce using rule 73 (arith_binary)


State 399

   49 func_calling: ID '(' • $@3 calling_parameters $@4 ')'

    NUM_INT    reduce using rule 47 ($@3)
    NUM_FLOAT  reduce using rule 47 ($@3)
    NIL_CNST   reduce using rule 47 ($@3)
    ID         reduce using rule 47 ($@3)
    ')'        reduce using rule 47 ($@3)
    '+'        reduce using rule 47 ($@3)
    '-'        reduce using rule 47 ($@3)
    '%'        reduce using rule 47 ($@3)
    '?'        reduce using rule 47 ($@3)
    '!'        reduce using rule 47 ($@3)

    $@3  go to state 438


State 400

   75 arith_single: '+' expression •

    ')'         reduce using rule 75 (arith_single)
    AND         reduce using rule 75 (arith_single)
    OR          reduce using rule 75 (arith_single)
    GREATER     reduce using rule 75 (arith_single)
    GREATER_EQ  reduce using rule 75 (arith_single)
    LESS        reduce using rule 75 (arith_single)
    LESS_EQ     reduce using rule 75 (arith_single)
    EQUAL       reduce using rule 75 (arith_single)
    NOT_EQ      reduce using rule 75 (arith_single)


State 401

   76 arith_single: '-' expression •

    ')'         reduce using rule 76 (arith_single)
    AND         reduce using rule 76 (arith_single)
    OR          reduce using rule 76 (arith_single)
    GREATER     reduce using rule 76 (arith_single)
    GREATER_EQ  reduce using rule 76 (arith_single)
    LESS        reduce using rule 76 (arith_single)
    LESS_EQ     reduce using rule 76 (arith_single)
    EQUAL       reduce using rule 76 (arith_single)
    NOT_EQ      reduce using rule 76 (arith_single)


State 402

   77 lst_single: '%' expression •

    ')'         reduce using rule 77 (lst_single)
    AND         reduce using rule 77 (lst_single)
    OR          reduce using rule 77 (lst_single)
    GREATER     reduce using rule 77 (lst_single)
    GREATER_EQ  reduce using rule 77 (lst_single)
    LESS        reduce using rule 77 (lst_single)
    LESS_EQ     reduce using rule 77 (lst_single)
    EQUAL       reduce using rule 77 (lst_single)
    NOT_EQ      reduce using rule 77 (lst_single)


State 403

   78 lst_single: '?' expression •

    ')'         reduce using rule 78 (lst_single)
    AND         reduce using rule 78 (lst_single)
    OR          reduce using rule 78 (lst_single)
    GREATER     reduce using rule 78 (lst_single)
    GREATER_EQ  reduce using rule 78 (lst_single)
    LESS        reduce using rule 78 (lst_single)
    LESS_EQ     reduce using rule 78 (lst_single)
    EQUAL       reduce using rule 78 (lst_single)
    NOT_EQ      reduce using rule 78 (lst_single)


State 404

   69 single_operation: '!' expression •

    ')'         reduce using rule 69 (single_operation)
    AND         reduce using rule 69 (single_operation)
    OR          reduce using rule 69 (single_operation)
    GREATER     reduce using rule 69 (single_operation)
    GREATER_EQ  reduce using rule 69 (single_operation)
    LESS        reduce using rule 69 (single_operation)
    LESS_EQ     reduce using rule 69 (single_operation)
    EQUAL       reduce using rule 69 (single_operation)
    NOT_EQ      reduce using rule 69 (single_operation)


State 405

   49 func_calling: ID '(' • $@3 calling_parameters $@4 ')'

    NUM_INT    reduce using rule 47 ($@3)
    NUM_FLOAT  reduce using rule 47 ($@3)
    NIL_CNST   reduce using rule 47 ($@3)
    ID         reduce using rule 47 ($@3)
    ')'        reduce using rule 47 ($@3)
    '+'        reduce using rule 47 ($@3)
    '-'        reduce using rule 47 ($@3)
    '%'        reduce using rule 47 ($@3)
    '?'        reduce using rule 47 ($@3)
    '!'        reduce using rule 47 ($@3)

    $@3  go to state 439


State 406

   75 arith_single: '+' expression •

    ')'         reduce using rule 75 (arith_single)
    ','         reduce using rule 75 (arith_single)
    AND         reduce using rule 75 (arith_single)
    OR          reduce using rule 75 (arith_single)
    GREATER     reduce using rule 75 (arith_single)
    GREATER_EQ  reduce using rule 75 (arith_single)
    LESS        reduce using rule 75 (arith_single)
    LESS_EQ     reduce using rule 75 (arith_single)
    EQUAL       reduce using rule 75 (arith_single)
    NOT_EQ      reduce using rule 75 (arith_single)


State 407

   76 arith_single: '-' expression •

    ')'         reduce using rule 76 (arith_single)
    ','         reduce using rule 76 (arith_single)
    AND         reduce using rule 76 (arith_single)
    OR          reduce using rule 76 (arith_single)
    GREATER     reduce using rule 76 (arith_single)
    GREATER_EQ  reduce using rule 76 (arith_single)
    LESS        reduce using rule 76 (arith_single)
    LESS_EQ     reduce using rule 76 (arith_single)
    EQUAL       reduce using rule 76 (arith_single)
    NOT_EQ      reduce using rule 76 (arith_single)


State 408

   77 lst_single: '%' expression •

    ')'         reduce using rule 77 (lst_single)
    ','         reduce using rule 77 (lst_single)
    AND         reduce using rule 77 (lst_single)
    OR          reduce using rule 77 (lst_single)
    GREATER     reduce using rule 77 (lst_single)
    GREATER_EQ  reduce using rule 77 (lst_single)
    LESS        reduce using rule 77 (lst_single)
    LESS_EQ     reduce using rule 77 (lst_single)
    EQUAL       reduce using rule 77 (lst_single)
    NOT_EQ      reduce using rule 77 (lst_single)


State 409

   78 lst_single: '?' expression •

    ')'         reduce using rule 78 (lst_single)
    ','         reduce using rule 78 (lst_single)
    AND         reduce using rule 78 (lst_single)
    OR          reduce using rule 78 (lst_single)
    GREATER     reduce using rule 78 (lst_single)
    GREATER_EQ  reduce using rule 78 (lst_single)
    LESS        reduce using rule 78 (lst_single)
    LESS_EQ     reduce using rule 78 (lst_single)
    EQUAL       reduce using rule 78 (lst_single)
    NOT_EQ      reduce using rule 78 (lst_single)


State 410

   69 single_operation: '!' expression •

    ')'         reduce using rule 69 (single_operation)
    ','         reduce using rule 69 (single_operation)
    AND         reduce using rule 69 (single_operation)
    OR          reduce using rule 69 (single_operation)
    GREATER     reduce using rule 69 (single_operation)
    GREATER_EQ  reduce using rule 69 (single_operation)
    LESS        reduce using rule 69 (single_operation)
    LESS_EQ     reduce using rule 69 (single_operation)
    EQUAL       reduce using rule 69 (single_operation)
    NOT_EQ      reduce using rule 69 (single_operation)


State 411

   36 return_stmt: RETURN_STM operation ';' •

    error           reduce using rule 36 (return_stmt)
    NUM_INT         reduce using rule 36 (return_stmt)
    NUM_FLOAT       reduce using rule 36 (return_stmt)
    NIL_CNST        reduce using rule 36 (return_stmt)
    ID              reduce using rule 36 (return_stmt)
    RETURN_STM      reduce using rule 36 (return_stmt)
    T_INT           reduce using rule 36 (return_stmt)
    T_FLOAT         reduce using rule 36 (return_stmt)
    IF_STMT         reduce using rule 36 (return_stmt)
    ELSE_STMT       reduce using rule 36 (return_stmt)
    FOR_STMT        reduce using rule 36 (return_stmt)
    OUTPUT_WRITE    reduce using rule 36 (return_stmt)
    OUTPUT_WRITELN  reduce using rule 36 (return_stmt)
    INPUT_READ      reduce using rule 36 (return_stmt)
    '{'             reduce using rule 36 (return_stmt)
    '}'             reduce using rule 36 (return_stmt)
    '+'             reduce using rule 36 (return_stmt)
    '-'             reduce using rule 36 (return_stmt)
    '%'             reduce using rule 36 (return_stmt)
    '?'             reduce using rule 36 (return_stmt)
    '!'             reduce using rule 36 (return_stmt)


State 412

   34 conditional_stmt: IF_STMT '(' operation • ')' command
   35                 | IF_STMT '(' operation • ')' command ELSE_STMT command
   65 operation: operation • relational_op expression
   66          | operation • logical_op expression

    ')'         shift, and go to state 440
    AND         shift, and go to state 87
    OR          shift, and go to state 88
    GREATER     shift, and go to state 89
    GREATER_EQ  shift, and go to state 90
    LESS        shift, and go to state 91
    LESS_EQ     shift, and go to state 92
    EQUAL       shift, and go to state 93
    NOT_EQ      shift, and go to state 94

    logical_op     go to state 236
    relational_op  go to state 237


State 413

   37 iteration: FOR_STMT '(' loop_condition • ')' command

    ')'  shift, and go to state 441


State 414

   44 output: OUTPUT_WRITE '(' STRING • ')' ';'

    ')'  shift, and go to state 442


State 415

   42 output: OUTPUT_WRITE '(' operation • ')' ';'
   65 operation: operation • relational_op expression
   66          | operation • logical_op expression

    ')'         shift, and go to state 443
    AND         shift, and go to state 87
    OR          shift, and go to state 88
    GREATER     shift, and go to state 89
    GREATER_EQ  shift, and go to state 90
    LESS        shift, and go to state 91
    LESS_EQ     shift, and go to state 92
    EQUAL       shift, and go to state 93
    NOT_EQ      shift, and go to state 94

    logical_op     go to state 236
    relational_op  go to state 237


State 416

   45 output: OUTPUT_WRITELN '(' STRING • ')' ';'

    ')'  shift, and go to state 444


State 417

   43 output: OUTPUT_WRITELN '(' operation • ')' ';'
   65 operation: operation • relational_op expression
   66          | operation • logical_op expression

    ')'         shift, and go to state 445
    AND         shift, and go to state 87
    OR          shift, and go to state 88
    GREATER     shift, and go to state 89
    GREATER_EQ  shift, and go to state 90
    LESS        shift, and go to state 91
    LESS_EQ     shift, and go to state 92
    EQUAL       shift, and go to state 93
    NOT_EQ      shift, and go to state 94

    logical_op     go to state 236
    relational_op  go to state 237


State 418

   46 input: INPUT_READ '(' expression • ')' ';'

    ')'  shift, and go to state 446


State 419

   30 command: $@2 '{' block_commands • '}'

    '}'  shift, and go to state 447


State 420

   39 init_stmt: ID '=' operation •
   65 operation: operation • relational_op expression
   66          | operation • logical_op expression

    AND         shift, and go to state 87
    OR          shift, and go to state 88
    GREATER     shift, and go to state 89
    GREATER_EQ  shift, and go to state 90
    LESS        shift, and go to state 91
    LESS_EQ     shift, and go to state 92
    EQUAL       shift, and go to state 93
    NOT_EQ      shift, and go to state 94

    ')'  reduce using rule 39 (init_stmt)

    logical_op     go to state 236
    relational_op  go to state 237


State 421

   49 func_calling: ID '(' $@3 calling_parameters • $@4 ')'

    ')'  reduce using rule 48 ($@4)

    $@4  go to state 448


State 422

   49 func_calling: ID '(' • $@3 calling_parameters $@4 ')'

    NUM_INT    reduce using rule 47 ($@3)
    NUM_FLOAT  reduce using rule 47 ($@3)
    NIL_CNST   reduce using rule 47 ($@3)
    ID         reduce using rule 47 ($@3)
    ')'        reduce using rule 47 ($@3)
    '+'        reduce using rule 47 ($@3)
    '-'        reduce using rule 47 ($@3)
    '%'        reduce using rule 47 ($@3)
    '?'        reduce using rule 47 ($@3)
    '!'        reduce using rule 47 ($@3)

    $@3  go to state 449


State 423

   75 arith_single: '+' expression •

    ')'         reduce using rule 75 (arith_single)
    AND         reduce using rule 75 (arith_single)
    OR          reduce using rule 75 (arith_single)
    GREATER     reduce using rule 75 (arith_single)
    GREATER_EQ  reduce using rule 75 (arith_single)
    LESS        reduce using rule 75 (arith_single)
    LESS_EQ     reduce using rule 75 (arith_single)
    EQUAL       reduce using rule 75 (arith_single)
    NOT_EQ      reduce using rule 75 (arith_single)
    '+'         reduce using rule 75 (arith_single)
    '-'         reduce using rule 75 (arith_single)
    '*'         reduce using rule 75 (arith_single)
    '/'         reduce using rule 75 (arith_single)


State 424

   76 arith_single: '-' expression •

    ')'         reduce using rule 76 (arith_single)
    AND         reduce using rule 76 (arith_single)
    OR          reduce using rule 76 (arith_single)
    GREATER     reduce using rule 76 (arith_single)
    GREATER_EQ  reduce using rule 76 (arith_single)
    LESS        reduce using rule 76 (arith_single)
    LESS_EQ     reduce using rule 76 (arith_single)
    EQUAL       reduce using rule 76 (arith_single)
    NOT_EQ      reduce using rule 76 (arith_single)
    '+'         reduce using rule 76 (arith_single)
    '-'         reduce using rule 76 (arith_single)
    '*'         reduce using rule 76 (arith_single)
    '/'         reduce using rule 76 (arith_single)


State 425

   77 lst_single: '%' expression •

    ')'         reduce using rule 77 (lst_single)
    AND         reduce using rule 77 (lst_single)
    OR          reduce using rule 77 (lst_single)
    GREATER     reduce using rule 77 (lst_single)
    GREATER_EQ  reduce using rule 77 (lst_single)
    LESS        reduce using rule 77 (lst_single)
    LESS_EQ     reduce using rule 77 (lst_single)
    EQUAL       reduce using rule 77 (lst_single)
    NOT_EQ      reduce using rule 77 (lst_single)
    '+'         reduce using rule 77 (lst_single)
    '-'         reduce using rule 77 (lst_single)
    '*'         reduce using rule 77 (lst_single)
    '/'         reduce using rule 77 (lst_single)


State 426

   78 lst_single: '?' expression •

    ')'         reduce using rule 78 (lst_single)
    AND         reduce using rule 78 (lst_single)
    OR          reduce using rule 78 (lst_single)
    GREATER     reduce using rule 78 (lst_single)
    GREATER_EQ  reduce using rule 78 (lst_single)
    LESS        reduce using rule 78 (lst_single)
    LESS_EQ     reduce using rule 78 (lst_single)
    EQUAL       reduce using rule 78 (lst_single)
    NOT_EQ      reduce using rule 78 (lst_single)
    '+'         reduce using rule 78 (lst_single)
    '-'         reduce using rule 78 (lst_single)
    '*'         reduce using rule 78 (lst_single)
    '/'         reduce using rule 78 (lst_single)


State 427

   69 single_operation: '!' expression •

    ')'         reduce using rule 69 (single_operation)
    AND         reduce using rule 69 (single_operation)
    OR          reduce using rule 69 (single_operation)
    GREATER     reduce using rule 69 (single_operation)
    GREATER_EQ  reduce using rule 69 (single_operation)
    LESS        reduce using rule 69 (single_operation)
    LESS_EQ     reduce using rule 69 (single_operation)
    EQUAL       reduce using rule 69 (single_operation)
    NOT_EQ      reduce using rule 69 (single_operation)
    '+'         reduce using rule 69 (single_operation)
    '-'         reduce using rule 69 (single_operation)
    '*'         reduce using rule 69 (single_operation)
    '/'         reduce using rule 69 (single_operation)


State 428

   49 func_calling: ID '(' $@3 calling_parameters • $@4 ')'

    ')'  reduce using rule 48 ($@4)

    $@4  go to state 450


State 429

   49 func_calling: ID '(' $@3 calling_parameters • $@4 ')'

    ')'  reduce using rule 48 ($@4)

    $@4  go to state 451


State 430

   49 func_calling: ID '(' $@3 calling_parameters • $@4 ')'

    ')'  reduce using rule 48 ($@4)

    $@4  go to state 452


State 431

   49 func_calling: ID '(' $@3 calling_parameters • $@4 ')'

    ')'  reduce using rule 48 ($@4)

    $@4  go to state 453


State 432

   49 func_calling: ID '(' • $@3 calling_parameters $@4 ')'

    NUM_INT    reduce using rule 47 ($@3)
    NUM_FLOAT  reduce using rule 47 ($@3)
    NIL_CNST   reduce using rule 47 ($@3)
    ID         reduce using rule 47 ($@3)
    ')'        reduce using rule 47 ($@3)
    '+'        reduce using rule 47 ($@3)
    '-'        reduce using rule 47 ($@3)
    '%'        reduce using rule 47 ($@3)
    '?'        reduce using rule 47 ($@3)
    '!'        reduce using rule 47 ($@3)

    $@3  go to state 454


State 433

   75 arith_single: '+' expression •

    ')'         reduce using rule 75 (arith_single)
    ','         reduce using rule 75 (arith_single)
    AND         reduce using rule 75 (arith_single)
    OR          reduce using rule 75 (arith_single)
    GREATER     reduce using rule 75 (arith_single)
    GREATER_EQ  reduce using rule 75 (arith_single)
    LESS        reduce using rule 75 (arith_single)
    LESS_EQ     reduce using rule 75 (arith_single)
    EQUAL       reduce using rule 75 (arith_single)
    NOT_EQ      reduce using rule 75 (arith_single)
    '+'         reduce using rule 75 (arith_single)
    '-'         reduce using rule 75 (arith_single)
    '*'         reduce using rule 75 (arith_single)
    '/'         reduce using rule 75 (arith_single)


State 434

   76 arith_single: '-' expression •

    ')'         reduce using rule 76 (arith_single)
    ','         reduce using rule 76 (arith_single)
    AND         reduce using rule 76 (arith_single)
    OR          reduce using rule 76 (arith_single)
    GREATER     reduce using rule 76 (arith_single)
    GREATER_EQ  reduce using rule 76 (arith_single)
    LESS        reduce using rule 76 (arith_single)
    LESS_EQ     reduce using rule 76 (arith_single)
    EQUAL       reduce using rule 76 (arith_single)
    NOT_EQ      reduce using rule 76 (arith_single)
    '+'         reduce using rule 76 (arith_single)
    '-'         reduce using rule 76 (arith_single)
    '*'         reduce using rule 76 (arith_single)
    '/'         reduce using rule 76 (arith_single)


State 435

   77 lst_single: '%' expression •

    ')'         reduce using rule 77 (lst_single)
    ','         reduce using rule 77 (lst_single)
    AND         reduce using rule 77 (lst_single)
    OR          reduce using rule 77 (lst_single)
    GREATER     reduce using rule 77 (lst_single)
    GREATER_EQ  reduce using rule 77 (lst_single)
    LESS        reduce using rule 77 (lst_single)
    LESS_EQ     reduce using rule 77 (lst_single)
    EQUAL       reduce using rule 77 (lst_single)
    NOT_EQ      reduce using rule 77 (lst_single)
    '+'         reduce using rule 77 (lst_single)
    '-'         reduce using rule 77 (lst_single)
    '*'         reduce using rule 77 (lst_single)
    '/'         reduce using rule 77 (lst_single)


State 436

   78 lst_single: '?' expression •

    ')'         reduce using rule 78 (lst_single)
    ','         reduce using rule 78 (lst_single)
    AND         reduce using rule 78 (lst_single)
    OR          reduce using rule 78 (lst_single)
    GREATER     reduce using rule 78 (lst_single)
    GREATER_EQ  reduce using rule 78 (lst_single)
    LESS        reduce using rule 78 (lst_single)
    LESS_EQ     reduce using rule 78 (lst_single)
    EQUAL       reduce using rule 78 (lst_single)
    NOT_EQ      reduce using rule 78 (lst_single)
    '+'         reduce using rule 78 (lst_single)
    '-'         reduce using rule 78 (lst_single)
    '*'         reduce using rule 78 (lst_single)
    '/'         reduce using rule 78 (lst_single)


State 437

   69 single_operation: '!' expression •

    ')'         reduce using rule 69 (single_operation)
    ','         reduce using rule 69 (single_operation)
    AND         reduce using rule 69 (single_operation)
    OR          reduce using rule 69 (single_operation)
    GREATER     reduce using rule 69 (single_operation)
    GREATER_EQ  reduce using rule 69 (single_operation)
    LESS        reduce using rule 69 (single_operation)
    LESS_EQ     reduce using rule 69 (single_operation)
    EQUAL       reduce using rule 69 (single_operation)
    NOT_EQ      reduce using rule 69 (single_operation)
    '+'         reduce using rule 69 (single_operation)
    '-'         reduce using rule 69 (single_operation)
    '*'         reduce using rule 69 (single_operation)
    '/'         reduce using rule 69 (single_operation)


State 438

   49 func_calling: ID '(' $@3 • calling_parameters $@4 ')'

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 455
    lst_calling_parameters  go to state 124
    func_calling            go to state 227
    expression              go to state 228
    const                   go to state 229
    number                  go to state 230
    operation               go to state 125
    single_operation        go to state 231
    arith_binary            go to state 232
    arith_single            go to state 233
    lst_single              go to state 234
    lst_binary              go to state 235


State 439

   49 func_calling: ID '(' $@3 • calling_parameters $@4 ')'

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 456
    lst_calling_parameters  go to state 124
    func_calling            go to state 227
    expression              go to state 228
    const                   go to state 229
    number                  go to state 230
    operation               go to state 125
    single_operation        go to state 231
    arith_binary            go to state 232
    arith_single            go to state 233
    lst_single              go to state 234
    lst_binary              go to state 235


State 440

   34 conditional_stmt: IF_STMT '(' operation ')' • command
   35                 | IF_STMT '(' operation ')' • command ELSE_STMT command

    error           shift, and go to state 240
    NUM_INT         shift, and go to state 28
    NUM_FLOAT       shift, and go to state 29
    NIL_CNST        shift, and go to state 30
    ID              shift, and go to state 31
    RETURN_STM      shift, and go to state 241
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 242
    FOR_STMT        shift, and go to state 243
    OUTPUT_WRITE    shift, and go to state 244
    OUTPUT_WRITELN  shift, and go to state 245
    INPUT_READ      shift, and go to state 246
    '+'             shift, and go to state 38
    '-'             shift, and go to state 39
    '%'             shift, and go to state 40
    '?'             shift, and go to state 41
    '!'             shift, and go to state 42

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 247
    unq_declaration   go to state 248
    command           go to state 457
    $@2               go to state 249
    init_variable     go to state 250
    conditional_stmt  go to state 251
    return_stmt       go to state 252
    iteration         go to state 253
    init_stmt         go to state 254
    output            go to state 255
    input             go to state 256
    func_calling      go to state 55
    expression        go to state 56
    const             go to state 57
    number            go to state 58
    type              go to state 153
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 257
    single_operation  go to state 60
    arith_binary      go to state 61
    arith_single      go to state 62
    lst_single        go to state 63
    lst_binary        go to state 64


State 441

   37 iteration: FOR_STMT '(' loop_condition ')' • command

    error           shift, and go to state 240
    NUM_INT         shift, and go to state 28
    NUM_FLOAT       shift, and go to state 29
    NIL_CNST        shift, and go to state 30
    ID              shift, and go to state 31
    RETURN_STM      shift, and go to state 241
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 242
    FOR_STMT        shift, and go to state 243
    OUTPUT_WRITE    shift, and go to state 244
    OUTPUT_WRITELN  shift, and go to state 245
    INPUT_READ      shift, and go to state 246
    '+'             shift, and go to state 38
    '-'             shift, and go to state 39
    '%'             shift, and go to state 40
    '?'             shift, and go to state 41
    '!'             shift, and go to state 42

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 247
    unq_declaration   go to state 248
    command           go to state 458
    $@2               go to state 249
    init_variable     go to state 250
    conditional_stmt  go to state 251
    return_stmt       go to state 252
    iteration         go to state 253
    init_stmt         go to state 254
    output            go to state 255
    input             go to state 256
    func_calling      go to state 55
    expression        go to state 56
    const             go to state 57
    number            go to state 58
    type              go to state 153
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 257
    single_operation  go to state 60
    arith_binary      go to state 61
    arith_single      go to state 62
    lst_single        go to state 63
    lst_binary        go to state 64


State 442

   44 output: OUTPUT_WRITE '(' STRING ')' • ';'

    ';'  shift, and go to state 459


State 443

   42 output: OUTPUT_WRITE '(' operation ')' • ';'

    ';'  shift, and go to state 460


State 444

   45 output: OUTPUT_WRITELN '(' STRING ')' • ';'

    ';'  shift, and go to state 461


State 445

   43 output: OUTPUT_WRITELN '(' operation ')' • ';'

    ';'  shift, and go to state 462


State 446

   46 input: INPUT_READ '(' expression ')' • ';'

    ';'  shift, and go to state 463


State 447

   30 command: $@2 '{' block_commands '}' •

    error           reduce using rule 30 (command)
    NUM_INT         reduce using rule 30 (command)
    NUM_FLOAT       reduce using rule 30 (command)
    NIL_CNST        reduce using rule 30 (command)
    ID              reduce using rule 30 (command)
    RETURN_STM      reduce using rule 30 (command)
    T_INT           reduce using rule 30 (command)
    T_FLOAT         reduce using rule 30 (command)
    IF_STMT         reduce using rule 30 (command)
    ELSE_STMT       reduce using rule 30 (command)
    FOR_STMT        reduce using rule 30 (command)
    OUTPUT_WRITE    reduce using rule 30 (command)
    OUTPUT_WRITELN  reduce using rule 30 (command)
    INPUT_READ      reduce using rule 30 (command)
    '{'             reduce using rule 30 (command)
    '}'             reduce using rule 30 (command)
    '+'             reduce using rule 30 (command)
    '-'             reduce using rule 30 (command)
    '%'             reduce using rule 30 (command)
    '?'             reduce using rule 30 (command)
    '!'             reduce using rule 30 (command)


State 448

   49 func_calling: ID '(' $@3 calling_parameters $@4 • ')'

    ')'  shift, and go to state 464


State 449

   49 func_calling: ID '(' $@3 • calling_parameters $@4 ')'

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 465
    lst_calling_parameters  go to state 124
    func_calling            go to state 227
    expression              go to state 228
    const                   go to state 229
    number                  go to state 230
    operation               go to state 125
    single_operation        go to state 231
    arith_binary            go to state 232
    arith_single            go to state 233
    lst_single              go to state 234
    lst_binary              go to state 235


State 450

   49 func_calling: ID '(' $@3 calling_parameters $@4 • ')'

    ')'  shift, and go to state 466


State 451

   49 func_calling: ID '(' $@3 calling_parameters $@4 • ')'

    ')'  shift, and go to state 467


State 452

   49 func_calling: ID '(' $@3 calling_parameters $@4 • ')'

    ')'  shift, and go to state 468


State 453

   49 func_calling: ID '(' $@3 calling_parameters $@4 • ')'

    ')'  shift, and go to state 469


State 454

   49 func_calling: ID '(' $@3 • calling_parameters $@4 ')'

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 470
    lst_calling_parameters  go to state 124
    func_calling            go to state 227
    expression              go to state 228
    const                   go to state 229
    number                  go to state 230
    operation               go to state 125
    single_operation        go to state 231
    arith_binary            go to state 232
    arith_single            go to state 233
    lst_single              go to state 234
    lst_binary              go to state 235


State 455

   49 func_calling: ID '(' $@3 calling_parameters • $@4 ')'

    ')'  reduce using rule 48 ($@4)

    $@4  go to state 471


State 456

   49 func_calling: ID '(' $@3 calling_parameters • $@4 ')'

    ')'  reduce using rule 48 ($@4)

    $@4  go to state 472


State 457

   34 conditional_stmt: IF_STMT '(' operation ')' command •
   35                 | IF_STMT '(' operation ')' command • ELSE_STMT command

    ELSE_STMT  shift, and go to state 473

    error           reduce using rule 34 (conditional_stmt)
    NUM_INT         reduce using rule 34 (conditional_stmt)
    NUM_FLOAT       reduce using rule 34 (conditional_stmt)
    NIL_CNST        reduce using rule 34 (conditional_stmt)
    ID              reduce using rule 34 (conditional_stmt)
    RETURN_STM      reduce using rule 34 (conditional_stmt)
    T_INT           reduce using rule 34 (conditional_stmt)
    T_FLOAT         reduce using rule 34 (conditional_stmt)
    IF_STMT         reduce using rule 34 (conditional_stmt)
    FOR_STMT        reduce using rule 34 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 34 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 34 (conditional_stmt)
    INPUT_READ      reduce using rule 34 (conditional_stmt)
    '{'             reduce using rule 34 (conditional_stmt)
    '}'             reduce using rule 34 (conditional_stmt)
    '+'             reduce using rule 34 (conditional_stmt)
    '-'             reduce using rule 34 (conditional_stmt)
    '%'             reduce using rule 34 (conditional_stmt)
    '?'             reduce using rule 34 (conditional_stmt)
    '!'             reduce using rule 34 (conditional_stmt)


State 458

   37 iteration: FOR_STMT '(' loop_condition ')' command •

    error           reduce using rule 37 (iteration)
    NUM_INT         reduce using rule 37 (iteration)
    NUM_FLOAT       reduce using rule 37 (iteration)
    NIL_CNST        reduce using rule 37 (iteration)
    ID              reduce using rule 37 (iteration)
    RETURN_STM      reduce using rule 37 (iteration)
    T_INT           reduce using rule 37 (iteration)
    T_FLOAT         reduce using rule 37 (iteration)
    IF_STMT         reduce using rule 37 (iteration)
    ELSE_STMT       reduce using rule 37 (iteration)
    FOR_STMT        reduce using rule 37 (iteration)
    OUTPUT_WRITE    reduce using rule 37 (iteration)
    OUTPUT_WRITELN  reduce using rule 37 (iteration)
    INPUT_READ      reduce using rule 37 (iteration)
    '{'             reduce using rule 37 (iteration)
    '}'             reduce using rule 37 (iteration)
    '+'             reduce using rule 37 (iteration)
    '-'             reduce using rule 37 (iteration)
    '%'             reduce using rule 37 (iteration)
    '?'             reduce using rule 37 (iteration)
    '!'             reduce using rule 37 (iteration)


State 459

   44 output: OUTPUT_WRITE '(' STRING ')' ';' •

    error           reduce using rule 44 (output)
    NUM_INT         reduce using rule 44 (output)
    NUM_FLOAT       reduce using rule 44 (output)
    NIL_CNST        reduce using rule 44 (output)
    ID              reduce using rule 44 (output)
    RETURN_STM      reduce using rule 44 (output)
    T_INT           reduce using rule 44 (output)
    T_FLOAT         reduce using rule 44 (output)
    IF_STMT         reduce using rule 44 (output)
    ELSE_STMT       reduce using rule 44 (output)
    FOR_STMT        reduce using rule 44 (output)
    OUTPUT_WRITE    reduce using rule 44 (output)
    OUTPUT_WRITELN  reduce using rule 44 (output)
    INPUT_READ      reduce using rule 44 (output)
    '{'             reduce using rule 44 (output)
    '}'             reduce using rule 44 (output)
    '+'             reduce using rule 44 (output)
    '-'             reduce using rule 44 (output)
    '%'             reduce using rule 44 (output)
    '?'             reduce using rule 44 (output)
    '!'             reduce using rule 44 (output)


State 460

   42 output: OUTPUT_WRITE '(' operation ')' ';' •

    error           reduce using rule 42 (output)
    NUM_INT         reduce using rule 42 (output)
    NUM_FLOAT       reduce using rule 42 (output)
    NIL_CNST        reduce using rule 42 (output)
    ID              reduce using rule 42 (output)
    RETURN_STM      reduce using rule 42 (output)
    T_INT           reduce using rule 42 (output)
    T_FLOAT         reduce using rule 42 (output)
    IF_STMT         reduce using rule 42 (output)
    ELSE_STMT       reduce using rule 42 (output)
    FOR_STMT        reduce using rule 42 (output)
    OUTPUT_WRITE    reduce using rule 42 (output)
    OUTPUT_WRITELN  reduce using rule 42 (output)
    INPUT_READ      reduce using rule 42 (output)
    '{'             reduce using rule 42 (output)
    '}'             reduce using rule 42 (output)
    '+'             reduce using rule 42 (output)
    '-'             reduce using rule 42 (output)
    '%'             reduce using rule 42 (output)
    '?'             reduce using rule 42 (output)
    '!'             reduce using rule 42 (output)


State 461

   45 output: OUTPUT_WRITELN '(' STRING ')' ';' •

    error           reduce using rule 45 (output)
    NUM_INT         reduce using rule 45 (output)
    NUM_FLOAT       reduce using rule 45 (output)
    NIL_CNST        reduce using rule 45 (output)
    ID              reduce using rule 45 (output)
    RETURN_STM      reduce using rule 45 (output)
    T_INT           reduce using rule 45 (output)
    T_FLOAT         reduce using rule 45 (output)
    IF_STMT         reduce using rule 45 (output)
    ELSE_STMT       reduce using rule 45 (output)
    FOR_STMT        reduce using rule 45 (output)
    OUTPUT_WRITE    reduce using rule 45 (output)
    OUTPUT_WRITELN  reduce using rule 45 (output)
    INPUT_READ      reduce using rule 45 (output)
    '{'             reduce using rule 45 (output)
    '}'             reduce using rule 45 (output)
    '+'             reduce using rule 45 (output)
    '-'             reduce using rule 45 (output)
    '%'             reduce using rule 45 (output)
    '?'             reduce using rule 45 (output)
    '!'             reduce using rule 45 (output)


State 462

   43 output: OUTPUT_WRITELN '(' operation ')' ';' •

    error           reduce using rule 43 (output)
    NUM_INT         reduce using rule 43 (output)
    NUM_FLOAT       reduce using rule 43 (output)
    NIL_CNST        reduce using rule 43 (output)
    ID              reduce using rule 43 (output)
    RETURN_STM      reduce using rule 43 (output)
    T_INT           reduce using rule 43 (output)
    T_FLOAT         reduce using rule 43 (output)
    IF_STMT         reduce using rule 43 (output)
    ELSE_STMT       reduce using rule 43 (output)
    FOR_STMT        reduce using rule 43 (output)
    OUTPUT_WRITE    reduce using rule 43 (output)
    OUTPUT_WRITELN  reduce using rule 43 (output)
    INPUT_READ      reduce using rule 43 (output)
    '{'             reduce using rule 43 (output)
    '}'             reduce using rule 43 (output)
    '+'             reduce using rule 43 (output)
    '-'             reduce using rule 43 (output)
    '%'             reduce using rule 43 (output)
    '?'             reduce using rule 43 (output)
    '!'             reduce using rule 43 (output)


State 463

   46 input: INPUT_READ '(' expression ')' ';' •

    error           reduce using rule 46 (input)
    NUM_INT         reduce using rule 46 (input)
    NUM_FLOAT       reduce using rule 46 (input)
    NIL_CNST        reduce using rule 46 (input)
    ID              reduce using rule 46 (input)
    RETURN_STM      reduce using rule 46 (input)
    T_INT           reduce using rule 46 (input)
    T_FLOAT         reduce using rule 46 (input)
    IF_STMT         reduce using rule 46 (input)
    ELSE_STMT       reduce using rule 46 (input)
    FOR_STMT        reduce using rule 46 (input)
    OUTPUT_WRITE    reduce using rule 46 (input)
    OUTPUT_WRITELN  reduce using rule 46 (input)
    INPUT_READ      reduce using rule 46 (input)
    '{'             reduce using rule 46 (input)
    '}'             reduce using rule 46 (input)
    '+'             reduce using rule 46 (input)
    '-'             reduce using rule 46 (input)
    '%'             reduce using rule 46 (input)
    '?'             reduce using rule 46 (input)
    '!'             reduce using rule 46 (input)


State 464

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')' •

    ')'         reduce using rule 49 (func_calling)
    AND         reduce using rule 49 (func_calling)
    OR          reduce using rule 49 (func_calling)
    GREATER     reduce using rule 49 (func_calling)
    GREATER_EQ  reduce using rule 49 (func_calling)
    LESS        reduce using rule 49 (func_calling)
    LESS_EQ     reduce using rule 49 (func_calling)
    EQUAL       reduce using rule 49 (func_calling)
    NOT_EQ      reduce using rule 49 (func_calling)
    '+'         reduce using rule 49 (func_calling)
    '-'         reduce using rule 49 (func_calling)
    '*'         reduce using rule 49 (func_calling)
    '/'         reduce using rule 49 (func_calling)
    FILTER      reduce using rule 49 (func_calling)
    MAP         reduce using rule 49 (func_calling)
    ':'         reduce using rule 49 (func_calling)


State 465

   49 func_calling: ID '(' $@3 calling_parameters • $@4 ')'

    ')'  reduce using rule 48 ($@4)

    $@4  go to state 474


State 466

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')' •

    ')'  reduce using rule 49 (func_calling)


State 467

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')' •

    ';'         reduce using rule 49 (func_calling)
    AND         reduce using rule 49 (func_calling)
    OR          reduce using rule 49 (func_calling)
    GREATER     reduce using rule 49 (func_calling)
    GREATER_EQ  reduce using rule 49 (func_calling)
    LESS        reduce using rule 49 (func_calling)
    LESS_EQ     reduce using rule 49 (func_calling)
    EQUAL       reduce using rule 49 (func_calling)
    NOT_EQ      reduce using rule 49 (func_calling)


State 468

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')' •

    ';'         reduce using rule 49 (func_calling)
    AND         reduce using rule 49 (func_calling)
    OR          reduce using rule 49 (func_calling)
    GREATER     reduce using rule 49 (func_calling)
    GREATER_EQ  reduce using rule 49 (func_calling)
    LESS        reduce using rule 49 (func_calling)
    LESS_EQ     reduce using rule 49 (func_calling)
    EQUAL       reduce using rule 49 (func_calling)
    NOT_EQ      reduce using rule 49 (func_calling)
    '+'         reduce using rule 49 (func_calling)
    '-'         reduce using rule 49 (func_calling)
    '*'         reduce using rule 49 (func_calling)
    '/'         reduce using rule 49 (func_calling)


State 469

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')' •

    ')'         reduce using rule 49 (func_calling)
    ','         reduce using rule 49 (func_calling)
    AND         reduce using rule 49 (func_calling)
    OR          reduce using rule 49 (func_calling)
    GREATER     reduce using rule 49 (func_calling)
    GREATER_EQ  reduce using rule 49 (func_calling)
    LESS        reduce using rule 49 (func_calling)
    LESS_EQ     reduce using rule 49 (func_calling)
    EQUAL       reduce using rule 49 (func_calling)
    NOT_EQ      reduce using rule 49 (func_calling)
    '+'         reduce using rule 49 (func_calling)
    '-'         reduce using rule 49 (func_calling)
    '*'         reduce using rule 49 (func_calling)
    '/'         reduce using rule 49 (func_calling)
    FILTER      reduce using rule 49 (func_calling)
    MAP         reduce using rule 49 (func_calling)
    ':'         reduce using rule 49 (func_calling)


State 470

   49 func_calling: ID '(' $@3 calling_parameters • $@4 ')'

    ')'  reduce using rule 48 ($@4)

    $@4  go to state 475


State 471

   49 func_calling: ID '(' $@3 calling_parameters $@4 • ')'

    ')'  shift, and go to state 476


State 472

   49 func_calling: ID '(' $@3 calling_parameters $@4 • ')'

    ')'  shift, and go to state 477


State 473

   35 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT • command

    error           shift, and go to state 240
    NUM_INT         shift, and go to state 28
    NUM_FLOAT       shift, and go to state 29
    NIL_CNST        shift, and go to state 30
    ID              shift, and go to state 31
    RETURN_STM      shift, and go to state 241
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 242
    FOR_STMT        shift, and go to state 243
    OUTPUT_WRITE    shift, and go to state 244
    OUTPUT_WRITELN  shift, and go to state 245
    INPUT_READ      shift, and go to state 246
    '+'             shift, and go to state 38
    '-'             shift, and go to state 39
    '%'             shift, and go to state 40
    '?'             shift, and go to state 41
    '!'             shift, and go to state 42

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 247
    unq_declaration   go to state 248
    command           go to state 478
    $@2               go to state 249
    init_variable     go to state 250
    conditional_stmt  go to state 251
    return_stmt       go to state 252
    iteration         go to state 253
    init_stmt         go to state 254
    output            go to state 255
    input             go to state 256
    func_calling      go to state 55
    expression        go to state 56
    const             go to state 57
    number            go to state 58
    type              go to state 153
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 257
    single_operation  go to state 60
    arith_binary      go to state 61
    arith_single      go to state 62
    lst_single        go to state 63
    lst_binary        go to state 64


State 474

   49 func_calling: ID '(' $@3 calling_parameters $@4 • ')'

    ')'  shift, and go to state 479


State 475

   49 func_calling: ID '(' $@3 calling_parameters $@4 • ')'

    ')'  shift, and go to state 480


State 476

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')' •

    ')'         reduce using rule 49 (func_calling)
    AND         reduce using rule 49 (func_calling)
    OR          reduce using rule 49 (func_calling)
    GREATER     reduce using rule 49 (func_calling)
    GREATER_EQ  reduce using rule 49 (func_calling)
    LESS        reduce using rule 49 (func_calling)
    LESS_EQ     reduce using rule 49 (func_calling)
    EQUAL       reduce using rule 49 (func_calling)
    NOT_EQ      reduce using rule 49 (func_calling)


State 477

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')' •

    ')'         reduce using rule 49 (func_calling)
    ','         reduce using rule 49 (func_calling)
    AND         reduce using rule 49 (func_calling)
    OR          reduce using rule 49 (func_calling)
    GREATER     reduce using rule 49 (func_calling)
    GREATER_EQ  reduce using rule 49 (func_calling)
    LESS        reduce using rule 49 (func_calling)
    LESS_EQ     reduce using rule 49 (func_calling)
    EQUAL       reduce using rule 49 (func_calling)
    NOT_EQ      reduce using rule 49 (func_calling)


State 478

   35 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT command •

    error           reduce using rule 35 (conditional_stmt)
    NUM_INT         reduce using rule 35 (conditional_stmt)
    NUM_FLOAT       reduce using rule 35 (conditional_stmt)
    NIL_CNST        reduce using rule 35 (conditional_stmt)
    ID              reduce using rule 35 (conditional_stmt)
    RETURN_STM      reduce using rule 35 (conditional_stmt)
    T_INT           reduce using rule 35 (conditional_stmt)
    T_FLOAT         reduce using rule 35 (conditional_stmt)
    IF_STMT         reduce using rule 35 (conditional_stmt)
    ELSE_STMT       reduce using rule 35 (conditional_stmt)
    FOR_STMT        reduce using rule 35 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 35 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 35 (conditional_stmt)
    INPUT_READ      reduce using rule 35 (conditional_stmt)
    '{'             reduce using rule 35 (conditional_stmt)
    '}'             reduce using rule 35 (conditional_stmt)
    '+'             reduce using rule 35 (conditional_stmt)
    '-'             reduce using rule 35 (conditional_stmt)
    '%'             reduce using rule 35 (conditional_stmt)
    '?'             reduce using rule 35 (conditional_stmt)
    '!'             reduce using rule 35 (conditional_stmt)


State 479

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')' •

    ')'         reduce using rule 49 (func_calling)
    AND         reduce using rule 49 (func_calling)
    OR          reduce using rule 49 (func_calling)
    GREATER     reduce using rule 49 (func_calling)
    GREATER_EQ  reduce using rule 49 (func_calling)
    LESS        reduce using rule 49 (func_calling)
    LESS_EQ     reduce using rule 49 (func_calling)
    EQUAL       reduce using rule 49 (func_calling)
    NOT_EQ      reduce using rule 49 (func_calling)
    '+'         reduce using rule 49 (func_calling)
    '-'         reduce using rule 49 (func_calling)
    '*'         reduce using rule 49 (func_calling)
    '/'         reduce using rule 49 (func_calling)


State 480

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')' •

    ')'         reduce using rule 49 (func_calling)
    ','         reduce using rule 49 (func_calling)
    AND         reduce using rule 49 (func_calling)
    OR          reduce using rule 49 (func_calling)
    GREATER     reduce using rule 49 (func_calling)
    GREATER_EQ  reduce using rule 49 (func_calling)
    LESS        reduce using rule 49 (func_calling)
    LESS_EQ     reduce using rule 49 (func_calling)
    EQUAL       reduce using rule 49 (func_calling)
    NOT_EQ      reduce using rule 49 (func_calling)
    '+'         reduce using rule 49 (func_calling)
    '-'         reduce using rule 49 (func_calling)
    '*'         reduce using rule 49 (func_calling)
    '/'         reduce using rule 49 (func_calling)
