Grammar

    0 $accept: program $end

    1 program: lst_declarations
    2        | %empty

    3 lst_declarations: declaration lst_declarations
    4                 | declaration

    5 declaration: func_declaration
    6            | var_declaration
    7            | error

    8 $@1: %empty

    9 func_declaration: unq_declaration $@1 '(' parameters ')' '{' block_commands '}'

   10 var_declaration: unq_declaration ';'

   11 unq_declaration: type ID

   12 parameters: lst_parameters
   13           | %empty

   14 lst_parameters: unq_declaration ',' lst_parameters
   15               | unq_declaration

   16 calling_parameters: lst_calling_parameters
   17                   | %empty

   18 lst_calling_parameters: operation ',' lst_calling_parameters
   19                       | operation

   20 block_commands: command block_commands
   21               | command

   22 command: var_declaration
   23        | init_variable
   24        | conditional_stmt
   25        | return_stmt
   26        | iteration
   27        | input
   28        | output

   29 $@2: %empty

   30 command: $@2 '{' block_commands '}'
   31        | operation ';'

   32 init_variable: init_stmt ';'

   33 conditional_stmt: IF_STMT '(' operation ')' command
   34                 | IF_STMT '(' operation ')' command ELSE_STMT command

   35 return_stmt: RETURN_STM operation ';'

   36 iteration: FOR_STMT '(' loop_condition ')' command

   37 loop_condition: init_stmt ';' operation ';' update_stmt

   38 init_stmt: ID '=' operation

   39 update_stmt: init_stmt
   40            | %empty

   41 output: OUTPUT_WRITE '(' operation ')' ';'
   42       | OUTPUT_WRITELN '(' operation ')' ';'
   43       | OUTPUT_WRITE '(' STRING ')' ';'
   44       | OUTPUT_WRITELN '(' STRING ')' ';'

   45 input: INPUT_READ '(' expression ')' ';'

   46 func_calling: ID '(' calling_parameters ')'

   47 expression: func_calling
   48           | single_operation
   49           | const
   50           | ID

   51 const: number
   52      | NIL_CNST

   53 number: NUM_INT
   54       | NUM_FLOAT

   55 type: type_lst
   56     | type_number

   57 type_lst: type_number T_LIST

   58 type_number: T_INT
   59            | T_FLOAT

   60 operation: arith_binary
   61          | lst_binary
   62          | operation relational_op expression
   63          | operation logical_op expression

   64 single_operation: arith_single
   65                 | lst_single
   66                 | '!' expression

   67 arith_binary: arith_binary '+' expression
   68             | arith_binary '-' expression
   69             | arith_binary '*' expression
   70             | arith_binary '/' expression
   71             | expression

   72 arith_single: '+' expression
   73             | '-' expression

   74 lst_single: '%' expression
   75           | '?' expression

   76 lst_binary: expression FILTER expression
   77           | expression MAP expression
   78           | expression ':' expression

   79 logical_op: AND
   80           | OR

   81 relational_op: GREATER
   82              | GREATER_EQ
   83              | LESS
   84              | LESS_EQ
   85              | EQUAL
   86              | NOT_EQ


Terminals, with rules where they appear

    $end (0) 0
    '!' <token> (33) 66
    '%' <token> (37) 74
    '(' <token> (40) 9 33 34 36 41 42 43 44 45 46
    ')' <token> (41) 9 33 34 36 41 42 43 44 45 46
    '*' <token> (42) 69
    '+' <token> (43) 67 72
    ',' <token> (44) 14 18
    '-' <token> (45) 68 73
    '/' <token> (47) 70
    ':' <token> (58) 78
    ';' <token> (59) 10 31 32 35 37 41 42 43 44 45
    '=' <token> (61) 38
    '?' <token> (63) 75
    '{' <token> (123) 9 30
    '}' <token> (125) 9 30
    error (256) 7
    NUM_INT <token> (258) 53
    NUM_FLOAT <token> (259) 54
    STRING <token> (260) 43 44
    NIL_CNST <token> (261) 52
    ID <token> (262) 11 38 46 50
    RETURN_STM <token> (263) 35
    T_INT <token> (264) 58
    T_FLOAT <token> (265) 59
    T_LIST <token> (266) 57
    IF_STMT <token> (267) 33 34
    ELSE_STMT <token> (268) 34
    FOR_STMT <token> (269) 36
    OUTPUT_WRITE <token> (270) 41 43
    OUTPUT_WRITELN <token> (271) 42 44
    INPUT_READ <token> (272) 45
    AND <token> (273) 79
    OR <token> (274) 80
    GREATER <token> (275) 81
    GREATER_EQ <token> (276) 82
    LESS <token> (277) 83
    LESS_EQ <token> (278) 84
    EQUAL <token> (279) 85
    NOT_EQ <token> (280) 86
    FILTER <token> (281) 76
    MAP <token> (282) 77


Nonterminals, with rules where they appear

    $accept (43)
        on left: 0
    program <node> (44)
        on left: 1 2
        on right: 0
    lst_declarations <node> (45)
        on left: 3 4
        on right: 1 3
    declaration <node> (46)
        on left: 5 6 7
        on right: 3 4
    func_declaration <node> (47)
        on left: 9
        on right: 5
    $@1 (48)
        on left: 8
        on right: 9
    var_declaration <node> (49)
        on left: 10
        on right: 6 22
    unq_declaration <node> (50)
        on left: 11
        on right: 9 10 14 15
    parameters <node> (51)
        on left: 12 13
        on right: 9
    lst_parameters <node> (52)
        on left: 14 15
        on right: 12 14
    calling_parameters <node> (53)
        on left: 16 17
        on right: 46
    lst_calling_parameters <node> (54)
        on left: 18 19
        on right: 16 18
    block_commands <node> (55)
        on left: 20 21
        on right: 9 20 30
    command <node> (56)
        on left: 22 23 24 25 26 27 28 30 31
        on right: 20 21 33 34 36
    $@2 (57)
        on left: 29
        on right: 30
    init_variable <node> (58)
        on left: 32
        on right: 23
    conditional_stmt <node> (59)
        on left: 33 34
        on right: 24
    return_stmt <node> (60)
        on left: 35
        on right: 25
    iteration <node> (61)
        on left: 36
        on right: 26
    loop_condition <node> (62)
        on left: 37
        on right: 36
    init_stmt <node> (63)
        on left: 38
        on right: 32 37 39
    update_stmt <node> (64)
        on left: 39 40
        on right: 37
    output <node> (65)
        on left: 41 42 43 44
        on right: 28
    input <node> (66)
        on left: 45
        on right: 27
    func_calling <node> (67)
        on left: 46
        on right: 47
    expression <node> (68)
        on left: 47 48 49 50
        on right: 45 62 63 66 67 68 69 70 71 72 73 74 75 76 77 78
    const <node> (69)
        on left: 51 52
        on right: 49
    number <node> (70)
        on left: 53 54
        on right: 51
    type <node> (71)
        on left: 55 56
        on right: 11
    type_lst <node> (72)
        on left: 57
        on right: 55
    type_number <node> (73)
        on left: 58 59
        on right: 56 57
    operation <node> (74)
        on left: 60 61 62 63
        on right: 18 19 31 33 34 35 37 38 41 42 62 63
    single_operation <node> (75)
        on left: 64 65 66
        on right: 48
    arith_binary <node> (76)
        on left: 67 68 69 70 71
        on right: 60 67 68 69 70
    arith_single <node> (77)
        on left: 72 73
        on right: 64
    lst_single <node> (78)
        on left: 74 75
        on right: 65
    lst_binary <node> (79)
        on left: 76 77 78
        on right: 61
    logical_op <node> (80)
        on left: 79 80
        on right: 63
    relational_op <node> (81)
        on left: 81 82 83 84 85 86
        on right: 62


State 0

    0 $accept: • program $end

    error    shift, and go to state 1
    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    $end  reduce using rule 2 (program)

    program           go to state 4
    lst_declarations  go to state 5
    declaration       go to state 6
    func_declaration  go to state 7
    var_declaration   go to state 8
    unq_declaration   go to state 9
    type              go to state 10
    type_lst          go to state 11
    type_number       go to state 12


State 1

    7 declaration: error •

    $end     reduce using rule 7 (declaration)
    error    reduce using rule 7 (declaration)
    T_INT    reduce using rule 7 (declaration)
    T_FLOAT  reduce using rule 7 (declaration)


State 2

   58 type_number: T_INT •

    ID      reduce using rule 58 (type_number)
    T_LIST  reduce using rule 58 (type_number)


State 3

   59 type_number: T_FLOAT •

    ID      reduce using rule 59 (type_number)
    T_LIST  reduce using rule 59 (type_number)


State 4

    0 $accept: program • $end

    $end  shift, and go to state 13


State 5

    1 program: lst_declarations •

    $end  reduce using rule 1 (program)


State 6

    3 lst_declarations: declaration • lst_declarations
    4                 | declaration •

    error    shift, and go to state 1
    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    $end  reduce using rule 4 (lst_declarations)

    lst_declarations  go to state 14
    declaration       go to state 6
    func_declaration  go to state 7
    var_declaration   go to state 8
    unq_declaration   go to state 9
    type              go to state 10
    type_lst          go to state 11
    type_number       go to state 12


State 7

    5 declaration: func_declaration •

    $end     reduce using rule 5 (declaration)
    error    reduce using rule 5 (declaration)
    T_INT    reduce using rule 5 (declaration)
    T_FLOAT  reduce using rule 5 (declaration)


State 8

    6 declaration: var_declaration •

    $end     reduce using rule 6 (declaration)
    error    reduce using rule 6 (declaration)
    T_INT    reduce using rule 6 (declaration)
    T_FLOAT  reduce using rule 6 (declaration)


State 9

    9 func_declaration: unq_declaration • $@1 '(' parameters ')' '{' block_commands '}'
   10 var_declaration: unq_declaration • ';'

    ';'  shift, and go to state 15

    '('  reduce using rule 8 ($@1)

    $@1  go to state 16


State 10

   11 unq_declaration: type • ID

    ID  shift, and go to state 17


State 11

   55 type: type_lst •

    ID  reduce using rule 55 (type)


State 12

   56 type: type_number •
   57 type_lst: type_number • T_LIST

    T_LIST  shift, and go to state 18

    ID  reduce using rule 56 (type)


State 13

    0 $accept: program $end •

    $default  accept


State 14

    3 lst_declarations: declaration lst_declarations •

    $end  reduce using rule 3 (lst_declarations)


State 15

   10 var_declaration: unq_declaration ';' •

    $end     reduce using rule 10 (var_declaration)
    error    reduce using rule 10 (var_declaration)
    T_INT    reduce using rule 10 (var_declaration)
    T_FLOAT  reduce using rule 10 (var_declaration)


State 16

    9 func_declaration: unq_declaration $@1 • '(' parameters ')' '{' block_commands '}'

    '('  shift, and go to state 19


State 17

   11 unq_declaration: type ID •

    '('  reduce using rule 11 (unq_declaration)
    ';'  reduce using rule 11 (unq_declaration)


State 18

   57 type_lst: type_number T_LIST •

    ID  reduce using rule 57 (type_lst)


State 19

    9 func_declaration: unq_declaration $@1 '(' • parameters ')' '{' block_commands '}'

    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    ')'  reduce using rule 13 (parameters)

    unq_declaration  go to state 20
    parameters       go to state 21
    lst_parameters   go to state 22
    type             go to state 149
    type_lst         go to state 11
    type_number      go to state 12


State 20

   14 lst_parameters: unq_declaration • ',' lst_parameters
   15               | unq_declaration •

    ','  shift, and go to state 23

    ')'  reduce using rule 15 (lst_parameters)


State 21

    9 func_declaration: unq_declaration $@1 '(' parameters • ')' '{' block_commands '}'

    ')'  shift, and go to state 24


State 22

   12 parameters: lst_parameters •

    ')'  reduce using rule 12 (parameters)


State 23

   14 lst_parameters: unq_declaration ',' • lst_parameters

    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    unq_declaration  go to state 20
    lst_parameters   go to state 25
    type             go to state 149
    type_lst         go to state 11
    type_number      go to state 12


State 24

    9 func_declaration: unq_declaration $@1 '(' parameters ')' • '{' block_commands '}'

    '{'  shift, and go to state 26


State 25

   14 lst_parameters: unq_declaration ',' lst_parameters •

    ')'  reduce using rule 14 (lst_parameters)


State 26

    9 func_declaration: unq_declaration $@1 '(' parameters ')' '{' • block_commands '}'

    NUM_INT         shift, and go to state 27
    NUM_FLOAT       shift, and go to state 28
    NIL_CNST        shift, and go to state 29
    ID              shift, and go to state 30
    RETURN_STM      shift, and go to state 31
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 32
    FOR_STMT        shift, and go to state 33
    OUTPUT_WRITE    shift, and go to state 34
    OUTPUT_WRITELN  shift, and go to state 35
    INPUT_READ      shift, and go to state 36
    '+'             shift, and go to state 37
    '-'             shift, and go to state 38
    '%'             shift, and go to state 39
    '?'             shift, and go to state 40
    '!'             shift, and go to state 41

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 42
    unq_declaration   go to state 43
    block_commands    go to state 44
    command           go to state 45
    $@2               go to state 46
    init_variable     go to state 47
    conditional_stmt  go to state 48
    return_stmt       go to state 49
    iteration         go to state 50
    init_stmt         go to state 51
    output            go to state 52
    input             go to state 53
    func_calling      go to state 54
    expression        go to state 55
    const             go to state 56
    number            go to state 57
    type              go to state 150
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 58
    single_operation  go to state 59
    arith_binary      go to state 60
    arith_single      go to state 61
    lst_single        go to state 62
    lst_binary        go to state 63


State 27

   53 number: NUM_INT •

    ';'         reduce using rule 53 (number)
    AND         reduce using rule 53 (number)
    OR          reduce using rule 53 (number)
    GREATER     reduce using rule 53 (number)
    GREATER_EQ  reduce using rule 53 (number)
    LESS        reduce using rule 53 (number)
    LESS_EQ     reduce using rule 53 (number)
    EQUAL       reduce using rule 53 (number)
    NOT_EQ      reduce using rule 53 (number)
    '+'         reduce using rule 53 (number)
    '-'         reduce using rule 53 (number)
    '*'         reduce using rule 53 (number)
    '/'         reduce using rule 53 (number)
    FILTER      reduce using rule 53 (number)
    MAP         reduce using rule 53 (number)
    ':'         reduce using rule 53 (number)


State 28

   54 number: NUM_FLOAT •

    ';'         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)
    '+'         reduce using rule 54 (number)
    '-'         reduce using rule 54 (number)
    '*'         reduce using rule 54 (number)
    '/'         reduce using rule 54 (number)
    FILTER      reduce using rule 54 (number)
    MAP         reduce using rule 54 (number)
    ':'         reduce using rule 54 (number)


State 29

   52 const: NIL_CNST •

    ';'         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)
    '+'         reduce using rule 52 (const)
    '-'         reduce using rule 52 (const)
    '*'         reduce using rule 52 (const)
    '/'         reduce using rule 52 (const)
    FILTER      reduce using rule 52 (const)
    MAP         reduce using rule 52 (const)
    ':'         reduce using rule 52 (const)


State 30

   38 init_stmt: ID • '=' operation
   46 func_calling: ID • '(' calling_parameters ')'
   50 expression: ID •

    '('  shift, and go to state 64
    '='  shift, and go to state 65

    ';'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)
    FILTER      reduce using rule 50 (expression)
    MAP         reduce using rule 50 (expression)
    ':'         reduce using rule 50 (expression)


State 31

   35 return_stmt: RETURN_STM • operation ';'

    NUM_INT    shift, and go to state 27
    NUM_FLOAT  shift, and go to state 28
    NIL_CNST   shift, and go to state 29
    ID         shift, and go to state 66
    '+'        shift, and go to state 37
    '-'        shift, and go to state 38
    '%'        shift, and go to state 39
    '?'        shift, and go to state 40
    '!'        shift, and go to state 41

    func_calling      go to state 54
    expression        go to state 55
    const             go to state 56
    number            go to state 57
    operation         go to state 67
    single_operation  go to state 59
    arith_binary      go to state 60
    arith_single      go to state 61
    lst_single        go to state 62
    lst_binary        go to state 63


State 32

   33 conditional_stmt: IF_STMT • '(' operation ')' command
   34                 | IF_STMT • '(' operation ')' command ELSE_STMT command

    '('  shift, and go to state 68


State 33

   36 iteration: FOR_STMT • '(' loop_condition ')' command

    '('  shift, and go to state 69


State 34

   41 output: OUTPUT_WRITE • '(' operation ')' ';'
   43       | OUTPUT_WRITE • '(' STRING ')' ';'

    '('  shift, and go to state 70


State 35

   42 output: OUTPUT_WRITELN • '(' operation ')' ';'
   44       | OUTPUT_WRITELN • '(' STRING ')' ';'

    '('  shift, and go to state 71


State 36

   45 input: INPUT_READ • '(' expression ')' ';'

    '('  shift, and go to state 72


State 37

   72 arith_single: '+' • expression

    NUM_INT    shift, and go to state 27
    NUM_FLOAT  shift, and go to state 28
    NIL_CNST   shift, and go to state 29
    ID         shift, and go to state 66
    '+'        shift, and go to state 37
    '-'        shift, and go to state 38
    '%'        shift, and go to state 39
    '?'        shift, and go to state 40
    '!'        shift, and go to state 41

    func_calling      go to state 54
    expression        go to state 73
    const             go to state 56
    number            go to state 57
    single_operation  go to state 59
    arith_single      go to state 61
    lst_single        go to state 62


State 38

   73 arith_single: '-' • expression

    NUM_INT    shift, and go to state 27
    NUM_FLOAT  shift, and go to state 28
    NIL_CNST   shift, and go to state 29
    ID         shift, and go to state 66
    '+'        shift, and go to state 37
    '-'        shift, and go to state 38
    '%'        shift, and go to state 39
    '?'        shift, and go to state 40
    '!'        shift, and go to state 41

    func_calling      go to state 54
    expression        go to state 74
    const             go to state 56
    number            go to state 57
    single_operation  go to state 59
    arith_single      go to state 61
    lst_single        go to state 62


State 39

   74 lst_single: '%' • expression

    NUM_INT    shift, and go to state 27
    NUM_FLOAT  shift, and go to state 28
    NIL_CNST   shift, and go to state 29
    ID         shift, and go to state 66
    '+'        shift, and go to state 37
    '-'        shift, and go to state 38
    '%'        shift, and go to state 39
    '?'        shift, and go to state 40
    '!'        shift, and go to state 41

    func_calling      go to state 54
    expression        go to state 75
    const             go to state 56
    number            go to state 57
    single_operation  go to state 59
    arith_single      go to state 61
    lst_single        go to state 62


State 40

   75 lst_single: '?' • expression

    NUM_INT    shift, and go to state 27
    NUM_FLOAT  shift, and go to state 28
    NIL_CNST   shift, and go to state 29
    ID         shift, and go to state 66
    '+'        shift, and go to state 37
    '-'        shift, and go to state 38
    '%'        shift, and go to state 39
    '?'        shift, and go to state 40
    '!'        shift, and go to state 41

    func_calling      go to state 54
    expression        go to state 76
    const             go to state 56
    number            go to state 57
    single_operation  go to state 59
    arith_single      go to state 61
    lst_single        go to state 62


State 41

   66 single_operation: '!' • expression

    NUM_INT    shift, and go to state 27
    NUM_FLOAT  shift, and go to state 28
    NIL_CNST   shift, and go to state 29
    ID         shift, and go to state 66
    '+'        shift, and go to state 37
    '-'        shift, and go to state 38
    '%'        shift, and go to state 39
    '?'        shift, and go to state 40
    '!'        shift, and go to state 41

    func_calling      go to state 54
    expression        go to state 77
    const             go to state 56
    number            go to state 57
    single_operation  go to state 59
    arith_single      go to state 61
    lst_single        go to state 62


State 42

   22 command: var_declaration •

    NUM_INT         reduce using rule 22 (command)
    NUM_FLOAT       reduce using rule 22 (command)
    NIL_CNST        reduce using rule 22 (command)
    ID              reduce using rule 22 (command)
    RETURN_STM      reduce using rule 22 (command)
    T_INT           reduce using rule 22 (command)
    T_FLOAT         reduce using rule 22 (command)
    IF_STMT         reduce using rule 22 (command)
    FOR_STMT        reduce using rule 22 (command)
    OUTPUT_WRITE    reduce using rule 22 (command)
    OUTPUT_WRITELN  reduce using rule 22 (command)
    INPUT_READ      reduce using rule 22 (command)
    '{'             reduce using rule 22 (command)
    '}'             reduce using rule 22 (command)
    '+'             reduce using rule 22 (command)
    '-'             reduce using rule 22 (command)
    '%'             reduce using rule 22 (command)
    '?'             reduce using rule 22 (command)
    '!'             reduce using rule 22 (command)


State 43

   10 var_declaration: unq_declaration • ';'

    ';'  shift, and go to state 151


State 44

    9 func_declaration: unq_declaration $@1 '(' parameters ')' '{' block_commands • '}'

    '}'  shift, and go to state 78


State 45

   20 block_commands: command • block_commands
   21               | command •

    NUM_INT         shift, and go to state 27
    NUM_FLOAT       shift, and go to state 28
    NIL_CNST        shift, and go to state 29
    ID              shift, and go to state 30
    RETURN_STM      shift, and go to state 31
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 32
    FOR_STMT        shift, and go to state 33
    OUTPUT_WRITE    shift, and go to state 34
    OUTPUT_WRITELN  shift, and go to state 35
    INPUT_READ      shift, and go to state 36
    '+'             shift, and go to state 37
    '-'             shift, and go to state 38
    '%'             shift, and go to state 39
    '?'             shift, and go to state 40
    '!'             shift, and go to state 41

    '{'  reduce using rule 29 ($@2)
    '}'  reduce using rule 21 (block_commands)

    var_declaration   go to state 42
    unq_declaration   go to state 43
    block_commands    go to state 79
    command           go to state 45
    $@2               go to state 46
    init_variable     go to state 47
    conditional_stmt  go to state 48
    return_stmt       go to state 49
    iteration         go to state 50
    init_stmt         go to state 51
    output            go to state 52
    input             go to state 53
    func_calling      go to state 54
    expression        go to state 55
    const             go to state 56
    number            go to state 57
    type              go to state 150
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 58
    single_operation  go to state 59
    arith_binary      go to state 60
    arith_single      go to state 61
    lst_single        go to state 62
    lst_binary        go to state 63


State 46

   30 command: $@2 • '{' block_commands '}'

    '{'  shift, and go to state 80


State 47

   23 command: init_variable •

    NUM_INT         reduce using rule 23 (command)
    NUM_FLOAT       reduce using rule 23 (command)
    NIL_CNST        reduce using rule 23 (command)
    ID              reduce using rule 23 (command)
    RETURN_STM      reduce using rule 23 (command)
    T_INT           reduce using rule 23 (command)
    T_FLOAT         reduce using rule 23 (command)
    IF_STMT         reduce using rule 23 (command)
    FOR_STMT        reduce using rule 23 (command)
    OUTPUT_WRITE    reduce using rule 23 (command)
    OUTPUT_WRITELN  reduce using rule 23 (command)
    INPUT_READ      reduce using rule 23 (command)
    '{'             reduce using rule 23 (command)
    '}'             reduce using rule 23 (command)
    '+'             reduce using rule 23 (command)
    '-'             reduce using rule 23 (command)
    '%'             reduce using rule 23 (command)
    '?'             reduce using rule 23 (command)
    '!'             reduce using rule 23 (command)


State 48

   24 command: conditional_stmt •

    NUM_INT         reduce using rule 24 (command)
    NUM_FLOAT       reduce using rule 24 (command)
    NIL_CNST        reduce using rule 24 (command)
    ID              reduce using rule 24 (command)
    RETURN_STM      reduce using rule 24 (command)
    T_INT           reduce using rule 24 (command)
    T_FLOAT         reduce using rule 24 (command)
    IF_STMT         reduce using rule 24 (command)
    FOR_STMT        reduce using rule 24 (command)
    OUTPUT_WRITE    reduce using rule 24 (command)
    OUTPUT_WRITELN  reduce using rule 24 (command)
    INPUT_READ      reduce using rule 24 (command)
    '{'             reduce using rule 24 (command)
    '}'             reduce using rule 24 (command)
    '+'             reduce using rule 24 (command)
    '-'             reduce using rule 24 (command)
    '%'             reduce using rule 24 (command)
    '?'             reduce using rule 24 (command)
    '!'             reduce using rule 24 (command)


State 49

   25 command: return_stmt •

    NUM_INT         reduce using rule 25 (command)
    NUM_FLOAT       reduce using rule 25 (command)
    NIL_CNST        reduce using rule 25 (command)
    ID              reduce using rule 25 (command)
    RETURN_STM      reduce using rule 25 (command)
    T_INT           reduce using rule 25 (command)
    T_FLOAT         reduce using rule 25 (command)
    IF_STMT         reduce using rule 25 (command)
    FOR_STMT        reduce using rule 25 (command)
    OUTPUT_WRITE    reduce using rule 25 (command)
    OUTPUT_WRITELN  reduce using rule 25 (command)
    INPUT_READ      reduce using rule 25 (command)
    '{'             reduce using rule 25 (command)
    '}'             reduce using rule 25 (command)
    '+'             reduce using rule 25 (command)
    '-'             reduce using rule 25 (command)
    '%'             reduce using rule 25 (command)
    '?'             reduce using rule 25 (command)
    '!'             reduce using rule 25 (command)


State 50

   26 command: iteration •

    NUM_INT         reduce using rule 26 (command)
    NUM_FLOAT       reduce using rule 26 (command)
    NIL_CNST        reduce using rule 26 (command)
    ID              reduce using rule 26 (command)
    RETURN_STM      reduce using rule 26 (command)
    T_INT           reduce using rule 26 (command)
    T_FLOAT         reduce using rule 26 (command)
    IF_STMT         reduce using rule 26 (command)
    FOR_STMT        reduce using rule 26 (command)
    OUTPUT_WRITE    reduce using rule 26 (command)
    OUTPUT_WRITELN  reduce using rule 26 (command)
    INPUT_READ      reduce using rule 26 (command)
    '{'             reduce using rule 26 (command)
    '}'             reduce using rule 26 (command)
    '+'             reduce using rule 26 (command)
    '-'             reduce using rule 26 (command)
    '%'             reduce using rule 26 (command)
    '?'             reduce using rule 26 (command)
    '!'             reduce using rule 26 (command)


State 51

   32 init_variable: init_stmt • ';'

    ';'  shift, and go to state 81


State 52

   28 command: output •

    NUM_INT         reduce using rule 28 (command)
    NUM_FLOAT       reduce using rule 28 (command)
    NIL_CNST        reduce using rule 28 (command)
    ID              reduce using rule 28 (command)
    RETURN_STM      reduce using rule 28 (command)
    T_INT           reduce using rule 28 (command)
    T_FLOAT         reduce using rule 28 (command)
    IF_STMT         reduce using rule 28 (command)
    FOR_STMT        reduce using rule 28 (command)
    OUTPUT_WRITE    reduce using rule 28 (command)
    OUTPUT_WRITELN  reduce using rule 28 (command)
    INPUT_READ      reduce using rule 28 (command)
    '{'             reduce using rule 28 (command)
    '}'             reduce using rule 28 (command)
    '+'             reduce using rule 28 (command)
    '-'             reduce using rule 28 (command)
    '%'             reduce using rule 28 (command)
    '?'             reduce using rule 28 (command)
    '!'             reduce using rule 28 (command)


State 53

   27 command: input •

    NUM_INT         reduce using rule 27 (command)
    NUM_FLOAT       reduce using rule 27 (command)
    NIL_CNST        reduce using rule 27 (command)
    ID              reduce using rule 27 (command)
    RETURN_STM      reduce using rule 27 (command)
    T_INT           reduce using rule 27 (command)
    T_FLOAT         reduce using rule 27 (command)
    IF_STMT         reduce using rule 27 (command)
    FOR_STMT        reduce using rule 27 (command)
    OUTPUT_WRITE    reduce using rule 27 (command)
    OUTPUT_WRITELN  reduce using rule 27 (command)
    INPUT_READ      reduce using rule 27 (command)
    '{'             reduce using rule 27 (command)
    '}'             reduce using rule 27 (command)
    '+'             reduce using rule 27 (command)
    '-'             reduce using rule 27 (command)
    '%'             reduce using rule 27 (command)
    '?'             reduce using rule 27 (command)
    '!'             reduce using rule 27 (command)


State 54

   47 expression: func_calling •

    ';'         reduce using rule 47 (expression)
    AND         reduce using rule 47 (expression)
    OR          reduce using rule 47 (expression)
    GREATER     reduce using rule 47 (expression)
    GREATER_EQ  reduce using rule 47 (expression)
    LESS        reduce using rule 47 (expression)
    LESS_EQ     reduce using rule 47 (expression)
    EQUAL       reduce using rule 47 (expression)
    NOT_EQ      reduce using rule 47 (expression)
    '+'         reduce using rule 47 (expression)
    '-'         reduce using rule 47 (expression)
    '*'         reduce using rule 47 (expression)
    '/'         reduce using rule 47 (expression)
    FILTER      reduce using rule 47 (expression)
    MAP         reduce using rule 47 (expression)
    ':'         reduce using rule 47 (expression)


State 55

   71 arith_binary: expression •
   76 lst_binary: expression • FILTER expression
   77           | expression • MAP expression
   78           | expression • ':' expression

    FILTER  shift, and go to state 82
    MAP     shift, and go to state 83
    ':'     shift, and go to state 84

    ';'         reduce using rule 71 (arith_binary)
    AND         reduce using rule 71 (arith_binary)
    OR          reduce using rule 71 (arith_binary)
    GREATER     reduce using rule 71 (arith_binary)
    GREATER_EQ  reduce using rule 71 (arith_binary)
    LESS        reduce using rule 71 (arith_binary)
    LESS_EQ     reduce using rule 71 (arith_binary)
    EQUAL       reduce using rule 71 (arith_binary)
    NOT_EQ      reduce using rule 71 (arith_binary)
    '+'         reduce using rule 71 (arith_binary)
    '-'         reduce using rule 71 (arith_binary)
    '*'         reduce using rule 71 (arith_binary)
    '/'         reduce using rule 71 (arith_binary)


State 56

   49 expression: const •

    ';'         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)
    '+'         reduce using rule 49 (expression)
    '-'         reduce using rule 49 (expression)
    '*'         reduce using rule 49 (expression)
    '/'         reduce using rule 49 (expression)
    FILTER      reduce using rule 49 (expression)
    MAP         reduce using rule 49 (expression)
    ':'         reduce using rule 49 (expression)


State 57

   51 const: number •

    ';'         reduce using rule 51 (const)
    AND         reduce using rule 51 (const)
    OR          reduce using rule 51 (const)
    GREATER     reduce using rule 51 (const)
    GREATER_EQ  reduce using rule 51 (const)
    LESS        reduce using rule 51 (const)
    LESS_EQ     reduce using rule 51 (const)
    EQUAL       reduce using rule 51 (const)
    NOT_EQ      reduce using rule 51 (const)
    '+'         reduce using rule 51 (const)
    '-'         reduce using rule 51 (const)
    '*'         reduce using rule 51 (const)
    '/'         reduce using rule 51 (const)
    FILTER      reduce using rule 51 (const)
    MAP         reduce using rule 51 (const)
    ':'         reduce using rule 51 (const)


State 58

   31 command: operation • ';'
   62 operation: operation • relational_op expression
   63          | operation • logical_op expression

    ';'         shift, and go to state 85
    AND         shift, and go to state 86
    OR          shift, and go to state 87
    GREATER     shift, and go to state 88
    GREATER_EQ  shift, and go to state 89
    LESS        shift, and go to state 90
    LESS_EQ     shift, and go to state 91
    EQUAL       shift, and go to state 92
    NOT_EQ      shift, and go to state 93

    logical_op     go to state 94
    relational_op  go to state 95


State 59

   48 expression: single_operation •

    ';'         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)
    '+'         reduce using rule 48 (expression)
    '-'         reduce using rule 48 (expression)
    '*'         reduce using rule 48 (expression)
    '/'         reduce using rule 48 (expression)
    FILTER      reduce using rule 48 (expression)
    MAP         reduce using rule 48 (expression)
    ':'         reduce using rule 48 (expression)


State 60

   60 operation: arith_binary •
   67 arith_binary: arith_binary • '+' expression
   68             | arith_binary • '-' expression
   69             | arith_binary • '*' expression
   70             | arith_binary • '/' expression

    '+'  shift, and go to state 96
    '-'  shift, and go to state 97
    '*'  shift, and go to state 98
    '/'  shift, and go to state 99

    ';'         reduce using rule 60 (operation)
    AND         reduce using rule 60 (operation)
    OR          reduce using rule 60 (operation)
    GREATER     reduce using rule 60 (operation)
    GREATER_EQ  reduce using rule 60 (operation)
    LESS        reduce using rule 60 (operation)
    LESS_EQ     reduce using rule 60 (operation)
    EQUAL       reduce using rule 60 (operation)
    NOT_EQ      reduce using rule 60 (operation)


State 61

   64 single_operation: arith_single •

    ';'         reduce using rule 64 (single_operation)
    AND         reduce using rule 64 (single_operation)
    OR          reduce using rule 64 (single_operation)
    GREATER     reduce using rule 64 (single_operation)
    GREATER_EQ  reduce using rule 64 (single_operation)
    LESS        reduce using rule 64 (single_operation)
    LESS_EQ     reduce using rule 64 (single_operation)
    EQUAL       reduce using rule 64 (single_operation)
    NOT_EQ      reduce using rule 64 (single_operation)
    '+'         reduce using rule 64 (single_operation)
    '-'         reduce using rule 64 (single_operation)
    '*'         reduce using rule 64 (single_operation)
    '/'         reduce using rule 64 (single_operation)
    FILTER      reduce using rule 64 (single_operation)
    MAP         reduce using rule 64 (single_operation)
    ':'         reduce using rule 64 (single_operation)


State 62

   65 single_operation: lst_single •

    ';'         reduce using rule 65 (single_operation)
    AND         reduce using rule 65 (single_operation)
    OR          reduce using rule 65 (single_operation)
    GREATER     reduce using rule 65 (single_operation)
    GREATER_EQ  reduce using rule 65 (single_operation)
    LESS        reduce using rule 65 (single_operation)
    LESS_EQ     reduce using rule 65 (single_operation)
    EQUAL       reduce using rule 65 (single_operation)
    NOT_EQ      reduce using rule 65 (single_operation)
    '+'         reduce using rule 65 (single_operation)
    '-'         reduce using rule 65 (single_operation)
    '*'         reduce using rule 65 (single_operation)
    '/'         reduce using rule 65 (single_operation)
    FILTER      reduce using rule 65 (single_operation)
    MAP         reduce using rule 65 (single_operation)
    ':'         reduce using rule 65 (single_operation)


State 63

   61 operation: lst_binary •

    ';'         reduce using rule 61 (operation)
    AND         reduce using rule 61 (operation)
    OR          reduce using rule 61 (operation)
    GREATER     reduce using rule 61 (operation)
    GREATER_EQ  reduce using rule 61 (operation)
    LESS        reduce using rule 61 (operation)
    LESS_EQ     reduce using rule 61 (operation)
    EQUAL       reduce using rule 61 (operation)
    NOT_EQ      reduce using rule 61 (operation)


State 64

   46 func_calling: ID '(' • calling_parameters ')'

    NUM_INT    shift, and go to state 152
    NUM_FLOAT  shift, and go to state 153
    NIL_CNST   shift, and go to state 154
    ID         shift, and go to state 155
    '+'        shift, and go to state 156
    '-'        shift, and go to state 157
    '%'        shift, and go to state 158
    '?'        shift, and go to state 159
    '!'        shift, and go to state 160

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 100
    lst_calling_parameters  go to state 101
    func_calling            go to state 161
    expression              go to state 162
    const                   go to state 163
    number                  go to state 164
    operation               go to state 102
    single_operation        go to state 165
    arith_binary            go to state 166
    arith_single            go to state 167
    lst_single              go to state 168
    lst_binary              go to state 169


State 65

   38 init_stmt: ID '=' • operation

    NUM_INT    shift, and go to state 27
    NUM_FLOAT  shift, and go to state 28
    NIL_CNST   shift, and go to state 29
    ID         shift, and go to state 66
    '+'        shift, and go to state 37
    '-'        shift, and go to state 38
    '%'        shift, and go to state 39
    '?'        shift, and go to state 40
    '!'        shift, and go to state 41

    func_calling      go to state 54
    expression        go to state 55
    const             go to state 56
    number            go to state 57
    operation         go to state 103
    single_operation  go to state 59
    arith_binary      go to state 60
    arith_single      go to state 61
    lst_single        go to state 62
    lst_binary        go to state 63


State 66

   46 func_calling: ID • '(' calling_parameters ')'
   50 expression: ID •

    '('  shift, and go to state 64

    ';'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)
    FILTER      reduce using rule 50 (expression)
    MAP         reduce using rule 50 (expression)
    ':'         reduce using rule 50 (expression)


State 67

   35 return_stmt: RETURN_STM operation • ';'
   62 operation: operation • relational_op expression
   63          | operation • logical_op expression

    ';'         shift, and go to state 104
    AND         shift, and go to state 86
    OR          shift, and go to state 87
    GREATER     shift, and go to state 88
    GREATER_EQ  shift, and go to state 89
    LESS        shift, and go to state 90
    LESS_EQ     shift, and go to state 91
    EQUAL       shift, and go to state 92
    NOT_EQ      shift, and go to state 93

    logical_op     go to state 94
    relational_op  go to state 95


State 68

   33 conditional_stmt: IF_STMT '(' • operation ')' command
   34                 | IF_STMT '(' • operation ')' command ELSE_STMT command

    NUM_INT    shift, and go to state 170
    NUM_FLOAT  shift, and go to state 171
    NIL_CNST   shift, and go to state 172
    ID         shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    expression        go to state 180
    const             go to state 181
    number            go to state 182
    operation         go to state 105
    single_operation  go to state 183
    arith_binary      go to state 184
    arith_single      go to state 185
    lst_single        go to state 186
    lst_binary        go to state 187


State 69

   36 iteration: FOR_STMT '(' • loop_condition ')' command

    ID  shift, and go to state 106

    loop_condition  go to state 107
    init_stmt       go to state 108


State 70

   41 output: OUTPUT_WRITE '(' • operation ')' ';'
   43       | OUTPUT_WRITE '(' • STRING ')' ';'

    NUM_INT    shift, and go to state 170
    NUM_FLOAT  shift, and go to state 171
    STRING     shift, and go to state 109
    NIL_CNST   shift, and go to state 172
    ID         shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    expression        go to state 180
    const             go to state 181
    number            go to state 182
    operation         go to state 110
    single_operation  go to state 183
    arith_binary      go to state 184
    arith_single      go to state 185
    lst_single        go to state 186
    lst_binary        go to state 187


State 71

   42 output: OUTPUT_WRITELN '(' • operation ')' ';'
   44       | OUTPUT_WRITELN '(' • STRING ')' ';'

    NUM_INT    shift, and go to state 170
    NUM_FLOAT  shift, and go to state 171
    STRING     shift, and go to state 111
    NIL_CNST   shift, and go to state 172
    ID         shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    expression        go to state 180
    const             go to state 181
    number            go to state 182
    operation         go to state 112
    single_operation  go to state 183
    arith_binary      go to state 184
    arith_single      go to state 185
    lst_single        go to state 186
    lst_binary        go to state 187


State 72

   45 input: INPUT_READ '(' • expression ')' ';'

    NUM_INT    shift, and go to state 188
    NUM_FLOAT  shift, and go to state 189
    NIL_CNST   shift, and go to state 190
    ID         shift, and go to state 191
    '+'        shift, and go to state 192
    '-'        shift, and go to state 193
    '%'        shift, and go to state 194
    '?'        shift, and go to state 195
    '!'        shift, and go to state 196

    func_calling      go to state 197
    expression        go to state 113
    const             go to state 198
    number            go to state 199
    single_operation  go to state 200
    arith_single      go to state 201
    lst_single        go to state 202


State 73

   72 arith_single: '+' expression •

    ';'         reduce using rule 72 (arith_single)
    AND         reduce using rule 72 (arith_single)
    OR          reduce using rule 72 (arith_single)
    GREATER     reduce using rule 72 (arith_single)
    GREATER_EQ  reduce using rule 72 (arith_single)
    LESS        reduce using rule 72 (arith_single)
    LESS_EQ     reduce using rule 72 (arith_single)
    EQUAL       reduce using rule 72 (arith_single)
    NOT_EQ      reduce using rule 72 (arith_single)
    '+'         reduce using rule 72 (arith_single)
    '-'         reduce using rule 72 (arith_single)
    '*'         reduce using rule 72 (arith_single)
    '/'         reduce using rule 72 (arith_single)
    FILTER      reduce using rule 72 (arith_single)
    MAP         reduce using rule 72 (arith_single)
    ':'         reduce using rule 72 (arith_single)


State 74

   73 arith_single: '-' expression •

    ';'         reduce using rule 73 (arith_single)
    AND         reduce using rule 73 (arith_single)
    OR          reduce using rule 73 (arith_single)
    GREATER     reduce using rule 73 (arith_single)
    GREATER_EQ  reduce using rule 73 (arith_single)
    LESS        reduce using rule 73 (arith_single)
    LESS_EQ     reduce using rule 73 (arith_single)
    EQUAL       reduce using rule 73 (arith_single)
    NOT_EQ      reduce using rule 73 (arith_single)
    '+'         reduce using rule 73 (arith_single)
    '-'         reduce using rule 73 (arith_single)
    '*'         reduce using rule 73 (arith_single)
    '/'         reduce using rule 73 (arith_single)
    FILTER      reduce using rule 73 (arith_single)
    MAP         reduce using rule 73 (arith_single)
    ':'         reduce using rule 73 (arith_single)


State 75

   74 lst_single: '%' expression •

    ';'         reduce using rule 74 (lst_single)
    AND         reduce using rule 74 (lst_single)
    OR          reduce using rule 74 (lst_single)
    GREATER     reduce using rule 74 (lst_single)
    GREATER_EQ  reduce using rule 74 (lst_single)
    LESS        reduce using rule 74 (lst_single)
    LESS_EQ     reduce using rule 74 (lst_single)
    EQUAL       reduce using rule 74 (lst_single)
    NOT_EQ      reduce using rule 74 (lst_single)
    '+'         reduce using rule 74 (lst_single)
    '-'         reduce using rule 74 (lst_single)
    '*'         reduce using rule 74 (lst_single)
    '/'         reduce using rule 74 (lst_single)
    FILTER      reduce using rule 74 (lst_single)
    MAP         reduce using rule 74 (lst_single)
    ':'         reduce using rule 74 (lst_single)


State 76

   75 lst_single: '?' expression •

    ';'         reduce using rule 75 (lst_single)
    AND         reduce using rule 75 (lst_single)
    OR          reduce using rule 75 (lst_single)
    GREATER     reduce using rule 75 (lst_single)
    GREATER_EQ  reduce using rule 75 (lst_single)
    LESS        reduce using rule 75 (lst_single)
    LESS_EQ     reduce using rule 75 (lst_single)
    EQUAL       reduce using rule 75 (lst_single)
    NOT_EQ      reduce using rule 75 (lst_single)
    '+'         reduce using rule 75 (lst_single)
    '-'         reduce using rule 75 (lst_single)
    '*'         reduce using rule 75 (lst_single)
    '/'         reduce using rule 75 (lst_single)
    FILTER      reduce using rule 75 (lst_single)
    MAP         reduce using rule 75 (lst_single)
    ':'         reduce using rule 75 (lst_single)


State 77

   66 single_operation: '!' expression •

    ';'         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)
    '+'         reduce using rule 66 (single_operation)
    '-'         reduce using rule 66 (single_operation)
    '*'         reduce using rule 66 (single_operation)
    '/'         reduce using rule 66 (single_operation)
    FILTER      reduce using rule 66 (single_operation)
    MAP         reduce using rule 66 (single_operation)
    ':'         reduce using rule 66 (single_operation)


State 78

    9 func_declaration: unq_declaration $@1 '(' parameters ')' '{' block_commands '}' •

    $end     reduce using rule 9 (func_declaration)
    error    reduce using rule 9 (func_declaration)
    T_INT    reduce using rule 9 (func_declaration)
    T_FLOAT  reduce using rule 9 (func_declaration)


State 79

   20 block_commands: command block_commands •

    '}'  reduce using rule 20 (block_commands)


State 80

   30 command: $@2 '{' • block_commands '}'

    NUM_INT         shift, and go to state 27
    NUM_FLOAT       shift, and go to state 28
    NIL_CNST        shift, and go to state 29
    ID              shift, and go to state 30
    RETURN_STM      shift, and go to state 31
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 32
    FOR_STMT        shift, and go to state 33
    OUTPUT_WRITE    shift, and go to state 34
    OUTPUT_WRITELN  shift, and go to state 35
    INPUT_READ      shift, and go to state 36
    '+'             shift, and go to state 37
    '-'             shift, and go to state 38
    '%'             shift, and go to state 39
    '?'             shift, and go to state 40
    '!'             shift, and go to state 41

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 42
    unq_declaration   go to state 43
    block_commands    go to state 114
    command           go to state 45
    $@2               go to state 46
    init_variable     go to state 47
    conditional_stmt  go to state 48
    return_stmt       go to state 49
    iteration         go to state 50
    init_stmt         go to state 51
    output            go to state 52
    input             go to state 53
    func_calling      go to state 54
    expression        go to state 55
    const             go to state 56
    number            go to state 57
    type              go to state 150
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 58
    single_operation  go to state 59
    arith_binary      go to state 60
    arith_single      go to state 61
    lst_single        go to state 62
    lst_binary        go to state 63


State 81

   32 init_variable: init_stmt ';' •

    NUM_INT         reduce using rule 32 (init_variable)
    NUM_FLOAT       reduce using rule 32 (init_variable)
    NIL_CNST        reduce using rule 32 (init_variable)
    ID              reduce using rule 32 (init_variable)
    RETURN_STM      reduce using rule 32 (init_variable)
    T_INT           reduce using rule 32 (init_variable)
    T_FLOAT         reduce using rule 32 (init_variable)
    IF_STMT         reduce using rule 32 (init_variable)
    FOR_STMT        reduce using rule 32 (init_variable)
    OUTPUT_WRITE    reduce using rule 32 (init_variable)
    OUTPUT_WRITELN  reduce using rule 32 (init_variable)
    INPUT_READ      reduce using rule 32 (init_variable)
    '{'             reduce using rule 32 (init_variable)
    '}'             reduce using rule 32 (init_variable)
    '+'             reduce using rule 32 (init_variable)
    '-'             reduce using rule 32 (init_variable)
    '%'             reduce using rule 32 (init_variable)
    '?'             reduce using rule 32 (init_variable)
    '!'             reduce using rule 32 (init_variable)


State 82

   76 lst_binary: expression FILTER • expression

    NUM_INT    shift, and go to state 203
    NUM_FLOAT  shift, and go to state 204
    NIL_CNST   shift, and go to state 205
    ID         shift, and go to state 206
    '+'        shift, and go to state 207
    '-'        shift, and go to state 208
    '%'        shift, and go to state 209
    '?'        shift, and go to state 210
    '!'        shift, and go to state 211

    func_calling      go to state 212
    expression        go to state 115
    const             go to state 213
    number            go to state 214
    single_operation  go to state 215
    arith_single      go to state 216
    lst_single        go to state 217


State 83

   77 lst_binary: expression MAP • expression

    NUM_INT    shift, and go to state 203
    NUM_FLOAT  shift, and go to state 204
    NIL_CNST   shift, and go to state 205
    ID         shift, and go to state 206
    '+'        shift, and go to state 207
    '-'        shift, and go to state 208
    '%'        shift, and go to state 209
    '?'        shift, and go to state 210
    '!'        shift, and go to state 211

    func_calling      go to state 212
    expression        go to state 116
    const             go to state 213
    number            go to state 214
    single_operation  go to state 215
    arith_single      go to state 216
    lst_single        go to state 217


State 84

   78 lst_binary: expression ':' • expression

    NUM_INT    shift, and go to state 203
    NUM_FLOAT  shift, and go to state 204
    NIL_CNST   shift, and go to state 205
    ID         shift, and go to state 206
    '+'        shift, and go to state 207
    '-'        shift, and go to state 208
    '%'        shift, and go to state 209
    '?'        shift, and go to state 210
    '!'        shift, and go to state 211

    func_calling      go to state 212
    expression        go to state 117
    const             go to state 213
    number            go to state 214
    single_operation  go to state 215
    arith_single      go to state 216
    lst_single        go to state 217


State 85

   31 command: operation ';' •

    NUM_INT         reduce using rule 31 (command)
    NUM_FLOAT       reduce using rule 31 (command)
    NIL_CNST        reduce using rule 31 (command)
    ID              reduce using rule 31 (command)
    RETURN_STM      reduce using rule 31 (command)
    T_INT           reduce using rule 31 (command)
    T_FLOAT         reduce using rule 31 (command)
    IF_STMT         reduce using rule 31 (command)
    FOR_STMT        reduce using rule 31 (command)
    OUTPUT_WRITE    reduce using rule 31 (command)
    OUTPUT_WRITELN  reduce using rule 31 (command)
    INPUT_READ      reduce using rule 31 (command)
    '{'             reduce using rule 31 (command)
    '}'             reduce using rule 31 (command)
    '+'             reduce using rule 31 (command)
    '-'             reduce using rule 31 (command)
    '%'             reduce using rule 31 (command)
    '?'             reduce using rule 31 (command)
    '!'             reduce using rule 31 (command)


State 86

   79 logical_op: AND •

    NUM_INT    reduce using rule 79 (logical_op)
    NUM_FLOAT  reduce using rule 79 (logical_op)
    NIL_CNST   reduce using rule 79 (logical_op)
    ID         reduce using rule 79 (logical_op)
    '+'        reduce using rule 79 (logical_op)
    '-'        reduce using rule 79 (logical_op)
    '%'        reduce using rule 79 (logical_op)
    '?'        reduce using rule 79 (logical_op)
    '!'        reduce using rule 79 (logical_op)


State 87

   80 logical_op: OR •

    NUM_INT    reduce using rule 80 (logical_op)
    NUM_FLOAT  reduce using rule 80 (logical_op)
    NIL_CNST   reduce using rule 80 (logical_op)
    ID         reduce using rule 80 (logical_op)
    '+'        reduce using rule 80 (logical_op)
    '-'        reduce using rule 80 (logical_op)
    '%'        reduce using rule 80 (logical_op)
    '?'        reduce using rule 80 (logical_op)
    '!'        reduce using rule 80 (logical_op)


State 88

   81 relational_op: GREATER •

    NUM_INT    reduce using rule 81 (relational_op)
    NUM_FLOAT  reduce using rule 81 (relational_op)
    NIL_CNST   reduce using rule 81 (relational_op)
    ID         reduce using rule 81 (relational_op)
    '+'        reduce using rule 81 (relational_op)
    '-'        reduce using rule 81 (relational_op)
    '%'        reduce using rule 81 (relational_op)
    '?'        reduce using rule 81 (relational_op)
    '!'        reduce using rule 81 (relational_op)


State 89

   82 relational_op: GREATER_EQ •

    NUM_INT    reduce using rule 82 (relational_op)
    NUM_FLOAT  reduce using rule 82 (relational_op)
    NIL_CNST   reduce using rule 82 (relational_op)
    ID         reduce using rule 82 (relational_op)
    '+'        reduce using rule 82 (relational_op)
    '-'        reduce using rule 82 (relational_op)
    '%'        reduce using rule 82 (relational_op)
    '?'        reduce using rule 82 (relational_op)
    '!'        reduce using rule 82 (relational_op)


State 90

   83 relational_op: LESS •

    NUM_INT    reduce using rule 83 (relational_op)
    NUM_FLOAT  reduce using rule 83 (relational_op)
    NIL_CNST   reduce using rule 83 (relational_op)
    ID         reduce using rule 83 (relational_op)
    '+'        reduce using rule 83 (relational_op)
    '-'        reduce using rule 83 (relational_op)
    '%'        reduce using rule 83 (relational_op)
    '?'        reduce using rule 83 (relational_op)
    '!'        reduce using rule 83 (relational_op)


State 91

   84 relational_op: LESS_EQ •

    NUM_INT    reduce using rule 84 (relational_op)
    NUM_FLOAT  reduce using rule 84 (relational_op)
    NIL_CNST   reduce using rule 84 (relational_op)
    ID         reduce using rule 84 (relational_op)
    '+'        reduce using rule 84 (relational_op)
    '-'        reduce using rule 84 (relational_op)
    '%'        reduce using rule 84 (relational_op)
    '?'        reduce using rule 84 (relational_op)
    '!'        reduce using rule 84 (relational_op)


State 92

   85 relational_op: EQUAL •

    NUM_INT    reduce using rule 85 (relational_op)
    NUM_FLOAT  reduce using rule 85 (relational_op)
    NIL_CNST   reduce using rule 85 (relational_op)
    ID         reduce using rule 85 (relational_op)
    '+'        reduce using rule 85 (relational_op)
    '-'        reduce using rule 85 (relational_op)
    '%'        reduce using rule 85 (relational_op)
    '?'        reduce using rule 85 (relational_op)
    '!'        reduce using rule 85 (relational_op)


State 93

   86 relational_op: NOT_EQ •

    NUM_INT    reduce using rule 86 (relational_op)
    NUM_FLOAT  reduce using rule 86 (relational_op)
    NIL_CNST   reduce using rule 86 (relational_op)
    ID         reduce using rule 86 (relational_op)
    '+'        reduce using rule 86 (relational_op)
    '-'        reduce using rule 86 (relational_op)
    '%'        reduce using rule 86 (relational_op)
    '?'        reduce using rule 86 (relational_op)
    '!'        reduce using rule 86 (relational_op)


State 94

   63 operation: operation logical_op • expression

    NUM_INT    shift, and go to state 203
    NUM_FLOAT  shift, and go to state 204
    NIL_CNST   shift, and go to state 205
    ID         shift, and go to state 206
    '+'        shift, and go to state 207
    '-'        shift, and go to state 208
    '%'        shift, and go to state 209
    '?'        shift, and go to state 210
    '!'        shift, and go to state 211

    func_calling      go to state 212
    expression        go to state 118
    const             go to state 213
    number            go to state 214
    single_operation  go to state 215
    arith_single      go to state 216
    lst_single        go to state 217


State 95

   62 operation: operation relational_op • expression

    NUM_INT    shift, and go to state 203
    NUM_FLOAT  shift, and go to state 204
    NIL_CNST   shift, and go to state 205
    ID         shift, and go to state 206
    '+'        shift, and go to state 207
    '-'        shift, and go to state 208
    '%'        shift, and go to state 209
    '?'        shift, and go to state 210
    '!'        shift, and go to state 211

    func_calling      go to state 212
    expression        go to state 119
    const             go to state 213
    number            go to state 214
    single_operation  go to state 215
    arith_single      go to state 216
    lst_single        go to state 217


State 96

   67 arith_binary: arith_binary '+' • expression

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    func_calling      go to state 227
    expression        go to state 120
    const             go to state 228
    number            go to state 229
    single_operation  go to state 230
    arith_single      go to state 231
    lst_single        go to state 232


State 97

   68 arith_binary: arith_binary '-' • expression

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    func_calling      go to state 227
    expression        go to state 121
    const             go to state 228
    number            go to state 229
    single_operation  go to state 230
    arith_single      go to state 231
    lst_single        go to state 232


State 98

   69 arith_binary: arith_binary '*' • expression

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    func_calling      go to state 227
    expression        go to state 122
    const             go to state 228
    number            go to state 229
    single_operation  go to state 230
    arith_single      go to state 231
    lst_single        go to state 232


State 99

   70 arith_binary: arith_binary '/' • expression

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    func_calling      go to state 227
    expression        go to state 123
    const             go to state 228
    number            go to state 229
    single_operation  go to state 230
    arith_single      go to state 231
    lst_single        go to state 232


State 100

   46 func_calling: ID '(' calling_parameters • ')'

    ')'  shift, and go to state 124


State 101

   16 calling_parameters: lst_calling_parameters •

    ')'  reduce using rule 16 (calling_parameters)


State 102

   18 lst_calling_parameters: operation • ',' lst_calling_parameters
   19                       | operation •
   62 operation: operation • relational_op expression
   63          | operation • logical_op expression

    ','         shift, and go to state 125
    AND         shift, and go to state 86
    OR          shift, and go to state 87
    GREATER     shift, and go to state 88
    GREATER_EQ  shift, and go to state 89
    LESS        shift, and go to state 90
    LESS_EQ     shift, and go to state 91
    EQUAL       shift, and go to state 92
    NOT_EQ      shift, and go to state 93

    ')'  reduce using rule 19 (lst_calling_parameters)

    logical_op     go to state 233
    relational_op  go to state 234


State 103

   38 init_stmt: ID '=' operation •
   62 operation: operation • relational_op expression
   63          | operation • logical_op expression

    AND         shift, and go to state 86
    OR          shift, and go to state 87
    GREATER     shift, and go to state 88
    GREATER_EQ  shift, and go to state 89
    LESS        shift, and go to state 90
    LESS_EQ     shift, and go to state 91
    EQUAL       shift, and go to state 92
    NOT_EQ      shift, and go to state 93

    ';'  reduce using rule 38 (init_stmt)

    logical_op     go to state 94
    relational_op  go to state 95


State 104

   35 return_stmt: RETURN_STM operation ';' •

    NUM_INT         reduce using rule 35 (return_stmt)
    NUM_FLOAT       reduce using rule 35 (return_stmt)
    NIL_CNST        reduce using rule 35 (return_stmt)
    ID              reduce using rule 35 (return_stmt)
    RETURN_STM      reduce using rule 35 (return_stmt)
    T_INT           reduce using rule 35 (return_stmt)
    T_FLOAT         reduce using rule 35 (return_stmt)
    IF_STMT         reduce using rule 35 (return_stmt)
    FOR_STMT        reduce using rule 35 (return_stmt)
    OUTPUT_WRITE    reduce using rule 35 (return_stmt)
    OUTPUT_WRITELN  reduce using rule 35 (return_stmt)
    INPUT_READ      reduce using rule 35 (return_stmt)
    '{'             reduce using rule 35 (return_stmt)
    '}'             reduce using rule 35 (return_stmt)
    '+'             reduce using rule 35 (return_stmt)
    '-'             reduce using rule 35 (return_stmt)
    '%'             reduce using rule 35 (return_stmt)
    '?'             reduce using rule 35 (return_stmt)
    '!'             reduce using rule 35 (return_stmt)


State 105

   33 conditional_stmt: IF_STMT '(' operation • ')' command
   34                 | IF_STMT '(' operation • ')' command ELSE_STMT command
   62 operation: operation • relational_op expression
   63          | operation • logical_op expression

    ')'         shift, and go to state 126
    AND         shift, and go to state 86
    OR          shift, and go to state 87
    GREATER     shift, and go to state 88
    GREATER_EQ  shift, and go to state 89
    LESS        shift, and go to state 90
    LESS_EQ     shift, and go to state 91
    EQUAL       shift, and go to state 92
    NOT_EQ      shift, and go to state 93

    logical_op     go to state 235
    relational_op  go to state 236


State 106

   38 init_stmt: ID • '=' operation

    '='  shift, and go to state 65


State 107

   36 iteration: FOR_STMT '(' loop_condition • ')' command

    ')'  shift, and go to state 127


State 108

   37 loop_condition: init_stmt • ';' operation ';' update_stmt

    ';'  shift, and go to state 128


State 109

   43 output: OUTPUT_WRITE '(' STRING • ')' ';'

    ')'  shift, and go to state 129


State 110

   41 output: OUTPUT_WRITE '(' operation • ')' ';'
   62 operation: operation • relational_op expression
   63          | operation • logical_op expression

    ')'         shift, and go to state 130
    AND         shift, and go to state 86
    OR          shift, and go to state 87
    GREATER     shift, and go to state 88
    GREATER_EQ  shift, and go to state 89
    LESS        shift, and go to state 90
    LESS_EQ     shift, and go to state 91
    EQUAL       shift, and go to state 92
    NOT_EQ      shift, and go to state 93

    logical_op     go to state 235
    relational_op  go to state 236


State 111

   44 output: OUTPUT_WRITELN '(' STRING • ')' ';'

    ')'  shift, and go to state 131


State 112

   42 output: OUTPUT_WRITELN '(' operation • ')' ';'
   62 operation: operation • relational_op expression
   63          | operation • logical_op expression

    ')'         shift, and go to state 132
    AND         shift, and go to state 86
    OR          shift, and go to state 87
    GREATER     shift, and go to state 88
    GREATER_EQ  shift, and go to state 89
    LESS        shift, and go to state 90
    LESS_EQ     shift, and go to state 91
    EQUAL       shift, and go to state 92
    NOT_EQ      shift, and go to state 93

    logical_op     go to state 235
    relational_op  go to state 236


State 113

   45 input: INPUT_READ '(' expression • ')' ';'

    ')'  shift, and go to state 133


State 114

   30 command: $@2 '{' block_commands • '}'

    '}'  shift, and go to state 134


State 115

   76 lst_binary: expression FILTER expression •

    ';'         reduce using rule 76 (lst_binary)
    AND         reduce using rule 76 (lst_binary)
    OR          reduce using rule 76 (lst_binary)
    GREATER     reduce using rule 76 (lst_binary)
    GREATER_EQ  reduce using rule 76 (lst_binary)
    LESS        reduce using rule 76 (lst_binary)
    LESS_EQ     reduce using rule 76 (lst_binary)
    EQUAL       reduce using rule 76 (lst_binary)
    NOT_EQ      reduce using rule 76 (lst_binary)


State 116

   77 lst_binary: expression MAP expression •

    ';'         reduce using rule 77 (lst_binary)
    AND         reduce using rule 77 (lst_binary)
    OR          reduce using rule 77 (lst_binary)
    GREATER     reduce using rule 77 (lst_binary)
    GREATER_EQ  reduce using rule 77 (lst_binary)
    LESS        reduce using rule 77 (lst_binary)
    LESS_EQ     reduce using rule 77 (lst_binary)
    EQUAL       reduce using rule 77 (lst_binary)
    NOT_EQ      reduce using rule 77 (lst_binary)


State 117

   78 lst_binary: expression ':' expression •

    ';'         reduce using rule 78 (lst_binary)
    AND         reduce using rule 78 (lst_binary)
    OR          reduce using rule 78 (lst_binary)
    GREATER     reduce using rule 78 (lst_binary)
    GREATER_EQ  reduce using rule 78 (lst_binary)
    LESS        reduce using rule 78 (lst_binary)
    LESS_EQ     reduce using rule 78 (lst_binary)
    EQUAL       reduce using rule 78 (lst_binary)
    NOT_EQ      reduce using rule 78 (lst_binary)


State 118

   63 operation: operation logical_op expression •

    ';'         reduce using rule 63 (operation)
    AND         reduce using rule 63 (operation)
    OR          reduce using rule 63 (operation)
    GREATER     reduce using rule 63 (operation)
    GREATER_EQ  reduce using rule 63 (operation)
    LESS        reduce using rule 63 (operation)
    LESS_EQ     reduce using rule 63 (operation)
    EQUAL       reduce using rule 63 (operation)
    NOT_EQ      reduce using rule 63 (operation)


State 119

   62 operation: operation relational_op expression •

    ';'         reduce using rule 62 (operation)
    AND         reduce using rule 62 (operation)
    OR          reduce using rule 62 (operation)
    GREATER     reduce using rule 62 (operation)
    GREATER_EQ  reduce using rule 62 (operation)
    LESS        reduce using rule 62 (operation)
    LESS_EQ     reduce using rule 62 (operation)
    EQUAL       reduce using rule 62 (operation)
    NOT_EQ      reduce using rule 62 (operation)


State 120

   67 arith_binary: arith_binary '+' expression •

    ';'         reduce using rule 67 (arith_binary)
    AND         reduce using rule 67 (arith_binary)
    OR          reduce using rule 67 (arith_binary)
    GREATER     reduce using rule 67 (arith_binary)
    GREATER_EQ  reduce using rule 67 (arith_binary)
    LESS        reduce using rule 67 (arith_binary)
    LESS_EQ     reduce using rule 67 (arith_binary)
    EQUAL       reduce using rule 67 (arith_binary)
    NOT_EQ      reduce using rule 67 (arith_binary)
    '+'         reduce using rule 67 (arith_binary)
    '-'         reduce using rule 67 (arith_binary)
    '*'         reduce using rule 67 (arith_binary)
    '/'         reduce using rule 67 (arith_binary)


State 121

   68 arith_binary: arith_binary '-' expression •

    ';'         reduce using rule 68 (arith_binary)
    AND         reduce using rule 68 (arith_binary)
    OR          reduce using rule 68 (arith_binary)
    GREATER     reduce using rule 68 (arith_binary)
    GREATER_EQ  reduce using rule 68 (arith_binary)
    LESS        reduce using rule 68 (arith_binary)
    LESS_EQ     reduce using rule 68 (arith_binary)
    EQUAL       reduce using rule 68 (arith_binary)
    NOT_EQ      reduce using rule 68 (arith_binary)
    '+'         reduce using rule 68 (arith_binary)
    '-'         reduce using rule 68 (arith_binary)
    '*'         reduce using rule 68 (arith_binary)
    '/'         reduce using rule 68 (arith_binary)


State 122

   69 arith_binary: arith_binary '*' expression •

    ';'         reduce using rule 69 (arith_binary)
    AND         reduce using rule 69 (arith_binary)
    OR          reduce using rule 69 (arith_binary)
    GREATER     reduce using rule 69 (arith_binary)
    GREATER_EQ  reduce using rule 69 (arith_binary)
    LESS        reduce using rule 69 (arith_binary)
    LESS_EQ     reduce using rule 69 (arith_binary)
    EQUAL       reduce using rule 69 (arith_binary)
    NOT_EQ      reduce using rule 69 (arith_binary)
    '+'         reduce using rule 69 (arith_binary)
    '-'         reduce using rule 69 (arith_binary)
    '*'         reduce using rule 69 (arith_binary)
    '/'         reduce using rule 69 (arith_binary)


State 123

   70 arith_binary: arith_binary '/' expression •

    ';'         reduce using rule 70 (arith_binary)
    AND         reduce using rule 70 (arith_binary)
    OR          reduce using rule 70 (arith_binary)
    GREATER     reduce using rule 70 (arith_binary)
    GREATER_EQ  reduce using rule 70 (arith_binary)
    LESS        reduce using rule 70 (arith_binary)
    LESS_EQ     reduce using rule 70 (arith_binary)
    EQUAL       reduce using rule 70 (arith_binary)
    NOT_EQ      reduce using rule 70 (arith_binary)
    '+'         reduce using rule 70 (arith_binary)
    '-'         reduce using rule 70 (arith_binary)
    '*'         reduce using rule 70 (arith_binary)
    '/'         reduce using rule 70 (arith_binary)


State 124

   46 func_calling: ID '(' calling_parameters ')' •

    ';'         reduce using rule 46 (func_calling)
    AND         reduce using rule 46 (func_calling)
    OR          reduce using rule 46 (func_calling)
    GREATER     reduce using rule 46 (func_calling)
    GREATER_EQ  reduce using rule 46 (func_calling)
    LESS        reduce using rule 46 (func_calling)
    LESS_EQ     reduce using rule 46 (func_calling)
    EQUAL       reduce using rule 46 (func_calling)
    NOT_EQ      reduce using rule 46 (func_calling)
    '+'         reduce using rule 46 (func_calling)
    '-'         reduce using rule 46 (func_calling)
    '*'         reduce using rule 46 (func_calling)
    '/'         reduce using rule 46 (func_calling)
    FILTER      reduce using rule 46 (func_calling)
    MAP         reduce using rule 46 (func_calling)
    ':'         reduce using rule 46 (func_calling)


State 125

   18 lst_calling_parameters: operation ',' • lst_calling_parameters

    NUM_INT    shift, and go to state 152
    NUM_FLOAT  shift, and go to state 153
    NIL_CNST   shift, and go to state 154
    ID         shift, and go to state 155
    '+'        shift, and go to state 156
    '-'        shift, and go to state 157
    '%'        shift, and go to state 158
    '?'        shift, and go to state 159
    '!'        shift, and go to state 160

    lst_calling_parameters  go to state 135
    func_calling            go to state 161
    expression              go to state 162
    const                   go to state 163
    number                  go to state 164
    operation               go to state 102
    single_operation        go to state 165
    arith_binary            go to state 166
    arith_single            go to state 167
    lst_single              go to state 168
    lst_binary              go to state 169


State 126

   33 conditional_stmt: IF_STMT '(' operation ')' • command
   34                 | IF_STMT '(' operation ')' • command ELSE_STMT command

    NUM_INT         shift, and go to state 27
    NUM_FLOAT       shift, and go to state 28
    NIL_CNST        shift, and go to state 29
    ID              shift, and go to state 30
    RETURN_STM      shift, and go to state 237
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 238
    FOR_STMT        shift, and go to state 239
    OUTPUT_WRITE    shift, and go to state 240
    OUTPUT_WRITELN  shift, and go to state 241
    INPUT_READ      shift, and go to state 242
    '+'             shift, and go to state 37
    '-'             shift, and go to state 38
    '%'             shift, and go to state 39
    '?'             shift, and go to state 40
    '!'             shift, and go to state 41

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 243
    unq_declaration   go to state 244
    command           go to state 136
    $@2               go to state 245
    init_variable     go to state 246
    conditional_stmt  go to state 247
    return_stmt       go to state 248
    iteration         go to state 249
    init_stmt         go to state 250
    output            go to state 251
    input             go to state 252
    func_calling      go to state 54
    expression        go to state 55
    const             go to state 56
    number            go to state 57
    type              go to state 150
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 253
    single_operation  go to state 59
    arith_binary      go to state 60
    arith_single      go to state 61
    lst_single        go to state 62
    lst_binary        go to state 63


State 127

   36 iteration: FOR_STMT '(' loop_condition ')' • command

    NUM_INT         shift, and go to state 27
    NUM_FLOAT       shift, and go to state 28
    NIL_CNST        shift, and go to state 29
    ID              shift, and go to state 30
    RETURN_STM      shift, and go to state 31
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 32
    FOR_STMT        shift, and go to state 33
    OUTPUT_WRITE    shift, and go to state 34
    OUTPUT_WRITELN  shift, and go to state 35
    INPUT_READ      shift, and go to state 36
    '+'             shift, and go to state 37
    '-'             shift, and go to state 38
    '%'             shift, and go to state 39
    '?'             shift, and go to state 40
    '!'             shift, and go to state 41

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 42
    unq_declaration   go to state 43
    command           go to state 137
    $@2               go to state 46
    init_variable     go to state 47
    conditional_stmt  go to state 48
    return_stmt       go to state 49
    iteration         go to state 50
    init_stmt         go to state 51
    output            go to state 52
    input             go to state 53
    func_calling      go to state 54
    expression        go to state 55
    const             go to state 56
    number            go to state 57
    type              go to state 150
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 58
    single_operation  go to state 59
    arith_binary      go to state 60
    arith_single      go to state 61
    lst_single        go to state 62
    lst_binary        go to state 63


State 128

   37 loop_condition: init_stmt ';' • operation ';' update_stmt

    NUM_INT    shift, and go to state 27
    NUM_FLOAT  shift, and go to state 28
    NIL_CNST   shift, and go to state 29
    ID         shift, and go to state 66
    '+'        shift, and go to state 37
    '-'        shift, and go to state 38
    '%'        shift, and go to state 39
    '?'        shift, and go to state 40
    '!'        shift, and go to state 41

    func_calling      go to state 54
    expression        go to state 55
    const             go to state 56
    number            go to state 57
    operation         go to state 138
    single_operation  go to state 59
    arith_binary      go to state 60
    arith_single      go to state 61
    lst_single        go to state 62
    lst_binary        go to state 63


State 129

   43 output: OUTPUT_WRITE '(' STRING ')' • ';'

    ';'  shift, and go to state 139


State 130

   41 output: OUTPUT_WRITE '(' operation ')' • ';'

    ';'  shift, and go to state 140


State 131

   44 output: OUTPUT_WRITELN '(' STRING ')' • ';'

    ';'  shift, and go to state 141


State 132

   42 output: OUTPUT_WRITELN '(' operation ')' • ';'

    ';'  shift, and go to state 142


State 133

   45 input: INPUT_READ '(' expression ')' • ';'

    ';'  shift, and go to state 143


State 134

   30 command: $@2 '{' block_commands '}' •

    NUM_INT         reduce using rule 30 (command)
    NUM_FLOAT       reduce using rule 30 (command)
    NIL_CNST        reduce using rule 30 (command)
    ID              reduce using rule 30 (command)
    RETURN_STM      reduce using rule 30 (command)
    T_INT           reduce using rule 30 (command)
    T_FLOAT         reduce using rule 30 (command)
    IF_STMT         reduce using rule 30 (command)
    FOR_STMT        reduce using rule 30 (command)
    OUTPUT_WRITE    reduce using rule 30 (command)
    OUTPUT_WRITELN  reduce using rule 30 (command)
    INPUT_READ      reduce using rule 30 (command)
    '{'             reduce using rule 30 (command)
    '}'             reduce using rule 30 (command)
    '+'             reduce using rule 30 (command)
    '-'             reduce using rule 30 (command)
    '%'             reduce using rule 30 (command)
    '?'             reduce using rule 30 (command)
    '!'             reduce using rule 30 (command)


State 135

   18 lst_calling_parameters: operation ',' lst_calling_parameters •

    ')'  reduce using rule 18 (lst_calling_parameters)


State 136

   33 conditional_stmt: IF_STMT '(' operation ')' command •
   34                 | IF_STMT '(' operation ')' command • ELSE_STMT command

    ELSE_STMT  shift, and go to state 144

    NUM_INT         reduce using rule 33 (conditional_stmt)
    NUM_FLOAT       reduce using rule 33 (conditional_stmt)
    NIL_CNST        reduce using rule 33 (conditional_stmt)
    ID              reduce using rule 33 (conditional_stmt)
    RETURN_STM      reduce using rule 33 (conditional_stmt)
    T_INT           reduce using rule 33 (conditional_stmt)
    T_FLOAT         reduce using rule 33 (conditional_stmt)
    IF_STMT         reduce using rule 33 (conditional_stmt)
    FOR_STMT        reduce using rule 33 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 33 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 33 (conditional_stmt)
    INPUT_READ      reduce using rule 33 (conditional_stmt)
    '{'             reduce using rule 33 (conditional_stmt)
    '}'             reduce using rule 33 (conditional_stmt)
    '+'             reduce using rule 33 (conditional_stmt)
    '-'             reduce using rule 33 (conditional_stmt)
    '%'             reduce using rule 33 (conditional_stmt)
    '?'             reduce using rule 33 (conditional_stmt)
    '!'             reduce using rule 33 (conditional_stmt)


State 137

   36 iteration: FOR_STMT '(' loop_condition ')' command •

    NUM_INT         reduce using rule 36 (iteration)
    NUM_FLOAT       reduce using rule 36 (iteration)
    NIL_CNST        reduce using rule 36 (iteration)
    ID              reduce using rule 36 (iteration)
    RETURN_STM      reduce using rule 36 (iteration)
    T_INT           reduce using rule 36 (iteration)
    T_FLOAT         reduce using rule 36 (iteration)
    IF_STMT         reduce using rule 36 (iteration)
    FOR_STMT        reduce using rule 36 (iteration)
    OUTPUT_WRITE    reduce using rule 36 (iteration)
    OUTPUT_WRITELN  reduce using rule 36 (iteration)
    INPUT_READ      reduce using rule 36 (iteration)
    '{'             reduce using rule 36 (iteration)
    '}'             reduce using rule 36 (iteration)
    '+'             reduce using rule 36 (iteration)
    '-'             reduce using rule 36 (iteration)
    '%'             reduce using rule 36 (iteration)
    '?'             reduce using rule 36 (iteration)
    '!'             reduce using rule 36 (iteration)


State 138

   37 loop_condition: init_stmt ';' operation • ';' update_stmt
   62 operation: operation • relational_op expression
   63          | operation • logical_op expression

    ';'         shift, and go to state 145
    AND         shift, and go to state 86
    OR          shift, and go to state 87
    GREATER     shift, and go to state 88
    GREATER_EQ  shift, and go to state 89
    LESS        shift, and go to state 90
    LESS_EQ     shift, and go to state 91
    EQUAL       shift, and go to state 92
    NOT_EQ      shift, and go to state 93

    logical_op     go to state 94
    relational_op  go to state 95


State 139

   43 output: OUTPUT_WRITE '(' STRING ')' ';' •

    NUM_INT         reduce using rule 43 (output)
    NUM_FLOAT       reduce using rule 43 (output)
    NIL_CNST        reduce using rule 43 (output)
    ID              reduce using rule 43 (output)
    RETURN_STM      reduce using rule 43 (output)
    T_INT           reduce using rule 43 (output)
    T_FLOAT         reduce using rule 43 (output)
    IF_STMT         reduce using rule 43 (output)
    FOR_STMT        reduce using rule 43 (output)
    OUTPUT_WRITE    reduce using rule 43 (output)
    OUTPUT_WRITELN  reduce using rule 43 (output)
    INPUT_READ      reduce using rule 43 (output)
    '{'             reduce using rule 43 (output)
    '}'             reduce using rule 43 (output)
    '+'             reduce using rule 43 (output)
    '-'             reduce using rule 43 (output)
    '%'             reduce using rule 43 (output)
    '?'             reduce using rule 43 (output)
    '!'             reduce using rule 43 (output)


State 140

   41 output: OUTPUT_WRITE '(' operation ')' ';' •

    NUM_INT         reduce using rule 41 (output)
    NUM_FLOAT       reduce using rule 41 (output)
    NIL_CNST        reduce using rule 41 (output)
    ID              reduce using rule 41 (output)
    RETURN_STM      reduce using rule 41 (output)
    T_INT           reduce using rule 41 (output)
    T_FLOAT         reduce using rule 41 (output)
    IF_STMT         reduce using rule 41 (output)
    FOR_STMT        reduce using rule 41 (output)
    OUTPUT_WRITE    reduce using rule 41 (output)
    OUTPUT_WRITELN  reduce using rule 41 (output)
    INPUT_READ      reduce using rule 41 (output)
    '{'             reduce using rule 41 (output)
    '}'             reduce using rule 41 (output)
    '+'             reduce using rule 41 (output)
    '-'             reduce using rule 41 (output)
    '%'             reduce using rule 41 (output)
    '?'             reduce using rule 41 (output)
    '!'             reduce using rule 41 (output)


State 141

   44 output: OUTPUT_WRITELN '(' STRING ')' ';' •

    NUM_INT         reduce using rule 44 (output)
    NUM_FLOAT       reduce using rule 44 (output)
    NIL_CNST        reduce using rule 44 (output)
    ID              reduce using rule 44 (output)
    RETURN_STM      reduce using rule 44 (output)
    T_INT           reduce using rule 44 (output)
    T_FLOAT         reduce using rule 44 (output)
    IF_STMT         reduce using rule 44 (output)
    FOR_STMT        reduce using rule 44 (output)
    OUTPUT_WRITE    reduce using rule 44 (output)
    OUTPUT_WRITELN  reduce using rule 44 (output)
    INPUT_READ      reduce using rule 44 (output)
    '{'             reduce using rule 44 (output)
    '}'             reduce using rule 44 (output)
    '+'             reduce using rule 44 (output)
    '-'             reduce using rule 44 (output)
    '%'             reduce using rule 44 (output)
    '?'             reduce using rule 44 (output)
    '!'             reduce using rule 44 (output)


State 142

   42 output: OUTPUT_WRITELN '(' operation ')' ';' •

    NUM_INT         reduce using rule 42 (output)
    NUM_FLOAT       reduce using rule 42 (output)
    NIL_CNST        reduce using rule 42 (output)
    ID              reduce using rule 42 (output)
    RETURN_STM      reduce using rule 42 (output)
    T_INT           reduce using rule 42 (output)
    T_FLOAT         reduce using rule 42 (output)
    IF_STMT         reduce using rule 42 (output)
    FOR_STMT        reduce using rule 42 (output)
    OUTPUT_WRITE    reduce using rule 42 (output)
    OUTPUT_WRITELN  reduce using rule 42 (output)
    INPUT_READ      reduce using rule 42 (output)
    '{'             reduce using rule 42 (output)
    '}'             reduce using rule 42 (output)
    '+'             reduce using rule 42 (output)
    '-'             reduce using rule 42 (output)
    '%'             reduce using rule 42 (output)
    '?'             reduce using rule 42 (output)
    '!'             reduce using rule 42 (output)


State 143

   45 input: INPUT_READ '(' expression ')' ';' •

    NUM_INT         reduce using rule 45 (input)
    NUM_FLOAT       reduce using rule 45 (input)
    NIL_CNST        reduce using rule 45 (input)
    ID              reduce using rule 45 (input)
    RETURN_STM      reduce using rule 45 (input)
    T_INT           reduce using rule 45 (input)
    T_FLOAT         reduce using rule 45 (input)
    IF_STMT         reduce using rule 45 (input)
    FOR_STMT        reduce using rule 45 (input)
    OUTPUT_WRITE    reduce using rule 45 (input)
    OUTPUT_WRITELN  reduce using rule 45 (input)
    INPUT_READ      reduce using rule 45 (input)
    '{'             reduce using rule 45 (input)
    '}'             reduce using rule 45 (input)
    '+'             reduce using rule 45 (input)
    '-'             reduce using rule 45 (input)
    '%'             reduce using rule 45 (input)
    '?'             reduce using rule 45 (input)
    '!'             reduce using rule 45 (input)


State 144

   34 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT • command

    NUM_INT         shift, and go to state 27
    NUM_FLOAT       shift, and go to state 28
    NIL_CNST        shift, and go to state 29
    ID              shift, and go to state 30
    RETURN_STM      shift, and go to state 31
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 32
    FOR_STMT        shift, and go to state 33
    OUTPUT_WRITE    shift, and go to state 34
    OUTPUT_WRITELN  shift, and go to state 35
    INPUT_READ      shift, and go to state 36
    '+'             shift, and go to state 37
    '-'             shift, and go to state 38
    '%'             shift, and go to state 39
    '?'             shift, and go to state 40
    '!'             shift, and go to state 41

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 42
    unq_declaration   go to state 43
    command           go to state 146
    $@2               go to state 46
    init_variable     go to state 47
    conditional_stmt  go to state 48
    return_stmt       go to state 49
    iteration         go to state 50
    init_stmt         go to state 51
    output            go to state 52
    input             go to state 53
    func_calling      go to state 54
    expression        go to state 55
    const             go to state 56
    number            go to state 57
    type              go to state 150
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 58
    single_operation  go to state 59
    arith_binary      go to state 60
    arith_single      go to state 61
    lst_single        go to state 62
    lst_binary        go to state 63


State 145

   37 loop_condition: init_stmt ';' operation ';' • update_stmt

    ID  shift, and go to state 254

    ')'  reduce using rule 40 (update_stmt)

    init_stmt    go to state 147
    update_stmt  go to state 148


State 146

   34 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT command •

    NUM_INT         reduce using rule 34 (conditional_stmt)
    NUM_FLOAT       reduce using rule 34 (conditional_stmt)
    NIL_CNST        reduce using rule 34 (conditional_stmt)
    ID              reduce using rule 34 (conditional_stmt)
    RETURN_STM      reduce using rule 34 (conditional_stmt)
    T_INT           reduce using rule 34 (conditional_stmt)
    T_FLOAT         reduce using rule 34 (conditional_stmt)
    IF_STMT         reduce using rule 34 (conditional_stmt)
    FOR_STMT        reduce using rule 34 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 34 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 34 (conditional_stmt)
    INPUT_READ      reduce using rule 34 (conditional_stmt)
    '{'             reduce using rule 34 (conditional_stmt)
    '}'             reduce using rule 34 (conditional_stmt)
    '+'             reduce using rule 34 (conditional_stmt)
    '-'             reduce using rule 34 (conditional_stmt)
    '%'             reduce using rule 34 (conditional_stmt)
    '?'             reduce using rule 34 (conditional_stmt)
    '!'             reduce using rule 34 (conditional_stmt)


State 147

   39 update_stmt: init_stmt •

    ')'  reduce using rule 39 (update_stmt)


State 148

   37 loop_condition: init_stmt ';' operation ';' update_stmt •

    ')'  reduce using rule 37 (loop_condition)


State 149

   11 unq_declaration: type • ID

    ID  shift, and go to state 255


State 150

   11 unq_declaration: type • ID

    ID  shift, and go to state 256


State 151

   10 var_declaration: unq_declaration ';' •

    NUM_INT         reduce using rule 10 (var_declaration)
    NUM_FLOAT       reduce using rule 10 (var_declaration)
    NIL_CNST        reduce using rule 10 (var_declaration)
    ID              reduce using rule 10 (var_declaration)
    RETURN_STM      reduce using rule 10 (var_declaration)
    T_INT           reduce using rule 10 (var_declaration)
    T_FLOAT         reduce using rule 10 (var_declaration)
    IF_STMT         reduce using rule 10 (var_declaration)
    FOR_STMT        reduce using rule 10 (var_declaration)
    OUTPUT_WRITE    reduce using rule 10 (var_declaration)
    OUTPUT_WRITELN  reduce using rule 10 (var_declaration)
    INPUT_READ      reduce using rule 10 (var_declaration)
    '{'             reduce using rule 10 (var_declaration)
    '}'             reduce using rule 10 (var_declaration)
    '+'             reduce using rule 10 (var_declaration)
    '-'             reduce using rule 10 (var_declaration)
    '%'             reduce using rule 10 (var_declaration)
    '?'             reduce using rule 10 (var_declaration)
    '!'             reduce using rule 10 (var_declaration)


State 152

   53 number: NUM_INT •

    ')'         reduce using rule 53 (number)
    ','         reduce using rule 53 (number)
    AND         reduce using rule 53 (number)
    OR          reduce using rule 53 (number)
    GREATER     reduce using rule 53 (number)
    GREATER_EQ  reduce using rule 53 (number)
    LESS        reduce using rule 53 (number)
    LESS_EQ     reduce using rule 53 (number)
    EQUAL       reduce using rule 53 (number)
    NOT_EQ      reduce using rule 53 (number)
    '+'         reduce using rule 53 (number)
    '-'         reduce using rule 53 (number)
    '*'         reduce using rule 53 (number)
    '/'         reduce using rule 53 (number)
    FILTER      reduce using rule 53 (number)
    MAP         reduce using rule 53 (number)
    ':'         reduce using rule 53 (number)


State 153

   54 number: NUM_FLOAT •

    ')'         reduce using rule 54 (number)
    ','         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)
    '+'         reduce using rule 54 (number)
    '-'         reduce using rule 54 (number)
    '*'         reduce using rule 54 (number)
    '/'         reduce using rule 54 (number)
    FILTER      reduce using rule 54 (number)
    MAP         reduce using rule 54 (number)
    ':'         reduce using rule 54 (number)


State 154

   52 const: NIL_CNST •

    ')'         reduce using rule 52 (const)
    ','         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)
    '+'         reduce using rule 52 (const)
    '-'         reduce using rule 52 (const)
    '*'         reduce using rule 52 (const)
    '/'         reduce using rule 52 (const)
    FILTER      reduce using rule 52 (const)
    MAP         reduce using rule 52 (const)
    ':'         reduce using rule 52 (const)


State 155

   46 func_calling: ID • '(' calling_parameters ')'
   50 expression: ID •

    '('  shift, and go to state 257

    ')'         reduce using rule 50 (expression)
    ','         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)
    FILTER      reduce using rule 50 (expression)
    MAP         reduce using rule 50 (expression)
    ':'         reduce using rule 50 (expression)


State 156

   72 arith_single: '+' • expression

    NUM_INT    shift, and go to state 152
    NUM_FLOAT  shift, and go to state 153
    NIL_CNST   shift, and go to state 154
    ID         shift, and go to state 155
    '+'        shift, and go to state 156
    '-'        shift, and go to state 157
    '%'        shift, and go to state 158
    '?'        shift, and go to state 159
    '!'        shift, and go to state 160

    func_calling      go to state 161
    expression        go to state 258
    const             go to state 163
    number            go to state 164
    single_operation  go to state 165
    arith_single      go to state 167
    lst_single        go to state 168


State 157

   73 arith_single: '-' • expression

    NUM_INT    shift, and go to state 152
    NUM_FLOAT  shift, and go to state 153
    NIL_CNST   shift, and go to state 154
    ID         shift, and go to state 155
    '+'        shift, and go to state 156
    '-'        shift, and go to state 157
    '%'        shift, and go to state 158
    '?'        shift, and go to state 159
    '!'        shift, and go to state 160

    func_calling      go to state 161
    expression        go to state 259
    const             go to state 163
    number            go to state 164
    single_operation  go to state 165
    arith_single      go to state 167
    lst_single        go to state 168


State 158

   74 lst_single: '%' • expression

    NUM_INT    shift, and go to state 152
    NUM_FLOAT  shift, and go to state 153
    NIL_CNST   shift, and go to state 154
    ID         shift, and go to state 155
    '+'        shift, and go to state 156
    '-'        shift, and go to state 157
    '%'        shift, and go to state 158
    '?'        shift, and go to state 159
    '!'        shift, and go to state 160

    func_calling      go to state 161
    expression        go to state 260
    const             go to state 163
    number            go to state 164
    single_operation  go to state 165
    arith_single      go to state 167
    lst_single        go to state 168


State 159

   75 lst_single: '?' • expression

    NUM_INT    shift, and go to state 152
    NUM_FLOAT  shift, and go to state 153
    NIL_CNST   shift, and go to state 154
    ID         shift, and go to state 155
    '+'        shift, and go to state 156
    '-'        shift, and go to state 157
    '%'        shift, and go to state 158
    '?'        shift, and go to state 159
    '!'        shift, and go to state 160

    func_calling      go to state 161
    expression        go to state 261
    const             go to state 163
    number            go to state 164
    single_operation  go to state 165
    arith_single      go to state 167
    lst_single        go to state 168


State 160

   66 single_operation: '!' • expression

    NUM_INT    shift, and go to state 152
    NUM_FLOAT  shift, and go to state 153
    NIL_CNST   shift, and go to state 154
    ID         shift, and go to state 155
    '+'        shift, and go to state 156
    '-'        shift, and go to state 157
    '%'        shift, and go to state 158
    '?'        shift, and go to state 159
    '!'        shift, and go to state 160

    func_calling      go to state 161
    expression        go to state 262
    const             go to state 163
    number            go to state 164
    single_operation  go to state 165
    arith_single      go to state 167
    lst_single        go to state 168


State 161

   47 expression: func_calling •

    ')'         reduce using rule 47 (expression)
    ','         reduce using rule 47 (expression)
    AND         reduce using rule 47 (expression)
    OR          reduce using rule 47 (expression)
    GREATER     reduce using rule 47 (expression)
    GREATER_EQ  reduce using rule 47 (expression)
    LESS        reduce using rule 47 (expression)
    LESS_EQ     reduce using rule 47 (expression)
    EQUAL       reduce using rule 47 (expression)
    NOT_EQ      reduce using rule 47 (expression)
    '+'         reduce using rule 47 (expression)
    '-'         reduce using rule 47 (expression)
    '*'         reduce using rule 47 (expression)
    '/'         reduce using rule 47 (expression)
    FILTER      reduce using rule 47 (expression)
    MAP         reduce using rule 47 (expression)
    ':'         reduce using rule 47 (expression)


State 162

   71 arith_binary: expression •
   76 lst_binary: expression • FILTER expression
   77           | expression • MAP expression
   78           | expression • ':' expression

    FILTER  shift, and go to state 263
    MAP     shift, and go to state 264
    ':'     shift, and go to state 265

    ')'         reduce using rule 71 (arith_binary)
    ','         reduce using rule 71 (arith_binary)
    AND         reduce using rule 71 (arith_binary)
    OR          reduce using rule 71 (arith_binary)
    GREATER     reduce using rule 71 (arith_binary)
    GREATER_EQ  reduce using rule 71 (arith_binary)
    LESS        reduce using rule 71 (arith_binary)
    LESS_EQ     reduce using rule 71 (arith_binary)
    EQUAL       reduce using rule 71 (arith_binary)
    NOT_EQ      reduce using rule 71 (arith_binary)
    '+'         reduce using rule 71 (arith_binary)
    '-'         reduce using rule 71 (arith_binary)
    '*'         reduce using rule 71 (arith_binary)
    '/'         reduce using rule 71 (arith_binary)


State 163

   49 expression: const •

    ')'         reduce using rule 49 (expression)
    ','         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)
    '+'         reduce using rule 49 (expression)
    '-'         reduce using rule 49 (expression)
    '*'         reduce using rule 49 (expression)
    '/'         reduce using rule 49 (expression)
    FILTER      reduce using rule 49 (expression)
    MAP         reduce using rule 49 (expression)
    ':'         reduce using rule 49 (expression)


State 164

   51 const: number •

    ')'         reduce using rule 51 (const)
    ','         reduce using rule 51 (const)
    AND         reduce using rule 51 (const)
    OR          reduce using rule 51 (const)
    GREATER     reduce using rule 51 (const)
    GREATER_EQ  reduce using rule 51 (const)
    LESS        reduce using rule 51 (const)
    LESS_EQ     reduce using rule 51 (const)
    EQUAL       reduce using rule 51 (const)
    NOT_EQ      reduce using rule 51 (const)
    '+'         reduce using rule 51 (const)
    '-'         reduce using rule 51 (const)
    '*'         reduce using rule 51 (const)
    '/'         reduce using rule 51 (const)
    FILTER      reduce using rule 51 (const)
    MAP         reduce using rule 51 (const)
    ':'         reduce using rule 51 (const)


State 165

   48 expression: single_operation •

    ')'         reduce using rule 48 (expression)
    ','         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)
    '+'         reduce using rule 48 (expression)
    '-'         reduce using rule 48 (expression)
    '*'         reduce using rule 48 (expression)
    '/'         reduce using rule 48 (expression)
    FILTER      reduce using rule 48 (expression)
    MAP         reduce using rule 48 (expression)
    ':'         reduce using rule 48 (expression)


State 166

   60 operation: arith_binary •
   67 arith_binary: arith_binary • '+' expression
   68             | arith_binary • '-' expression
   69             | arith_binary • '*' expression
   70             | arith_binary • '/' expression

    '+'  shift, and go to state 266
    '-'  shift, and go to state 267
    '*'  shift, and go to state 268
    '/'  shift, and go to state 269

    ')'         reduce using rule 60 (operation)
    ','         reduce using rule 60 (operation)
    AND         reduce using rule 60 (operation)
    OR          reduce using rule 60 (operation)
    GREATER     reduce using rule 60 (operation)
    GREATER_EQ  reduce using rule 60 (operation)
    LESS        reduce using rule 60 (operation)
    LESS_EQ     reduce using rule 60 (operation)
    EQUAL       reduce using rule 60 (operation)
    NOT_EQ      reduce using rule 60 (operation)


State 167

   64 single_operation: arith_single •

    ')'         reduce using rule 64 (single_operation)
    ','         reduce using rule 64 (single_operation)
    AND         reduce using rule 64 (single_operation)
    OR          reduce using rule 64 (single_operation)
    GREATER     reduce using rule 64 (single_operation)
    GREATER_EQ  reduce using rule 64 (single_operation)
    LESS        reduce using rule 64 (single_operation)
    LESS_EQ     reduce using rule 64 (single_operation)
    EQUAL       reduce using rule 64 (single_operation)
    NOT_EQ      reduce using rule 64 (single_operation)
    '+'         reduce using rule 64 (single_operation)
    '-'         reduce using rule 64 (single_operation)
    '*'         reduce using rule 64 (single_operation)
    '/'         reduce using rule 64 (single_operation)
    FILTER      reduce using rule 64 (single_operation)
    MAP         reduce using rule 64 (single_operation)
    ':'         reduce using rule 64 (single_operation)


State 168

   65 single_operation: lst_single •

    ')'         reduce using rule 65 (single_operation)
    ','         reduce using rule 65 (single_operation)
    AND         reduce using rule 65 (single_operation)
    OR          reduce using rule 65 (single_operation)
    GREATER     reduce using rule 65 (single_operation)
    GREATER_EQ  reduce using rule 65 (single_operation)
    LESS        reduce using rule 65 (single_operation)
    LESS_EQ     reduce using rule 65 (single_operation)
    EQUAL       reduce using rule 65 (single_operation)
    NOT_EQ      reduce using rule 65 (single_operation)
    '+'         reduce using rule 65 (single_operation)
    '-'         reduce using rule 65 (single_operation)
    '*'         reduce using rule 65 (single_operation)
    '/'         reduce using rule 65 (single_operation)
    FILTER      reduce using rule 65 (single_operation)
    MAP         reduce using rule 65 (single_operation)
    ':'         reduce using rule 65 (single_operation)


State 169

   61 operation: lst_binary •

    ')'         reduce using rule 61 (operation)
    ','         reduce using rule 61 (operation)
    AND         reduce using rule 61 (operation)
    OR          reduce using rule 61 (operation)
    GREATER     reduce using rule 61 (operation)
    GREATER_EQ  reduce using rule 61 (operation)
    LESS        reduce using rule 61 (operation)
    LESS_EQ     reduce using rule 61 (operation)
    EQUAL       reduce using rule 61 (operation)
    NOT_EQ      reduce using rule 61 (operation)


State 170

   53 number: NUM_INT •

    ')'         reduce using rule 53 (number)
    AND         reduce using rule 53 (number)
    OR          reduce using rule 53 (number)
    GREATER     reduce using rule 53 (number)
    GREATER_EQ  reduce using rule 53 (number)
    LESS        reduce using rule 53 (number)
    LESS_EQ     reduce using rule 53 (number)
    EQUAL       reduce using rule 53 (number)
    NOT_EQ      reduce using rule 53 (number)
    '+'         reduce using rule 53 (number)
    '-'         reduce using rule 53 (number)
    '*'         reduce using rule 53 (number)
    '/'         reduce using rule 53 (number)
    FILTER      reduce using rule 53 (number)
    MAP         reduce using rule 53 (number)
    ':'         reduce using rule 53 (number)


State 171

   54 number: NUM_FLOAT •

    ')'         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)
    '+'         reduce using rule 54 (number)
    '-'         reduce using rule 54 (number)
    '*'         reduce using rule 54 (number)
    '/'         reduce using rule 54 (number)
    FILTER      reduce using rule 54 (number)
    MAP         reduce using rule 54 (number)
    ':'         reduce using rule 54 (number)


State 172

   52 const: NIL_CNST •

    ')'         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)
    '+'         reduce using rule 52 (const)
    '-'         reduce using rule 52 (const)
    '*'         reduce using rule 52 (const)
    '/'         reduce using rule 52 (const)
    FILTER      reduce using rule 52 (const)
    MAP         reduce using rule 52 (const)
    ':'         reduce using rule 52 (const)


State 173

   46 func_calling: ID • '(' calling_parameters ')'
   50 expression: ID •

    '('  shift, and go to state 270

    ')'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)
    FILTER      reduce using rule 50 (expression)
    MAP         reduce using rule 50 (expression)
    ':'         reduce using rule 50 (expression)


State 174

   72 arith_single: '+' • expression

    NUM_INT    shift, and go to state 170
    NUM_FLOAT  shift, and go to state 171
    NIL_CNST   shift, and go to state 172
    ID         shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    expression        go to state 271
    const             go to state 181
    number            go to state 182
    single_operation  go to state 183
    arith_single      go to state 185
    lst_single        go to state 186


State 175

   73 arith_single: '-' • expression

    NUM_INT    shift, and go to state 170
    NUM_FLOAT  shift, and go to state 171
    NIL_CNST   shift, and go to state 172
    ID         shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    expression        go to state 272
    const             go to state 181
    number            go to state 182
    single_operation  go to state 183
    arith_single      go to state 185
    lst_single        go to state 186


State 176

   74 lst_single: '%' • expression

    NUM_INT    shift, and go to state 170
    NUM_FLOAT  shift, and go to state 171
    NIL_CNST   shift, and go to state 172
    ID         shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    expression        go to state 273
    const             go to state 181
    number            go to state 182
    single_operation  go to state 183
    arith_single      go to state 185
    lst_single        go to state 186


State 177

   75 lst_single: '?' • expression

    NUM_INT    shift, and go to state 170
    NUM_FLOAT  shift, and go to state 171
    NIL_CNST   shift, and go to state 172
    ID         shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    expression        go to state 274
    const             go to state 181
    number            go to state 182
    single_operation  go to state 183
    arith_single      go to state 185
    lst_single        go to state 186


State 178

   66 single_operation: '!' • expression

    NUM_INT    shift, and go to state 170
    NUM_FLOAT  shift, and go to state 171
    NIL_CNST   shift, and go to state 172
    ID         shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    expression        go to state 275
    const             go to state 181
    number            go to state 182
    single_operation  go to state 183
    arith_single      go to state 185
    lst_single        go to state 186


State 179

   47 expression: func_calling •

    ')'         reduce using rule 47 (expression)
    AND         reduce using rule 47 (expression)
    OR          reduce using rule 47 (expression)
    GREATER     reduce using rule 47 (expression)
    GREATER_EQ  reduce using rule 47 (expression)
    LESS        reduce using rule 47 (expression)
    LESS_EQ     reduce using rule 47 (expression)
    EQUAL       reduce using rule 47 (expression)
    NOT_EQ      reduce using rule 47 (expression)
    '+'         reduce using rule 47 (expression)
    '-'         reduce using rule 47 (expression)
    '*'         reduce using rule 47 (expression)
    '/'         reduce using rule 47 (expression)
    FILTER      reduce using rule 47 (expression)
    MAP         reduce using rule 47 (expression)
    ':'         reduce using rule 47 (expression)


State 180

   71 arith_binary: expression •
   76 lst_binary: expression • FILTER expression
   77           | expression • MAP expression
   78           | expression • ':' expression

    FILTER  shift, and go to state 276
    MAP     shift, and go to state 277
    ':'     shift, and go to state 278

    ')'         reduce using rule 71 (arith_binary)
    AND         reduce using rule 71 (arith_binary)
    OR          reduce using rule 71 (arith_binary)
    GREATER     reduce using rule 71 (arith_binary)
    GREATER_EQ  reduce using rule 71 (arith_binary)
    LESS        reduce using rule 71 (arith_binary)
    LESS_EQ     reduce using rule 71 (arith_binary)
    EQUAL       reduce using rule 71 (arith_binary)
    NOT_EQ      reduce using rule 71 (arith_binary)
    '+'         reduce using rule 71 (arith_binary)
    '-'         reduce using rule 71 (arith_binary)
    '*'         reduce using rule 71 (arith_binary)
    '/'         reduce using rule 71 (arith_binary)


State 181

   49 expression: const •

    ')'         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)
    '+'         reduce using rule 49 (expression)
    '-'         reduce using rule 49 (expression)
    '*'         reduce using rule 49 (expression)
    '/'         reduce using rule 49 (expression)
    FILTER      reduce using rule 49 (expression)
    MAP         reduce using rule 49 (expression)
    ':'         reduce using rule 49 (expression)


State 182

   51 const: number •

    ')'         reduce using rule 51 (const)
    AND         reduce using rule 51 (const)
    OR          reduce using rule 51 (const)
    GREATER     reduce using rule 51 (const)
    GREATER_EQ  reduce using rule 51 (const)
    LESS        reduce using rule 51 (const)
    LESS_EQ     reduce using rule 51 (const)
    EQUAL       reduce using rule 51 (const)
    NOT_EQ      reduce using rule 51 (const)
    '+'         reduce using rule 51 (const)
    '-'         reduce using rule 51 (const)
    '*'         reduce using rule 51 (const)
    '/'         reduce using rule 51 (const)
    FILTER      reduce using rule 51 (const)
    MAP         reduce using rule 51 (const)
    ':'         reduce using rule 51 (const)


State 183

   48 expression: single_operation •

    ')'         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)
    '+'         reduce using rule 48 (expression)
    '-'         reduce using rule 48 (expression)
    '*'         reduce using rule 48 (expression)
    '/'         reduce using rule 48 (expression)
    FILTER      reduce using rule 48 (expression)
    MAP         reduce using rule 48 (expression)
    ':'         reduce using rule 48 (expression)


State 184

   60 operation: arith_binary •
   67 arith_binary: arith_binary • '+' expression
   68             | arith_binary • '-' expression
   69             | arith_binary • '*' expression
   70             | arith_binary • '/' expression

    '+'  shift, and go to state 279
    '-'  shift, and go to state 280
    '*'  shift, and go to state 281
    '/'  shift, and go to state 282

    ')'         reduce using rule 60 (operation)
    AND         reduce using rule 60 (operation)
    OR          reduce using rule 60 (operation)
    GREATER     reduce using rule 60 (operation)
    GREATER_EQ  reduce using rule 60 (operation)
    LESS        reduce using rule 60 (operation)
    LESS_EQ     reduce using rule 60 (operation)
    EQUAL       reduce using rule 60 (operation)
    NOT_EQ      reduce using rule 60 (operation)


State 185

   64 single_operation: arith_single •

    ')'         reduce using rule 64 (single_operation)
    AND         reduce using rule 64 (single_operation)
    OR          reduce using rule 64 (single_operation)
    GREATER     reduce using rule 64 (single_operation)
    GREATER_EQ  reduce using rule 64 (single_operation)
    LESS        reduce using rule 64 (single_operation)
    LESS_EQ     reduce using rule 64 (single_operation)
    EQUAL       reduce using rule 64 (single_operation)
    NOT_EQ      reduce using rule 64 (single_operation)
    '+'         reduce using rule 64 (single_operation)
    '-'         reduce using rule 64 (single_operation)
    '*'         reduce using rule 64 (single_operation)
    '/'         reduce using rule 64 (single_operation)
    FILTER      reduce using rule 64 (single_operation)
    MAP         reduce using rule 64 (single_operation)
    ':'         reduce using rule 64 (single_operation)


State 186

   65 single_operation: lst_single •

    ')'         reduce using rule 65 (single_operation)
    AND         reduce using rule 65 (single_operation)
    OR          reduce using rule 65 (single_operation)
    GREATER     reduce using rule 65 (single_operation)
    GREATER_EQ  reduce using rule 65 (single_operation)
    LESS        reduce using rule 65 (single_operation)
    LESS_EQ     reduce using rule 65 (single_operation)
    EQUAL       reduce using rule 65 (single_operation)
    NOT_EQ      reduce using rule 65 (single_operation)
    '+'         reduce using rule 65 (single_operation)
    '-'         reduce using rule 65 (single_operation)
    '*'         reduce using rule 65 (single_operation)
    '/'         reduce using rule 65 (single_operation)
    FILTER      reduce using rule 65 (single_operation)
    MAP         reduce using rule 65 (single_operation)
    ':'         reduce using rule 65 (single_operation)


State 187

   61 operation: lst_binary •

    ')'         reduce using rule 61 (operation)
    AND         reduce using rule 61 (operation)
    OR          reduce using rule 61 (operation)
    GREATER     reduce using rule 61 (operation)
    GREATER_EQ  reduce using rule 61 (operation)
    LESS        reduce using rule 61 (operation)
    LESS_EQ     reduce using rule 61 (operation)
    EQUAL       reduce using rule 61 (operation)
    NOT_EQ      reduce using rule 61 (operation)


State 188

   53 number: NUM_INT •

    ')'  reduce using rule 53 (number)


State 189

   54 number: NUM_FLOAT •

    ')'  reduce using rule 54 (number)


State 190

   52 const: NIL_CNST •

    ')'  reduce using rule 52 (const)


State 191

   46 func_calling: ID • '(' calling_parameters ')'
   50 expression: ID •

    '('  shift, and go to state 283

    ')'  reduce using rule 50 (expression)


State 192

   72 arith_single: '+' • expression

    NUM_INT    shift, and go to state 188
    NUM_FLOAT  shift, and go to state 189
    NIL_CNST   shift, and go to state 190
    ID         shift, and go to state 191
    '+'        shift, and go to state 192
    '-'        shift, and go to state 193
    '%'        shift, and go to state 194
    '?'        shift, and go to state 195
    '!'        shift, and go to state 196

    func_calling      go to state 197
    expression        go to state 284
    const             go to state 198
    number            go to state 199
    single_operation  go to state 200
    arith_single      go to state 201
    lst_single        go to state 202


State 193

   73 arith_single: '-' • expression

    NUM_INT    shift, and go to state 188
    NUM_FLOAT  shift, and go to state 189
    NIL_CNST   shift, and go to state 190
    ID         shift, and go to state 191
    '+'        shift, and go to state 192
    '-'        shift, and go to state 193
    '%'        shift, and go to state 194
    '?'        shift, and go to state 195
    '!'        shift, and go to state 196

    func_calling      go to state 197
    expression        go to state 285
    const             go to state 198
    number            go to state 199
    single_operation  go to state 200
    arith_single      go to state 201
    lst_single        go to state 202


State 194

   74 lst_single: '%' • expression

    NUM_INT    shift, and go to state 188
    NUM_FLOAT  shift, and go to state 189
    NIL_CNST   shift, and go to state 190
    ID         shift, and go to state 191
    '+'        shift, and go to state 192
    '-'        shift, and go to state 193
    '%'        shift, and go to state 194
    '?'        shift, and go to state 195
    '!'        shift, and go to state 196

    func_calling      go to state 197
    expression        go to state 286
    const             go to state 198
    number            go to state 199
    single_operation  go to state 200
    arith_single      go to state 201
    lst_single        go to state 202


State 195

   75 lst_single: '?' • expression

    NUM_INT    shift, and go to state 188
    NUM_FLOAT  shift, and go to state 189
    NIL_CNST   shift, and go to state 190
    ID         shift, and go to state 191
    '+'        shift, and go to state 192
    '-'        shift, and go to state 193
    '%'        shift, and go to state 194
    '?'        shift, and go to state 195
    '!'        shift, and go to state 196

    func_calling      go to state 197
    expression        go to state 287
    const             go to state 198
    number            go to state 199
    single_operation  go to state 200
    arith_single      go to state 201
    lst_single        go to state 202


State 196

   66 single_operation: '!' • expression

    NUM_INT    shift, and go to state 188
    NUM_FLOAT  shift, and go to state 189
    NIL_CNST   shift, and go to state 190
    ID         shift, and go to state 191
    '+'        shift, and go to state 192
    '-'        shift, and go to state 193
    '%'        shift, and go to state 194
    '?'        shift, and go to state 195
    '!'        shift, and go to state 196

    func_calling      go to state 197
    expression        go to state 288
    const             go to state 198
    number            go to state 199
    single_operation  go to state 200
    arith_single      go to state 201
    lst_single        go to state 202


State 197

   47 expression: func_calling •

    ')'  reduce using rule 47 (expression)


State 198

   49 expression: const •

    ')'  reduce using rule 49 (expression)


State 199

   51 const: number •

    ')'  reduce using rule 51 (const)


State 200

   48 expression: single_operation •

    ')'  reduce using rule 48 (expression)


State 201

   64 single_operation: arith_single •

    ')'  reduce using rule 64 (single_operation)


State 202

   65 single_operation: lst_single •

    ')'  reduce using rule 65 (single_operation)


State 203

   53 number: NUM_INT •

    ';'         reduce using rule 53 (number)
    AND         reduce using rule 53 (number)
    OR          reduce using rule 53 (number)
    GREATER     reduce using rule 53 (number)
    GREATER_EQ  reduce using rule 53 (number)
    LESS        reduce using rule 53 (number)
    LESS_EQ     reduce using rule 53 (number)
    EQUAL       reduce using rule 53 (number)
    NOT_EQ      reduce using rule 53 (number)


State 204

   54 number: NUM_FLOAT •

    ';'         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)


State 205

   52 const: NIL_CNST •

    ';'         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)


State 206

   46 func_calling: ID • '(' calling_parameters ')'
   50 expression: ID •

    '('  shift, and go to state 289

    ';'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)


State 207

   72 arith_single: '+' • expression

    NUM_INT    shift, and go to state 203
    NUM_FLOAT  shift, and go to state 204
    NIL_CNST   shift, and go to state 205
    ID         shift, and go to state 206
    '+'        shift, and go to state 207
    '-'        shift, and go to state 208
    '%'        shift, and go to state 209
    '?'        shift, and go to state 210
    '!'        shift, and go to state 211

    func_calling      go to state 212
    expression        go to state 290
    const             go to state 213
    number            go to state 214
    single_operation  go to state 215
    arith_single      go to state 216
    lst_single        go to state 217


State 208

   73 arith_single: '-' • expression

    NUM_INT    shift, and go to state 203
    NUM_FLOAT  shift, and go to state 204
    NIL_CNST   shift, and go to state 205
    ID         shift, and go to state 206
    '+'        shift, and go to state 207
    '-'        shift, and go to state 208
    '%'        shift, and go to state 209
    '?'        shift, and go to state 210
    '!'        shift, and go to state 211

    func_calling      go to state 212
    expression        go to state 291
    const             go to state 213
    number            go to state 214
    single_operation  go to state 215
    arith_single      go to state 216
    lst_single        go to state 217


State 209

   74 lst_single: '%' • expression

    NUM_INT    shift, and go to state 203
    NUM_FLOAT  shift, and go to state 204
    NIL_CNST   shift, and go to state 205
    ID         shift, and go to state 206
    '+'        shift, and go to state 207
    '-'        shift, and go to state 208
    '%'        shift, and go to state 209
    '?'        shift, and go to state 210
    '!'        shift, and go to state 211

    func_calling      go to state 212
    expression        go to state 292
    const             go to state 213
    number            go to state 214
    single_operation  go to state 215
    arith_single      go to state 216
    lst_single        go to state 217


State 210

   75 lst_single: '?' • expression

    NUM_INT    shift, and go to state 203
    NUM_FLOAT  shift, and go to state 204
    NIL_CNST   shift, and go to state 205
    ID         shift, and go to state 206
    '+'        shift, and go to state 207
    '-'        shift, and go to state 208
    '%'        shift, and go to state 209
    '?'        shift, and go to state 210
    '!'        shift, and go to state 211

    func_calling      go to state 212
    expression        go to state 293
    const             go to state 213
    number            go to state 214
    single_operation  go to state 215
    arith_single      go to state 216
    lst_single        go to state 217


State 211

   66 single_operation: '!' • expression

    NUM_INT    shift, and go to state 203
    NUM_FLOAT  shift, and go to state 204
    NIL_CNST   shift, and go to state 205
    ID         shift, and go to state 206
    '+'        shift, and go to state 207
    '-'        shift, and go to state 208
    '%'        shift, and go to state 209
    '?'        shift, and go to state 210
    '!'        shift, and go to state 211

    func_calling      go to state 212
    expression        go to state 294
    const             go to state 213
    number            go to state 214
    single_operation  go to state 215
    arith_single      go to state 216
    lst_single        go to state 217


State 212

   47 expression: func_calling •

    ';'         reduce using rule 47 (expression)
    AND         reduce using rule 47 (expression)
    OR          reduce using rule 47 (expression)
    GREATER     reduce using rule 47 (expression)
    GREATER_EQ  reduce using rule 47 (expression)
    LESS        reduce using rule 47 (expression)
    LESS_EQ     reduce using rule 47 (expression)
    EQUAL       reduce using rule 47 (expression)
    NOT_EQ      reduce using rule 47 (expression)


State 213

   49 expression: const •

    ';'         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)


State 214

   51 const: number •

    ';'         reduce using rule 51 (const)
    AND         reduce using rule 51 (const)
    OR          reduce using rule 51 (const)
    GREATER     reduce using rule 51 (const)
    GREATER_EQ  reduce using rule 51 (const)
    LESS        reduce using rule 51 (const)
    LESS_EQ     reduce using rule 51 (const)
    EQUAL       reduce using rule 51 (const)
    NOT_EQ      reduce using rule 51 (const)


State 215

   48 expression: single_operation •

    ';'         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)


State 216

   64 single_operation: arith_single •

    ';'         reduce using rule 64 (single_operation)
    AND         reduce using rule 64 (single_operation)
    OR          reduce using rule 64 (single_operation)
    GREATER     reduce using rule 64 (single_operation)
    GREATER_EQ  reduce using rule 64 (single_operation)
    LESS        reduce using rule 64 (single_operation)
    LESS_EQ     reduce using rule 64 (single_operation)
    EQUAL       reduce using rule 64 (single_operation)
    NOT_EQ      reduce using rule 64 (single_operation)


State 217

   65 single_operation: lst_single •

    ';'         reduce using rule 65 (single_operation)
    AND         reduce using rule 65 (single_operation)
    OR          reduce using rule 65 (single_operation)
    GREATER     reduce using rule 65 (single_operation)
    GREATER_EQ  reduce using rule 65 (single_operation)
    LESS        reduce using rule 65 (single_operation)
    LESS_EQ     reduce using rule 65 (single_operation)
    EQUAL       reduce using rule 65 (single_operation)
    NOT_EQ      reduce using rule 65 (single_operation)


State 218

   53 number: NUM_INT •

    ';'         reduce using rule 53 (number)
    AND         reduce using rule 53 (number)
    OR          reduce using rule 53 (number)
    GREATER     reduce using rule 53 (number)
    GREATER_EQ  reduce using rule 53 (number)
    LESS        reduce using rule 53 (number)
    LESS_EQ     reduce using rule 53 (number)
    EQUAL       reduce using rule 53 (number)
    NOT_EQ      reduce using rule 53 (number)
    '+'         reduce using rule 53 (number)
    '-'         reduce using rule 53 (number)
    '*'         reduce using rule 53 (number)
    '/'         reduce using rule 53 (number)


State 219

   54 number: NUM_FLOAT •

    ';'         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)
    '+'         reduce using rule 54 (number)
    '-'         reduce using rule 54 (number)
    '*'         reduce using rule 54 (number)
    '/'         reduce using rule 54 (number)


State 220

   52 const: NIL_CNST •

    ';'         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)
    '+'         reduce using rule 52 (const)
    '-'         reduce using rule 52 (const)
    '*'         reduce using rule 52 (const)
    '/'         reduce using rule 52 (const)


State 221

   46 func_calling: ID • '(' calling_parameters ')'
   50 expression: ID •

    '('  shift, and go to state 295

    ';'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)


State 222

   72 arith_single: '+' • expression

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    func_calling      go to state 227
    expression        go to state 296
    const             go to state 228
    number            go to state 229
    single_operation  go to state 230
    arith_single      go to state 231
    lst_single        go to state 232


State 223

   73 arith_single: '-' • expression

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    func_calling      go to state 227
    expression        go to state 297
    const             go to state 228
    number            go to state 229
    single_operation  go to state 230
    arith_single      go to state 231
    lst_single        go to state 232


State 224

   74 lst_single: '%' • expression

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    func_calling      go to state 227
    expression        go to state 298
    const             go to state 228
    number            go to state 229
    single_operation  go to state 230
    arith_single      go to state 231
    lst_single        go to state 232


State 225

   75 lst_single: '?' • expression

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    func_calling      go to state 227
    expression        go to state 299
    const             go to state 228
    number            go to state 229
    single_operation  go to state 230
    arith_single      go to state 231
    lst_single        go to state 232


State 226

   66 single_operation: '!' • expression

    NUM_INT    shift, and go to state 218
    NUM_FLOAT  shift, and go to state 219
    NIL_CNST   shift, and go to state 220
    ID         shift, and go to state 221
    '+'        shift, and go to state 222
    '-'        shift, and go to state 223
    '%'        shift, and go to state 224
    '?'        shift, and go to state 225
    '!'        shift, and go to state 226

    func_calling      go to state 227
    expression        go to state 300
    const             go to state 228
    number            go to state 229
    single_operation  go to state 230
    arith_single      go to state 231
    lst_single        go to state 232


State 227

   47 expression: func_calling •

    ';'         reduce using rule 47 (expression)
    AND         reduce using rule 47 (expression)
    OR          reduce using rule 47 (expression)
    GREATER     reduce using rule 47 (expression)
    GREATER_EQ  reduce using rule 47 (expression)
    LESS        reduce using rule 47 (expression)
    LESS_EQ     reduce using rule 47 (expression)
    EQUAL       reduce using rule 47 (expression)
    NOT_EQ      reduce using rule 47 (expression)
    '+'         reduce using rule 47 (expression)
    '-'         reduce using rule 47 (expression)
    '*'         reduce using rule 47 (expression)
    '/'         reduce using rule 47 (expression)


State 228

   49 expression: const •

    ';'         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)
    '+'         reduce using rule 49 (expression)
    '-'         reduce using rule 49 (expression)
    '*'         reduce using rule 49 (expression)
    '/'         reduce using rule 49 (expression)


State 229

   51 const: number •

    ';'         reduce using rule 51 (const)
    AND         reduce using rule 51 (const)
    OR          reduce using rule 51 (const)
    GREATER     reduce using rule 51 (const)
    GREATER_EQ  reduce using rule 51 (const)
    LESS        reduce using rule 51 (const)
    LESS_EQ     reduce using rule 51 (const)
    EQUAL       reduce using rule 51 (const)
    NOT_EQ      reduce using rule 51 (const)
    '+'         reduce using rule 51 (const)
    '-'         reduce using rule 51 (const)
    '*'         reduce using rule 51 (const)
    '/'         reduce using rule 51 (const)


State 230

   48 expression: single_operation •

    ';'         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)
    '+'         reduce using rule 48 (expression)
    '-'         reduce using rule 48 (expression)
    '*'         reduce using rule 48 (expression)
    '/'         reduce using rule 48 (expression)


State 231

   64 single_operation: arith_single •

    ';'         reduce using rule 64 (single_operation)
    AND         reduce using rule 64 (single_operation)
    OR          reduce using rule 64 (single_operation)
    GREATER     reduce using rule 64 (single_operation)
    GREATER_EQ  reduce using rule 64 (single_operation)
    LESS        reduce using rule 64 (single_operation)
    LESS_EQ     reduce using rule 64 (single_operation)
    EQUAL       reduce using rule 64 (single_operation)
    NOT_EQ      reduce using rule 64 (single_operation)
    '+'         reduce using rule 64 (single_operation)
    '-'         reduce using rule 64 (single_operation)
    '*'         reduce using rule 64 (single_operation)
    '/'         reduce using rule 64 (single_operation)


State 232

   65 single_operation: lst_single •

    ';'         reduce using rule 65 (single_operation)
    AND         reduce using rule 65 (single_operation)
    OR          reduce using rule 65 (single_operation)
    GREATER     reduce using rule 65 (single_operation)
    GREATER_EQ  reduce using rule 65 (single_operation)
    LESS        reduce using rule 65 (single_operation)
    LESS_EQ     reduce using rule 65 (single_operation)
    EQUAL       reduce using rule 65 (single_operation)
    NOT_EQ      reduce using rule 65 (single_operation)
    '+'         reduce using rule 65 (single_operation)
    '-'         reduce using rule 65 (single_operation)
    '*'         reduce using rule 65 (single_operation)
    '/'         reduce using rule 65 (single_operation)


State 233

   63 operation: operation logical_op • expression

    NUM_INT    shift, and go to state 301
    NUM_FLOAT  shift, and go to state 302
    NIL_CNST   shift, and go to state 303
    ID         shift, and go to state 304
    '+'        shift, and go to state 305
    '-'        shift, and go to state 306
    '%'        shift, and go to state 307
    '?'        shift, and go to state 308
    '!'        shift, and go to state 309

    func_calling      go to state 310
    expression        go to state 311
    const             go to state 312
    number            go to state 313
    single_operation  go to state 314
    arith_single      go to state 315
    lst_single        go to state 316


State 234

   62 operation: operation relational_op • expression

    NUM_INT    shift, and go to state 301
    NUM_FLOAT  shift, and go to state 302
    NIL_CNST   shift, and go to state 303
    ID         shift, and go to state 304
    '+'        shift, and go to state 305
    '-'        shift, and go to state 306
    '%'        shift, and go to state 307
    '?'        shift, and go to state 308
    '!'        shift, and go to state 309

    func_calling      go to state 310
    expression        go to state 317
    const             go to state 312
    number            go to state 313
    single_operation  go to state 314
    arith_single      go to state 315
    lst_single        go to state 316


State 235

   63 operation: operation logical_op • expression

    NUM_INT    shift, and go to state 318
    NUM_FLOAT  shift, and go to state 319
    NIL_CNST   shift, and go to state 320
    ID         shift, and go to state 321
    '+'        shift, and go to state 322
    '-'        shift, and go to state 323
    '%'        shift, and go to state 324
    '?'        shift, and go to state 325
    '!'        shift, and go to state 326

    func_calling      go to state 327
    expression        go to state 328
    const             go to state 329
    number            go to state 330
    single_operation  go to state 331
    arith_single      go to state 332
    lst_single        go to state 333


State 236

   62 operation: operation relational_op • expression

    NUM_INT    shift, and go to state 318
    NUM_FLOAT  shift, and go to state 319
    NIL_CNST   shift, and go to state 320
    ID         shift, and go to state 321
    '+'        shift, and go to state 322
    '-'        shift, and go to state 323
    '%'        shift, and go to state 324
    '?'        shift, and go to state 325
    '!'        shift, and go to state 326

    func_calling      go to state 327
    expression        go to state 334
    const             go to state 329
    number            go to state 330
    single_operation  go to state 331
    arith_single      go to state 332
    lst_single        go to state 333


State 237

   35 return_stmt: RETURN_STM • operation ';'

    NUM_INT    shift, and go to state 27
    NUM_FLOAT  shift, and go to state 28
    NIL_CNST   shift, and go to state 29
    ID         shift, and go to state 66
    '+'        shift, and go to state 37
    '-'        shift, and go to state 38
    '%'        shift, and go to state 39
    '?'        shift, and go to state 40
    '!'        shift, and go to state 41

    func_calling      go to state 54
    expression        go to state 55
    const             go to state 56
    number            go to state 57
    operation         go to state 335
    single_operation  go to state 59
    arith_binary      go to state 60
    arith_single      go to state 61
    lst_single        go to state 62
    lst_binary        go to state 63


State 238

   33 conditional_stmt: IF_STMT • '(' operation ')' command
   34                 | IF_STMT • '(' operation ')' command ELSE_STMT command

    '('  shift, and go to state 336


State 239

   36 iteration: FOR_STMT • '(' loop_condition ')' command

    '('  shift, and go to state 337


State 240

   41 output: OUTPUT_WRITE • '(' operation ')' ';'
   43       | OUTPUT_WRITE • '(' STRING ')' ';'

    '('  shift, and go to state 338


State 241

   42 output: OUTPUT_WRITELN • '(' operation ')' ';'
   44       | OUTPUT_WRITELN • '(' STRING ')' ';'

    '('  shift, and go to state 339


State 242

   45 input: INPUT_READ • '(' expression ')' ';'

    '('  shift, and go to state 340


State 243

   22 command: var_declaration •

    NUM_INT         reduce using rule 22 (command)
    NUM_FLOAT       reduce using rule 22 (command)
    NIL_CNST        reduce using rule 22 (command)
    ID              reduce using rule 22 (command)
    RETURN_STM      reduce using rule 22 (command)
    T_INT           reduce using rule 22 (command)
    T_FLOAT         reduce using rule 22 (command)
    IF_STMT         reduce using rule 22 (command)
    ELSE_STMT       reduce using rule 22 (command)
    FOR_STMT        reduce using rule 22 (command)
    OUTPUT_WRITE    reduce using rule 22 (command)
    OUTPUT_WRITELN  reduce using rule 22 (command)
    INPUT_READ      reduce using rule 22 (command)
    '{'             reduce using rule 22 (command)
    '}'             reduce using rule 22 (command)
    '+'             reduce using rule 22 (command)
    '-'             reduce using rule 22 (command)
    '%'             reduce using rule 22 (command)
    '?'             reduce using rule 22 (command)
    '!'             reduce using rule 22 (command)


State 244

   10 var_declaration: unq_declaration • ';'

    ';'  shift, and go to state 341


State 245

   30 command: $@2 • '{' block_commands '}'

    '{'  shift, and go to state 342


State 246

   23 command: init_variable •

    NUM_INT         reduce using rule 23 (command)
    NUM_FLOAT       reduce using rule 23 (command)
    NIL_CNST        reduce using rule 23 (command)
    ID              reduce using rule 23 (command)
    RETURN_STM      reduce using rule 23 (command)
    T_INT           reduce using rule 23 (command)
    T_FLOAT         reduce using rule 23 (command)
    IF_STMT         reduce using rule 23 (command)
    ELSE_STMT       reduce using rule 23 (command)
    FOR_STMT        reduce using rule 23 (command)
    OUTPUT_WRITE    reduce using rule 23 (command)
    OUTPUT_WRITELN  reduce using rule 23 (command)
    INPUT_READ      reduce using rule 23 (command)
    '{'             reduce using rule 23 (command)
    '}'             reduce using rule 23 (command)
    '+'             reduce using rule 23 (command)
    '-'             reduce using rule 23 (command)
    '%'             reduce using rule 23 (command)
    '?'             reduce using rule 23 (command)
    '!'             reduce using rule 23 (command)


State 247

   24 command: conditional_stmt •

    NUM_INT         reduce using rule 24 (command)
    NUM_FLOAT       reduce using rule 24 (command)
    NIL_CNST        reduce using rule 24 (command)
    ID              reduce using rule 24 (command)
    RETURN_STM      reduce using rule 24 (command)
    T_INT           reduce using rule 24 (command)
    T_FLOAT         reduce using rule 24 (command)
    IF_STMT         reduce using rule 24 (command)
    ELSE_STMT       reduce using rule 24 (command)
    FOR_STMT        reduce using rule 24 (command)
    OUTPUT_WRITE    reduce using rule 24 (command)
    OUTPUT_WRITELN  reduce using rule 24 (command)
    INPUT_READ      reduce using rule 24 (command)
    '{'             reduce using rule 24 (command)
    '}'             reduce using rule 24 (command)
    '+'             reduce using rule 24 (command)
    '-'             reduce using rule 24 (command)
    '%'             reduce using rule 24 (command)
    '?'             reduce using rule 24 (command)
    '!'             reduce using rule 24 (command)


State 248

   25 command: return_stmt •

    NUM_INT         reduce using rule 25 (command)
    NUM_FLOAT       reduce using rule 25 (command)
    NIL_CNST        reduce using rule 25 (command)
    ID              reduce using rule 25 (command)
    RETURN_STM      reduce using rule 25 (command)
    T_INT           reduce using rule 25 (command)
    T_FLOAT         reduce using rule 25 (command)
    IF_STMT         reduce using rule 25 (command)
    ELSE_STMT       reduce using rule 25 (command)
    FOR_STMT        reduce using rule 25 (command)
    OUTPUT_WRITE    reduce using rule 25 (command)
    OUTPUT_WRITELN  reduce using rule 25 (command)
    INPUT_READ      reduce using rule 25 (command)
    '{'             reduce using rule 25 (command)
    '}'             reduce using rule 25 (command)
    '+'             reduce using rule 25 (command)
    '-'             reduce using rule 25 (command)
    '%'             reduce using rule 25 (command)
    '?'             reduce using rule 25 (command)
    '!'             reduce using rule 25 (command)


State 249

   26 command: iteration •

    NUM_INT         reduce using rule 26 (command)
    NUM_FLOAT       reduce using rule 26 (command)
    NIL_CNST        reduce using rule 26 (command)
    ID              reduce using rule 26 (command)
    RETURN_STM      reduce using rule 26 (command)
    T_INT           reduce using rule 26 (command)
    T_FLOAT         reduce using rule 26 (command)
    IF_STMT         reduce using rule 26 (command)
    ELSE_STMT       reduce using rule 26 (command)
    FOR_STMT        reduce using rule 26 (command)
    OUTPUT_WRITE    reduce using rule 26 (command)
    OUTPUT_WRITELN  reduce using rule 26 (command)
    INPUT_READ      reduce using rule 26 (command)
    '{'             reduce using rule 26 (command)
    '}'             reduce using rule 26 (command)
    '+'             reduce using rule 26 (command)
    '-'             reduce using rule 26 (command)
    '%'             reduce using rule 26 (command)
    '?'             reduce using rule 26 (command)
    '!'             reduce using rule 26 (command)


State 250

   32 init_variable: init_stmt • ';'

    ';'  shift, and go to state 343


State 251

   28 command: output •

    NUM_INT         reduce using rule 28 (command)
    NUM_FLOAT       reduce using rule 28 (command)
    NIL_CNST        reduce using rule 28 (command)
    ID              reduce using rule 28 (command)
    RETURN_STM      reduce using rule 28 (command)
    T_INT           reduce using rule 28 (command)
    T_FLOAT         reduce using rule 28 (command)
    IF_STMT         reduce using rule 28 (command)
    ELSE_STMT       reduce using rule 28 (command)
    FOR_STMT        reduce using rule 28 (command)
    OUTPUT_WRITE    reduce using rule 28 (command)
    OUTPUT_WRITELN  reduce using rule 28 (command)
    INPUT_READ      reduce using rule 28 (command)
    '{'             reduce using rule 28 (command)
    '}'             reduce using rule 28 (command)
    '+'             reduce using rule 28 (command)
    '-'             reduce using rule 28 (command)
    '%'             reduce using rule 28 (command)
    '?'             reduce using rule 28 (command)
    '!'             reduce using rule 28 (command)


State 252

   27 command: input •

    NUM_INT         reduce using rule 27 (command)
    NUM_FLOAT       reduce using rule 27 (command)
    NIL_CNST        reduce using rule 27 (command)
    ID              reduce using rule 27 (command)
    RETURN_STM      reduce using rule 27 (command)
    T_INT           reduce using rule 27 (command)
    T_FLOAT         reduce using rule 27 (command)
    IF_STMT         reduce using rule 27 (command)
    ELSE_STMT       reduce using rule 27 (command)
    FOR_STMT        reduce using rule 27 (command)
    OUTPUT_WRITE    reduce using rule 27 (command)
    OUTPUT_WRITELN  reduce using rule 27 (command)
    INPUT_READ      reduce using rule 27 (command)
    '{'             reduce using rule 27 (command)
    '}'             reduce using rule 27 (command)
    '+'             reduce using rule 27 (command)
    '-'             reduce using rule 27 (command)
    '%'             reduce using rule 27 (command)
    '?'             reduce using rule 27 (command)
    '!'             reduce using rule 27 (command)


State 253

   31 command: operation • ';'
   62 operation: operation • relational_op expression
   63          | operation • logical_op expression

    ';'         shift, and go to state 344
    AND         shift, and go to state 86
    OR          shift, and go to state 87
    GREATER     shift, and go to state 88
    GREATER_EQ  shift, and go to state 89
    LESS        shift, and go to state 90
    LESS_EQ     shift, and go to state 91
    EQUAL       shift, and go to state 92
    NOT_EQ      shift, and go to state 93

    logical_op     go to state 94
    relational_op  go to state 95


State 254

   38 init_stmt: ID • '=' operation

    '='  shift, and go to state 345


State 255

   11 unq_declaration: type ID •

    ')'  reduce using rule 11 (unq_declaration)
    ','  reduce using rule 11 (unq_declaration)


State 256

   11 unq_declaration: type ID •

    ';'  reduce using rule 11 (unq_declaration)


State 257

   46 func_calling: ID '(' • calling_parameters ')'

    NUM_INT    shift, and go to state 152
    NUM_FLOAT  shift, and go to state 153
    NIL_CNST   shift, and go to state 154
    ID         shift, and go to state 155
    '+'        shift, and go to state 156
    '-'        shift, and go to state 157
    '%'        shift, and go to state 158
    '?'        shift, and go to state 159
    '!'        shift, and go to state 160

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 346
    lst_calling_parameters  go to state 101
    func_calling            go to state 161
    expression              go to state 162
    const                   go to state 163
    number                  go to state 164
    operation               go to state 102
    single_operation        go to state 165
    arith_binary            go to state 166
    arith_single            go to state 167
    lst_single              go to state 168
    lst_binary              go to state 169


State 258

   72 arith_single: '+' expression •

    ')'         reduce using rule 72 (arith_single)
    ','         reduce using rule 72 (arith_single)
    AND         reduce using rule 72 (arith_single)
    OR          reduce using rule 72 (arith_single)
    GREATER     reduce using rule 72 (arith_single)
    GREATER_EQ  reduce using rule 72 (arith_single)
    LESS        reduce using rule 72 (arith_single)
    LESS_EQ     reduce using rule 72 (arith_single)
    EQUAL       reduce using rule 72 (arith_single)
    NOT_EQ      reduce using rule 72 (arith_single)
    '+'         reduce using rule 72 (arith_single)
    '-'         reduce using rule 72 (arith_single)
    '*'         reduce using rule 72 (arith_single)
    '/'         reduce using rule 72 (arith_single)
    FILTER      reduce using rule 72 (arith_single)
    MAP         reduce using rule 72 (arith_single)
    ':'         reduce using rule 72 (arith_single)


State 259

   73 arith_single: '-' expression •

    ')'         reduce using rule 73 (arith_single)
    ','         reduce using rule 73 (arith_single)
    AND         reduce using rule 73 (arith_single)
    OR          reduce using rule 73 (arith_single)
    GREATER     reduce using rule 73 (arith_single)
    GREATER_EQ  reduce using rule 73 (arith_single)
    LESS        reduce using rule 73 (arith_single)
    LESS_EQ     reduce using rule 73 (arith_single)
    EQUAL       reduce using rule 73 (arith_single)
    NOT_EQ      reduce using rule 73 (arith_single)
    '+'         reduce using rule 73 (arith_single)
    '-'         reduce using rule 73 (arith_single)
    '*'         reduce using rule 73 (arith_single)
    '/'         reduce using rule 73 (arith_single)
    FILTER      reduce using rule 73 (arith_single)
    MAP         reduce using rule 73 (arith_single)
    ':'         reduce using rule 73 (arith_single)


State 260

   74 lst_single: '%' expression •

    ')'         reduce using rule 74 (lst_single)
    ','         reduce using rule 74 (lst_single)
    AND         reduce using rule 74 (lst_single)
    OR          reduce using rule 74 (lst_single)
    GREATER     reduce using rule 74 (lst_single)
    GREATER_EQ  reduce using rule 74 (lst_single)
    LESS        reduce using rule 74 (lst_single)
    LESS_EQ     reduce using rule 74 (lst_single)
    EQUAL       reduce using rule 74 (lst_single)
    NOT_EQ      reduce using rule 74 (lst_single)
    '+'         reduce using rule 74 (lst_single)
    '-'         reduce using rule 74 (lst_single)
    '*'         reduce using rule 74 (lst_single)
    '/'         reduce using rule 74 (lst_single)
    FILTER      reduce using rule 74 (lst_single)
    MAP         reduce using rule 74 (lst_single)
    ':'         reduce using rule 74 (lst_single)


State 261

   75 lst_single: '?' expression •

    ')'         reduce using rule 75 (lst_single)
    ','         reduce using rule 75 (lst_single)
    AND         reduce using rule 75 (lst_single)
    OR          reduce using rule 75 (lst_single)
    GREATER     reduce using rule 75 (lst_single)
    GREATER_EQ  reduce using rule 75 (lst_single)
    LESS        reduce using rule 75 (lst_single)
    LESS_EQ     reduce using rule 75 (lst_single)
    EQUAL       reduce using rule 75 (lst_single)
    NOT_EQ      reduce using rule 75 (lst_single)
    '+'         reduce using rule 75 (lst_single)
    '-'         reduce using rule 75 (lst_single)
    '*'         reduce using rule 75 (lst_single)
    '/'         reduce using rule 75 (lst_single)
    FILTER      reduce using rule 75 (lst_single)
    MAP         reduce using rule 75 (lst_single)
    ':'         reduce using rule 75 (lst_single)


State 262

   66 single_operation: '!' expression •

    ')'         reduce using rule 66 (single_operation)
    ','         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)
    '+'         reduce using rule 66 (single_operation)
    '-'         reduce using rule 66 (single_operation)
    '*'         reduce using rule 66 (single_operation)
    '/'         reduce using rule 66 (single_operation)
    FILTER      reduce using rule 66 (single_operation)
    MAP         reduce using rule 66 (single_operation)
    ':'         reduce using rule 66 (single_operation)


State 263

   76 lst_binary: expression FILTER • expression

    NUM_INT    shift, and go to state 301
    NUM_FLOAT  shift, and go to state 302
    NIL_CNST   shift, and go to state 303
    ID         shift, and go to state 304
    '+'        shift, and go to state 305
    '-'        shift, and go to state 306
    '%'        shift, and go to state 307
    '?'        shift, and go to state 308
    '!'        shift, and go to state 309

    func_calling      go to state 310
    expression        go to state 347
    const             go to state 312
    number            go to state 313
    single_operation  go to state 314
    arith_single      go to state 315
    lst_single        go to state 316


State 264

   77 lst_binary: expression MAP • expression

    NUM_INT    shift, and go to state 301
    NUM_FLOAT  shift, and go to state 302
    NIL_CNST   shift, and go to state 303
    ID         shift, and go to state 304
    '+'        shift, and go to state 305
    '-'        shift, and go to state 306
    '%'        shift, and go to state 307
    '?'        shift, and go to state 308
    '!'        shift, and go to state 309

    func_calling      go to state 310
    expression        go to state 348
    const             go to state 312
    number            go to state 313
    single_operation  go to state 314
    arith_single      go to state 315
    lst_single        go to state 316


State 265

   78 lst_binary: expression ':' • expression

    NUM_INT    shift, and go to state 301
    NUM_FLOAT  shift, and go to state 302
    NIL_CNST   shift, and go to state 303
    ID         shift, and go to state 304
    '+'        shift, and go to state 305
    '-'        shift, and go to state 306
    '%'        shift, and go to state 307
    '?'        shift, and go to state 308
    '!'        shift, and go to state 309

    func_calling      go to state 310
    expression        go to state 349
    const             go to state 312
    number            go to state 313
    single_operation  go to state 314
    arith_single      go to state 315
    lst_single        go to state 316


State 266

   67 arith_binary: arith_binary '+' • expression

    NUM_INT    shift, and go to state 350
    NUM_FLOAT  shift, and go to state 351
    NIL_CNST   shift, and go to state 352
    ID         shift, and go to state 353
    '+'        shift, and go to state 354
    '-'        shift, and go to state 355
    '%'        shift, and go to state 356
    '?'        shift, and go to state 357
    '!'        shift, and go to state 358

    func_calling      go to state 359
    expression        go to state 360
    const             go to state 361
    number            go to state 362
    single_operation  go to state 363
    arith_single      go to state 364
    lst_single        go to state 365


State 267

   68 arith_binary: arith_binary '-' • expression

    NUM_INT    shift, and go to state 350
    NUM_FLOAT  shift, and go to state 351
    NIL_CNST   shift, and go to state 352
    ID         shift, and go to state 353
    '+'        shift, and go to state 354
    '-'        shift, and go to state 355
    '%'        shift, and go to state 356
    '?'        shift, and go to state 357
    '!'        shift, and go to state 358

    func_calling      go to state 359
    expression        go to state 366
    const             go to state 361
    number            go to state 362
    single_operation  go to state 363
    arith_single      go to state 364
    lst_single        go to state 365


State 268

   69 arith_binary: arith_binary '*' • expression

    NUM_INT    shift, and go to state 350
    NUM_FLOAT  shift, and go to state 351
    NIL_CNST   shift, and go to state 352
    ID         shift, and go to state 353
    '+'        shift, and go to state 354
    '-'        shift, and go to state 355
    '%'        shift, and go to state 356
    '?'        shift, and go to state 357
    '!'        shift, and go to state 358

    func_calling      go to state 359
    expression        go to state 367
    const             go to state 361
    number            go to state 362
    single_operation  go to state 363
    arith_single      go to state 364
    lst_single        go to state 365


State 269

   70 arith_binary: arith_binary '/' • expression

    NUM_INT    shift, and go to state 350
    NUM_FLOAT  shift, and go to state 351
    NIL_CNST   shift, and go to state 352
    ID         shift, and go to state 353
    '+'        shift, and go to state 354
    '-'        shift, and go to state 355
    '%'        shift, and go to state 356
    '?'        shift, and go to state 357
    '!'        shift, and go to state 358

    func_calling      go to state 359
    expression        go to state 368
    const             go to state 361
    number            go to state 362
    single_operation  go to state 363
    arith_single      go to state 364
    lst_single        go to state 365


State 270

   46 func_calling: ID '(' • calling_parameters ')'

    NUM_INT    shift, and go to state 152
    NUM_FLOAT  shift, and go to state 153
    NIL_CNST   shift, and go to state 154
    ID         shift, and go to state 155
    '+'        shift, and go to state 156
    '-'        shift, and go to state 157
    '%'        shift, and go to state 158
    '?'        shift, and go to state 159
    '!'        shift, and go to state 160

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 369
    lst_calling_parameters  go to state 101
    func_calling            go to state 161
    expression              go to state 162
    const                   go to state 163
    number                  go to state 164
    operation               go to state 102
    single_operation        go to state 165
    arith_binary            go to state 166
    arith_single            go to state 167
    lst_single              go to state 168
    lst_binary              go to state 169


State 271

   72 arith_single: '+' expression •

    ')'         reduce using rule 72 (arith_single)
    AND         reduce using rule 72 (arith_single)
    OR          reduce using rule 72 (arith_single)
    GREATER     reduce using rule 72 (arith_single)
    GREATER_EQ  reduce using rule 72 (arith_single)
    LESS        reduce using rule 72 (arith_single)
    LESS_EQ     reduce using rule 72 (arith_single)
    EQUAL       reduce using rule 72 (arith_single)
    NOT_EQ      reduce using rule 72 (arith_single)
    '+'         reduce using rule 72 (arith_single)
    '-'         reduce using rule 72 (arith_single)
    '*'         reduce using rule 72 (arith_single)
    '/'         reduce using rule 72 (arith_single)
    FILTER      reduce using rule 72 (arith_single)
    MAP         reduce using rule 72 (arith_single)
    ':'         reduce using rule 72 (arith_single)


State 272

   73 arith_single: '-' expression •

    ')'         reduce using rule 73 (arith_single)
    AND         reduce using rule 73 (arith_single)
    OR          reduce using rule 73 (arith_single)
    GREATER     reduce using rule 73 (arith_single)
    GREATER_EQ  reduce using rule 73 (arith_single)
    LESS        reduce using rule 73 (arith_single)
    LESS_EQ     reduce using rule 73 (arith_single)
    EQUAL       reduce using rule 73 (arith_single)
    NOT_EQ      reduce using rule 73 (arith_single)
    '+'         reduce using rule 73 (arith_single)
    '-'         reduce using rule 73 (arith_single)
    '*'         reduce using rule 73 (arith_single)
    '/'         reduce using rule 73 (arith_single)
    FILTER      reduce using rule 73 (arith_single)
    MAP         reduce using rule 73 (arith_single)
    ':'         reduce using rule 73 (arith_single)


State 273

   74 lst_single: '%' expression •

    ')'         reduce using rule 74 (lst_single)
    AND         reduce using rule 74 (lst_single)
    OR          reduce using rule 74 (lst_single)
    GREATER     reduce using rule 74 (lst_single)
    GREATER_EQ  reduce using rule 74 (lst_single)
    LESS        reduce using rule 74 (lst_single)
    LESS_EQ     reduce using rule 74 (lst_single)
    EQUAL       reduce using rule 74 (lst_single)
    NOT_EQ      reduce using rule 74 (lst_single)
    '+'         reduce using rule 74 (lst_single)
    '-'         reduce using rule 74 (lst_single)
    '*'         reduce using rule 74 (lst_single)
    '/'         reduce using rule 74 (lst_single)
    FILTER      reduce using rule 74 (lst_single)
    MAP         reduce using rule 74 (lst_single)
    ':'         reduce using rule 74 (lst_single)


State 274

   75 lst_single: '?' expression •

    ')'         reduce using rule 75 (lst_single)
    AND         reduce using rule 75 (lst_single)
    OR          reduce using rule 75 (lst_single)
    GREATER     reduce using rule 75 (lst_single)
    GREATER_EQ  reduce using rule 75 (lst_single)
    LESS        reduce using rule 75 (lst_single)
    LESS_EQ     reduce using rule 75 (lst_single)
    EQUAL       reduce using rule 75 (lst_single)
    NOT_EQ      reduce using rule 75 (lst_single)
    '+'         reduce using rule 75 (lst_single)
    '-'         reduce using rule 75 (lst_single)
    '*'         reduce using rule 75 (lst_single)
    '/'         reduce using rule 75 (lst_single)
    FILTER      reduce using rule 75 (lst_single)
    MAP         reduce using rule 75 (lst_single)
    ':'         reduce using rule 75 (lst_single)


State 275

   66 single_operation: '!' expression •

    ')'         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)
    '+'         reduce using rule 66 (single_operation)
    '-'         reduce using rule 66 (single_operation)
    '*'         reduce using rule 66 (single_operation)
    '/'         reduce using rule 66 (single_operation)
    FILTER      reduce using rule 66 (single_operation)
    MAP         reduce using rule 66 (single_operation)
    ':'         reduce using rule 66 (single_operation)


State 276

   76 lst_binary: expression FILTER • expression

    NUM_INT    shift, and go to state 318
    NUM_FLOAT  shift, and go to state 319
    NIL_CNST   shift, and go to state 320
    ID         shift, and go to state 321
    '+'        shift, and go to state 322
    '-'        shift, and go to state 323
    '%'        shift, and go to state 324
    '?'        shift, and go to state 325
    '!'        shift, and go to state 326

    func_calling      go to state 327
    expression        go to state 370
    const             go to state 329
    number            go to state 330
    single_operation  go to state 331
    arith_single      go to state 332
    lst_single        go to state 333


State 277

   77 lst_binary: expression MAP • expression

    NUM_INT    shift, and go to state 318
    NUM_FLOAT  shift, and go to state 319
    NIL_CNST   shift, and go to state 320
    ID         shift, and go to state 321
    '+'        shift, and go to state 322
    '-'        shift, and go to state 323
    '%'        shift, and go to state 324
    '?'        shift, and go to state 325
    '!'        shift, and go to state 326

    func_calling      go to state 327
    expression        go to state 371
    const             go to state 329
    number            go to state 330
    single_operation  go to state 331
    arith_single      go to state 332
    lst_single        go to state 333


State 278

   78 lst_binary: expression ':' • expression

    NUM_INT    shift, and go to state 318
    NUM_FLOAT  shift, and go to state 319
    NIL_CNST   shift, and go to state 320
    ID         shift, and go to state 321
    '+'        shift, and go to state 322
    '-'        shift, and go to state 323
    '%'        shift, and go to state 324
    '?'        shift, and go to state 325
    '!'        shift, and go to state 326

    func_calling      go to state 327
    expression        go to state 372
    const             go to state 329
    number            go to state 330
    single_operation  go to state 331
    arith_single      go to state 332
    lst_single        go to state 333


State 279

   67 arith_binary: arith_binary '+' • expression

    NUM_INT    shift, and go to state 373
    NUM_FLOAT  shift, and go to state 374
    NIL_CNST   shift, and go to state 375
    ID         shift, and go to state 376
    '+'        shift, and go to state 377
    '-'        shift, and go to state 378
    '%'        shift, and go to state 379
    '?'        shift, and go to state 380
    '!'        shift, and go to state 381

    func_calling      go to state 382
    expression        go to state 383
    const             go to state 384
    number            go to state 385
    single_operation  go to state 386
    arith_single      go to state 387
    lst_single        go to state 388


State 280

   68 arith_binary: arith_binary '-' • expression

    NUM_INT    shift, and go to state 373
    NUM_FLOAT  shift, and go to state 374
    NIL_CNST   shift, and go to state 375
    ID         shift, and go to state 376
    '+'        shift, and go to state 377
    '-'        shift, and go to state 378
    '%'        shift, and go to state 379
    '?'        shift, and go to state 380
    '!'        shift, and go to state 381

    func_calling      go to state 382
    expression        go to state 389
    const             go to state 384
    number            go to state 385
    single_operation  go to state 386
    arith_single      go to state 387
    lst_single        go to state 388


State 281

   69 arith_binary: arith_binary '*' • expression

    NUM_INT    shift, and go to state 373
    NUM_FLOAT  shift, and go to state 374
    NIL_CNST   shift, and go to state 375
    ID         shift, and go to state 376
    '+'        shift, and go to state 377
    '-'        shift, and go to state 378
    '%'        shift, and go to state 379
    '?'        shift, and go to state 380
    '!'        shift, and go to state 381

    func_calling      go to state 382
    expression        go to state 390
    const             go to state 384
    number            go to state 385
    single_operation  go to state 386
    arith_single      go to state 387
    lst_single        go to state 388


State 282

   70 arith_binary: arith_binary '/' • expression

    NUM_INT    shift, and go to state 373
    NUM_FLOAT  shift, and go to state 374
    NIL_CNST   shift, and go to state 375
    ID         shift, and go to state 376
    '+'        shift, and go to state 377
    '-'        shift, and go to state 378
    '%'        shift, and go to state 379
    '?'        shift, and go to state 380
    '!'        shift, and go to state 381

    func_calling      go to state 382
    expression        go to state 391
    const             go to state 384
    number            go to state 385
    single_operation  go to state 386
    arith_single      go to state 387
    lst_single        go to state 388


State 283

   46 func_calling: ID '(' • calling_parameters ')'

    NUM_INT    shift, and go to state 152
    NUM_FLOAT  shift, and go to state 153
    NIL_CNST   shift, and go to state 154
    ID         shift, and go to state 155
    '+'        shift, and go to state 156
    '-'        shift, and go to state 157
    '%'        shift, and go to state 158
    '?'        shift, and go to state 159
    '!'        shift, and go to state 160

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 392
    lst_calling_parameters  go to state 101
    func_calling            go to state 161
    expression              go to state 162
    const                   go to state 163
    number                  go to state 164
    operation               go to state 102
    single_operation        go to state 165
    arith_binary            go to state 166
    arith_single            go to state 167
    lst_single              go to state 168
    lst_binary              go to state 169


State 284

   72 arith_single: '+' expression •

    ')'  reduce using rule 72 (arith_single)


State 285

   73 arith_single: '-' expression •

    ')'  reduce using rule 73 (arith_single)


State 286

   74 lst_single: '%' expression •

    ')'  reduce using rule 74 (lst_single)


State 287

   75 lst_single: '?' expression •

    ')'  reduce using rule 75 (lst_single)


State 288

   66 single_operation: '!' expression •

    ')'  reduce using rule 66 (single_operation)


State 289

   46 func_calling: ID '(' • calling_parameters ')'

    NUM_INT    shift, and go to state 152
    NUM_FLOAT  shift, and go to state 153
    NIL_CNST   shift, and go to state 154
    ID         shift, and go to state 155
    '+'        shift, and go to state 156
    '-'        shift, and go to state 157
    '%'        shift, and go to state 158
    '?'        shift, and go to state 159
    '!'        shift, and go to state 160

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 393
    lst_calling_parameters  go to state 101
    func_calling            go to state 161
    expression              go to state 162
    const                   go to state 163
    number                  go to state 164
    operation               go to state 102
    single_operation        go to state 165
    arith_binary            go to state 166
    arith_single            go to state 167
    lst_single              go to state 168
    lst_binary              go to state 169


State 290

   72 arith_single: '+' expression •

    ';'         reduce using rule 72 (arith_single)
    AND         reduce using rule 72 (arith_single)
    OR          reduce using rule 72 (arith_single)
    GREATER     reduce using rule 72 (arith_single)
    GREATER_EQ  reduce using rule 72 (arith_single)
    LESS        reduce using rule 72 (arith_single)
    LESS_EQ     reduce using rule 72 (arith_single)
    EQUAL       reduce using rule 72 (arith_single)
    NOT_EQ      reduce using rule 72 (arith_single)


State 291

   73 arith_single: '-' expression •

    ';'         reduce using rule 73 (arith_single)
    AND         reduce using rule 73 (arith_single)
    OR          reduce using rule 73 (arith_single)
    GREATER     reduce using rule 73 (arith_single)
    GREATER_EQ  reduce using rule 73 (arith_single)
    LESS        reduce using rule 73 (arith_single)
    LESS_EQ     reduce using rule 73 (arith_single)
    EQUAL       reduce using rule 73 (arith_single)
    NOT_EQ      reduce using rule 73 (arith_single)


State 292

   74 lst_single: '%' expression •

    ';'         reduce using rule 74 (lst_single)
    AND         reduce using rule 74 (lst_single)
    OR          reduce using rule 74 (lst_single)
    GREATER     reduce using rule 74 (lst_single)
    GREATER_EQ  reduce using rule 74 (lst_single)
    LESS        reduce using rule 74 (lst_single)
    LESS_EQ     reduce using rule 74 (lst_single)
    EQUAL       reduce using rule 74 (lst_single)
    NOT_EQ      reduce using rule 74 (lst_single)


State 293

   75 lst_single: '?' expression •

    ';'         reduce using rule 75 (lst_single)
    AND         reduce using rule 75 (lst_single)
    OR          reduce using rule 75 (lst_single)
    GREATER     reduce using rule 75 (lst_single)
    GREATER_EQ  reduce using rule 75 (lst_single)
    LESS        reduce using rule 75 (lst_single)
    LESS_EQ     reduce using rule 75 (lst_single)
    EQUAL       reduce using rule 75 (lst_single)
    NOT_EQ      reduce using rule 75 (lst_single)


State 294

   66 single_operation: '!' expression •

    ';'         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)


State 295

   46 func_calling: ID '(' • calling_parameters ')'

    NUM_INT    shift, and go to state 152
    NUM_FLOAT  shift, and go to state 153
    NIL_CNST   shift, and go to state 154
    ID         shift, and go to state 155
    '+'        shift, and go to state 156
    '-'        shift, and go to state 157
    '%'        shift, and go to state 158
    '?'        shift, and go to state 159
    '!'        shift, and go to state 160

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 394
    lst_calling_parameters  go to state 101
    func_calling            go to state 161
    expression              go to state 162
    const                   go to state 163
    number                  go to state 164
    operation               go to state 102
    single_operation        go to state 165
    arith_binary            go to state 166
    arith_single            go to state 167
    lst_single              go to state 168
    lst_binary              go to state 169


State 296

   72 arith_single: '+' expression •

    ';'         reduce using rule 72 (arith_single)
    AND         reduce using rule 72 (arith_single)
    OR          reduce using rule 72 (arith_single)
    GREATER     reduce using rule 72 (arith_single)
    GREATER_EQ  reduce using rule 72 (arith_single)
    LESS        reduce using rule 72 (arith_single)
    LESS_EQ     reduce using rule 72 (arith_single)
    EQUAL       reduce using rule 72 (arith_single)
    NOT_EQ      reduce using rule 72 (arith_single)
    '+'         reduce using rule 72 (arith_single)
    '-'         reduce using rule 72 (arith_single)
    '*'         reduce using rule 72 (arith_single)
    '/'         reduce using rule 72 (arith_single)


State 297

   73 arith_single: '-' expression •

    ';'         reduce using rule 73 (arith_single)
    AND         reduce using rule 73 (arith_single)
    OR          reduce using rule 73 (arith_single)
    GREATER     reduce using rule 73 (arith_single)
    GREATER_EQ  reduce using rule 73 (arith_single)
    LESS        reduce using rule 73 (arith_single)
    LESS_EQ     reduce using rule 73 (arith_single)
    EQUAL       reduce using rule 73 (arith_single)
    NOT_EQ      reduce using rule 73 (arith_single)
    '+'         reduce using rule 73 (arith_single)
    '-'         reduce using rule 73 (arith_single)
    '*'         reduce using rule 73 (arith_single)
    '/'         reduce using rule 73 (arith_single)


State 298

   74 lst_single: '%' expression •

    ';'         reduce using rule 74 (lst_single)
    AND         reduce using rule 74 (lst_single)
    OR          reduce using rule 74 (lst_single)
    GREATER     reduce using rule 74 (lst_single)
    GREATER_EQ  reduce using rule 74 (lst_single)
    LESS        reduce using rule 74 (lst_single)
    LESS_EQ     reduce using rule 74 (lst_single)
    EQUAL       reduce using rule 74 (lst_single)
    NOT_EQ      reduce using rule 74 (lst_single)
    '+'         reduce using rule 74 (lst_single)
    '-'         reduce using rule 74 (lst_single)
    '*'         reduce using rule 74 (lst_single)
    '/'         reduce using rule 74 (lst_single)


State 299

   75 lst_single: '?' expression •

    ';'         reduce using rule 75 (lst_single)
    AND         reduce using rule 75 (lst_single)
    OR          reduce using rule 75 (lst_single)
    GREATER     reduce using rule 75 (lst_single)
    GREATER_EQ  reduce using rule 75 (lst_single)
    LESS        reduce using rule 75 (lst_single)
    LESS_EQ     reduce using rule 75 (lst_single)
    EQUAL       reduce using rule 75 (lst_single)
    NOT_EQ      reduce using rule 75 (lst_single)
    '+'         reduce using rule 75 (lst_single)
    '-'         reduce using rule 75 (lst_single)
    '*'         reduce using rule 75 (lst_single)
    '/'         reduce using rule 75 (lst_single)


State 300

   66 single_operation: '!' expression •

    ';'         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)
    '+'         reduce using rule 66 (single_operation)
    '-'         reduce using rule 66 (single_operation)
    '*'         reduce using rule 66 (single_operation)
    '/'         reduce using rule 66 (single_operation)


State 301

   53 number: NUM_INT •

    ')'         reduce using rule 53 (number)
    ','         reduce using rule 53 (number)
    AND         reduce using rule 53 (number)
    OR          reduce using rule 53 (number)
    GREATER     reduce using rule 53 (number)
    GREATER_EQ  reduce using rule 53 (number)
    LESS        reduce using rule 53 (number)
    LESS_EQ     reduce using rule 53 (number)
    EQUAL       reduce using rule 53 (number)
    NOT_EQ      reduce using rule 53 (number)


State 302

   54 number: NUM_FLOAT •

    ')'         reduce using rule 54 (number)
    ','         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)


State 303

   52 const: NIL_CNST •

    ')'         reduce using rule 52 (const)
    ','         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)


State 304

   46 func_calling: ID • '(' calling_parameters ')'
   50 expression: ID •

    '('  shift, and go to state 395

    ')'         reduce using rule 50 (expression)
    ','         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)


State 305

   72 arith_single: '+' • expression

    NUM_INT    shift, and go to state 301
    NUM_FLOAT  shift, and go to state 302
    NIL_CNST   shift, and go to state 303
    ID         shift, and go to state 304
    '+'        shift, and go to state 305
    '-'        shift, and go to state 306
    '%'        shift, and go to state 307
    '?'        shift, and go to state 308
    '!'        shift, and go to state 309

    func_calling      go to state 310
    expression        go to state 396
    const             go to state 312
    number            go to state 313
    single_operation  go to state 314
    arith_single      go to state 315
    lst_single        go to state 316


State 306

   73 arith_single: '-' • expression

    NUM_INT    shift, and go to state 301
    NUM_FLOAT  shift, and go to state 302
    NIL_CNST   shift, and go to state 303
    ID         shift, and go to state 304
    '+'        shift, and go to state 305
    '-'        shift, and go to state 306
    '%'        shift, and go to state 307
    '?'        shift, and go to state 308
    '!'        shift, and go to state 309

    func_calling      go to state 310
    expression        go to state 397
    const             go to state 312
    number            go to state 313
    single_operation  go to state 314
    arith_single      go to state 315
    lst_single        go to state 316


State 307

   74 lst_single: '%' • expression

    NUM_INT    shift, and go to state 301
    NUM_FLOAT  shift, and go to state 302
    NIL_CNST   shift, and go to state 303
    ID         shift, and go to state 304
    '+'        shift, and go to state 305
    '-'        shift, and go to state 306
    '%'        shift, and go to state 307
    '?'        shift, and go to state 308
    '!'        shift, and go to state 309

    func_calling      go to state 310
    expression        go to state 398
    const             go to state 312
    number            go to state 313
    single_operation  go to state 314
    arith_single      go to state 315
    lst_single        go to state 316


State 308

   75 lst_single: '?' • expression

    NUM_INT    shift, and go to state 301
    NUM_FLOAT  shift, and go to state 302
    NIL_CNST   shift, and go to state 303
    ID         shift, and go to state 304
    '+'        shift, and go to state 305
    '-'        shift, and go to state 306
    '%'        shift, and go to state 307
    '?'        shift, and go to state 308
    '!'        shift, and go to state 309

    func_calling      go to state 310
    expression        go to state 399
    const             go to state 312
    number            go to state 313
    single_operation  go to state 314
    arith_single      go to state 315
    lst_single        go to state 316


State 309

   66 single_operation: '!' • expression

    NUM_INT    shift, and go to state 301
    NUM_FLOAT  shift, and go to state 302
    NIL_CNST   shift, and go to state 303
    ID         shift, and go to state 304
    '+'        shift, and go to state 305
    '-'        shift, and go to state 306
    '%'        shift, and go to state 307
    '?'        shift, and go to state 308
    '!'        shift, and go to state 309

    func_calling      go to state 310
    expression        go to state 400
    const             go to state 312
    number            go to state 313
    single_operation  go to state 314
    arith_single      go to state 315
    lst_single        go to state 316


State 310

   47 expression: func_calling •

    ')'         reduce using rule 47 (expression)
    ','         reduce using rule 47 (expression)
    AND         reduce using rule 47 (expression)
    OR          reduce using rule 47 (expression)
    GREATER     reduce using rule 47 (expression)
    GREATER_EQ  reduce using rule 47 (expression)
    LESS        reduce using rule 47 (expression)
    LESS_EQ     reduce using rule 47 (expression)
    EQUAL       reduce using rule 47 (expression)
    NOT_EQ      reduce using rule 47 (expression)


State 311

   63 operation: operation logical_op expression •

    ')'         reduce using rule 63 (operation)
    ','         reduce using rule 63 (operation)
    AND         reduce using rule 63 (operation)
    OR          reduce using rule 63 (operation)
    GREATER     reduce using rule 63 (operation)
    GREATER_EQ  reduce using rule 63 (operation)
    LESS        reduce using rule 63 (operation)
    LESS_EQ     reduce using rule 63 (operation)
    EQUAL       reduce using rule 63 (operation)
    NOT_EQ      reduce using rule 63 (operation)


State 312

   49 expression: const •

    ')'         reduce using rule 49 (expression)
    ','         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)


State 313

   51 const: number •

    ')'         reduce using rule 51 (const)
    ','         reduce using rule 51 (const)
    AND         reduce using rule 51 (const)
    OR          reduce using rule 51 (const)
    GREATER     reduce using rule 51 (const)
    GREATER_EQ  reduce using rule 51 (const)
    LESS        reduce using rule 51 (const)
    LESS_EQ     reduce using rule 51 (const)
    EQUAL       reduce using rule 51 (const)
    NOT_EQ      reduce using rule 51 (const)


State 314

   48 expression: single_operation •

    ')'         reduce using rule 48 (expression)
    ','         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)


State 315

   64 single_operation: arith_single •

    ')'         reduce using rule 64 (single_operation)
    ','         reduce using rule 64 (single_operation)
    AND         reduce using rule 64 (single_operation)
    OR          reduce using rule 64 (single_operation)
    GREATER     reduce using rule 64 (single_operation)
    GREATER_EQ  reduce using rule 64 (single_operation)
    LESS        reduce using rule 64 (single_operation)
    LESS_EQ     reduce using rule 64 (single_operation)
    EQUAL       reduce using rule 64 (single_operation)
    NOT_EQ      reduce using rule 64 (single_operation)


State 316

   65 single_operation: lst_single •

    ')'         reduce using rule 65 (single_operation)
    ','         reduce using rule 65 (single_operation)
    AND         reduce using rule 65 (single_operation)
    OR          reduce using rule 65 (single_operation)
    GREATER     reduce using rule 65 (single_operation)
    GREATER_EQ  reduce using rule 65 (single_operation)
    LESS        reduce using rule 65 (single_operation)
    LESS_EQ     reduce using rule 65 (single_operation)
    EQUAL       reduce using rule 65 (single_operation)
    NOT_EQ      reduce using rule 65 (single_operation)


State 317

   62 operation: operation relational_op expression •

    ')'         reduce using rule 62 (operation)
    ','         reduce using rule 62 (operation)
    AND         reduce using rule 62 (operation)
    OR          reduce using rule 62 (operation)
    GREATER     reduce using rule 62 (operation)
    GREATER_EQ  reduce using rule 62 (operation)
    LESS        reduce using rule 62 (operation)
    LESS_EQ     reduce using rule 62 (operation)
    EQUAL       reduce using rule 62 (operation)
    NOT_EQ      reduce using rule 62 (operation)


State 318

   53 number: NUM_INT •

    ')'         reduce using rule 53 (number)
    AND         reduce using rule 53 (number)
    OR          reduce using rule 53 (number)
    GREATER     reduce using rule 53 (number)
    GREATER_EQ  reduce using rule 53 (number)
    LESS        reduce using rule 53 (number)
    LESS_EQ     reduce using rule 53 (number)
    EQUAL       reduce using rule 53 (number)
    NOT_EQ      reduce using rule 53 (number)


State 319

   54 number: NUM_FLOAT •

    ')'         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)


State 320

   52 const: NIL_CNST •

    ')'         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)


State 321

   46 func_calling: ID • '(' calling_parameters ')'
   50 expression: ID •

    '('  shift, and go to state 401

    ')'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)


State 322

   72 arith_single: '+' • expression

    NUM_INT    shift, and go to state 318
    NUM_FLOAT  shift, and go to state 319
    NIL_CNST   shift, and go to state 320
    ID         shift, and go to state 321
    '+'        shift, and go to state 322
    '-'        shift, and go to state 323
    '%'        shift, and go to state 324
    '?'        shift, and go to state 325
    '!'        shift, and go to state 326

    func_calling      go to state 327
    expression        go to state 402
    const             go to state 329
    number            go to state 330
    single_operation  go to state 331
    arith_single      go to state 332
    lst_single        go to state 333


State 323

   73 arith_single: '-' • expression

    NUM_INT    shift, and go to state 318
    NUM_FLOAT  shift, and go to state 319
    NIL_CNST   shift, and go to state 320
    ID         shift, and go to state 321
    '+'        shift, and go to state 322
    '-'        shift, and go to state 323
    '%'        shift, and go to state 324
    '?'        shift, and go to state 325
    '!'        shift, and go to state 326

    func_calling      go to state 327
    expression        go to state 403
    const             go to state 329
    number            go to state 330
    single_operation  go to state 331
    arith_single      go to state 332
    lst_single        go to state 333


State 324

   74 lst_single: '%' • expression

    NUM_INT    shift, and go to state 318
    NUM_FLOAT  shift, and go to state 319
    NIL_CNST   shift, and go to state 320
    ID         shift, and go to state 321
    '+'        shift, and go to state 322
    '-'        shift, and go to state 323
    '%'        shift, and go to state 324
    '?'        shift, and go to state 325
    '!'        shift, and go to state 326

    func_calling      go to state 327
    expression        go to state 404
    const             go to state 329
    number            go to state 330
    single_operation  go to state 331
    arith_single      go to state 332
    lst_single        go to state 333


State 325

   75 lst_single: '?' • expression

    NUM_INT    shift, and go to state 318
    NUM_FLOAT  shift, and go to state 319
    NIL_CNST   shift, and go to state 320
    ID         shift, and go to state 321
    '+'        shift, and go to state 322
    '-'        shift, and go to state 323
    '%'        shift, and go to state 324
    '?'        shift, and go to state 325
    '!'        shift, and go to state 326

    func_calling      go to state 327
    expression        go to state 405
    const             go to state 329
    number            go to state 330
    single_operation  go to state 331
    arith_single      go to state 332
    lst_single        go to state 333


State 326

   66 single_operation: '!' • expression

    NUM_INT    shift, and go to state 318
    NUM_FLOAT  shift, and go to state 319
    NIL_CNST   shift, and go to state 320
    ID         shift, and go to state 321
    '+'        shift, and go to state 322
    '-'        shift, and go to state 323
    '%'        shift, and go to state 324
    '?'        shift, and go to state 325
    '!'        shift, and go to state 326

    func_calling      go to state 327
    expression        go to state 406
    const             go to state 329
    number            go to state 330
    single_operation  go to state 331
    arith_single      go to state 332
    lst_single        go to state 333


State 327

   47 expression: func_calling •

    ')'         reduce using rule 47 (expression)
    AND         reduce using rule 47 (expression)
    OR          reduce using rule 47 (expression)
    GREATER     reduce using rule 47 (expression)
    GREATER_EQ  reduce using rule 47 (expression)
    LESS        reduce using rule 47 (expression)
    LESS_EQ     reduce using rule 47 (expression)
    EQUAL       reduce using rule 47 (expression)
    NOT_EQ      reduce using rule 47 (expression)


State 328

   63 operation: operation logical_op expression •

    ')'         reduce using rule 63 (operation)
    AND         reduce using rule 63 (operation)
    OR          reduce using rule 63 (operation)
    GREATER     reduce using rule 63 (operation)
    GREATER_EQ  reduce using rule 63 (operation)
    LESS        reduce using rule 63 (operation)
    LESS_EQ     reduce using rule 63 (operation)
    EQUAL       reduce using rule 63 (operation)
    NOT_EQ      reduce using rule 63 (operation)


State 329

   49 expression: const •

    ')'         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)


State 330

   51 const: number •

    ')'         reduce using rule 51 (const)
    AND         reduce using rule 51 (const)
    OR          reduce using rule 51 (const)
    GREATER     reduce using rule 51 (const)
    GREATER_EQ  reduce using rule 51 (const)
    LESS        reduce using rule 51 (const)
    LESS_EQ     reduce using rule 51 (const)
    EQUAL       reduce using rule 51 (const)
    NOT_EQ      reduce using rule 51 (const)


State 331

   48 expression: single_operation •

    ')'         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)


State 332

   64 single_operation: arith_single •

    ')'         reduce using rule 64 (single_operation)
    AND         reduce using rule 64 (single_operation)
    OR          reduce using rule 64 (single_operation)
    GREATER     reduce using rule 64 (single_operation)
    GREATER_EQ  reduce using rule 64 (single_operation)
    LESS        reduce using rule 64 (single_operation)
    LESS_EQ     reduce using rule 64 (single_operation)
    EQUAL       reduce using rule 64 (single_operation)
    NOT_EQ      reduce using rule 64 (single_operation)


State 333

   65 single_operation: lst_single •

    ')'         reduce using rule 65 (single_operation)
    AND         reduce using rule 65 (single_operation)
    OR          reduce using rule 65 (single_operation)
    GREATER     reduce using rule 65 (single_operation)
    GREATER_EQ  reduce using rule 65 (single_operation)
    LESS        reduce using rule 65 (single_operation)
    LESS_EQ     reduce using rule 65 (single_operation)
    EQUAL       reduce using rule 65 (single_operation)
    NOT_EQ      reduce using rule 65 (single_operation)


State 334

   62 operation: operation relational_op expression •

    ')'         reduce using rule 62 (operation)
    AND         reduce using rule 62 (operation)
    OR          reduce using rule 62 (operation)
    GREATER     reduce using rule 62 (operation)
    GREATER_EQ  reduce using rule 62 (operation)
    LESS        reduce using rule 62 (operation)
    LESS_EQ     reduce using rule 62 (operation)
    EQUAL       reduce using rule 62 (operation)
    NOT_EQ      reduce using rule 62 (operation)


State 335

   35 return_stmt: RETURN_STM operation • ';'
   62 operation: operation • relational_op expression
   63          | operation • logical_op expression

    ';'         shift, and go to state 407
    AND         shift, and go to state 86
    OR          shift, and go to state 87
    GREATER     shift, and go to state 88
    GREATER_EQ  shift, and go to state 89
    LESS        shift, and go to state 90
    LESS_EQ     shift, and go to state 91
    EQUAL       shift, and go to state 92
    NOT_EQ      shift, and go to state 93

    logical_op     go to state 94
    relational_op  go to state 95


State 336

   33 conditional_stmt: IF_STMT '(' • operation ')' command
   34                 | IF_STMT '(' • operation ')' command ELSE_STMT command

    NUM_INT    shift, and go to state 170
    NUM_FLOAT  shift, and go to state 171
    NIL_CNST   shift, and go to state 172
    ID         shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    expression        go to state 180
    const             go to state 181
    number            go to state 182
    operation         go to state 408
    single_operation  go to state 183
    arith_binary      go to state 184
    arith_single      go to state 185
    lst_single        go to state 186
    lst_binary        go to state 187


State 337

   36 iteration: FOR_STMT '(' • loop_condition ')' command

    ID  shift, and go to state 106

    loop_condition  go to state 409
    init_stmt       go to state 108


State 338

   41 output: OUTPUT_WRITE '(' • operation ')' ';'
   43       | OUTPUT_WRITE '(' • STRING ')' ';'

    NUM_INT    shift, and go to state 170
    NUM_FLOAT  shift, and go to state 171
    STRING     shift, and go to state 410
    NIL_CNST   shift, and go to state 172
    ID         shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    expression        go to state 180
    const             go to state 181
    number            go to state 182
    operation         go to state 411
    single_operation  go to state 183
    arith_binary      go to state 184
    arith_single      go to state 185
    lst_single        go to state 186
    lst_binary        go to state 187


State 339

   42 output: OUTPUT_WRITELN '(' • operation ')' ';'
   44       | OUTPUT_WRITELN '(' • STRING ')' ';'

    NUM_INT    shift, and go to state 170
    NUM_FLOAT  shift, and go to state 171
    STRING     shift, and go to state 412
    NIL_CNST   shift, and go to state 172
    ID         shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    expression        go to state 180
    const             go to state 181
    number            go to state 182
    operation         go to state 413
    single_operation  go to state 183
    arith_binary      go to state 184
    arith_single      go to state 185
    lst_single        go to state 186
    lst_binary        go to state 187


State 340

   45 input: INPUT_READ '(' • expression ')' ';'

    NUM_INT    shift, and go to state 188
    NUM_FLOAT  shift, and go to state 189
    NIL_CNST   shift, and go to state 190
    ID         shift, and go to state 191
    '+'        shift, and go to state 192
    '-'        shift, and go to state 193
    '%'        shift, and go to state 194
    '?'        shift, and go to state 195
    '!'        shift, and go to state 196

    func_calling      go to state 197
    expression        go to state 414
    const             go to state 198
    number            go to state 199
    single_operation  go to state 200
    arith_single      go to state 201
    lst_single        go to state 202


State 341

   10 var_declaration: unq_declaration ';' •

    NUM_INT         reduce using rule 10 (var_declaration)
    NUM_FLOAT       reduce using rule 10 (var_declaration)
    NIL_CNST        reduce using rule 10 (var_declaration)
    ID              reduce using rule 10 (var_declaration)
    RETURN_STM      reduce using rule 10 (var_declaration)
    T_INT           reduce using rule 10 (var_declaration)
    T_FLOAT         reduce using rule 10 (var_declaration)
    IF_STMT         reduce using rule 10 (var_declaration)
    ELSE_STMT       reduce using rule 10 (var_declaration)
    FOR_STMT        reduce using rule 10 (var_declaration)
    OUTPUT_WRITE    reduce using rule 10 (var_declaration)
    OUTPUT_WRITELN  reduce using rule 10 (var_declaration)
    INPUT_READ      reduce using rule 10 (var_declaration)
    '{'             reduce using rule 10 (var_declaration)
    '}'             reduce using rule 10 (var_declaration)
    '+'             reduce using rule 10 (var_declaration)
    '-'             reduce using rule 10 (var_declaration)
    '%'             reduce using rule 10 (var_declaration)
    '?'             reduce using rule 10 (var_declaration)
    '!'             reduce using rule 10 (var_declaration)


State 342

   30 command: $@2 '{' • block_commands '}'

    NUM_INT         shift, and go to state 27
    NUM_FLOAT       shift, and go to state 28
    NIL_CNST        shift, and go to state 29
    ID              shift, and go to state 30
    RETURN_STM      shift, and go to state 31
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 32
    FOR_STMT        shift, and go to state 33
    OUTPUT_WRITE    shift, and go to state 34
    OUTPUT_WRITELN  shift, and go to state 35
    INPUT_READ      shift, and go to state 36
    '+'             shift, and go to state 37
    '-'             shift, and go to state 38
    '%'             shift, and go to state 39
    '?'             shift, and go to state 40
    '!'             shift, and go to state 41

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 42
    unq_declaration   go to state 43
    block_commands    go to state 415
    command           go to state 45
    $@2               go to state 46
    init_variable     go to state 47
    conditional_stmt  go to state 48
    return_stmt       go to state 49
    iteration         go to state 50
    init_stmt         go to state 51
    output            go to state 52
    input             go to state 53
    func_calling      go to state 54
    expression        go to state 55
    const             go to state 56
    number            go to state 57
    type              go to state 150
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 58
    single_operation  go to state 59
    arith_binary      go to state 60
    arith_single      go to state 61
    lst_single        go to state 62
    lst_binary        go to state 63


State 343

   32 init_variable: init_stmt ';' •

    NUM_INT         reduce using rule 32 (init_variable)
    NUM_FLOAT       reduce using rule 32 (init_variable)
    NIL_CNST        reduce using rule 32 (init_variable)
    ID              reduce using rule 32 (init_variable)
    RETURN_STM      reduce using rule 32 (init_variable)
    T_INT           reduce using rule 32 (init_variable)
    T_FLOAT         reduce using rule 32 (init_variable)
    IF_STMT         reduce using rule 32 (init_variable)
    ELSE_STMT       reduce using rule 32 (init_variable)
    FOR_STMT        reduce using rule 32 (init_variable)
    OUTPUT_WRITE    reduce using rule 32 (init_variable)
    OUTPUT_WRITELN  reduce using rule 32 (init_variable)
    INPUT_READ      reduce using rule 32 (init_variable)
    '{'             reduce using rule 32 (init_variable)
    '}'             reduce using rule 32 (init_variable)
    '+'             reduce using rule 32 (init_variable)
    '-'             reduce using rule 32 (init_variable)
    '%'             reduce using rule 32 (init_variable)
    '?'             reduce using rule 32 (init_variable)
    '!'             reduce using rule 32 (init_variable)


State 344

   31 command: operation ';' •

    NUM_INT         reduce using rule 31 (command)
    NUM_FLOAT       reduce using rule 31 (command)
    NIL_CNST        reduce using rule 31 (command)
    ID              reduce using rule 31 (command)
    RETURN_STM      reduce using rule 31 (command)
    T_INT           reduce using rule 31 (command)
    T_FLOAT         reduce using rule 31 (command)
    IF_STMT         reduce using rule 31 (command)
    ELSE_STMT       reduce using rule 31 (command)
    FOR_STMT        reduce using rule 31 (command)
    OUTPUT_WRITE    reduce using rule 31 (command)
    OUTPUT_WRITELN  reduce using rule 31 (command)
    INPUT_READ      reduce using rule 31 (command)
    '{'             reduce using rule 31 (command)
    '}'             reduce using rule 31 (command)
    '+'             reduce using rule 31 (command)
    '-'             reduce using rule 31 (command)
    '%'             reduce using rule 31 (command)
    '?'             reduce using rule 31 (command)
    '!'             reduce using rule 31 (command)


State 345

   38 init_stmt: ID '=' • operation

    NUM_INT    shift, and go to state 170
    NUM_FLOAT  shift, and go to state 171
    NIL_CNST   shift, and go to state 172
    ID         shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    expression        go to state 180
    const             go to state 181
    number            go to state 182
    operation         go to state 416
    single_operation  go to state 183
    arith_binary      go to state 184
    arith_single      go to state 185
    lst_single        go to state 186
    lst_binary        go to state 187


State 346

   46 func_calling: ID '(' calling_parameters • ')'

    ')'  shift, and go to state 417


State 347

   76 lst_binary: expression FILTER expression •

    ')'         reduce using rule 76 (lst_binary)
    ','         reduce using rule 76 (lst_binary)
    AND         reduce using rule 76 (lst_binary)
    OR          reduce using rule 76 (lst_binary)
    GREATER     reduce using rule 76 (lst_binary)
    GREATER_EQ  reduce using rule 76 (lst_binary)
    LESS        reduce using rule 76 (lst_binary)
    LESS_EQ     reduce using rule 76 (lst_binary)
    EQUAL       reduce using rule 76 (lst_binary)
    NOT_EQ      reduce using rule 76 (lst_binary)


State 348

   77 lst_binary: expression MAP expression •

    ')'         reduce using rule 77 (lst_binary)
    ','         reduce using rule 77 (lst_binary)
    AND         reduce using rule 77 (lst_binary)
    OR          reduce using rule 77 (lst_binary)
    GREATER     reduce using rule 77 (lst_binary)
    GREATER_EQ  reduce using rule 77 (lst_binary)
    LESS        reduce using rule 77 (lst_binary)
    LESS_EQ     reduce using rule 77 (lst_binary)
    EQUAL       reduce using rule 77 (lst_binary)
    NOT_EQ      reduce using rule 77 (lst_binary)


State 349

   78 lst_binary: expression ':' expression •

    ')'         reduce using rule 78 (lst_binary)
    ','         reduce using rule 78 (lst_binary)
    AND         reduce using rule 78 (lst_binary)
    OR          reduce using rule 78 (lst_binary)
    GREATER     reduce using rule 78 (lst_binary)
    GREATER_EQ  reduce using rule 78 (lst_binary)
    LESS        reduce using rule 78 (lst_binary)
    LESS_EQ     reduce using rule 78 (lst_binary)
    EQUAL       reduce using rule 78 (lst_binary)
    NOT_EQ      reduce using rule 78 (lst_binary)


State 350

   53 number: NUM_INT •

    ')'         reduce using rule 53 (number)
    ','         reduce using rule 53 (number)
    AND         reduce using rule 53 (number)
    OR          reduce using rule 53 (number)
    GREATER     reduce using rule 53 (number)
    GREATER_EQ  reduce using rule 53 (number)
    LESS        reduce using rule 53 (number)
    LESS_EQ     reduce using rule 53 (number)
    EQUAL       reduce using rule 53 (number)
    NOT_EQ      reduce using rule 53 (number)
    '+'         reduce using rule 53 (number)
    '-'         reduce using rule 53 (number)
    '*'         reduce using rule 53 (number)
    '/'         reduce using rule 53 (number)


State 351

   54 number: NUM_FLOAT •

    ')'         reduce using rule 54 (number)
    ','         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)
    '+'         reduce using rule 54 (number)
    '-'         reduce using rule 54 (number)
    '*'         reduce using rule 54 (number)
    '/'         reduce using rule 54 (number)


State 352

   52 const: NIL_CNST •

    ')'         reduce using rule 52 (const)
    ','         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)
    '+'         reduce using rule 52 (const)
    '-'         reduce using rule 52 (const)
    '*'         reduce using rule 52 (const)
    '/'         reduce using rule 52 (const)


State 353

   46 func_calling: ID • '(' calling_parameters ')'
   50 expression: ID •

    '('  shift, and go to state 418

    ')'         reduce using rule 50 (expression)
    ','         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)


State 354

   72 arith_single: '+' • expression

    NUM_INT    shift, and go to state 350
    NUM_FLOAT  shift, and go to state 351
    NIL_CNST   shift, and go to state 352
    ID         shift, and go to state 353
    '+'        shift, and go to state 354
    '-'        shift, and go to state 355
    '%'        shift, and go to state 356
    '?'        shift, and go to state 357
    '!'        shift, and go to state 358

    func_calling      go to state 359
    expression        go to state 419
    const             go to state 361
    number            go to state 362
    single_operation  go to state 363
    arith_single      go to state 364
    lst_single        go to state 365


State 355

   73 arith_single: '-' • expression

    NUM_INT    shift, and go to state 350
    NUM_FLOAT  shift, and go to state 351
    NIL_CNST   shift, and go to state 352
    ID         shift, and go to state 353
    '+'        shift, and go to state 354
    '-'        shift, and go to state 355
    '%'        shift, and go to state 356
    '?'        shift, and go to state 357
    '!'        shift, and go to state 358

    func_calling      go to state 359
    expression        go to state 420
    const             go to state 361
    number            go to state 362
    single_operation  go to state 363
    arith_single      go to state 364
    lst_single        go to state 365


State 356

   74 lst_single: '%' • expression

    NUM_INT    shift, and go to state 350
    NUM_FLOAT  shift, and go to state 351
    NIL_CNST   shift, and go to state 352
    ID         shift, and go to state 353
    '+'        shift, and go to state 354
    '-'        shift, and go to state 355
    '%'        shift, and go to state 356
    '?'        shift, and go to state 357
    '!'        shift, and go to state 358

    func_calling      go to state 359
    expression        go to state 421
    const             go to state 361
    number            go to state 362
    single_operation  go to state 363
    arith_single      go to state 364
    lst_single        go to state 365


State 357

   75 lst_single: '?' • expression

    NUM_INT    shift, and go to state 350
    NUM_FLOAT  shift, and go to state 351
    NIL_CNST   shift, and go to state 352
    ID         shift, and go to state 353
    '+'        shift, and go to state 354
    '-'        shift, and go to state 355
    '%'        shift, and go to state 356
    '?'        shift, and go to state 357
    '!'        shift, and go to state 358

    func_calling      go to state 359
    expression        go to state 422
    const             go to state 361
    number            go to state 362
    single_operation  go to state 363
    arith_single      go to state 364
    lst_single        go to state 365


State 358

   66 single_operation: '!' • expression

    NUM_INT    shift, and go to state 350
    NUM_FLOAT  shift, and go to state 351
    NIL_CNST   shift, and go to state 352
    ID         shift, and go to state 353
    '+'        shift, and go to state 354
    '-'        shift, and go to state 355
    '%'        shift, and go to state 356
    '?'        shift, and go to state 357
    '!'        shift, and go to state 358

    func_calling      go to state 359
    expression        go to state 423
    const             go to state 361
    number            go to state 362
    single_operation  go to state 363
    arith_single      go to state 364
    lst_single        go to state 365


State 359

   47 expression: func_calling •

    ')'         reduce using rule 47 (expression)
    ','         reduce using rule 47 (expression)
    AND         reduce using rule 47 (expression)
    OR          reduce using rule 47 (expression)
    GREATER     reduce using rule 47 (expression)
    GREATER_EQ  reduce using rule 47 (expression)
    LESS        reduce using rule 47 (expression)
    LESS_EQ     reduce using rule 47 (expression)
    EQUAL       reduce using rule 47 (expression)
    NOT_EQ      reduce using rule 47 (expression)
    '+'         reduce using rule 47 (expression)
    '-'         reduce using rule 47 (expression)
    '*'         reduce using rule 47 (expression)
    '/'         reduce using rule 47 (expression)


State 360

   67 arith_binary: arith_binary '+' expression •

    ')'         reduce using rule 67 (arith_binary)
    ','         reduce using rule 67 (arith_binary)
    AND         reduce using rule 67 (arith_binary)
    OR          reduce using rule 67 (arith_binary)
    GREATER     reduce using rule 67 (arith_binary)
    GREATER_EQ  reduce using rule 67 (arith_binary)
    LESS        reduce using rule 67 (arith_binary)
    LESS_EQ     reduce using rule 67 (arith_binary)
    EQUAL       reduce using rule 67 (arith_binary)
    NOT_EQ      reduce using rule 67 (arith_binary)
    '+'         reduce using rule 67 (arith_binary)
    '-'         reduce using rule 67 (arith_binary)
    '*'         reduce using rule 67 (arith_binary)
    '/'         reduce using rule 67 (arith_binary)


State 361

   49 expression: const •

    ')'         reduce using rule 49 (expression)
    ','         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)
    '+'         reduce using rule 49 (expression)
    '-'         reduce using rule 49 (expression)
    '*'         reduce using rule 49 (expression)
    '/'         reduce using rule 49 (expression)


State 362

   51 const: number •

    ')'         reduce using rule 51 (const)
    ','         reduce using rule 51 (const)
    AND         reduce using rule 51 (const)
    OR          reduce using rule 51 (const)
    GREATER     reduce using rule 51 (const)
    GREATER_EQ  reduce using rule 51 (const)
    LESS        reduce using rule 51 (const)
    LESS_EQ     reduce using rule 51 (const)
    EQUAL       reduce using rule 51 (const)
    NOT_EQ      reduce using rule 51 (const)
    '+'         reduce using rule 51 (const)
    '-'         reduce using rule 51 (const)
    '*'         reduce using rule 51 (const)
    '/'         reduce using rule 51 (const)


State 363

   48 expression: single_operation •

    ')'         reduce using rule 48 (expression)
    ','         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)
    '+'         reduce using rule 48 (expression)
    '-'         reduce using rule 48 (expression)
    '*'         reduce using rule 48 (expression)
    '/'         reduce using rule 48 (expression)


State 364

   64 single_operation: arith_single •

    ')'         reduce using rule 64 (single_operation)
    ','         reduce using rule 64 (single_operation)
    AND         reduce using rule 64 (single_operation)
    OR          reduce using rule 64 (single_operation)
    GREATER     reduce using rule 64 (single_operation)
    GREATER_EQ  reduce using rule 64 (single_operation)
    LESS        reduce using rule 64 (single_operation)
    LESS_EQ     reduce using rule 64 (single_operation)
    EQUAL       reduce using rule 64 (single_operation)
    NOT_EQ      reduce using rule 64 (single_operation)
    '+'         reduce using rule 64 (single_operation)
    '-'         reduce using rule 64 (single_operation)
    '*'         reduce using rule 64 (single_operation)
    '/'         reduce using rule 64 (single_operation)


State 365

   65 single_operation: lst_single •

    ')'         reduce using rule 65 (single_operation)
    ','         reduce using rule 65 (single_operation)
    AND         reduce using rule 65 (single_operation)
    OR          reduce using rule 65 (single_operation)
    GREATER     reduce using rule 65 (single_operation)
    GREATER_EQ  reduce using rule 65 (single_operation)
    LESS        reduce using rule 65 (single_operation)
    LESS_EQ     reduce using rule 65 (single_operation)
    EQUAL       reduce using rule 65 (single_operation)
    NOT_EQ      reduce using rule 65 (single_operation)
    '+'         reduce using rule 65 (single_operation)
    '-'         reduce using rule 65 (single_operation)
    '*'         reduce using rule 65 (single_operation)
    '/'         reduce using rule 65 (single_operation)


State 366

   68 arith_binary: arith_binary '-' expression •

    ')'         reduce using rule 68 (arith_binary)
    ','         reduce using rule 68 (arith_binary)
    AND         reduce using rule 68 (arith_binary)
    OR          reduce using rule 68 (arith_binary)
    GREATER     reduce using rule 68 (arith_binary)
    GREATER_EQ  reduce using rule 68 (arith_binary)
    LESS        reduce using rule 68 (arith_binary)
    LESS_EQ     reduce using rule 68 (arith_binary)
    EQUAL       reduce using rule 68 (arith_binary)
    NOT_EQ      reduce using rule 68 (arith_binary)
    '+'         reduce using rule 68 (arith_binary)
    '-'         reduce using rule 68 (arith_binary)
    '*'         reduce using rule 68 (arith_binary)
    '/'         reduce using rule 68 (arith_binary)


State 367

   69 arith_binary: arith_binary '*' expression •

    ')'         reduce using rule 69 (arith_binary)
    ','         reduce using rule 69 (arith_binary)
    AND         reduce using rule 69 (arith_binary)
    OR          reduce using rule 69 (arith_binary)
    GREATER     reduce using rule 69 (arith_binary)
    GREATER_EQ  reduce using rule 69 (arith_binary)
    LESS        reduce using rule 69 (arith_binary)
    LESS_EQ     reduce using rule 69 (arith_binary)
    EQUAL       reduce using rule 69 (arith_binary)
    NOT_EQ      reduce using rule 69 (arith_binary)
    '+'         reduce using rule 69 (arith_binary)
    '-'         reduce using rule 69 (arith_binary)
    '*'         reduce using rule 69 (arith_binary)
    '/'         reduce using rule 69 (arith_binary)


State 368

   70 arith_binary: arith_binary '/' expression •

    ')'         reduce using rule 70 (arith_binary)
    ','         reduce using rule 70 (arith_binary)
    AND         reduce using rule 70 (arith_binary)
    OR          reduce using rule 70 (arith_binary)
    GREATER     reduce using rule 70 (arith_binary)
    GREATER_EQ  reduce using rule 70 (arith_binary)
    LESS        reduce using rule 70 (arith_binary)
    LESS_EQ     reduce using rule 70 (arith_binary)
    EQUAL       reduce using rule 70 (arith_binary)
    NOT_EQ      reduce using rule 70 (arith_binary)
    '+'         reduce using rule 70 (arith_binary)
    '-'         reduce using rule 70 (arith_binary)
    '*'         reduce using rule 70 (arith_binary)
    '/'         reduce using rule 70 (arith_binary)


State 369

   46 func_calling: ID '(' calling_parameters • ')'

    ')'  shift, and go to state 424


State 370

   76 lst_binary: expression FILTER expression •

    ')'         reduce using rule 76 (lst_binary)
    AND         reduce using rule 76 (lst_binary)
    OR          reduce using rule 76 (lst_binary)
    GREATER     reduce using rule 76 (lst_binary)
    GREATER_EQ  reduce using rule 76 (lst_binary)
    LESS        reduce using rule 76 (lst_binary)
    LESS_EQ     reduce using rule 76 (lst_binary)
    EQUAL       reduce using rule 76 (lst_binary)
    NOT_EQ      reduce using rule 76 (lst_binary)


State 371

   77 lst_binary: expression MAP expression •

    ')'         reduce using rule 77 (lst_binary)
    AND         reduce using rule 77 (lst_binary)
    OR          reduce using rule 77 (lst_binary)
    GREATER     reduce using rule 77 (lst_binary)
    GREATER_EQ  reduce using rule 77 (lst_binary)
    LESS        reduce using rule 77 (lst_binary)
    LESS_EQ     reduce using rule 77 (lst_binary)
    EQUAL       reduce using rule 77 (lst_binary)
    NOT_EQ      reduce using rule 77 (lst_binary)


State 372

   78 lst_binary: expression ':' expression •

    ')'         reduce using rule 78 (lst_binary)
    AND         reduce using rule 78 (lst_binary)
    OR          reduce using rule 78 (lst_binary)
    GREATER     reduce using rule 78 (lst_binary)
    GREATER_EQ  reduce using rule 78 (lst_binary)
    LESS        reduce using rule 78 (lst_binary)
    LESS_EQ     reduce using rule 78 (lst_binary)
    EQUAL       reduce using rule 78 (lst_binary)
    NOT_EQ      reduce using rule 78 (lst_binary)


State 373

   53 number: NUM_INT •

    ')'         reduce using rule 53 (number)
    AND         reduce using rule 53 (number)
    OR          reduce using rule 53 (number)
    GREATER     reduce using rule 53 (number)
    GREATER_EQ  reduce using rule 53 (number)
    LESS        reduce using rule 53 (number)
    LESS_EQ     reduce using rule 53 (number)
    EQUAL       reduce using rule 53 (number)
    NOT_EQ      reduce using rule 53 (number)
    '+'         reduce using rule 53 (number)
    '-'         reduce using rule 53 (number)
    '*'         reduce using rule 53 (number)
    '/'         reduce using rule 53 (number)


State 374

   54 number: NUM_FLOAT •

    ')'         reduce using rule 54 (number)
    AND         reduce using rule 54 (number)
    OR          reduce using rule 54 (number)
    GREATER     reduce using rule 54 (number)
    GREATER_EQ  reduce using rule 54 (number)
    LESS        reduce using rule 54 (number)
    LESS_EQ     reduce using rule 54 (number)
    EQUAL       reduce using rule 54 (number)
    NOT_EQ      reduce using rule 54 (number)
    '+'         reduce using rule 54 (number)
    '-'         reduce using rule 54 (number)
    '*'         reduce using rule 54 (number)
    '/'         reduce using rule 54 (number)


State 375

   52 const: NIL_CNST •

    ')'         reduce using rule 52 (const)
    AND         reduce using rule 52 (const)
    OR          reduce using rule 52 (const)
    GREATER     reduce using rule 52 (const)
    GREATER_EQ  reduce using rule 52 (const)
    LESS        reduce using rule 52 (const)
    LESS_EQ     reduce using rule 52 (const)
    EQUAL       reduce using rule 52 (const)
    NOT_EQ      reduce using rule 52 (const)
    '+'         reduce using rule 52 (const)
    '-'         reduce using rule 52 (const)
    '*'         reduce using rule 52 (const)
    '/'         reduce using rule 52 (const)


State 376

   46 func_calling: ID • '(' calling_parameters ')'
   50 expression: ID •

    '('  shift, and go to state 425

    ')'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)


State 377

   72 arith_single: '+' • expression

    NUM_INT    shift, and go to state 373
    NUM_FLOAT  shift, and go to state 374
    NIL_CNST   shift, and go to state 375
    ID         shift, and go to state 376
    '+'        shift, and go to state 377
    '-'        shift, and go to state 378
    '%'        shift, and go to state 379
    '?'        shift, and go to state 380
    '!'        shift, and go to state 381

    func_calling      go to state 382
    expression        go to state 426
    const             go to state 384
    number            go to state 385
    single_operation  go to state 386
    arith_single      go to state 387
    lst_single        go to state 388


State 378

   73 arith_single: '-' • expression

    NUM_INT    shift, and go to state 373
    NUM_FLOAT  shift, and go to state 374
    NIL_CNST   shift, and go to state 375
    ID         shift, and go to state 376
    '+'        shift, and go to state 377
    '-'        shift, and go to state 378
    '%'        shift, and go to state 379
    '?'        shift, and go to state 380
    '!'        shift, and go to state 381

    func_calling      go to state 382
    expression        go to state 427
    const             go to state 384
    number            go to state 385
    single_operation  go to state 386
    arith_single      go to state 387
    lst_single        go to state 388


State 379

   74 lst_single: '%' • expression

    NUM_INT    shift, and go to state 373
    NUM_FLOAT  shift, and go to state 374
    NIL_CNST   shift, and go to state 375
    ID         shift, and go to state 376
    '+'        shift, and go to state 377
    '-'        shift, and go to state 378
    '%'        shift, and go to state 379
    '?'        shift, and go to state 380
    '!'        shift, and go to state 381

    func_calling      go to state 382
    expression        go to state 428
    const             go to state 384
    number            go to state 385
    single_operation  go to state 386
    arith_single      go to state 387
    lst_single        go to state 388


State 380

   75 lst_single: '?' • expression

    NUM_INT    shift, and go to state 373
    NUM_FLOAT  shift, and go to state 374
    NIL_CNST   shift, and go to state 375
    ID         shift, and go to state 376
    '+'        shift, and go to state 377
    '-'        shift, and go to state 378
    '%'        shift, and go to state 379
    '?'        shift, and go to state 380
    '!'        shift, and go to state 381

    func_calling      go to state 382
    expression        go to state 429
    const             go to state 384
    number            go to state 385
    single_operation  go to state 386
    arith_single      go to state 387
    lst_single        go to state 388


State 381

   66 single_operation: '!' • expression

    NUM_INT    shift, and go to state 373
    NUM_FLOAT  shift, and go to state 374
    NIL_CNST   shift, and go to state 375
    ID         shift, and go to state 376
    '+'        shift, and go to state 377
    '-'        shift, and go to state 378
    '%'        shift, and go to state 379
    '?'        shift, and go to state 380
    '!'        shift, and go to state 381

    func_calling      go to state 382
    expression        go to state 430
    const             go to state 384
    number            go to state 385
    single_operation  go to state 386
    arith_single      go to state 387
    lst_single        go to state 388


State 382

   47 expression: func_calling •

    ')'         reduce using rule 47 (expression)
    AND         reduce using rule 47 (expression)
    OR          reduce using rule 47 (expression)
    GREATER     reduce using rule 47 (expression)
    GREATER_EQ  reduce using rule 47 (expression)
    LESS        reduce using rule 47 (expression)
    LESS_EQ     reduce using rule 47 (expression)
    EQUAL       reduce using rule 47 (expression)
    NOT_EQ      reduce using rule 47 (expression)
    '+'         reduce using rule 47 (expression)
    '-'         reduce using rule 47 (expression)
    '*'         reduce using rule 47 (expression)
    '/'         reduce using rule 47 (expression)


State 383

   67 arith_binary: arith_binary '+' expression •

    ')'         reduce using rule 67 (arith_binary)
    AND         reduce using rule 67 (arith_binary)
    OR          reduce using rule 67 (arith_binary)
    GREATER     reduce using rule 67 (arith_binary)
    GREATER_EQ  reduce using rule 67 (arith_binary)
    LESS        reduce using rule 67 (arith_binary)
    LESS_EQ     reduce using rule 67 (arith_binary)
    EQUAL       reduce using rule 67 (arith_binary)
    NOT_EQ      reduce using rule 67 (arith_binary)
    '+'         reduce using rule 67 (arith_binary)
    '-'         reduce using rule 67 (arith_binary)
    '*'         reduce using rule 67 (arith_binary)
    '/'         reduce using rule 67 (arith_binary)


State 384

   49 expression: const •

    ')'         reduce using rule 49 (expression)
    AND         reduce using rule 49 (expression)
    OR          reduce using rule 49 (expression)
    GREATER     reduce using rule 49 (expression)
    GREATER_EQ  reduce using rule 49 (expression)
    LESS        reduce using rule 49 (expression)
    LESS_EQ     reduce using rule 49 (expression)
    EQUAL       reduce using rule 49 (expression)
    NOT_EQ      reduce using rule 49 (expression)
    '+'         reduce using rule 49 (expression)
    '-'         reduce using rule 49 (expression)
    '*'         reduce using rule 49 (expression)
    '/'         reduce using rule 49 (expression)


State 385

   51 const: number •

    ')'         reduce using rule 51 (const)
    AND         reduce using rule 51 (const)
    OR          reduce using rule 51 (const)
    GREATER     reduce using rule 51 (const)
    GREATER_EQ  reduce using rule 51 (const)
    LESS        reduce using rule 51 (const)
    LESS_EQ     reduce using rule 51 (const)
    EQUAL       reduce using rule 51 (const)
    NOT_EQ      reduce using rule 51 (const)
    '+'         reduce using rule 51 (const)
    '-'         reduce using rule 51 (const)
    '*'         reduce using rule 51 (const)
    '/'         reduce using rule 51 (const)


State 386

   48 expression: single_operation •

    ')'         reduce using rule 48 (expression)
    AND         reduce using rule 48 (expression)
    OR          reduce using rule 48 (expression)
    GREATER     reduce using rule 48 (expression)
    GREATER_EQ  reduce using rule 48 (expression)
    LESS        reduce using rule 48 (expression)
    LESS_EQ     reduce using rule 48 (expression)
    EQUAL       reduce using rule 48 (expression)
    NOT_EQ      reduce using rule 48 (expression)
    '+'         reduce using rule 48 (expression)
    '-'         reduce using rule 48 (expression)
    '*'         reduce using rule 48 (expression)
    '/'         reduce using rule 48 (expression)


State 387

   64 single_operation: arith_single •

    ')'         reduce using rule 64 (single_operation)
    AND         reduce using rule 64 (single_operation)
    OR          reduce using rule 64 (single_operation)
    GREATER     reduce using rule 64 (single_operation)
    GREATER_EQ  reduce using rule 64 (single_operation)
    LESS        reduce using rule 64 (single_operation)
    LESS_EQ     reduce using rule 64 (single_operation)
    EQUAL       reduce using rule 64 (single_operation)
    NOT_EQ      reduce using rule 64 (single_operation)
    '+'         reduce using rule 64 (single_operation)
    '-'         reduce using rule 64 (single_operation)
    '*'         reduce using rule 64 (single_operation)
    '/'         reduce using rule 64 (single_operation)


State 388

   65 single_operation: lst_single •

    ')'         reduce using rule 65 (single_operation)
    AND         reduce using rule 65 (single_operation)
    OR          reduce using rule 65 (single_operation)
    GREATER     reduce using rule 65 (single_operation)
    GREATER_EQ  reduce using rule 65 (single_operation)
    LESS        reduce using rule 65 (single_operation)
    LESS_EQ     reduce using rule 65 (single_operation)
    EQUAL       reduce using rule 65 (single_operation)
    NOT_EQ      reduce using rule 65 (single_operation)
    '+'         reduce using rule 65 (single_operation)
    '-'         reduce using rule 65 (single_operation)
    '*'         reduce using rule 65 (single_operation)
    '/'         reduce using rule 65 (single_operation)


State 389

   68 arith_binary: arith_binary '-' expression •

    ')'         reduce using rule 68 (arith_binary)
    AND         reduce using rule 68 (arith_binary)
    OR          reduce using rule 68 (arith_binary)
    GREATER     reduce using rule 68 (arith_binary)
    GREATER_EQ  reduce using rule 68 (arith_binary)
    LESS        reduce using rule 68 (arith_binary)
    LESS_EQ     reduce using rule 68 (arith_binary)
    EQUAL       reduce using rule 68 (arith_binary)
    NOT_EQ      reduce using rule 68 (arith_binary)
    '+'         reduce using rule 68 (arith_binary)
    '-'         reduce using rule 68 (arith_binary)
    '*'         reduce using rule 68 (arith_binary)
    '/'         reduce using rule 68 (arith_binary)


State 390

   69 arith_binary: arith_binary '*' expression •

    ')'         reduce using rule 69 (arith_binary)
    AND         reduce using rule 69 (arith_binary)
    OR          reduce using rule 69 (arith_binary)
    GREATER     reduce using rule 69 (arith_binary)
    GREATER_EQ  reduce using rule 69 (arith_binary)
    LESS        reduce using rule 69 (arith_binary)
    LESS_EQ     reduce using rule 69 (arith_binary)
    EQUAL       reduce using rule 69 (arith_binary)
    NOT_EQ      reduce using rule 69 (arith_binary)
    '+'         reduce using rule 69 (arith_binary)
    '-'         reduce using rule 69 (arith_binary)
    '*'         reduce using rule 69 (arith_binary)
    '/'         reduce using rule 69 (arith_binary)


State 391

   70 arith_binary: arith_binary '/' expression •

    ')'         reduce using rule 70 (arith_binary)
    AND         reduce using rule 70 (arith_binary)
    OR          reduce using rule 70 (arith_binary)
    GREATER     reduce using rule 70 (arith_binary)
    GREATER_EQ  reduce using rule 70 (arith_binary)
    LESS        reduce using rule 70 (arith_binary)
    LESS_EQ     reduce using rule 70 (arith_binary)
    EQUAL       reduce using rule 70 (arith_binary)
    NOT_EQ      reduce using rule 70 (arith_binary)
    '+'         reduce using rule 70 (arith_binary)
    '-'         reduce using rule 70 (arith_binary)
    '*'         reduce using rule 70 (arith_binary)
    '/'         reduce using rule 70 (arith_binary)


State 392

   46 func_calling: ID '(' calling_parameters • ')'

    ')'  shift, and go to state 431


State 393

   46 func_calling: ID '(' calling_parameters • ')'

    ')'  shift, and go to state 432


State 394

   46 func_calling: ID '(' calling_parameters • ')'

    ')'  shift, and go to state 433


State 395

   46 func_calling: ID '(' • calling_parameters ')'

    NUM_INT    shift, and go to state 152
    NUM_FLOAT  shift, and go to state 153
    NIL_CNST   shift, and go to state 154
    ID         shift, and go to state 155
    '+'        shift, and go to state 156
    '-'        shift, and go to state 157
    '%'        shift, and go to state 158
    '?'        shift, and go to state 159
    '!'        shift, and go to state 160

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 434
    lst_calling_parameters  go to state 101
    func_calling            go to state 161
    expression              go to state 162
    const                   go to state 163
    number                  go to state 164
    operation               go to state 102
    single_operation        go to state 165
    arith_binary            go to state 166
    arith_single            go to state 167
    lst_single              go to state 168
    lst_binary              go to state 169


State 396

   72 arith_single: '+' expression •

    ')'         reduce using rule 72 (arith_single)
    ','         reduce using rule 72 (arith_single)
    AND         reduce using rule 72 (arith_single)
    OR          reduce using rule 72 (arith_single)
    GREATER     reduce using rule 72 (arith_single)
    GREATER_EQ  reduce using rule 72 (arith_single)
    LESS        reduce using rule 72 (arith_single)
    LESS_EQ     reduce using rule 72 (arith_single)
    EQUAL       reduce using rule 72 (arith_single)
    NOT_EQ      reduce using rule 72 (arith_single)


State 397

   73 arith_single: '-' expression •

    ')'         reduce using rule 73 (arith_single)
    ','         reduce using rule 73 (arith_single)
    AND         reduce using rule 73 (arith_single)
    OR          reduce using rule 73 (arith_single)
    GREATER     reduce using rule 73 (arith_single)
    GREATER_EQ  reduce using rule 73 (arith_single)
    LESS        reduce using rule 73 (arith_single)
    LESS_EQ     reduce using rule 73 (arith_single)
    EQUAL       reduce using rule 73 (arith_single)
    NOT_EQ      reduce using rule 73 (arith_single)


State 398

   74 lst_single: '%' expression •

    ')'         reduce using rule 74 (lst_single)
    ','         reduce using rule 74 (lst_single)
    AND         reduce using rule 74 (lst_single)
    OR          reduce using rule 74 (lst_single)
    GREATER     reduce using rule 74 (lst_single)
    GREATER_EQ  reduce using rule 74 (lst_single)
    LESS        reduce using rule 74 (lst_single)
    LESS_EQ     reduce using rule 74 (lst_single)
    EQUAL       reduce using rule 74 (lst_single)
    NOT_EQ      reduce using rule 74 (lst_single)


State 399

   75 lst_single: '?' expression •

    ')'         reduce using rule 75 (lst_single)
    ','         reduce using rule 75 (lst_single)
    AND         reduce using rule 75 (lst_single)
    OR          reduce using rule 75 (lst_single)
    GREATER     reduce using rule 75 (lst_single)
    GREATER_EQ  reduce using rule 75 (lst_single)
    LESS        reduce using rule 75 (lst_single)
    LESS_EQ     reduce using rule 75 (lst_single)
    EQUAL       reduce using rule 75 (lst_single)
    NOT_EQ      reduce using rule 75 (lst_single)


State 400

   66 single_operation: '!' expression •

    ')'         reduce using rule 66 (single_operation)
    ','         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)


State 401

   46 func_calling: ID '(' • calling_parameters ')'

    NUM_INT    shift, and go to state 152
    NUM_FLOAT  shift, and go to state 153
    NIL_CNST   shift, and go to state 154
    ID         shift, and go to state 155
    '+'        shift, and go to state 156
    '-'        shift, and go to state 157
    '%'        shift, and go to state 158
    '?'        shift, and go to state 159
    '!'        shift, and go to state 160

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 435
    lst_calling_parameters  go to state 101
    func_calling            go to state 161
    expression              go to state 162
    const                   go to state 163
    number                  go to state 164
    operation               go to state 102
    single_operation        go to state 165
    arith_binary            go to state 166
    arith_single            go to state 167
    lst_single              go to state 168
    lst_binary              go to state 169


State 402

   72 arith_single: '+' expression •

    ')'         reduce using rule 72 (arith_single)
    AND         reduce using rule 72 (arith_single)
    OR          reduce using rule 72 (arith_single)
    GREATER     reduce using rule 72 (arith_single)
    GREATER_EQ  reduce using rule 72 (arith_single)
    LESS        reduce using rule 72 (arith_single)
    LESS_EQ     reduce using rule 72 (arith_single)
    EQUAL       reduce using rule 72 (arith_single)
    NOT_EQ      reduce using rule 72 (arith_single)


State 403

   73 arith_single: '-' expression •

    ')'         reduce using rule 73 (arith_single)
    AND         reduce using rule 73 (arith_single)
    OR          reduce using rule 73 (arith_single)
    GREATER     reduce using rule 73 (arith_single)
    GREATER_EQ  reduce using rule 73 (arith_single)
    LESS        reduce using rule 73 (arith_single)
    LESS_EQ     reduce using rule 73 (arith_single)
    EQUAL       reduce using rule 73 (arith_single)
    NOT_EQ      reduce using rule 73 (arith_single)


State 404

   74 lst_single: '%' expression •

    ')'         reduce using rule 74 (lst_single)
    AND         reduce using rule 74 (lst_single)
    OR          reduce using rule 74 (lst_single)
    GREATER     reduce using rule 74 (lst_single)
    GREATER_EQ  reduce using rule 74 (lst_single)
    LESS        reduce using rule 74 (lst_single)
    LESS_EQ     reduce using rule 74 (lst_single)
    EQUAL       reduce using rule 74 (lst_single)
    NOT_EQ      reduce using rule 74 (lst_single)


State 405

   75 lst_single: '?' expression •

    ')'         reduce using rule 75 (lst_single)
    AND         reduce using rule 75 (lst_single)
    OR          reduce using rule 75 (lst_single)
    GREATER     reduce using rule 75 (lst_single)
    GREATER_EQ  reduce using rule 75 (lst_single)
    LESS        reduce using rule 75 (lst_single)
    LESS_EQ     reduce using rule 75 (lst_single)
    EQUAL       reduce using rule 75 (lst_single)
    NOT_EQ      reduce using rule 75 (lst_single)


State 406

   66 single_operation: '!' expression •

    ')'         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)


State 407

   35 return_stmt: RETURN_STM operation ';' •

    NUM_INT         reduce using rule 35 (return_stmt)
    NUM_FLOAT       reduce using rule 35 (return_stmt)
    NIL_CNST        reduce using rule 35 (return_stmt)
    ID              reduce using rule 35 (return_stmt)
    RETURN_STM      reduce using rule 35 (return_stmt)
    T_INT           reduce using rule 35 (return_stmt)
    T_FLOAT         reduce using rule 35 (return_stmt)
    IF_STMT         reduce using rule 35 (return_stmt)
    ELSE_STMT       reduce using rule 35 (return_stmt)
    FOR_STMT        reduce using rule 35 (return_stmt)
    OUTPUT_WRITE    reduce using rule 35 (return_stmt)
    OUTPUT_WRITELN  reduce using rule 35 (return_stmt)
    INPUT_READ      reduce using rule 35 (return_stmt)
    '{'             reduce using rule 35 (return_stmt)
    '}'             reduce using rule 35 (return_stmt)
    '+'             reduce using rule 35 (return_stmt)
    '-'             reduce using rule 35 (return_stmt)
    '%'             reduce using rule 35 (return_stmt)
    '?'             reduce using rule 35 (return_stmt)
    '!'             reduce using rule 35 (return_stmt)


State 408

   33 conditional_stmt: IF_STMT '(' operation • ')' command
   34                 | IF_STMT '(' operation • ')' command ELSE_STMT command
   62 operation: operation • relational_op expression
   63          | operation • logical_op expression

    ')'         shift, and go to state 436
    AND         shift, and go to state 86
    OR          shift, and go to state 87
    GREATER     shift, and go to state 88
    GREATER_EQ  shift, and go to state 89
    LESS        shift, and go to state 90
    LESS_EQ     shift, and go to state 91
    EQUAL       shift, and go to state 92
    NOT_EQ      shift, and go to state 93

    logical_op     go to state 235
    relational_op  go to state 236


State 409

   36 iteration: FOR_STMT '(' loop_condition • ')' command

    ')'  shift, and go to state 437


State 410

   43 output: OUTPUT_WRITE '(' STRING • ')' ';'

    ')'  shift, and go to state 438


State 411

   41 output: OUTPUT_WRITE '(' operation • ')' ';'
   62 operation: operation • relational_op expression
   63          | operation • logical_op expression

    ')'         shift, and go to state 439
    AND         shift, and go to state 86
    OR          shift, and go to state 87
    GREATER     shift, and go to state 88
    GREATER_EQ  shift, and go to state 89
    LESS        shift, and go to state 90
    LESS_EQ     shift, and go to state 91
    EQUAL       shift, and go to state 92
    NOT_EQ      shift, and go to state 93

    logical_op     go to state 235
    relational_op  go to state 236


State 412

   44 output: OUTPUT_WRITELN '(' STRING • ')' ';'

    ')'  shift, and go to state 440


State 413

   42 output: OUTPUT_WRITELN '(' operation • ')' ';'
   62 operation: operation • relational_op expression
   63          | operation • logical_op expression

    ')'         shift, and go to state 441
    AND         shift, and go to state 86
    OR          shift, and go to state 87
    GREATER     shift, and go to state 88
    GREATER_EQ  shift, and go to state 89
    LESS        shift, and go to state 90
    LESS_EQ     shift, and go to state 91
    EQUAL       shift, and go to state 92
    NOT_EQ      shift, and go to state 93

    logical_op     go to state 235
    relational_op  go to state 236


State 414

   45 input: INPUT_READ '(' expression • ')' ';'

    ')'  shift, and go to state 442


State 415

   30 command: $@2 '{' block_commands • '}'

    '}'  shift, and go to state 443


State 416

   38 init_stmt: ID '=' operation •
   62 operation: operation • relational_op expression
   63          | operation • logical_op expression

    AND         shift, and go to state 86
    OR          shift, and go to state 87
    GREATER     shift, and go to state 88
    GREATER_EQ  shift, and go to state 89
    LESS        shift, and go to state 90
    LESS_EQ     shift, and go to state 91
    EQUAL       shift, and go to state 92
    NOT_EQ      shift, and go to state 93

    ')'  reduce using rule 38 (init_stmt)

    logical_op     go to state 235
    relational_op  go to state 236


State 417

   46 func_calling: ID '(' calling_parameters ')' •

    ')'         reduce using rule 46 (func_calling)
    ','         reduce using rule 46 (func_calling)
    AND         reduce using rule 46 (func_calling)
    OR          reduce using rule 46 (func_calling)
    GREATER     reduce using rule 46 (func_calling)
    GREATER_EQ  reduce using rule 46 (func_calling)
    LESS        reduce using rule 46 (func_calling)
    LESS_EQ     reduce using rule 46 (func_calling)
    EQUAL       reduce using rule 46 (func_calling)
    NOT_EQ      reduce using rule 46 (func_calling)
    '+'         reduce using rule 46 (func_calling)
    '-'         reduce using rule 46 (func_calling)
    '*'         reduce using rule 46 (func_calling)
    '/'         reduce using rule 46 (func_calling)
    FILTER      reduce using rule 46 (func_calling)
    MAP         reduce using rule 46 (func_calling)
    ':'         reduce using rule 46 (func_calling)


State 418

   46 func_calling: ID '(' • calling_parameters ')'

    NUM_INT    shift, and go to state 152
    NUM_FLOAT  shift, and go to state 153
    NIL_CNST   shift, and go to state 154
    ID         shift, and go to state 155
    '+'        shift, and go to state 156
    '-'        shift, and go to state 157
    '%'        shift, and go to state 158
    '?'        shift, and go to state 159
    '!'        shift, and go to state 160

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 444
    lst_calling_parameters  go to state 101
    func_calling            go to state 161
    expression              go to state 162
    const                   go to state 163
    number                  go to state 164
    operation               go to state 102
    single_operation        go to state 165
    arith_binary            go to state 166
    arith_single            go to state 167
    lst_single              go to state 168
    lst_binary              go to state 169


State 419

   72 arith_single: '+' expression •

    ')'         reduce using rule 72 (arith_single)
    ','         reduce using rule 72 (arith_single)
    AND         reduce using rule 72 (arith_single)
    OR          reduce using rule 72 (arith_single)
    GREATER     reduce using rule 72 (arith_single)
    GREATER_EQ  reduce using rule 72 (arith_single)
    LESS        reduce using rule 72 (arith_single)
    LESS_EQ     reduce using rule 72 (arith_single)
    EQUAL       reduce using rule 72 (arith_single)
    NOT_EQ      reduce using rule 72 (arith_single)
    '+'         reduce using rule 72 (arith_single)
    '-'         reduce using rule 72 (arith_single)
    '*'         reduce using rule 72 (arith_single)
    '/'         reduce using rule 72 (arith_single)


State 420

   73 arith_single: '-' expression •

    ')'         reduce using rule 73 (arith_single)
    ','         reduce using rule 73 (arith_single)
    AND         reduce using rule 73 (arith_single)
    OR          reduce using rule 73 (arith_single)
    GREATER     reduce using rule 73 (arith_single)
    GREATER_EQ  reduce using rule 73 (arith_single)
    LESS        reduce using rule 73 (arith_single)
    LESS_EQ     reduce using rule 73 (arith_single)
    EQUAL       reduce using rule 73 (arith_single)
    NOT_EQ      reduce using rule 73 (arith_single)
    '+'         reduce using rule 73 (arith_single)
    '-'         reduce using rule 73 (arith_single)
    '*'         reduce using rule 73 (arith_single)
    '/'         reduce using rule 73 (arith_single)


State 421

   74 lst_single: '%' expression •

    ')'         reduce using rule 74 (lst_single)
    ','         reduce using rule 74 (lst_single)
    AND         reduce using rule 74 (lst_single)
    OR          reduce using rule 74 (lst_single)
    GREATER     reduce using rule 74 (lst_single)
    GREATER_EQ  reduce using rule 74 (lst_single)
    LESS        reduce using rule 74 (lst_single)
    LESS_EQ     reduce using rule 74 (lst_single)
    EQUAL       reduce using rule 74 (lst_single)
    NOT_EQ      reduce using rule 74 (lst_single)
    '+'         reduce using rule 74 (lst_single)
    '-'         reduce using rule 74 (lst_single)
    '*'         reduce using rule 74 (lst_single)
    '/'         reduce using rule 74 (lst_single)


State 422

   75 lst_single: '?' expression •

    ')'         reduce using rule 75 (lst_single)
    ','         reduce using rule 75 (lst_single)
    AND         reduce using rule 75 (lst_single)
    OR          reduce using rule 75 (lst_single)
    GREATER     reduce using rule 75 (lst_single)
    GREATER_EQ  reduce using rule 75 (lst_single)
    LESS        reduce using rule 75 (lst_single)
    LESS_EQ     reduce using rule 75 (lst_single)
    EQUAL       reduce using rule 75 (lst_single)
    NOT_EQ      reduce using rule 75 (lst_single)
    '+'         reduce using rule 75 (lst_single)
    '-'         reduce using rule 75 (lst_single)
    '*'         reduce using rule 75 (lst_single)
    '/'         reduce using rule 75 (lst_single)


State 423

   66 single_operation: '!' expression •

    ')'         reduce using rule 66 (single_operation)
    ','         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)
    '+'         reduce using rule 66 (single_operation)
    '-'         reduce using rule 66 (single_operation)
    '*'         reduce using rule 66 (single_operation)
    '/'         reduce using rule 66 (single_operation)


State 424

   46 func_calling: ID '(' calling_parameters ')' •

    ')'         reduce using rule 46 (func_calling)
    AND         reduce using rule 46 (func_calling)
    OR          reduce using rule 46 (func_calling)
    GREATER     reduce using rule 46 (func_calling)
    GREATER_EQ  reduce using rule 46 (func_calling)
    LESS        reduce using rule 46 (func_calling)
    LESS_EQ     reduce using rule 46 (func_calling)
    EQUAL       reduce using rule 46 (func_calling)
    NOT_EQ      reduce using rule 46 (func_calling)
    '+'         reduce using rule 46 (func_calling)
    '-'         reduce using rule 46 (func_calling)
    '*'         reduce using rule 46 (func_calling)
    '/'         reduce using rule 46 (func_calling)
    FILTER      reduce using rule 46 (func_calling)
    MAP         reduce using rule 46 (func_calling)
    ':'         reduce using rule 46 (func_calling)


State 425

   46 func_calling: ID '(' • calling_parameters ')'

    NUM_INT    shift, and go to state 152
    NUM_FLOAT  shift, and go to state 153
    NIL_CNST   shift, and go to state 154
    ID         shift, and go to state 155
    '+'        shift, and go to state 156
    '-'        shift, and go to state 157
    '%'        shift, and go to state 158
    '?'        shift, and go to state 159
    '!'        shift, and go to state 160

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 445
    lst_calling_parameters  go to state 101
    func_calling            go to state 161
    expression              go to state 162
    const                   go to state 163
    number                  go to state 164
    operation               go to state 102
    single_operation        go to state 165
    arith_binary            go to state 166
    arith_single            go to state 167
    lst_single              go to state 168
    lst_binary              go to state 169


State 426

   72 arith_single: '+' expression •

    ')'         reduce using rule 72 (arith_single)
    AND         reduce using rule 72 (arith_single)
    OR          reduce using rule 72 (arith_single)
    GREATER     reduce using rule 72 (arith_single)
    GREATER_EQ  reduce using rule 72 (arith_single)
    LESS        reduce using rule 72 (arith_single)
    LESS_EQ     reduce using rule 72 (arith_single)
    EQUAL       reduce using rule 72 (arith_single)
    NOT_EQ      reduce using rule 72 (arith_single)
    '+'         reduce using rule 72 (arith_single)
    '-'         reduce using rule 72 (arith_single)
    '*'         reduce using rule 72 (arith_single)
    '/'         reduce using rule 72 (arith_single)


State 427

   73 arith_single: '-' expression •

    ')'         reduce using rule 73 (arith_single)
    AND         reduce using rule 73 (arith_single)
    OR          reduce using rule 73 (arith_single)
    GREATER     reduce using rule 73 (arith_single)
    GREATER_EQ  reduce using rule 73 (arith_single)
    LESS        reduce using rule 73 (arith_single)
    LESS_EQ     reduce using rule 73 (arith_single)
    EQUAL       reduce using rule 73 (arith_single)
    NOT_EQ      reduce using rule 73 (arith_single)
    '+'         reduce using rule 73 (arith_single)
    '-'         reduce using rule 73 (arith_single)
    '*'         reduce using rule 73 (arith_single)
    '/'         reduce using rule 73 (arith_single)


State 428

   74 lst_single: '%' expression •

    ')'         reduce using rule 74 (lst_single)
    AND         reduce using rule 74 (lst_single)
    OR          reduce using rule 74 (lst_single)
    GREATER     reduce using rule 74 (lst_single)
    GREATER_EQ  reduce using rule 74 (lst_single)
    LESS        reduce using rule 74 (lst_single)
    LESS_EQ     reduce using rule 74 (lst_single)
    EQUAL       reduce using rule 74 (lst_single)
    NOT_EQ      reduce using rule 74 (lst_single)
    '+'         reduce using rule 74 (lst_single)
    '-'         reduce using rule 74 (lst_single)
    '*'         reduce using rule 74 (lst_single)
    '/'         reduce using rule 74 (lst_single)


State 429

   75 lst_single: '?' expression •

    ')'         reduce using rule 75 (lst_single)
    AND         reduce using rule 75 (lst_single)
    OR          reduce using rule 75 (lst_single)
    GREATER     reduce using rule 75 (lst_single)
    GREATER_EQ  reduce using rule 75 (lst_single)
    LESS        reduce using rule 75 (lst_single)
    LESS_EQ     reduce using rule 75 (lst_single)
    EQUAL       reduce using rule 75 (lst_single)
    NOT_EQ      reduce using rule 75 (lst_single)
    '+'         reduce using rule 75 (lst_single)
    '-'         reduce using rule 75 (lst_single)
    '*'         reduce using rule 75 (lst_single)
    '/'         reduce using rule 75 (lst_single)


State 430

   66 single_operation: '!' expression •

    ')'         reduce using rule 66 (single_operation)
    AND         reduce using rule 66 (single_operation)
    OR          reduce using rule 66 (single_operation)
    GREATER     reduce using rule 66 (single_operation)
    GREATER_EQ  reduce using rule 66 (single_operation)
    LESS        reduce using rule 66 (single_operation)
    LESS_EQ     reduce using rule 66 (single_operation)
    EQUAL       reduce using rule 66 (single_operation)
    NOT_EQ      reduce using rule 66 (single_operation)
    '+'         reduce using rule 66 (single_operation)
    '-'         reduce using rule 66 (single_operation)
    '*'         reduce using rule 66 (single_operation)
    '/'         reduce using rule 66 (single_operation)


State 431

   46 func_calling: ID '(' calling_parameters ')' •

    ')'  reduce using rule 46 (func_calling)


State 432

   46 func_calling: ID '(' calling_parameters ')' •

    ';'         reduce using rule 46 (func_calling)
    AND         reduce using rule 46 (func_calling)
    OR          reduce using rule 46 (func_calling)
    GREATER     reduce using rule 46 (func_calling)
    GREATER_EQ  reduce using rule 46 (func_calling)
    LESS        reduce using rule 46 (func_calling)
    LESS_EQ     reduce using rule 46 (func_calling)
    EQUAL       reduce using rule 46 (func_calling)
    NOT_EQ      reduce using rule 46 (func_calling)


State 433

   46 func_calling: ID '(' calling_parameters ')' •

    ';'         reduce using rule 46 (func_calling)
    AND         reduce using rule 46 (func_calling)
    OR          reduce using rule 46 (func_calling)
    GREATER     reduce using rule 46 (func_calling)
    GREATER_EQ  reduce using rule 46 (func_calling)
    LESS        reduce using rule 46 (func_calling)
    LESS_EQ     reduce using rule 46 (func_calling)
    EQUAL       reduce using rule 46 (func_calling)
    NOT_EQ      reduce using rule 46 (func_calling)
    '+'         reduce using rule 46 (func_calling)
    '-'         reduce using rule 46 (func_calling)
    '*'         reduce using rule 46 (func_calling)
    '/'         reduce using rule 46 (func_calling)


State 434

   46 func_calling: ID '(' calling_parameters • ')'

    ')'  shift, and go to state 446


State 435

   46 func_calling: ID '(' calling_parameters • ')'

    ')'  shift, and go to state 447


State 436

   33 conditional_stmt: IF_STMT '(' operation ')' • command
   34                 | IF_STMT '(' operation ')' • command ELSE_STMT command

    NUM_INT         shift, and go to state 27
    NUM_FLOAT       shift, and go to state 28
    NIL_CNST        shift, and go to state 29
    ID              shift, and go to state 30
    RETURN_STM      shift, and go to state 237
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 238
    FOR_STMT        shift, and go to state 239
    OUTPUT_WRITE    shift, and go to state 240
    OUTPUT_WRITELN  shift, and go to state 241
    INPUT_READ      shift, and go to state 242
    '+'             shift, and go to state 37
    '-'             shift, and go to state 38
    '%'             shift, and go to state 39
    '?'             shift, and go to state 40
    '!'             shift, and go to state 41

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 243
    unq_declaration   go to state 244
    command           go to state 448
    $@2               go to state 245
    init_variable     go to state 246
    conditional_stmt  go to state 247
    return_stmt       go to state 248
    iteration         go to state 249
    init_stmt         go to state 250
    output            go to state 251
    input             go to state 252
    func_calling      go to state 54
    expression        go to state 55
    const             go to state 56
    number            go to state 57
    type              go to state 150
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 253
    single_operation  go to state 59
    arith_binary      go to state 60
    arith_single      go to state 61
    lst_single        go to state 62
    lst_binary        go to state 63


State 437

   36 iteration: FOR_STMT '(' loop_condition ')' • command

    NUM_INT         shift, and go to state 27
    NUM_FLOAT       shift, and go to state 28
    NIL_CNST        shift, and go to state 29
    ID              shift, and go to state 30
    RETURN_STM      shift, and go to state 237
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 238
    FOR_STMT        shift, and go to state 239
    OUTPUT_WRITE    shift, and go to state 240
    OUTPUT_WRITELN  shift, and go to state 241
    INPUT_READ      shift, and go to state 242
    '+'             shift, and go to state 37
    '-'             shift, and go to state 38
    '%'             shift, and go to state 39
    '?'             shift, and go to state 40
    '!'             shift, and go to state 41

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 243
    unq_declaration   go to state 244
    command           go to state 449
    $@2               go to state 245
    init_variable     go to state 246
    conditional_stmt  go to state 247
    return_stmt       go to state 248
    iteration         go to state 249
    init_stmt         go to state 250
    output            go to state 251
    input             go to state 252
    func_calling      go to state 54
    expression        go to state 55
    const             go to state 56
    number            go to state 57
    type              go to state 150
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 253
    single_operation  go to state 59
    arith_binary      go to state 60
    arith_single      go to state 61
    lst_single        go to state 62
    lst_binary        go to state 63


State 438

   43 output: OUTPUT_WRITE '(' STRING ')' • ';'

    ';'  shift, and go to state 450


State 439

   41 output: OUTPUT_WRITE '(' operation ')' • ';'

    ';'  shift, and go to state 451


State 440

   44 output: OUTPUT_WRITELN '(' STRING ')' • ';'

    ';'  shift, and go to state 452


State 441

   42 output: OUTPUT_WRITELN '(' operation ')' • ';'

    ';'  shift, and go to state 453


State 442

   45 input: INPUT_READ '(' expression ')' • ';'

    ';'  shift, and go to state 454


State 443

   30 command: $@2 '{' block_commands '}' •

    NUM_INT         reduce using rule 30 (command)
    NUM_FLOAT       reduce using rule 30 (command)
    NIL_CNST        reduce using rule 30 (command)
    ID              reduce using rule 30 (command)
    RETURN_STM      reduce using rule 30 (command)
    T_INT           reduce using rule 30 (command)
    T_FLOAT         reduce using rule 30 (command)
    IF_STMT         reduce using rule 30 (command)
    ELSE_STMT       reduce using rule 30 (command)
    FOR_STMT        reduce using rule 30 (command)
    OUTPUT_WRITE    reduce using rule 30 (command)
    OUTPUT_WRITELN  reduce using rule 30 (command)
    INPUT_READ      reduce using rule 30 (command)
    '{'             reduce using rule 30 (command)
    '}'             reduce using rule 30 (command)
    '+'             reduce using rule 30 (command)
    '-'             reduce using rule 30 (command)
    '%'             reduce using rule 30 (command)
    '?'             reduce using rule 30 (command)
    '!'             reduce using rule 30 (command)


State 444

   46 func_calling: ID '(' calling_parameters • ')'

    ')'  shift, and go to state 455


State 445

   46 func_calling: ID '(' calling_parameters • ')'

    ')'  shift, and go to state 456


State 446

   46 func_calling: ID '(' calling_parameters ')' •

    ')'         reduce using rule 46 (func_calling)
    ','         reduce using rule 46 (func_calling)
    AND         reduce using rule 46 (func_calling)
    OR          reduce using rule 46 (func_calling)
    GREATER     reduce using rule 46 (func_calling)
    GREATER_EQ  reduce using rule 46 (func_calling)
    LESS        reduce using rule 46 (func_calling)
    LESS_EQ     reduce using rule 46 (func_calling)
    EQUAL       reduce using rule 46 (func_calling)
    NOT_EQ      reduce using rule 46 (func_calling)


State 447

   46 func_calling: ID '(' calling_parameters ')' •

    ')'         reduce using rule 46 (func_calling)
    AND         reduce using rule 46 (func_calling)
    OR          reduce using rule 46 (func_calling)
    GREATER     reduce using rule 46 (func_calling)
    GREATER_EQ  reduce using rule 46 (func_calling)
    LESS        reduce using rule 46 (func_calling)
    LESS_EQ     reduce using rule 46 (func_calling)
    EQUAL       reduce using rule 46 (func_calling)
    NOT_EQ      reduce using rule 46 (func_calling)


State 448

   33 conditional_stmt: IF_STMT '(' operation ')' command •
   34                 | IF_STMT '(' operation ')' command • ELSE_STMT command

    ELSE_STMT  shift, and go to state 457

    NUM_INT         reduce using rule 33 (conditional_stmt)
    NUM_FLOAT       reduce using rule 33 (conditional_stmt)
    NIL_CNST        reduce using rule 33 (conditional_stmt)
    ID              reduce using rule 33 (conditional_stmt)
    RETURN_STM      reduce using rule 33 (conditional_stmt)
    T_INT           reduce using rule 33 (conditional_stmt)
    T_FLOAT         reduce using rule 33 (conditional_stmt)
    IF_STMT         reduce using rule 33 (conditional_stmt)
    FOR_STMT        reduce using rule 33 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 33 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 33 (conditional_stmt)
    INPUT_READ      reduce using rule 33 (conditional_stmt)
    '{'             reduce using rule 33 (conditional_stmt)
    '}'             reduce using rule 33 (conditional_stmt)
    '+'             reduce using rule 33 (conditional_stmt)
    '-'             reduce using rule 33 (conditional_stmt)
    '%'             reduce using rule 33 (conditional_stmt)
    '?'             reduce using rule 33 (conditional_stmt)
    '!'             reduce using rule 33 (conditional_stmt)


State 449

   36 iteration: FOR_STMT '(' loop_condition ')' command •

    NUM_INT         reduce using rule 36 (iteration)
    NUM_FLOAT       reduce using rule 36 (iteration)
    NIL_CNST        reduce using rule 36 (iteration)
    ID              reduce using rule 36 (iteration)
    RETURN_STM      reduce using rule 36 (iteration)
    T_INT           reduce using rule 36 (iteration)
    T_FLOAT         reduce using rule 36 (iteration)
    IF_STMT         reduce using rule 36 (iteration)
    ELSE_STMT       reduce using rule 36 (iteration)
    FOR_STMT        reduce using rule 36 (iteration)
    OUTPUT_WRITE    reduce using rule 36 (iteration)
    OUTPUT_WRITELN  reduce using rule 36 (iteration)
    INPUT_READ      reduce using rule 36 (iteration)
    '{'             reduce using rule 36 (iteration)
    '}'             reduce using rule 36 (iteration)
    '+'             reduce using rule 36 (iteration)
    '-'             reduce using rule 36 (iteration)
    '%'             reduce using rule 36 (iteration)
    '?'             reduce using rule 36 (iteration)
    '!'             reduce using rule 36 (iteration)


State 450

   43 output: OUTPUT_WRITE '(' STRING ')' ';' •

    NUM_INT         reduce using rule 43 (output)
    NUM_FLOAT       reduce using rule 43 (output)
    NIL_CNST        reduce using rule 43 (output)
    ID              reduce using rule 43 (output)
    RETURN_STM      reduce using rule 43 (output)
    T_INT           reduce using rule 43 (output)
    T_FLOAT         reduce using rule 43 (output)
    IF_STMT         reduce using rule 43 (output)
    ELSE_STMT       reduce using rule 43 (output)
    FOR_STMT        reduce using rule 43 (output)
    OUTPUT_WRITE    reduce using rule 43 (output)
    OUTPUT_WRITELN  reduce using rule 43 (output)
    INPUT_READ      reduce using rule 43 (output)
    '{'             reduce using rule 43 (output)
    '}'             reduce using rule 43 (output)
    '+'             reduce using rule 43 (output)
    '-'             reduce using rule 43 (output)
    '%'             reduce using rule 43 (output)
    '?'             reduce using rule 43 (output)
    '!'             reduce using rule 43 (output)


State 451

   41 output: OUTPUT_WRITE '(' operation ')' ';' •

    NUM_INT         reduce using rule 41 (output)
    NUM_FLOAT       reduce using rule 41 (output)
    NIL_CNST        reduce using rule 41 (output)
    ID              reduce using rule 41 (output)
    RETURN_STM      reduce using rule 41 (output)
    T_INT           reduce using rule 41 (output)
    T_FLOAT         reduce using rule 41 (output)
    IF_STMT         reduce using rule 41 (output)
    ELSE_STMT       reduce using rule 41 (output)
    FOR_STMT        reduce using rule 41 (output)
    OUTPUT_WRITE    reduce using rule 41 (output)
    OUTPUT_WRITELN  reduce using rule 41 (output)
    INPUT_READ      reduce using rule 41 (output)
    '{'             reduce using rule 41 (output)
    '}'             reduce using rule 41 (output)
    '+'             reduce using rule 41 (output)
    '-'             reduce using rule 41 (output)
    '%'             reduce using rule 41 (output)
    '?'             reduce using rule 41 (output)
    '!'             reduce using rule 41 (output)


State 452

   44 output: OUTPUT_WRITELN '(' STRING ')' ';' •

    NUM_INT         reduce using rule 44 (output)
    NUM_FLOAT       reduce using rule 44 (output)
    NIL_CNST        reduce using rule 44 (output)
    ID              reduce using rule 44 (output)
    RETURN_STM      reduce using rule 44 (output)
    T_INT           reduce using rule 44 (output)
    T_FLOAT         reduce using rule 44 (output)
    IF_STMT         reduce using rule 44 (output)
    ELSE_STMT       reduce using rule 44 (output)
    FOR_STMT        reduce using rule 44 (output)
    OUTPUT_WRITE    reduce using rule 44 (output)
    OUTPUT_WRITELN  reduce using rule 44 (output)
    INPUT_READ      reduce using rule 44 (output)
    '{'             reduce using rule 44 (output)
    '}'             reduce using rule 44 (output)
    '+'             reduce using rule 44 (output)
    '-'             reduce using rule 44 (output)
    '%'             reduce using rule 44 (output)
    '?'             reduce using rule 44 (output)
    '!'             reduce using rule 44 (output)


State 453

   42 output: OUTPUT_WRITELN '(' operation ')' ';' •

    NUM_INT         reduce using rule 42 (output)
    NUM_FLOAT       reduce using rule 42 (output)
    NIL_CNST        reduce using rule 42 (output)
    ID              reduce using rule 42 (output)
    RETURN_STM      reduce using rule 42 (output)
    T_INT           reduce using rule 42 (output)
    T_FLOAT         reduce using rule 42 (output)
    IF_STMT         reduce using rule 42 (output)
    ELSE_STMT       reduce using rule 42 (output)
    FOR_STMT        reduce using rule 42 (output)
    OUTPUT_WRITE    reduce using rule 42 (output)
    OUTPUT_WRITELN  reduce using rule 42 (output)
    INPUT_READ      reduce using rule 42 (output)
    '{'             reduce using rule 42 (output)
    '}'             reduce using rule 42 (output)
    '+'             reduce using rule 42 (output)
    '-'             reduce using rule 42 (output)
    '%'             reduce using rule 42 (output)
    '?'             reduce using rule 42 (output)
    '!'             reduce using rule 42 (output)


State 454

   45 input: INPUT_READ '(' expression ')' ';' •

    NUM_INT         reduce using rule 45 (input)
    NUM_FLOAT       reduce using rule 45 (input)
    NIL_CNST        reduce using rule 45 (input)
    ID              reduce using rule 45 (input)
    RETURN_STM      reduce using rule 45 (input)
    T_INT           reduce using rule 45 (input)
    T_FLOAT         reduce using rule 45 (input)
    IF_STMT         reduce using rule 45 (input)
    ELSE_STMT       reduce using rule 45 (input)
    FOR_STMT        reduce using rule 45 (input)
    OUTPUT_WRITE    reduce using rule 45 (input)
    OUTPUT_WRITELN  reduce using rule 45 (input)
    INPUT_READ      reduce using rule 45 (input)
    '{'             reduce using rule 45 (input)
    '}'             reduce using rule 45 (input)
    '+'             reduce using rule 45 (input)
    '-'             reduce using rule 45 (input)
    '%'             reduce using rule 45 (input)
    '?'             reduce using rule 45 (input)
    '!'             reduce using rule 45 (input)


State 455

   46 func_calling: ID '(' calling_parameters ')' •

    ')'         reduce using rule 46 (func_calling)
    ','         reduce using rule 46 (func_calling)
    AND         reduce using rule 46 (func_calling)
    OR          reduce using rule 46 (func_calling)
    GREATER     reduce using rule 46 (func_calling)
    GREATER_EQ  reduce using rule 46 (func_calling)
    LESS        reduce using rule 46 (func_calling)
    LESS_EQ     reduce using rule 46 (func_calling)
    EQUAL       reduce using rule 46 (func_calling)
    NOT_EQ      reduce using rule 46 (func_calling)
    '+'         reduce using rule 46 (func_calling)
    '-'         reduce using rule 46 (func_calling)
    '*'         reduce using rule 46 (func_calling)
    '/'         reduce using rule 46 (func_calling)


State 456

   46 func_calling: ID '(' calling_parameters ')' •

    ')'         reduce using rule 46 (func_calling)
    AND         reduce using rule 46 (func_calling)
    OR          reduce using rule 46 (func_calling)
    GREATER     reduce using rule 46 (func_calling)
    GREATER_EQ  reduce using rule 46 (func_calling)
    LESS        reduce using rule 46 (func_calling)
    LESS_EQ     reduce using rule 46 (func_calling)
    EQUAL       reduce using rule 46 (func_calling)
    NOT_EQ      reduce using rule 46 (func_calling)
    '+'         reduce using rule 46 (func_calling)
    '-'         reduce using rule 46 (func_calling)
    '*'         reduce using rule 46 (func_calling)
    '/'         reduce using rule 46 (func_calling)


State 457

   34 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT • command

    NUM_INT         shift, and go to state 27
    NUM_FLOAT       shift, and go to state 28
    NIL_CNST        shift, and go to state 29
    ID              shift, and go to state 30
    RETURN_STM      shift, and go to state 237
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 238
    FOR_STMT        shift, and go to state 239
    OUTPUT_WRITE    shift, and go to state 240
    OUTPUT_WRITELN  shift, and go to state 241
    INPUT_READ      shift, and go to state 242
    '+'             shift, and go to state 37
    '-'             shift, and go to state 38
    '%'             shift, and go to state 39
    '?'             shift, and go to state 40
    '!'             shift, and go to state 41

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 243
    unq_declaration   go to state 244
    command           go to state 458
    $@2               go to state 245
    init_variable     go to state 246
    conditional_stmt  go to state 247
    return_stmt       go to state 248
    iteration         go to state 249
    init_stmt         go to state 250
    output            go to state 251
    input             go to state 252
    func_calling      go to state 54
    expression        go to state 55
    const             go to state 56
    number            go to state 57
    type              go to state 150
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 253
    single_operation  go to state 59
    arith_binary      go to state 60
    arith_single      go to state 61
    lst_single        go to state 62
    lst_binary        go to state 63


State 458

   34 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT command •

    NUM_INT         reduce using rule 34 (conditional_stmt)
    NUM_FLOAT       reduce using rule 34 (conditional_stmt)
    NIL_CNST        reduce using rule 34 (conditional_stmt)
    ID              reduce using rule 34 (conditional_stmt)
    RETURN_STM      reduce using rule 34 (conditional_stmt)
    T_INT           reduce using rule 34 (conditional_stmt)
    T_FLOAT         reduce using rule 34 (conditional_stmt)
    IF_STMT         reduce using rule 34 (conditional_stmt)
    ELSE_STMT       reduce using rule 34 (conditional_stmt)
    FOR_STMT        reduce using rule 34 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 34 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 34 (conditional_stmt)
    INPUT_READ      reduce using rule 34 (conditional_stmt)
    '{'             reduce using rule 34 (conditional_stmt)
    '}'             reduce using rule 34 (conditional_stmt)
    '+'             reduce using rule 34 (conditional_stmt)
    '-'             reduce using rule 34 (conditional_stmt)
    '%'             reduce using rule 34 (conditional_stmt)
    '?'             reduce using rule 34 (conditional_stmt)
    '!'             reduce using rule 34 (conditional_stmt)
