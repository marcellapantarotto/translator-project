Grammar

    0 $accept: program $end

    1 program: lst_declarations
    2        | %empty

    3 lst_declarations: declaration lst_declarations
    4                 | declaration

    5 declaration: func_declaration
    6            | var_declaration
    7            | error

    8 $@1: %empty

    9 func_declaration: unq_declaration $@1 '(' parameters ')' '{' block_commands '}'

   10 var_declaration: unq_declaration ';'

   11 unq_declaration: type ID

   12 parameters: lst_parameters
   13           | %empty

   14 lst_parameters: unq_declaration ',' lst_parameters
   15               | unq_declaration

   16 calling_parameters: lst_calling_parameters
   17                   | %empty

   18 lst_calling_parameters: operation ',' lst_calling_parameters
   19                       | operation

   20 block_commands: command block_commands
   21               | command

   22 command: var_declaration
   23        | init_variable
   24        | conditional_stmt
   25        | return_stmt
   26        | iteration
   27        | input
   28        | output

   29 $@2: %empty

   30 command: $@2 '{' block_commands '}'
   31        | operation ';'
   32        | error

   33 init_variable: init_stmt ';'

   34 conditional_stmt: IF_STMT '(' operation ')' command
   35                 | IF_STMT '(' operation ')' command ELSE_STMT command

   36 return_stmt: RETURN_STM operation ';'

   37 iteration: FOR_STMT '(' loop_condition ')' command

   38 loop_condition: init_stmt ';' operation ';' update_stmt

   39 init_stmt: ID '=' operation

   40 update_stmt: init_stmt
   41            | %empty

   42 output: OUTPUT_WRITE '(' operation ')' ';'
   43       | OUTPUT_WRITELN '(' operation ')' ';'
   44       | OUTPUT_WRITE '(' STRING ')' ';'
   45       | OUTPUT_WRITELN '(' STRING ')' ';'

   46 input: INPUT_READ '(' expression ')' ';'

   47 $@3: %empty

   48 $@4: %empty

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')'

   50 expression: '(' expression ')'
   51           | func_calling
   52           | single_operation
   53           | const
   54           | ID

   55 const: number
   56      | NIL_CNST

   57 number: NUM_INT
   58       | NUM_FLOAT

   59 type: type_lst
   60     | type_number

   61 type_lst: type_number T_LIST

   62 type_number: T_INT
   63            | T_FLOAT

   64 operation: arith_binary
   65          | lst_binary
   66          | operation relational_op expression
   67          | operation logical_op expression

   68 single_operation: arith_single
   69                 | lst_single
   70                 | '!' expression

   71 arith_binary: arith_binary '+' expression
   72             | arith_binary '-' expression
   73             | arith_binary '*' expression
   74             | arith_binary '/' expression
   75             | expression

   76 arith_single: '+' expression
   77             | '-' expression

   78 lst_single: '%' expression
   79           | '?' expression

   80 lst_binary: expression FILTER expression
   81           | expression MAP expression
   82           | expression ':' expression

   83 logical_op: AND
   84           | OR

   85 relational_op: GREATER
   86              | GREATER_EQ
   87              | LESS
   88              | LESS_EQ
   89              | EQUAL
   90              | NOT_EQ


Terminals, with rules where they appear

    $end (0) 0
    '!' <token> (33) 70
    '%' <token> (37) 78
    '(' <token> (40) 9 34 35 37 42 43 44 45 46 49 50
    ')' <token> (41) 9 34 35 37 42 43 44 45 46 49 50
    '*' <token> (42) 73
    '+' <token> (43) 71 76
    ',' <token> (44) 14 18
    '-' <token> (45) 72 77
    '/' <token> (47) 74
    ':' <token> (58) 82
    ';' <token> (59) 10 31 33 36 38 42 43 44 45 46
    '=' <token> (61) 39
    '?' <token> (63) 79
    '{' <token> (123) 9 30
    '}' <token> (125) 9 30
    error (256) 7 32
    NUM_INT <token> (258) 57
    NUM_FLOAT <token> (259) 58
    STRING <token> (260) 44 45
    NIL_CNST <token> (261) 56
    ID <token> (262) 11 39 49 54
    RETURN_STM <token> (263) 36
    T_INT <token> (264) 62
    T_FLOAT <token> (265) 63
    T_LIST <token> (266) 61
    IF_STMT <token> (267) 34 35
    ELSE_STMT <token> (268) 35
    FOR_STMT <token> (269) 37
    OUTPUT_WRITE <token> (270) 42 44
    OUTPUT_WRITELN <token> (271) 43 45
    INPUT_READ <token> (272) 46
    AND <token> (273) 83
    OR <token> (274) 84
    GREATER <token> (275) 85
    GREATER_EQ <token> (276) 86
    LESS <token> (277) 87
    LESS_EQ <token> (278) 88
    EQUAL <token> (279) 89
    NOT_EQ <token> (280) 90
    FILTER <token> (281) 80
    MAP <token> (282) 81


Nonterminals, with rules where they appear

    $accept (43)
        on left: 0
    program <node> (44)
        on left: 1 2
        on right: 0
    lst_declarations <node> (45)
        on left: 3 4
        on right: 1 3
    declaration <node> (46)
        on left: 5 6 7
        on right: 3 4
    func_declaration <node> (47)
        on left: 9
        on right: 5
    $@1 (48)
        on left: 8
        on right: 9
    var_declaration <node> (49)
        on left: 10
        on right: 6 22
    unq_declaration <node> (50)
        on left: 11
        on right: 9 10 14 15
    parameters <node> (51)
        on left: 12 13
        on right: 9
    lst_parameters <node> (52)
        on left: 14 15
        on right: 12 14
    calling_parameters <node> (53)
        on left: 16 17
        on right: 49
    lst_calling_parameters <node> (54)
        on left: 18 19
        on right: 16 18
    block_commands <node> (55)
        on left: 20 21
        on right: 9 20 30
    command <node> (56)
        on left: 22 23 24 25 26 27 28 30 31 32
        on right: 20 21 34 35 37
    $@2 (57)
        on left: 29
        on right: 30
    init_variable <node> (58)
        on left: 33
        on right: 23
    conditional_stmt <node> (59)
        on left: 34 35
        on right: 24
    return_stmt <node> (60)
        on left: 36
        on right: 25
    iteration <node> (61)
        on left: 37
        on right: 26
    loop_condition <node> (62)
        on left: 38
        on right: 37
    init_stmt <node> (63)
        on left: 39
        on right: 33 38 40
    update_stmt <node> (64)
        on left: 40 41
        on right: 38
    output <node> (65)
        on left: 42 43 44 45
        on right: 28
    input <node> (66)
        on left: 46
        on right: 27
    func_calling <node> (67)
        on left: 49
        on right: 51
    $@3 (68)
        on left: 47
        on right: 49
    $@4 (69)
        on left: 48
        on right: 49
    expression <node> (70)
        on left: 50 51 52 53 54
        on right: 46 50 66 67 70 71 72 73 74 75 76 77 78 79 80 81 82
    const <node> (71)
        on left: 55 56
        on right: 53
    number <node> (72)
        on left: 57 58
        on right: 55
    type <node> (73)
        on left: 59 60
        on right: 11
    type_lst <node> (74)
        on left: 61
        on right: 59
    type_number <node> (75)
        on left: 62 63
        on right: 60 61
    operation <node> (76)
        on left: 64 65 66 67
        on right: 18 19 31 34 35 36 38 39 42 43 66 67
    single_operation <node> (77)
        on left: 68 69 70
        on right: 52
    arith_binary <node> (78)
        on left: 71 72 73 74 75
        on right: 64 71 72 73 74
    arith_single <node> (79)
        on left: 76 77
        on right: 68
    lst_single <node> (80)
        on left: 78 79
        on right: 69
    lst_binary <node> (81)
        on left: 80 81 82
        on right: 65
    logical_op <node> (82)
        on left: 83 84
        on right: 67
    relational_op <node> (83)
        on left: 85 86 87 88 89 90
        on right: 66


State 0

    0 $accept: • program $end

    error    shift, and go to state 1
    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    $end  reduce using rule 2 (program)

    program           go to state 4
    lst_declarations  go to state 5
    declaration       go to state 6
    func_declaration  go to state 7
    var_declaration   go to state 8
    unq_declaration   go to state 9
    type              go to state 10
    type_lst          go to state 11
    type_number       go to state 12


State 1

    7 declaration: error •

    $end     reduce using rule 7 (declaration)
    error    reduce using rule 7 (declaration)
    T_INT    reduce using rule 7 (declaration)
    T_FLOAT  reduce using rule 7 (declaration)


State 2

   62 type_number: T_INT •

    ID      reduce using rule 62 (type_number)
    T_LIST  reduce using rule 62 (type_number)


State 3

   63 type_number: T_FLOAT •

    ID      reduce using rule 63 (type_number)
    T_LIST  reduce using rule 63 (type_number)


State 4

    0 $accept: program • $end

    $end  shift, and go to state 13


State 5

    1 program: lst_declarations •

    $end  reduce using rule 1 (program)


State 6

    3 lst_declarations: declaration • lst_declarations
    4                 | declaration •

    error    shift, and go to state 1
    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    $end  reduce using rule 4 (lst_declarations)

    lst_declarations  go to state 14
    declaration       go to state 6
    func_declaration  go to state 7
    var_declaration   go to state 8
    unq_declaration   go to state 9
    type              go to state 10
    type_lst          go to state 11
    type_number       go to state 12


State 7

    5 declaration: func_declaration •

    $end     reduce using rule 5 (declaration)
    error    reduce using rule 5 (declaration)
    T_INT    reduce using rule 5 (declaration)
    T_FLOAT  reduce using rule 5 (declaration)


State 8

    6 declaration: var_declaration •

    $end     reduce using rule 6 (declaration)
    error    reduce using rule 6 (declaration)
    T_INT    reduce using rule 6 (declaration)
    T_FLOAT  reduce using rule 6 (declaration)


State 9

    9 func_declaration: unq_declaration • $@1 '(' parameters ')' '{' block_commands '}'
   10 var_declaration: unq_declaration • ';'

    ';'  shift, and go to state 15

    '('  reduce using rule 8 ($@1)

    $@1  go to state 16


State 10

   11 unq_declaration: type • ID

    ID  shift, and go to state 17


State 11

   59 type: type_lst •

    ID  reduce using rule 59 (type)


State 12

   60 type: type_number •
   61 type_lst: type_number • T_LIST

    T_LIST  shift, and go to state 18

    ID  reduce using rule 60 (type)


State 13

    0 $accept: program $end •

    $default  accept


State 14

    3 lst_declarations: declaration lst_declarations •

    $end  reduce using rule 3 (lst_declarations)


State 15

   10 var_declaration: unq_declaration ';' •

    $end     reduce using rule 10 (var_declaration)
    error    reduce using rule 10 (var_declaration)
    T_INT    reduce using rule 10 (var_declaration)
    T_FLOAT  reduce using rule 10 (var_declaration)


State 16

    9 func_declaration: unq_declaration $@1 • '(' parameters ')' '{' block_commands '}'

    '('  shift, and go to state 19


State 17

   11 unq_declaration: type ID •

    '('  reduce using rule 11 (unq_declaration)
    ';'  reduce using rule 11 (unq_declaration)


State 18

   61 type_lst: type_number T_LIST •

    ID  reduce using rule 61 (type_lst)


State 19

    9 func_declaration: unq_declaration $@1 '(' • parameters ')' '{' block_commands '}'

    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    ')'  reduce using rule 13 (parameters)

    unq_declaration  go to state 20
    parameters       go to state 21
    lst_parameters   go to state 22
    type             go to state 155
    type_lst         go to state 11
    type_number      go to state 12


State 20

   14 lst_parameters: unq_declaration • ',' lst_parameters
   15               | unq_declaration •

    ','  shift, and go to state 23

    ')'  reduce using rule 15 (lst_parameters)


State 21

    9 func_declaration: unq_declaration $@1 '(' parameters • ')' '{' block_commands '}'

    ')'  shift, and go to state 24


State 22

   12 parameters: lst_parameters •

    ')'  reduce using rule 12 (parameters)


State 23

   14 lst_parameters: unq_declaration ',' • lst_parameters

    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    unq_declaration  go to state 20
    lst_parameters   go to state 25
    type             go to state 155
    type_lst         go to state 11
    type_number      go to state 12


State 24

    9 func_declaration: unq_declaration $@1 '(' parameters ')' • '{' block_commands '}'

    '{'  shift, and go to state 26


State 25

   14 lst_parameters: unq_declaration ',' lst_parameters •

    ')'  reduce using rule 14 (lst_parameters)


State 26

    9 func_declaration: unq_declaration $@1 '(' parameters ')' '{' • block_commands '}'

    error           shift, and go to state 27
    NUM_INT         shift, and go to state 28
    NUM_FLOAT       shift, and go to state 29
    NIL_CNST        shift, and go to state 30
    ID              shift, and go to state 31
    RETURN_STM      shift, and go to state 32
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 33
    FOR_STMT        shift, and go to state 34
    OUTPUT_WRITE    shift, and go to state 35
    OUTPUT_WRITELN  shift, and go to state 36
    INPUT_READ      shift, and go to state 37
    '('             shift, and go to state 38
    '+'             shift, and go to state 39
    '-'             shift, and go to state 40
    '%'             shift, and go to state 41
    '?'             shift, and go to state 42
    '!'             shift, and go to state 43

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 44
    unq_declaration   go to state 45
    block_commands    go to state 46
    command           go to state 47
    $@2               go to state 48
    init_variable     go to state 49
    conditional_stmt  go to state 50
    return_stmt       go to state 51
    iteration         go to state 52
    init_stmt         go to state 53
    output            go to state 54
    input             go to state 55
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 156
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 60
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 27

   32 command: error •

    error           reduce using rule 32 (command)
    NUM_INT         reduce using rule 32 (command)
    NUM_FLOAT       reduce using rule 32 (command)
    NIL_CNST        reduce using rule 32 (command)
    ID              reduce using rule 32 (command)
    RETURN_STM      reduce using rule 32 (command)
    T_INT           reduce using rule 32 (command)
    T_FLOAT         reduce using rule 32 (command)
    IF_STMT         reduce using rule 32 (command)
    FOR_STMT        reduce using rule 32 (command)
    OUTPUT_WRITE    reduce using rule 32 (command)
    OUTPUT_WRITELN  reduce using rule 32 (command)
    INPUT_READ      reduce using rule 32 (command)
    '('             reduce using rule 32 (command)
    '{'             reduce using rule 32 (command)
    '}'             reduce using rule 32 (command)
    '+'             reduce using rule 32 (command)
    '-'             reduce using rule 32 (command)
    '%'             reduce using rule 32 (command)
    '?'             reduce using rule 32 (command)
    '!'             reduce using rule 32 (command)


State 28

   57 number: NUM_INT •

    ';'         reduce using rule 57 (number)
    AND         reduce using rule 57 (number)
    OR          reduce using rule 57 (number)
    GREATER     reduce using rule 57 (number)
    GREATER_EQ  reduce using rule 57 (number)
    LESS        reduce using rule 57 (number)
    LESS_EQ     reduce using rule 57 (number)
    EQUAL       reduce using rule 57 (number)
    NOT_EQ      reduce using rule 57 (number)
    '+'         reduce using rule 57 (number)
    '-'         reduce using rule 57 (number)
    '*'         reduce using rule 57 (number)
    '/'         reduce using rule 57 (number)
    FILTER      reduce using rule 57 (number)
    MAP         reduce using rule 57 (number)
    ':'         reduce using rule 57 (number)


State 29

   58 number: NUM_FLOAT •

    ';'         reduce using rule 58 (number)
    AND         reduce using rule 58 (number)
    OR          reduce using rule 58 (number)
    GREATER     reduce using rule 58 (number)
    GREATER_EQ  reduce using rule 58 (number)
    LESS        reduce using rule 58 (number)
    LESS_EQ     reduce using rule 58 (number)
    EQUAL       reduce using rule 58 (number)
    NOT_EQ      reduce using rule 58 (number)
    '+'         reduce using rule 58 (number)
    '-'         reduce using rule 58 (number)
    '*'         reduce using rule 58 (number)
    '/'         reduce using rule 58 (number)
    FILTER      reduce using rule 58 (number)
    MAP         reduce using rule 58 (number)
    ':'         reduce using rule 58 (number)


State 30

   56 const: NIL_CNST •

    ';'         reduce using rule 56 (const)
    AND         reduce using rule 56 (const)
    OR          reduce using rule 56 (const)
    GREATER     reduce using rule 56 (const)
    GREATER_EQ  reduce using rule 56 (const)
    LESS        reduce using rule 56 (const)
    LESS_EQ     reduce using rule 56 (const)
    EQUAL       reduce using rule 56 (const)
    NOT_EQ      reduce using rule 56 (const)
    '+'         reduce using rule 56 (const)
    '-'         reduce using rule 56 (const)
    '*'         reduce using rule 56 (const)
    '/'         reduce using rule 56 (const)
    FILTER      reduce using rule 56 (const)
    MAP         reduce using rule 56 (const)
    ':'         reduce using rule 56 (const)


State 31

   39 init_stmt: ID • '=' operation
   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   54 expression: ID •

    '('  shift, and go to state 66
    '='  shift, and go to state 67

    ';'         reduce using rule 54 (expression)
    AND         reduce using rule 54 (expression)
    OR          reduce using rule 54 (expression)
    GREATER     reduce using rule 54 (expression)
    GREATER_EQ  reduce using rule 54 (expression)
    LESS        reduce using rule 54 (expression)
    LESS_EQ     reduce using rule 54 (expression)
    EQUAL       reduce using rule 54 (expression)
    NOT_EQ      reduce using rule 54 (expression)
    '+'         reduce using rule 54 (expression)
    '-'         reduce using rule 54 (expression)
    '*'         reduce using rule 54 (expression)
    '/'         reduce using rule 54 (expression)
    FILTER      reduce using rule 54 (expression)
    MAP         reduce using rule 54 (expression)
    ':'         reduce using rule 54 (expression)


State 32

   36 return_stmt: RETURN_STM • operation ';'

    NUM_INT    shift, and go to state 28
    NUM_FLOAT  shift, and go to state 29
    NIL_CNST   shift, and go to state 30
    ID         shift, and go to state 68
    '('        shift, and go to state 38
    '+'        shift, and go to state 39
    '-'        shift, and go to state 40
    '%'        shift, and go to state 41
    '?'        shift, and go to state 42
    '!'        shift, and go to state 43

    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    operation         go to state 69
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 33

   34 conditional_stmt: IF_STMT • '(' operation ')' command
   35                 | IF_STMT • '(' operation ')' command ELSE_STMT command

    '('  shift, and go to state 70


State 34

   37 iteration: FOR_STMT • '(' loop_condition ')' command

    '('  shift, and go to state 71


State 35

   42 output: OUTPUT_WRITE • '(' operation ')' ';'
   44       | OUTPUT_WRITE • '(' STRING ')' ';'

    '('  shift, and go to state 72


State 36

   43 output: OUTPUT_WRITELN • '(' operation ')' ';'
   45       | OUTPUT_WRITELN • '(' STRING ')' ';'

    '('  shift, and go to state 73


State 37

   46 input: INPUT_READ • '(' expression ')' ';'

    '('  shift, and go to state 74


State 38

   50 expression: '(' • expression ')'

    NUM_INT    shift, and go to state 157
    NUM_FLOAT  shift, and go to state 158
    NIL_CNST   shift, and go to state 159
    ID         shift, and go to state 160
    '('        shift, and go to state 161
    '+'        shift, and go to state 162
    '-'        shift, and go to state 163
    '%'        shift, and go to state 164
    '?'        shift, and go to state 165
    '!'        shift, and go to state 166

    func_calling      go to state 167
    expression        go to state 75
    const             go to state 168
    number            go to state 169
    single_operation  go to state 170
    arith_single      go to state 171
    lst_single        go to state 172


State 39

   76 arith_single: '+' • expression

    NUM_INT    shift, and go to state 28
    NUM_FLOAT  shift, and go to state 29
    NIL_CNST   shift, and go to state 30
    ID         shift, and go to state 68
    '('        shift, and go to state 38
    '+'        shift, and go to state 39
    '-'        shift, and go to state 40
    '%'        shift, and go to state 41
    '?'        shift, and go to state 42
    '!'        shift, and go to state 43

    func_calling      go to state 56
    expression        go to state 76
    const             go to state 58
    number            go to state 59
    single_operation  go to state 61
    arith_single      go to state 63
    lst_single        go to state 64


State 40

   77 arith_single: '-' • expression

    NUM_INT    shift, and go to state 28
    NUM_FLOAT  shift, and go to state 29
    NIL_CNST   shift, and go to state 30
    ID         shift, and go to state 68
    '('        shift, and go to state 38
    '+'        shift, and go to state 39
    '-'        shift, and go to state 40
    '%'        shift, and go to state 41
    '?'        shift, and go to state 42
    '!'        shift, and go to state 43

    func_calling      go to state 56
    expression        go to state 77
    const             go to state 58
    number            go to state 59
    single_operation  go to state 61
    arith_single      go to state 63
    lst_single        go to state 64


State 41

   78 lst_single: '%' • expression

    NUM_INT    shift, and go to state 28
    NUM_FLOAT  shift, and go to state 29
    NIL_CNST   shift, and go to state 30
    ID         shift, and go to state 68
    '('        shift, and go to state 38
    '+'        shift, and go to state 39
    '-'        shift, and go to state 40
    '%'        shift, and go to state 41
    '?'        shift, and go to state 42
    '!'        shift, and go to state 43

    func_calling      go to state 56
    expression        go to state 78
    const             go to state 58
    number            go to state 59
    single_operation  go to state 61
    arith_single      go to state 63
    lst_single        go to state 64


State 42

   79 lst_single: '?' • expression

    NUM_INT    shift, and go to state 28
    NUM_FLOAT  shift, and go to state 29
    NIL_CNST   shift, and go to state 30
    ID         shift, and go to state 68
    '('        shift, and go to state 38
    '+'        shift, and go to state 39
    '-'        shift, and go to state 40
    '%'        shift, and go to state 41
    '?'        shift, and go to state 42
    '!'        shift, and go to state 43

    func_calling      go to state 56
    expression        go to state 79
    const             go to state 58
    number            go to state 59
    single_operation  go to state 61
    arith_single      go to state 63
    lst_single        go to state 64


State 43

   70 single_operation: '!' • expression

    NUM_INT    shift, and go to state 28
    NUM_FLOAT  shift, and go to state 29
    NIL_CNST   shift, and go to state 30
    ID         shift, and go to state 68
    '('        shift, and go to state 38
    '+'        shift, and go to state 39
    '-'        shift, and go to state 40
    '%'        shift, and go to state 41
    '?'        shift, and go to state 42
    '!'        shift, and go to state 43

    func_calling      go to state 56
    expression        go to state 80
    const             go to state 58
    number            go to state 59
    single_operation  go to state 61
    arith_single      go to state 63
    lst_single        go to state 64


State 44

   22 command: var_declaration •

    error           reduce using rule 22 (command)
    NUM_INT         reduce using rule 22 (command)
    NUM_FLOAT       reduce using rule 22 (command)
    NIL_CNST        reduce using rule 22 (command)
    ID              reduce using rule 22 (command)
    RETURN_STM      reduce using rule 22 (command)
    T_INT           reduce using rule 22 (command)
    T_FLOAT         reduce using rule 22 (command)
    IF_STMT         reduce using rule 22 (command)
    FOR_STMT        reduce using rule 22 (command)
    OUTPUT_WRITE    reduce using rule 22 (command)
    OUTPUT_WRITELN  reduce using rule 22 (command)
    INPUT_READ      reduce using rule 22 (command)
    '('             reduce using rule 22 (command)
    '{'             reduce using rule 22 (command)
    '}'             reduce using rule 22 (command)
    '+'             reduce using rule 22 (command)
    '-'             reduce using rule 22 (command)
    '%'             reduce using rule 22 (command)
    '?'             reduce using rule 22 (command)
    '!'             reduce using rule 22 (command)


State 45

   10 var_declaration: unq_declaration • ';'

    ';'  shift, and go to state 173


State 46

    9 func_declaration: unq_declaration $@1 '(' parameters ')' '{' block_commands • '}'

    '}'  shift, and go to state 81


State 47

   20 block_commands: command • block_commands
   21               | command •

    error           shift, and go to state 27
    NUM_INT         shift, and go to state 28
    NUM_FLOAT       shift, and go to state 29
    NIL_CNST        shift, and go to state 30
    ID              shift, and go to state 31
    RETURN_STM      shift, and go to state 32
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 33
    FOR_STMT        shift, and go to state 34
    OUTPUT_WRITE    shift, and go to state 35
    OUTPUT_WRITELN  shift, and go to state 36
    INPUT_READ      shift, and go to state 37
    '('             shift, and go to state 38
    '+'             shift, and go to state 39
    '-'             shift, and go to state 40
    '%'             shift, and go to state 41
    '?'             shift, and go to state 42
    '!'             shift, and go to state 43

    '{'  reduce using rule 29 ($@2)
    '}'  reduce using rule 21 (block_commands)

    var_declaration   go to state 44
    unq_declaration   go to state 45
    block_commands    go to state 82
    command           go to state 47
    $@2               go to state 48
    init_variable     go to state 49
    conditional_stmt  go to state 50
    return_stmt       go to state 51
    iteration         go to state 52
    init_stmt         go to state 53
    output            go to state 54
    input             go to state 55
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 156
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 60
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 48

   30 command: $@2 • '{' block_commands '}'

    '{'  shift, and go to state 83


State 49

   23 command: init_variable •

    error           reduce using rule 23 (command)
    NUM_INT         reduce using rule 23 (command)
    NUM_FLOAT       reduce using rule 23 (command)
    NIL_CNST        reduce using rule 23 (command)
    ID              reduce using rule 23 (command)
    RETURN_STM      reduce using rule 23 (command)
    T_INT           reduce using rule 23 (command)
    T_FLOAT         reduce using rule 23 (command)
    IF_STMT         reduce using rule 23 (command)
    FOR_STMT        reduce using rule 23 (command)
    OUTPUT_WRITE    reduce using rule 23 (command)
    OUTPUT_WRITELN  reduce using rule 23 (command)
    INPUT_READ      reduce using rule 23 (command)
    '('             reduce using rule 23 (command)
    '{'             reduce using rule 23 (command)
    '}'             reduce using rule 23 (command)
    '+'             reduce using rule 23 (command)
    '-'             reduce using rule 23 (command)
    '%'             reduce using rule 23 (command)
    '?'             reduce using rule 23 (command)
    '!'             reduce using rule 23 (command)


State 50

   24 command: conditional_stmt •

    error           reduce using rule 24 (command)
    NUM_INT         reduce using rule 24 (command)
    NUM_FLOAT       reduce using rule 24 (command)
    NIL_CNST        reduce using rule 24 (command)
    ID              reduce using rule 24 (command)
    RETURN_STM      reduce using rule 24 (command)
    T_INT           reduce using rule 24 (command)
    T_FLOAT         reduce using rule 24 (command)
    IF_STMT         reduce using rule 24 (command)
    FOR_STMT        reduce using rule 24 (command)
    OUTPUT_WRITE    reduce using rule 24 (command)
    OUTPUT_WRITELN  reduce using rule 24 (command)
    INPUT_READ      reduce using rule 24 (command)
    '('             reduce using rule 24 (command)
    '{'             reduce using rule 24 (command)
    '}'             reduce using rule 24 (command)
    '+'             reduce using rule 24 (command)
    '-'             reduce using rule 24 (command)
    '%'             reduce using rule 24 (command)
    '?'             reduce using rule 24 (command)
    '!'             reduce using rule 24 (command)


State 51

   25 command: return_stmt •

    error           reduce using rule 25 (command)
    NUM_INT         reduce using rule 25 (command)
    NUM_FLOAT       reduce using rule 25 (command)
    NIL_CNST        reduce using rule 25 (command)
    ID              reduce using rule 25 (command)
    RETURN_STM      reduce using rule 25 (command)
    T_INT           reduce using rule 25 (command)
    T_FLOAT         reduce using rule 25 (command)
    IF_STMT         reduce using rule 25 (command)
    FOR_STMT        reduce using rule 25 (command)
    OUTPUT_WRITE    reduce using rule 25 (command)
    OUTPUT_WRITELN  reduce using rule 25 (command)
    INPUT_READ      reduce using rule 25 (command)
    '('             reduce using rule 25 (command)
    '{'             reduce using rule 25 (command)
    '}'             reduce using rule 25 (command)
    '+'             reduce using rule 25 (command)
    '-'             reduce using rule 25 (command)
    '%'             reduce using rule 25 (command)
    '?'             reduce using rule 25 (command)
    '!'             reduce using rule 25 (command)


State 52

   26 command: iteration •

    error           reduce using rule 26 (command)
    NUM_INT         reduce using rule 26 (command)
    NUM_FLOAT       reduce using rule 26 (command)
    NIL_CNST        reduce using rule 26 (command)
    ID              reduce using rule 26 (command)
    RETURN_STM      reduce using rule 26 (command)
    T_INT           reduce using rule 26 (command)
    T_FLOAT         reduce using rule 26 (command)
    IF_STMT         reduce using rule 26 (command)
    FOR_STMT        reduce using rule 26 (command)
    OUTPUT_WRITE    reduce using rule 26 (command)
    OUTPUT_WRITELN  reduce using rule 26 (command)
    INPUT_READ      reduce using rule 26 (command)
    '('             reduce using rule 26 (command)
    '{'             reduce using rule 26 (command)
    '}'             reduce using rule 26 (command)
    '+'             reduce using rule 26 (command)
    '-'             reduce using rule 26 (command)
    '%'             reduce using rule 26 (command)
    '?'             reduce using rule 26 (command)
    '!'             reduce using rule 26 (command)


State 53

   33 init_variable: init_stmt • ';'

    ';'  shift, and go to state 84


State 54

   28 command: output •

    error           reduce using rule 28 (command)
    NUM_INT         reduce using rule 28 (command)
    NUM_FLOAT       reduce using rule 28 (command)
    NIL_CNST        reduce using rule 28 (command)
    ID              reduce using rule 28 (command)
    RETURN_STM      reduce using rule 28 (command)
    T_INT           reduce using rule 28 (command)
    T_FLOAT         reduce using rule 28 (command)
    IF_STMT         reduce using rule 28 (command)
    FOR_STMT        reduce using rule 28 (command)
    OUTPUT_WRITE    reduce using rule 28 (command)
    OUTPUT_WRITELN  reduce using rule 28 (command)
    INPUT_READ      reduce using rule 28 (command)
    '('             reduce using rule 28 (command)
    '{'             reduce using rule 28 (command)
    '}'             reduce using rule 28 (command)
    '+'             reduce using rule 28 (command)
    '-'             reduce using rule 28 (command)
    '%'             reduce using rule 28 (command)
    '?'             reduce using rule 28 (command)
    '!'             reduce using rule 28 (command)


State 55

   27 command: input •

    error           reduce using rule 27 (command)
    NUM_INT         reduce using rule 27 (command)
    NUM_FLOAT       reduce using rule 27 (command)
    NIL_CNST        reduce using rule 27 (command)
    ID              reduce using rule 27 (command)
    RETURN_STM      reduce using rule 27 (command)
    T_INT           reduce using rule 27 (command)
    T_FLOAT         reduce using rule 27 (command)
    IF_STMT         reduce using rule 27 (command)
    FOR_STMT        reduce using rule 27 (command)
    OUTPUT_WRITE    reduce using rule 27 (command)
    OUTPUT_WRITELN  reduce using rule 27 (command)
    INPUT_READ      reduce using rule 27 (command)
    '('             reduce using rule 27 (command)
    '{'             reduce using rule 27 (command)
    '}'             reduce using rule 27 (command)
    '+'             reduce using rule 27 (command)
    '-'             reduce using rule 27 (command)
    '%'             reduce using rule 27 (command)
    '?'             reduce using rule 27 (command)
    '!'             reduce using rule 27 (command)


State 56

   51 expression: func_calling •

    ';'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)
    FILTER      reduce using rule 51 (expression)
    MAP         reduce using rule 51 (expression)
    ':'         reduce using rule 51 (expression)


State 57

   75 arith_binary: expression •
   80 lst_binary: expression • FILTER expression
   81           | expression • MAP expression
   82           | expression • ':' expression

    FILTER  shift, and go to state 85
    MAP     shift, and go to state 86
    ':'     shift, and go to state 87

    ';'         reduce using rule 75 (arith_binary)
    AND         reduce using rule 75 (arith_binary)
    OR          reduce using rule 75 (arith_binary)
    GREATER     reduce using rule 75 (arith_binary)
    GREATER_EQ  reduce using rule 75 (arith_binary)
    LESS        reduce using rule 75 (arith_binary)
    LESS_EQ     reduce using rule 75 (arith_binary)
    EQUAL       reduce using rule 75 (arith_binary)
    NOT_EQ      reduce using rule 75 (arith_binary)
    '+'         reduce using rule 75 (arith_binary)
    '-'         reduce using rule 75 (arith_binary)
    '*'         reduce using rule 75 (arith_binary)
    '/'         reduce using rule 75 (arith_binary)


State 58

   53 expression: const •

    ';'         reduce using rule 53 (expression)
    AND         reduce using rule 53 (expression)
    OR          reduce using rule 53 (expression)
    GREATER     reduce using rule 53 (expression)
    GREATER_EQ  reduce using rule 53 (expression)
    LESS        reduce using rule 53 (expression)
    LESS_EQ     reduce using rule 53 (expression)
    EQUAL       reduce using rule 53 (expression)
    NOT_EQ      reduce using rule 53 (expression)
    '+'         reduce using rule 53 (expression)
    '-'         reduce using rule 53 (expression)
    '*'         reduce using rule 53 (expression)
    '/'         reduce using rule 53 (expression)
    FILTER      reduce using rule 53 (expression)
    MAP         reduce using rule 53 (expression)
    ':'         reduce using rule 53 (expression)


State 59

   55 const: number •

    ';'         reduce using rule 55 (const)
    AND         reduce using rule 55 (const)
    OR          reduce using rule 55 (const)
    GREATER     reduce using rule 55 (const)
    GREATER_EQ  reduce using rule 55 (const)
    LESS        reduce using rule 55 (const)
    LESS_EQ     reduce using rule 55 (const)
    EQUAL       reduce using rule 55 (const)
    NOT_EQ      reduce using rule 55 (const)
    '+'         reduce using rule 55 (const)
    '-'         reduce using rule 55 (const)
    '*'         reduce using rule 55 (const)
    '/'         reduce using rule 55 (const)
    FILTER      reduce using rule 55 (const)
    MAP         reduce using rule 55 (const)
    ':'         reduce using rule 55 (const)


State 60

   31 command: operation • ';'
   66 operation: operation • relational_op expression
   67          | operation • logical_op expression

    ';'         shift, and go to state 88
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    GREATER     shift, and go to state 91
    GREATER_EQ  shift, and go to state 92
    LESS        shift, and go to state 93
    LESS_EQ     shift, and go to state 94
    EQUAL       shift, and go to state 95
    NOT_EQ      shift, and go to state 96

    logical_op     go to state 97
    relational_op  go to state 98


State 61

   52 expression: single_operation •

    ';'         reduce using rule 52 (expression)
    AND         reduce using rule 52 (expression)
    OR          reduce using rule 52 (expression)
    GREATER     reduce using rule 52 (expression)
    GREATER_EQ  reduce using rule 52 (expression)
    LESS        reduce using rule 52 (expression)
    LESS_EQ     reduce using rule 52 (expression)
    EQUAL       reduce using rule 52 (expression)
    NOT_EQ      reduce using rule 52 (expression)
    '+'         reduce using rule 52 (expression)
    '-'         reduce using rule 52 (expression)
    '*'         reduce using rule 52 (expression)
    '/'         reduce using rule 52 (expression)
    FILTER      reduce using rule 52 (expression)
    MAP         reduce using rule 52 (expression)
    ':'         reduce using rule 52 (expression)


State 62

   64 operation: arith_binary •
   71 arith_binary: arith_binary • '+' expression
   72             | arith_binary • '-' expression
   73             | arith_binary • '*' expression
   74             | arith_binary • '/' expression

    '+'  shift, and go to state 99
    '-'  shift, and go to state 100
    '*'  shift, and go to state 101
    '/'  shift, and go to state 102

    ';'         reduce using rule 64 (operation)
    AND         reduce using rule 64 (operation)
    OR          reduce using rule 64 (operation)
    GREATER     reduce using rule 64 (operation)
    GREATER_EQ  reduce using rule 64 (operation)
    LESS        reduce using rule 64 (operation)
    LESS_EQ     reduce using rule 64 (operation)
    EQUAL       reduce using rule 64 (operation)
    NOT_EQ      reduce using rule 64 (operation)


State 63

   68 single_operation: arith_single •

    ';'         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)
    '+'         reduce using rule 68 (single_operation)
    '-'         reduce using rule 68 (single_operation)
    '*'         reduce using rule 68 (single_operation)
    '/'         reduce using rule 68 (single_operation)
    FILTER      reduce using rule 68 (single_operation)
    MAP         reduce using rule 68 (single_operation)
    ':'         reduce using rule 68 (single_operation)


State 64

   69 single_operation: lst_single •

    ';'         reduce using rule 69 (single_operation)
    AND         reduce using rule 69 (single_operation)
    OR          reduce using rule 69 (single_operation)
    GREATER     reduce using rule 69 (single_operation)
    GREATER_EQ  reduce using rule 69 (single_operation)
    LESS        reduce using rule 69 (single_operation)
    LESS_EQ     reduce using rule 69 (single_operation)
    EQUAL       reduce using rule 69 (single_operation)
    NOT_EQ      reduce using rule 69 (single_operation)
    '+'         reduce using rule 69 (single_operation)
    '-'         reduce using rule 69 (single_operation)
    '*'         reduce using rule 69 (single_operation)
    '/'         reduce using rule 69 (single_operation)
    FILTER      reduce using rule 69 (single_operation)
    MAP         reduce using rule 69 (single_operation)
    ':'         reduce using rule 69 (single_operation)


State 65

   65 operation: lst_binary •

    ';'         reduce using rule 65 (operation)
    AND         reduce using rule 65 (operation)
    OR          reduce using rule 65 (operation)
    GREATER     reduce using rule 65 (operation)
    GREATER_EQ  reduce using rule 65 (operation)
    LESS        reduce using rule 65 (operation)
    LESS_EQ     reduce using rule 65 (operation)
    EQUAL       reduce using rule 65 (operation)
    NOT_EQ      reduce using rule 65 (operation)


State 66

   49 func_calling: ID '(' • $@3 calling_parameters $@4 ')'

    NUM_INT    reduce using rule 47 ($@3)
    NUM_FLOAT  reduce using rule 47 ($@3)
    NIL_CNST   reduce using rule 47 ($@3)
    ID         reduce using rule 47 ($@3)
    '('        reduce using rule 47 ($@3)
    ')'        reduce using rule 47 ($@3)
    '+'        reduce using rule 47 ($@3)
    '-'        reduce using rule 47 ($@3)
    '%'        reduce using rule 47 ($@3)
    '?'        reduce using rule 47 ($@3)
    '!'        reduce using rule 47 ($@3)

    $@3  go to state 103


State 67

   39 init_stmt: ID '=' • operation

    NUM_INT    shift, and go to state 28
    NUM_FLOAT  shift, and go to state 29
    NIL_CNST   shift, and go to state 30
    ID         shift, and go to state 68
    '('        shift, and go to state 38
    '+'        shift, and go to state 39
    '-'        shift, and go to state 40
    '%'        shift, and go to state 41
    '?'        shift, and go to state 42
    '!'        shift, and go to state 43

    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    operation         go to state 104
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 68

   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   54 expression: ID •

    '('  shift, and go to state 66

    ';'         reduce using rule 54 (expression)
    AND         reduce using rule 54 (expression)
    OR          reduce using rule 54 (expression)
    GREATER     reduce using rule 54 (expression)
    GREATER_EQ  reduce using rule 54 (expression)
    LESS        reduce using rule 54 (expression)
    LESS_EQ     reduce using rule 54 (expression)
    EQUAL       reduce using rule 54 (expression)
    NOT_EQ      reduce using rule 54 (expression)
    '+'         reduce using rule 54 (expression)
    '-'         reduce using rule 54 (expression)
    '*'         reduce using rule 54 (expression)
    '/'         reduce using rule 54 (expression)
    FILTER      reduce using rule 54 (expression)
    MAP         reduce using rule 54 (expression)
    ':'         reduce using rule 54 (expression)


State 69

   36 return_stmt: RETURN_STM operation • ';'
   66 operation: operation • relational_op expression
   67          | operation • logical_op expression

    ';'         shift, and go to state 105
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    GREATER     shift, and go to state 91
    GREATER_EQ  shift, and go to state 92
    LESS        shift, and go to state 93
    LESS_EQ     shift, and go to state 94
    EQUAL       shift, and go to state 95
    NOT_EQ      shift, and go to state 96

    logical_op     go to state 97
    relational_op  go to state 98


State 70

   34 conditional_stmt: IF_STMT '(' • operation ')' command
   35                 | IF_STMT '(' • operation ')' command ELSE_STMT command

    NUM_INT    shift, and go to state 174
    NUM_FLOAT  shift, and go to state 175
    NIL_CNST   shift, and go to state 176
    ID         shift, and go to state 177
    '('        shift, and go to state 178
    '+'        shift, and go to state 179
    '-'        shift, and go to state 180
    '%'        shift, and go to state 181
    '?'        shift, and go to state 182
    '!'        shift, and go to state 183

    func_calling      go to state 184
    expression        go to state 185
    const             go to state 186
    number            go to state 187
    operation         go to state 106
    single_operation  go to state 188
    arith_binary      go to state 189
    arith_single      go to state 190
    lst_single        go to state 191
    lst_binary        go to state 192


State 71

   37 iteration: FOR_STMT '(' • loop_condition ')' command

    ID  shift, and go to state 107

    loop_condition  go to state 108
    init_stmt       go to state 109


State 72

   42 output: OUTPUT_WRITE '(' • operation ')' ';'
   44       | OUTPUT_WRITE '(' • STRING ')' ';'

    NUM_INT    shift, and go to state 174
    NUM_FLOAT  shift, and go to state 175
    STRING     shift, and go to state 110
    NIL_CNST   shift, and go to state 176
    ID         shift, and go to state 177
    '('        shift, and go to state 178
    '+'        shift, and go to state 179
    '-'        shift, and go to state 180
    '%'        shift, and go to state 181
    '?'        shift, and go to state 182
    '!'        shift, and go to state 183

    func_calling      go to state 184
    expression        go to state 185
    const             go to state 186
    number            go to state 187
    operation         go to state 111
    single_operation  go to state 188
    arith_binary      go to state 189
    arith_single      go to state 190
    lst_single        go to state 191
    lst_binary        go to state 192


State 73

   43 output: OUTPUT_WRITELN '(' • operation ')' ';'
   45       | OUTPUT_WRITELN '(' • STRING ')' ';'

    NUM_INT    shift, and go to state 174
    NUM_FLOAT  shift, and go to state 175
    STRING     shift, and go to state 112
    NIL_CNST   shift, and go to state 176
    ID         shift, and go to state 177
    '('        shift, and go to state 178
    '+'        shift, and go to state 179
    '-'        shift, and go to state 180
    '%'        shift, and go to state 181
    '?'        shift, and go to state 182
    '!'        shift, and go to state 183

    func_calling      go to state 184
    expression        go to state 185
    const             go to state 186
    number            go to state 187
    operation         go to state 113
    single_operation  go to state 188
    arith_binary      go to state 189
    arith_single      go to state 190
    lst_single        go to state 191
    lst_binary        go to state 192


State 74

   46 input: INPUT_READ '(' • expression ')' ';'

    NUM_INT    shift, and go to state 157
    NUM_FLOAT  shift, and go to state 158
    NIL_CNST   shift, and go to state 159
    ID         shift, and go to state 160
    '('        shift, and go to state 161
    '+'        shift, and go to state 162
    '-'        shift, and go to state 163
    '%'        shift, and go to state 164
    '?'        shift, and go to state 165
    '!'        shift, and go to state 166

    func_calling      go to state 167
    expression        go to state 114
    const             go to state 168
    number            go to state 169
    single_operation  go to state 170
    arith_single      go to state 171
    lst_single        go to state 172


State 75

   50 expression: '(' expression • ')'

    ')'  shift, and go to state 115


State 76

   76 arith_single: '+' expression •

    ';'         reduce using rule 76 (arith_single)
    AND         reduce using rule 76 (arith_single)
    OR          reduce using rule 76 (arith_single)
    GREATER     reduce using rule 76 (arith_single)
    GREATER_EQ  reduce using rule 76 (arith_single)
    LESS        reduce using rule 76 (arith_single)
    LESS_EQ     reduce using rule 76 (arith_single)
    EQUAL       reduce using rule 76 (arith_single)
    NOT_EQ      reduce using rule 76 (arith_single)
    '+'         reduce using rule 76 (arith_single)
    '-'         reduce using rule 76 (arith_single)
    '*'         reduce using rule 76 (arith_single)
    '/'         reduce using rule 76 (arith_single)
    FILTER      reduce using rule 76 (arith_single)
    MAP         reduce using rule 76 (arith_single)
    ':'         reduce using rule 76 (arith_single)


State 77

   77 arith_single: '-' expression •

    ';'         reduce using rule 77 (arith_single)
    AND         reduce using rule 77 (arith_single)
    OR          reduce using rule 77 (arith_single)
    GREATER     reduce using rule 77 (arith_single)
    GREATER_EQ  reduce using rule 77 (arith_single)
    LESS        reduce using rule 77 (arith_single)
    LESS_EQ     reduce using rule 77 (arith_single)
    EQUAL       reduce using rule 77 (arith_single)
    NOT_EQ      reduce using rule 77 (arith_single)
    '+'         reduce using rule 77 (arith_single)
    '-'         reduce using rule 77 (arith_single)
    '*'         reduce using rule 77 (arith_single)
    '/'         reduce using rule 77 (arith_single)
    FILTER      reduce using rule 77 (arith_single)
    MAP         reduce using rule 77 (arith_single)
    ':'         reduce using rule 77 (arith_single)


State 78

   78 lst_single: '%' expression •

    ';'         reduce using rule 78 (lst_single)
    AND         reduce using rule 78 (lst_single)
    OR          reduce using rule 78 (lst_single)
    GREATER     reduce using rule 78 (lst_single)
    GREATER_EQ  reduce using rule 78 (lst_single)
    LESS        reduce using rule 78 (lst_single)
    LESS_EQ     reduce using rule 78 (lst_single)
    EQUAL       reduce using rule 78 (lst_single)
    NOT_EQ      reduce using rule 78 (lst_single)
    '+'         reduce using rule 78 (lst_single)
    '-'         reduce using rule 78 (lst_single)
    '*'         reduce using rule 78 (lst_single)
    '/'         reduce using rule 78 (lst_single)
    FILTER      reduce using rule 78 (lst_single)
    MAP         reduce using rule 78 (lst_single)
    ':'         reduce using rule 78 (lst_single)


State 79

   79 lst_single: '?' expression •

    ';'         reduce using rule 79 (lst_single)
    AND         reduce using rule 79 (lst_single)
    OR          reduce using rule 79 (lst_single)
    GREATER     reduce using rule 79 (lst_single)
    GREATER_EQ  reduce using rule 79 (lst_single)
    LESS        reduce using rule 79 (lst_single)
    LESS_EQ     reduce using rule 79 (lst_single)
    EQUAL       reduce using rule 79 (lst_single)
    NOT_EQ      reduce using rule 79 (lst_single)
    '+'         reduce using rule 79 (lst_single)
    '-'         reduce using rule 79 (lst_single)
    '*'         reduce using rule 79 (lst_single)
    '/'         reduce using rule 79 (lst_single)
    FILTER      reduce using rule 79 (lst_single)
    MAP         reduce using rule 79 (lst_single)
    ':'         reduce using rule 79 (lst_single)


State 80

   70 single_operation: '!' expression •

    ';'         reduce using rule 70 (single_operation)
    AND         reduce using rule 70 (single_operation)
    OR          reduce using rule 70 (single_operation)
    GREATER     reduce using rule 70 (single_operation)
    GREATER_EQ  reduce using rule 70 (single_operation)
    LESS        reduce using rule 70 (single_operation)
    LESS_EQ     reduce using rule 70 (single_operation)
    EQUAL       reduce using rule 70 (single_operation)
    NOT_EQ      reduce using rule 70 (single_operation)
    '+'         reduce using rule 70 (single_operation)
    '-'         reduce using rule 70 (single_operation)
    '*'         reduce using rule 70 (single_operation)
    '/'         reduce using rule 70 (single_operation)
    FILTER      reduce using rule 70 (single_operation)
    MAP         reduce using rule 70 (single_operation)
    ':'         reduce using rule 70 (single_operation)


State 81

    9 func_declaration: unq_declaration $@1 '(' parameters ')' '{' block_commands '}' •

    $end     reduce using rule 9 (func_declaration)
    error    reduce using rule 9 (func_declaration)
    T_INT    reduce using rule 9 (func_declaration)
    T_FLOAT  reduce using rule 9 (func_declaration)


State 82

   20 block_commands: command block_commands •

    '}'  reduce using rule 20 (block_commands)


State 83

   30 command: $@2 '{' • block_commands '}'

    error           shift, and go to state 27
    NUM_INT         shift, and go to state 28
    NUM_FLOAT       shift, and go to state 29
    NIL_CNST        shift, and go to state 30
    ID              shift, and go to state 31
    RETURN_STM      shift, and go to state 32
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 33
    FOR_STMT        shift, and go to state 34
    OUTPUT_WRITE    shift, and go to state 35
    OUTPUT_WRITELN  shift, and go to state 36
    INPUT_READ      shift, and go to state 37
    '('             shift, and go to state 38
    '+'             shift, and go to state 39
    '-'             shift, and go to state 40
    '%'             shift, and go to state 41
    '?'             shift, and go to state 42
    '!'             shift, and go to state 43

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 44
    unq_declaration   go to state 45
    block_commands    go to state 116
    command           go to state 47
    $@2               go to state 48
    init_variable     go to state 49
    conditional_stmt  go to state 50
    return_stmt       go to state 51
    iteration         go to state 52
    init_stmt         go to state 53
    output            go to state 54
    input             go to state 55
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 156
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 60
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 84

   33 init_variable: init_stmt ';' •

    error           reduce using rule 33 (init_variable)
    NUM_INT         reduce using rule 33 (init_variable)
    NUM_FLOAT       reduce using rule 33 (init_variable)
    NIL_CNST        reduce using rule 33 (init_variable)
    ID              reduce using rule 33 (init_variable)
    RETURN_STM      reduce using rule 33 (init_variable)
    T_INT           reduce using rule 33 (init_variable)
    T_FLOAT         reduce using rule 33 (init_variable)
    IF_STMT         reduce using rule 33 (init_variable)
    FOR_STMT        reduce using rule 33 (init_variable)
    OUTPUT_WRITE    reduce using rule 33 (init_variable)
    OUTPUT_WRITELN  reduce using rule 33 (init_variable)
    INPUT_READ      reduce using rule 33 (init_variable)
    '('             reduce using rule 33 (init_variable)
    '{'             reduce using rule 33 (init_variable)
    '}'             reduce using rule 33 (init_variable)
    '+'             reduce using rule 33 (init_variable)
    '-'             reduce using rule 33 (init_variable)
    '%'             reduce using rule 33 (init_variable)
    '?'             reduce using rule 33 (init_variable)
    '!'             reduce using rule 33 (init_variable)


State 85

   80 lst_binary: expression FILTER • expression

    NUM_INT    shift, and go to state 193
    NUM_FLOAT  shift, and go to state 194
    NIL_CNST   shift, and go to state 195
    ID         shift, and go to state 196
    '('        shift, and go to state 197
    '+'        shift, and go to state 198
    '-'        shift, and go to state 199
    '%'        shift, and go to state 200
    '?'        shift, and go to state 201
    '!'        shift, and go to state 202

    func_calling      go to state 203
    expression        go to state 117
    const             go to state 204
    number            go to state 205
    single_operation  go to state 206
    arith_single      go to state 207
    lst_single        go to state 208


State 86

   81 lst_binary: expression MAP • expression

    NUM_INT    shift, and go to state 193
    NUM_FLOAT  shift, and go to state 194
    NIL_CNST   shift, and go to state 195
    ID         shift, and go to state 196
    '('        shift, and go to state 197
    '+'        shift, and go to state 198
    '-'        shift, and go to state 199
    '%'        shift, and go to state 200
    '?'        shift, and go to state 201
    '!'        shift, and go to state 202

    func_calling      go to state 203
    expression        go to state 118
    const             go to state 204
    number            go to state 205
    single_operation  go to state 206
    arith_single      go to state 207
    lst_single        go to state 208


State 87

   82 lst_binary: expression ':' • expression

    NUM_INT    shift, and go to state 193
    NUM_FLOAT  shift, and go to state 194
    NIL_CNST   shift, and go to state 195
    ID         shift, and go to state 196
    '('        shift, and go to state 197
    '+'        shift, and go to state 198
    '-'        shift, and go to state 199
    '%'        shift, and go to state 200
    '?'        shift, and go to state 201
    '!'        shift, and go to state 202

    func_calling      go to state 203
    expression        go to state 119
    const             go to state 204
    number            go to state 205
    single_operation  go to state 206
    arith_single      go to state 207
    lst_single        go to state 208


State 88

   31 command: operation ';' •

    error           reduce using rule 31 (command)
    NUM_INT         reduce using rule 31 (command)
    NUM_FLOAT       reduce using rule 31 (command)
    NIL_CNST        reduce using rule 31 (command)
    ID              reduce using rule 31 (command)
    RETURN_STM      reduce using rule 31 (command)
    T_INT           reduce using rule 31 (command)
    T_FLOAT         reduce using rule 31 (command)
    IF_STMT         reduce using rule 31 (command)
    FOR_STMT        reduce using rule 31 (command)
    OUTPUT_WRITE    reduce using rule 31 (command)
    OUTPUT_WRITELN  reduce using rule 31 (command)
    INPUT_READ      reduce using rule 31 (command)
    '('             reduce using rule 31 (command)
    '{'             reduce using rule 31 (command)
    '}'             reduce using rule 31 (command)
    '+'             reduce using rule 31 (command)
    '-'             reduce using rule 31 (command)
    '%'             reduce using rule 31 (command)
    '?'             reduce using rule 31 (command)
    '!'             reduce using rule 31 (command)


State 89

   83 logical_op: AND •

    NUM_INT    reduce using rule 83 (logical_op)
    NUM_FLOAT  reduce using rule 83 (logical_op)
    NIL_CNST   reduce using rule 83 (logical_op)
    ID         reduce using rule 83 (logical_op)
    '('        reduce using rule 83 (logical_op)
    '+'        reduce using rule 83 (logical_op)
    '-'        reduce using rule 83 (logical_op)
    '%'        reduce using rule 83 (logical_op)
    '?'        reduce using rule 83 (logical_op)
    '!'        reduce using rule 83 (logical_op)


State 90

   84 logical_op: OR •

    NUM_INT    reduce using rule 84 (logical_op)
    NUM_FLOAT  reduce using rule 84 (logical_op)
    NIL_CNST   reduce using rule 84 (logical_op)
    ID         reduce using rule 84 (logical_op)
    '('        reduce using rule 84 (logical_op)
    '+'        reduce using rule 84 (logical_op)
    '-'        reduce using rule 84 (logical_op)
    '%'        reduce using rule 84 (logical_op)
    '?'        reduce using rule 84 (logical_op)
    '!'        reduce using rule 84 (logical_op)


State 91

   85 relational_op: GREATER •

    NUM_INT    reduce using rule 85 (relational_op)
    NUM_FLOAT  reduce using rule 85 (relational_op)
    NIL_CNST   reduce using rule 85 (relational_op)
    ID         reduce using rule 85 (relational_op)
    '('        reduce using rule 85 (relational_op)
    '+'        reduce using rule 85 (relational_op)
    '-'        reduce using rule 85 (relational_op)
    '%'        reduce using rule 85 (relational_op)
    '?'        reduce using rule 85 (relational_op)
    '!'        reduce using rule 85 (relational_op)


State 92

   86 relational_op: GREATER_EQ •

    NUM_INT    reduce using rule 86 (relational_op)
    NUM_FLOAT  reduce using rule 86 (relational_op)
    NIL_CNST   reduce using rule 86 (relational_op)
    ID         reduce using rule 86 (relational_op)
    '('        reduce using rule 86 (relational_op)
    '+'        reduce using rule 86 (relational_op)
    '-'        reduce using rule 86 (relational_op)
    '%'        reduce using rule 86 (relational_op)
    '?'        reduce using rule 86 (relational_op)
    '!'        reduce using rule 86 (relational_op)


State 93

   87 relational_op: LESS •

    NUM_INT    reduce using rule 87 (relational_op)
    NUM_FLOAT  reduce using rule 87 (relational_op)
    NIL_CNST   reduce using rule 87 (relational_op)
    ID         reduce using rule 87 (relational_op)
    '('        reduce using rule 87 (relational_op)
    '+'        reduce using rule 87 (relational_op)
    '-'        reduce using rule 87 (relational_op)
    '%'        reduce using rule 87 (relational_op)
    '?'        reduce using rule 87 (relational_op)
    '!'        reduce using rule 87 (relational_op)


State 94

   88 relational_op: LESS_EQ •

    NUM_INT    reduce using rule 88 (relational_op)
    NUM_FLOAT  reduce using rule 88 (relational_op)
    NIL_CNST   reduce using rule 88 (relational_op)
    ID         reduce using rule 88 (relational_op)
    '('        reduce using rule 88 (relational_op)
    '+'        reduce using rule 88 (relational_op)
    '-'        reduce using rule 88 (relational_op)
    '%'        reduce using rule 88 (relational_op)
    '?'        reduce using rule 88 (relational_op)
    '!'        reduce using rule 88 (relational_op)


State 95

   89 relational_op: EQUAL •

    NUM_INT    reduce using rule 89 (relational_op)
    NUM_FLOAT  reduce using rule 89 (relational_op)
    NIL_CNST   reduce using rule 89 (relational_op)
    ID         reduce using rule 89 (relational_op)
    '('        reduce using rule 89 (relational_op)
    '+'        reduce using rule 89 (relational_op)
    '-'        reduce using rule 89 (relational_op)
    '%'        reduce using rule 89 (relational_op)
    '?'        reduce using rule 89 (relational_op)
    '!'        reduce using rule 89 (relational_op)


State 96

   90 relational_op: NOT_EQ •

    NUM_INT    reduce using rule 90 (relational_op)
    NUM_FLOAT  reduce using rule 90 (relational_op)
    NIL_CNST   reduce using rule 90 (relational_op)
    ID         reduce using rule 90 (relational_op)
    '('        reduce using rule 90 (relational_op)
    '+'        reduce using rule 90 (relational_op)
    '-'        reduce using rule 90 (relational_op)
    '%'        reduce using rule 90 (relational_op)
    '?'        reduce using rule 90 (relational_op)
    '!'        reduce using rule 90 (relational_op)


State 97

   67 operation: operation logical_op • expression

    NUM_INT    shift, and go to state 193
    NUM_FLOAT  shift, and go to state 194
    NIL_CNST   shift, and go to state 195
    ID         shift, and go to state 196
    '('        shift, and go to state 197
    '+'        shift, and go to state 198
    '-'        shift, and go to state 199
    '%'        shift, and go to state 200
    '?'        shift, and go to state 201
    '!'        shift, and go to state 202

    func_calling      go to state 203
    expression        go to state 120
    const             go to state 204
    number            go to state 205
    single_operation  go to state 206
    arith_single      go to state 207
    lst_single        go to state 208


State 98

   66 operation: operation relational_op • expression

    NUM_INT    shift, and go to state 193
    NUM_FLOAT  shift, and go to state 194
    NIL_CNST   shift, and go to state 195
    ID         shift, and go to state 196
    '('        shift, and go to state 197
    '+'        shift, and go to state 198
    '-'        shift, and go to state 199
    '%'        shift, and go to state 200
    '?'        shift, and go to state 201
    '!'        shift, and go to state 202

    func_calling      go to state 203
    expression        go to state 121
    const             go to state 204
    number            go to state 205
    single_operation  go to state 206
    arith_single      go to state 207
    lst_single        go to state 208


State 99

   71 arith_binary: arith_binary '+' • expression

    NUM_INT    shift, and go to state 209
    NUM_FLOAT  shift, and go to state 210
    NIL_CNST   shift, and go to state 211
    ID         shift, and go to state 212
    '('        shift, and go to state 213
    '+'        shift, and go to state 214
    '-'        shift, and go to state 215
    '%'        shift, and go to state 216
    '?'        shift, and go to state 217
    '!'        shift, and go to state 218

    func_calling      go to state 219
    expression        go to state 122
    const             go to state 220
    number            go to state 221
    single_operation  go to state 222
    arith_single      go to state 223
    lst_single        go to state 224


State 100

   72 arith_binary: arith_binary '-' • expression

    NUM_INT    shift, and go to state 209
    NUM_FLOAT  shift, and go to state 210
    NIL_CNST   shift, and go to state 211
    ID         shift, and go to state 212
    '('        shift, and go to state 213
    '+'        shift, and go to state 214
    '-'        shift, and go to state 215
    '%'        shift, and go to state 216
    '?'        shift, and go to state 217
    '!'        shift, and go to state 218

    func_calling      go to state 219
    expression        go to state 123
    const             go to state 220
    number            go to state 221
    single_operation  go to state 222
    arith_single      go to state 223
    lst_single        go to state 224


State 101

   73 arith_binary: arith_binary '*' • expression

    NUM_INT    shift, and go to state 209
    NUM_FLOAT  shift, and go to state 210
    NIL_CNST   shift, and go to state 211
    ID         shift, and go to state 212
    '('        shift, and go to state 213
    '+'        shift, and go to state 214
    '-'        shift, and go to state 215
    '%'        shift, and go to state 216
    '?'        shift, and go to state 217
    '!'        shift, and go to state 218

    func_calling      go to state 219
    expression        go to state 124
    const             go to state 220
    number            go to state 221
    single_operation  go to state 222
    arith_single      go to state 223
    lst_single        go to state 224


State 102

   74 arith_binary: arith_binary '/' • expression

    NUM_INT    shift, and go to state 209
    NUM_FLOAT  shift, and go to state 210
    NIL_CNST   shift, and go to state 211
    ID         shift, and go to state 212
    '('        shift, and go to state 213
    '+'        shift, and go to state 214
    '-'        shift, and go to state 215
    '%'        shift, and go to state 216
    '?'        shift, and go to state 217
    '!'        shift, and go to state 218

    func_calling      go to state 219
    expression        go to state 125
    const             go to state 220
    number            go to state 221
    single_operation  go to state 222
    arith_single      go to state 223
    lst_single        go to state 224


State 103

   49 func_calling: ID '(' $@3 • calling_parameters $@4 ')'

    NUM_INT    shift, and go to state 225
    NUM_FLOAT  shift, and go to state 226
    NIL_CNST   shift, and go to state 227
    ID         shift, and go to state 228
    '('        shift, and go to state 229
    '+'        shift, and go to state 230
    '-'        shift, and go to state 231
    '%'        shift, and go to state 232
    '?'        shift, and go to state 233
    '!'        shift, and go to state 234

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 126
    lst_calling_parameters  go to state 127
    func_calling            go to state 235
    expression              go to state 236
    const                   go to state 237
    number                  go to state 238
    operation               go to state 128
    single_operation        go to state 239
    arith_binary            go to state 240
    arith_single            go to state 241
    lst_single              go to state 242
    lst_binary              go to state 243


State 104

   39 init_stmt: ID '=' operation •
   66 operation: operation • relational_op expression
   67          | operation • logical_op expression

    AND         shift, and go to state 89
    OR          shift, and go to state 90
    GREATER     shift, and go to state 91
    GREATER_EQ  shift, and go to state 92
    LESS        shift, and go to state 93
    LESS_EQ     shift, and go to state 94
    EQUAL       shift, and go to state 95
    NOT_EQ      shift, and go to state 96

    ';'  reduce using rule 39 (init_stmt)

    logical_op     go to state 97
    relational_op  go to state 98


State 105

   36 return_stmt: RETURN_STM operation ';' •

    error           reduce using rule 36 (return_stmt)
    NUM_INT         reduce using rule 36 (return_stmt)
    NUM_FLOAT       reduce using rule 36 (return_stmt)
    NIL_CNST        reduce using rule 36 (return_stmt)
    ID              reduce using rule 36 (return_stmt)
    RETURN_STM      reduce using rule 36 (return_stmt)
    T_INT           reduce using rule 36 (return_stmt)
    T_FLOAT         reduce using rule 36 (return_stmt)
    IF_STMT         reduce using rule 36 (return_stmt)
    FOR_STMT        reduce using rule 36 (return_stmt)
    OUTPUT_WRITE    reduce using rule 36 (return_stmt)
    OUTPUT_WRITELN  reduce using rule 36 (return_stmt)
    INPUT_READ      reduce using rule 36 (return_stmt)
    '('             reduce using rule 36 (return_stmt)
    '{'             reduce using rule 36 (return_stmt)
    '}'             reduce using rule 36 (return_stmt)
    '+'             reduce using rule 36 (return_stmt)
    '-'             reduce using rule 36 (return_stmt)
    '%'             reduce using rule 36 (return_stmt)
    '?'             reduce using rule 36 (return_stmt)
    '!'             reduce using rule 36 (return_stmt)


State 106

   34 conditional_stmt: IF_STMT '(' operation • ')' command
   35                 | IF_STMT '(' operation • ')' command ELSE_STMT command
   66 operation: operation • relational_op expression
   67          | operation • logical_op expression

    ')'         shift, and go to state 129
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    GREATER     shift, and go to state 91
    GREATER_EQ  shift, and go to state 92
    LESS        shift, and go to state 93
    LESS_EQ     shift, and go to state 94
    EQUAL       shift, and go to state 95
    NOT_EQ      shift, and go to state 96

    logical_op     go to state 244
    relational_op  go to state 245


State 107

   39 init_stmt: ID • '=' operation

    '='  shift, and go to state 67


State 108

   37 iteration: FOR_STMT '(' loop_condition • ')' command

    ')'  shift, and go to state 130


State 109

   38 loop_condition: init_stmt • ';' operation ';' update_stmt

    ';'  shift, and go to state 131


State 110

   44 output: OUTPUT_WRITE '(' STRING • ')' ';'

    ')'  shift, and go to state 132


State 111

   42 output: OUTPUT_WRITE '(' operation • ')' ';'
   66 operation: operation • relational_op expression
   67          | operation • logical_op expression

    ')'         shift, and go to state 133
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    GREATER     shift, and go to state 91
    GREATER_EQ  shift, and go to state 92
    LESS        shift, and go to state 93
    LESS_EQ     shift, and go to state 94
    EQUAL       shift, and go to state 95
    NOT_EQ      shift, and go to state 96

    logical_op     go to state 244
    relational_op  go to state 245


State 112

   45 output: OUTPUT_WRITELN '(' STRING • ')' ';'

    ')'  shift, and go to state 134


State 113

   43 output: OUTPUT_WRITELN '(' operation • ')' ';'
   66 operation: operation • relational_op expression
   67          | operation • logical_op expression

    ')'         shift, and go to state 135
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    GREATER     shift, and go to state 91
    GREATER_EQ  shift, and go to state 92
    LESS        shift, and go to state 93
    LESS_EQ     shift, and go to state 94
    EQUAL       shift, and go to state 95
    NOT_EQ      shift, and go to state 96

    logical_op     go to state 244
    relational_op  go to state 245


State 114

   46 input: INPUT_READ '(' expression • ')' ';'

    ')'  shift, and go to state 136


State 115

   50 expression: '(' expression ')' •

    ';'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)
    FILTER      reduce using rule 50 (expression)
    MAP         reduce using rule 50 (expression)
    ':'         reduce using rule 50 (expression)


State 116

   30 command: $@2 '{' block_commands • '}'

    '}'  shift, and go to state 137


State 117

   80 lst_binary: expression FILTER expression •

    ';'         reduce using rule 80 (lst_binary)
    AND         reduce using rule 80 (lst_binary)
    OR          reduce using rule 80 (lst_binary)
    GREATER     reduce using rule 80 (lst_binary)
    GREATER_EQ  reduce using rule 80 (lst_binary)
    LESS        reduce using rule 80 (lst_binary)
    LESS_EQ     reduce using rule 80 (lst_binary)
    EQUAL       reduce using rule 80 (lst_binary)
    NOT_EQ      reduce using rule 80 (lst_binary)


State 118

   81 lst_binary: expression MAP expression •

    ';'         reduce using rule 81 (lst_binary)
    AND         reduce using rule 81 (lst_binary)
    OR          reduce using rule 81 (lst_binary)
    GREATER     reduce using rule 81 (lst_binary)
    GREATER_EQ  reduce using rule 81 (lst_binary)
    LESS        reduce using rule 81 (lst_binary)
    LESS_EQ     reduce using rule 81 (lst_binary)
    EQUAL       reduce using rule 81 (lst_binary)
    NOT_EQ      reduce using rule 81 (lst_binary)


State 119

   82 lst_binary: expression ':' expression •

    ';'         reduce using rule 82 (lst_binary)
    AND         reduce using rule 82 (lst_binary)
    OR          reduce using rule 82 (lst_binary)
    GREATER     reduce using rule 82 (lst_binary)
    GREATER_EQ  reduce using rule 82 (lst_binary)
    LESS        reduce using rule 82 (lst_binary)
    LESS_EQ     reduce using rule 82 (lst_binary)
    EQUAL       reduce using rule 82 (lst_binary)
    NOT_EQ      reduce using rule 82 (lst_binary)


State 120

   67 operation: operation logical_op expression •

    ';'         reduce using rule 67 (operation)
    AND         reduce using rule 67 (operation)
    OR          reduce using rule 67 (operation)
    GREATER     reduce using rule 67 (operation)
    GREATER_EQ  reduce using rule 67 (operation)
    LESS        reduce using rule 67 (operation)
    LESS_EQ     reduce using rule 67 (operation)
    EQUAL       reduce using rule 67 (operation)
    NOT_EQ      reduce using rule 67 (operation)


State 121

   66 operation: operation relational_op expression •

    ';'         reduce using rule 66 (operation)
    AND         reduce using rule 66 (operation)
    OR          reduce using rule 66 (operation)
    GREATER     reduce using rule 66 (operation)
    GREATER_EQ  reduce using rule 66 (operation)
    LESS        reduce using rule 66 (operation)
    LESS_EQ     reduce using rule 66 (operation)
    EQUAL       reduce using rule 66 (operation)
    NOT_EQ      reduce using rule 66 (operation)


State 122

   71 arith_binary: arith_binary '+' expression •

    ';'         reduce using rule 71 (arith_binary)
    AND         reduce using rule 71 (arith_binary)
    OR          reduce using rule 71 (arith_binary)
    GREATER     reduce using rule 71 (arith_binary)
    GREATER_EQ  reduce using rule 71 (arith_binary)
    LESS        reduce using rule 71 (arith_binary)
    LESS_EQ     reduce using rule 71 (arith_binary)
    EQUAL       reduce using rule 71 (arith_binary)
    NOT_EQ      reduce using rule 71 (arith_binary)
    '+'         reduce using rule 71 (arith_binary)
    '-'         reduce using rule 71 (arith_binary)
    '*'         reduce using rule 71 (arith_binary)
    '/'         reduce using rule 71 (arith_binary)


State 123

   72 arith_binary: arith_binary '-' expression •

    ';'         reduce using rule 72 (arith_binary)
    AND         reduce using rule 72 (arith_binary)
    OR          reduce using rule 72 (arith_binary)
    GREATER     reduce using rule 72 (arith_binary)
    GREATER_EQ  reduce using rule 72 (arith_binary)
    LESS        reduce using rule 72 (arith_binary)
    LESS_EQ     reduce using rule 72 (arith_binary)
    EQUAL       reduce using rule 72 (arith_binary)
    NOT_EQ      reduce using rule 72 (arith_binary)
    '+'         reduce using rule 72 (arith_binary)
    '-'         reduce using rule 72 (arith_binary)
    '*'         reduce using rule 72 (arith_binary)
    '/'         reduce using rule 72 (arith_binary)


State 124

   73 arith_binary: arith_binary '*' expression •

    ';'         reduce using rule 73 (arith_binary)
    AND         reduce using rule 73 (arith_binary)
    OR          reduce using rule 73 (arith_binary)
    GREATER     reduce using rule 73 (arith_binary)
    GREATER_EQ  reduce using rule 73 (arith_binary)
    LESS        reduce using rule 73 (arith_binary)
    LESS_EQ     reduce using rule 73 (arith_binary)
    EQUAL       reduce using rule 73 (arith_binary)
    NOT_EQ      reduce using rule 73 (arith_binary)
    '+'         reduce using rule 73 (arith_binary)
    '-'         reduce using rule 73 (arith_binary)
    '*'         reduce using rule 73 (arith_binary)
    '/'         reduce using rule 73 (arith_binary)


State 125

   74 arith_binary: arith_binary '/' expression •

    ';'         reduce using rule 74 (arith_binary)
    AND         reduce using rule 74 (arith_binary)
    OR          reduce using rule 74 (arith_binary)
    GREATER     reduce using rule 74 (arith_binary)
    GREATER_EQ  reduce using rule 74 (arith_binary)
    LESS        reduce using rule 74 (arith_binary)
    LESS_EQ     reduce using rule 74 (arith_binary)
    EQUAL       reduce using rule 74 (arith_binary)
    NOT_EQ      reduce using rule 74 (arith_binary)
    '+'         reduce using rule 74 (arith_binary)
    '-'         reduce using rule 74 (arith_binary)
    '*'         reduce using rule 74 (arith_binary)
    '/'         reduce using rule 74 (arith_binary)


State 126

   49 func_calling: ID '(' $@3 calling_parameters • $@4 ')'

    ')'  reduce using rule 48 ($@4)

    $@4  go to state 138


State 127

   16 calling_parameters: lst_calling_parameters •

    ')'  reduce using rule 16 (calling_parameters)


State 128

   18 lst_calling_parameters: operation • ',' lst_calling_parameters
   19                       | operation •
   66 operation: operation • relational_op expression
   67          | operation • logical_op expression

    ','         shift, and go to state 139
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    GREATER     shift, and go to state 91
    GREATER_EQ  shift, and go to state 92
    LESS        shift, and go to state 93
    LESS_EQ     shift, and go to state 94
    EQUAL       shift, and go to state 95
    NOT_EQ      shift, and go to state 96

    ')'  reduce using rule 19 (lst_calling_parameters)

    logical_op     go to state 246
    relational_op  go to state 247


State 129

   34 conditional_stmt: IF_STMT '(' operation ')' • command
   35                 | IF_STMT '(' operation ')' • command ELSE_STMT command

    error           shift, and go to state 248
    NUM_INT         shift, and go to state 28
    NUM_FLOAT       shift, and go to state 29
    NIL_CNST        shift, and go to state 30
    ID              shift, and go to state 31
    RETURN_STM      shift, and go to state 249
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 250
    FOR_STMT        shift, and go to state 251
    OUTPUT_WRITE    shift, and go to state 252
    OUTPUT_WRITELN  shift, and go to state 253
    INPUT_READ      shift, and go to state 254
    '('             shift, and go to state 38
    '+'             shift, and go to state 39
    '-'             shift, and go to state 40
    '%'             shift, and go to state 41
    '?'             shift, and go to state 42
    '!'             shift, and go to state 43

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 255
    unq_declaration   go to state 256
    command           go to state 140
    $@2               go to state 257
    init_variable     go to state 258
    conditional_stmt  go to state 259
    return_stmt       go to state 260
    iteration         go to state 261
    init_stmt         go to state 262
    output            go to state 263
    input             go to state 264
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 156
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 265
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 130

   37 iteration: FOR_STMT '(' loop_condition ')' • command

    error           shift, and go to state 27
    NUM_INT         shift, and go to state 28
    NUM_FLOAT       shift, and go to state 29
    NIL_CNST        shift, and go to state 30
    ID              shift, and go to state 31
    RETURN_STM      shift, and go to state 32
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 33
    FOR_STMT        shift, and go to state 34
    OUTPUT_WRITE    shift, and go to state 35
    OUTPUT_WRITELN  shift, and go to state 36
    INPUT_READ      shift, and go to state 37
    '('             shift, and go to state 38
    '+'             shift, and go to state 39
    '-'             shift, and go to state 40
    '%'             shift, and go to state 41
    '?'             shift, and go to state 42
    '!'             shift, and go to state 43

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 44
    unq_declaration   go to state 45
    command           go to state 141
    $@2               go to state 48
    init_variable     go to state 49
    conditional_stmt  go to state 50
    return_stmt       go to state 51
    iteration         go to state 52
    init_stmt         go to state 53
    output            go to state 54
    input             go to state 55
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 156
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 60
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 131

   38 loop_condition: init_stmt ';' • operation ';' update_stmt

    NUM_INT    shift, and go to state 28
    NUM_FLOAT  shift, and go to state 29
    NIL_CNST   shift, and go to state 30
    ID         shift, and go to state 68
    '('        shift, and go to state 38
    '+'        shift, and go to state 39
    '-'        shift, and go to state 40
    '%'        shift, and go to state 41
    '?'        shift, and go to state 42
    '!'        shift, and go to state 43

    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    operation         go to state 142
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 132

   44 output: OUTPUT_WRITE '(' STRING ')' • ';'

    ';'  shift, and go to state 143


State 133

   42 output: OUTPUT_WRITE '(' operation ')' • ';'

    ';'  shift, and go to state 144


State 134

   45 output: OUTPUT_WRITELN '(' STRING ')' • ';'

    ';'  shift, and go to state 145


State 135

   43 output: OUTPUT_WRITELN '(' operation ')' • ';'

    ';'  shift, and go to state 146


State 136

   46 input: INPUT_READ '(' expression ')' • ';'

    ';'  shift, and go to state 147


State 137

   30 command: $@2 '{' block_commands '}' •

    error           reduce using rule 30 (command)
    NUM_INT         reduce using rule 30 (command)
    NUM_FLOAT       reduce using rule 30 (command)
    NIL_CNST        reduce using rule 30 (command)
    ID              reduce using rule 30 (command)
    RETURN_STM      reduce using rule 30 (command)
    T_INT           reduce using rule 30 (command)
    T_FLOAT         reduce using rule 30 (command)
    IF_STMT         reduce using rule 30 (command)
    FOR_STMT        reduce using rule 30 (command)
    OUTPUT_WRITE    reduce using rule 30 (command)
    OUTPUT_WRITELN  reduce using rule 30 (command)
    INPUT_READ      reduce using rule 30 (command)
    '('             reduce using rule 30 (command)
    '{'             reduce using rule 30 (command)
    '}'             reduce using rule 30 (command)
    '+'             reduce using rule 30 (command)
    '-'             reduce using rule 30 (command)
    '%'             reduce using rule 30 (command)
    '?'             reduce using rule 30 (command)
    '!'             reduce using rule 30 (command)


State 138

   49 func_calling: ID '(' $@3 calling_parameters $@4 • ')'

    ')'  shift, and go to state 148


State 139

   18 lst_calling_parameters: operation ',' • lst_calling_parameters

    NUM_INT    shift, and go to state 225
    NUM_FLOAT  shift, and go to state 226
    NIL_CNST   shift, and go to state 227
    ID         shift, and go to state 228
    '('        shift, and go to state 229
    '+'        shift, and go to state 230
    '-'        shift, and go to state 231
    '%'        shift, and go to state 232
    '?'        shift, and go to state 233
    '!'        shift, and go to state 234

    lst_calling_parameters  go to state 149
    func_calling            go to state 235
    expression              go to state 236
    const                   go to state 237
    number                  go to state 238
    operation               go to state 128
    single_operation        go to state 239
    arith_binary            go to state 240
    arith_single            go to state 241
    lst_single              go to state 242
    lst_binary              go to state 243


State 140

   34 conditional_stmt: IF_STMT '(' operation ')' command •
   35                 | IF_STMT '(' operation ')' command • ELSE_STMT command

    ELSE_STMT  shift, and go to state 150

    error           reduce using rule 34 (conditional_stmt)
    NUM_INT         reduce using rule 34 (conditional_stmt)
    NUM_FLOAT       reduce using rule 34 (conditional_stmt)
    NIL_CNST        reduce using rule 34 (conditional_stmt)
    ID              reduce using rule 34 (conditional_stmt)
    RETURN_STM      reduce using rule 34 (conditional_stmt)
    T_INT           reduce using rule 34 (conditional_stmt)
    T_FLOAT         reduce using rule 34 (conditional_stmt)
    IF_STMT         reduce using rule 34 (conditional_stmt)
    FOR_STMT        reduce using rule 34 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 34 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 34 (conditional_stmt)
    INPUT_READ      reduce using rule 34 (conditional_stmt)
    '('             reduce using rule 34 (conditional_stmt)
    '{'             reduce using rule 34 (conditional_stmt)
    '}'             reduce using rule 34 (conditional_stmt)
    '+'             reduce using rule 34 (conditional_stmt)
    '-'             reduce using rule 34 (conditional_stmt)
    '%'             reduce using rule 34 (conditional_stmt)
    '?'             reduce using rule 34 (conditional_stmt)
    '!'             reduce using rule 34 (conditional_stmt)


State 141

   37 iteration: FOR_STMT '(' loop_condition ')' command •

    error           reduce using rule 37 (iteration)
    NUM_INT         reduce using rule 37 (iteration)
    NUM_FLOAT       reduce using rule 37 (iteration)
    NIL_CNST        reduce using rule 37 (iteration)
    ID              reduce using rule 37 (iteration)
    RETURN_STM      reduce using rule 37 (iteration)
    T_INT           reduce using rule 37 (iteration)
    T_FLOAT         reduce using rule 37 (iteration)
    IF_STMT         reduce using rule 37 (iteration)
    FOR_STMT        reduce using rule 37 (iteration)
    OUTPUT_WRITE    reduce using rule 37 (iteration)
    OUTPUT_WRITELN  reduce using rule 37 (iteration)
    INPUT_READ      reduce using rule 37 (iteration)
    '('             reduce using rule 37 (iteration)
    '{'             reduce using rule 37 (iteration)
    '}'             reduce using rule 37 (iteration)
    '+'             reduce using rule 37 (iteration)
    '-'             reduce using rule 37 (iteration)
    '%'             reduce using rule 37 (iteration)
    '?'             reduce using rule 37 (iteration)
    '!'             reduce using rule 37 (iteration)


State 142

   38 loop_condition: init_stmt ';' operation • ';' update_stmt
   66 operation: operation • relational_op expression
   67          | operation • logical_op expression

    ';'         shift, and go to state 151
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    GREATER     shift, and go to state 91
    GREATER_EQ  shift, and go to state 92
    LESS        shift, and go to state 93
    LESS_EQ     shift, and go to state 94
    EQUAL       shift, and go to state 95
    NOT_EQ      shift, and go to state 96

    logical_op     go to state 97
    relational_op  go to state 98


State 143

   44 output: OUTPUT_WRITE '(' STRING ')' ';' •

    error           reduce using rule 44 (output)
    NUM_INT         reduce using rule 44 (output)
    NUM_FLOAT       reduce using rule 44 (output)
    NIL_CNST        reduce using rule 44 (output)
    ID              reduce using rule 44 (output)
    RETURN_STM      reduce using rule 44 (output)
    T_INT           reduce using rule 44 (output)
    T_FLOAT         reduce using rule 44 (output)
    IF_STMT         reduce using rule 44 (output)
    FOR_STMT        reduce using rule 44 (output)
    OUTPUT_WRITE    reduce using rule 44 (output)
    OUTPUT_WRITELN  reduce using rule 44 (output)
    INPUT_READ      reduce using rule 44 (output)
    '('             reduce using rule 44 (output)
    '{'             reduce using rule 44 (output)
    '}'             reduce using rule 44 (output)
    '+'             reduce using rule 44 (output)
    '-'             reduce using rule 44 (output)
    '%'             reduce using rule 44 (output)
    '?'             reduce using rule 44 (output)
    '!'             reduce using rule 44 (output)


State 144

   42 output: OUTPUT_WRITE '(' operation ')' ';' •

    error           reduce using rule 42 (output)
    NUM_INT         reduce using rule 42 (output)
    NUM_FLOAT       reduce using rule 42 (output)
    NIL_CNST        reduce using rule 42 (output)
    ID              reduce using rule 42 (output)
    RETURN_STM      reduce using rule 42 (output)
    T_INT           reduce using rule 42 (output)
    T_FLOAT         reduce using rule 42 (output)
    IF_STMT         reduce using rule 42 (output)
    FOR_STMT        reduce using rule 42 (output)
    OUTPUT_WRITE    reduce using rule 42 (output)
    OUTPUT_WRITELN  reduce using rule 42 (output)
    INPUT_READ      reduce using rule 42 (output)
    '('             reduce using rule 42 (output)
    '{'             reduce using rule 42 (output)
    '}'             reduce using rule 42 (output)
    '+'             reduce using rule 42 (output)
    '-'             reduce using rule 42 (output)
    '%'             reduce using rule 42 (output)
    '?'             reduce using rule 42 (output)
    '!'             reduce using rule 42 (output)


State 145

   45 output: OUTPUT_WRITELN '(' STRING ')' ';' •

    error           reduce using rule 45 (output)
    NUM_INT         reduce using rule 45 (output)
    NUM_FLOAT       reduce using rule 45 (output)
    NIL_CNST        reduce using rule 45 (output)
    ID              reduce using rule 45 (output)
    RETURN_STM      reduce using rule 45 (output)
    T_INT           reduce using rule 45 (output)
    T_FLOAT         reduce using rule 45 (output)
    IF_STMT         reduce using rule 45 (output)
    FOR_STMT        reduce using rule 45 (output)
    OUTPUT_WRITE    reduce using rule 45 (output)
    OUTPUT_WRITELN  reduce using rule 45 (output)
    INPUT_READ      reduce using rule 45 (output)
    '('             reduce using rule 45 (output)
    '{'             reduce using rule 45 (output)
    '}'             reduce using rule 45 (output)
    '+'             reduce using rule 45 (output)
    '-'             reduce using rule 45 (output)
    '%'             reduce using rule 45 (output)
    '?'             reduce using rule 45 (output)
    '!'             reduce using rule 45 (output)


State 146

   43 output: OUTPUT_WRITELN '(' operation ')' ';' •

    error           reduce using rule 43 (output)
    NUM_INT         reduce using rule 43 (output)
    NUM_FLOAT       reduce using rule 43 (output)
    NIL_CNST        reduce using rule 43 (output)
    ID              reduce using rule 43 (output)
    RETURN_STM      reduce using rule 43 (output)
    T_INT           reduce using rule 43 (output)
    T_FLOAT         reduce using rule 43 (output)
    IF_STMT         reduce using rule 43 (output)
    FOR_STMT        reduce using rule 43 (output)
    OUTPUT_WRITE    reduce using rule 43 (output)
    OUTPUT_WRITELN  reduce using rule 43 (output)
    INPUT_READ      reduce using rule 43 (output)
    '('             reduce using rule 43 (output)
    '{'             reduce using rule 43 (output)
    '}'             reduce using rule 43 (output)
    '+'             reduce using rule 43 (output)
    '-'             reduce using rule 43 (output)
    '%'             reduce using rule 43 (output)
    '?'             reduce using rule 43 (output)
    '!'             reduce using rule 43 (output)


State 147

   46 input: INPUT_READ '(' expression ')' ';' •

    error           reduce using rule 46 (input)
    NUM_INT         reduce using rule 46 (input)
    NUM_FLOAT       reduce using rule 46 (input)
    NIL_CNST        reduce using rule 46 (input)
    ID              reduce using rule 46 (input)
    RETURN_STM      reduce using rule 46 (input)
    T_INT           reduce using rule 46 (input)
    T_FLOAT         reduce using rule 46 (input)
    IF_STMT         reduce using rule 46 (input)
    FOR_STMT        reduce using rule 46 (input)
    OUTPUT_WRITE    reduce using rule 46 (input)
    OUTPUT_WRITELN  reduce using rule 46 (input)
    INPUT_READ      reduce using rule 46 (input)
    '('             reduce using rule 46 (input)
    '{'             reduce using rule 46 (input)
    '}'             reduce using rule 46 (input)
    '+'             reduce using rule 46 (input)
    '-'             reduce using rule 46 (input)
    '%'             reduce using rule 46 (input)
    '?'             reduce using rule 46 (input)
    '!'             reduce using rule 46 (input)


State 148

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')' •

    ';'         reduce using rule 49 (func_calling)
    AND         reduce using rule 49 (func_calling)
    OR          reduce using rule 49 (func_calling)
    GREATER     reduce using rule 49 (func_calling)
    GREATER_EQ  reduce using rule 49 (func_calling)
    LESS        reduce using rule 49 (func_calling)
    LESS_EQ     reduce using rule 49 (func_calling)
    EQUAL       reduce using rule 49 (func_calling)
    NOT_EQ      reduce using rule 49 (func_calling)
    '+'         reduce using rule 49 (func_calling)
    '-'         reduce using rule 49 (func_calling)
    '*'         reduce using rule 49 (func_calling)
    '/'         reduce using rule 49 (func_calling)
    FILTER      reduce using rule 49 (func_calling)
    MAP         reduce using rule 49 (func_calling)
    ':'         reduce using rule 49 (func_calling)


State 149

   18 lst_calling_parameters: operation ',' lst_calling_parameters •

    ')'  reduce using rule 18 (lst_calling_parameters)


State 150

   35 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT • command

    error           shift, and go to state 27
    NUM_INT         shift, and go to state 28
    NUM_FLOAT       shift, and go to state 29
    NIL_CNST        shift, and go to state 30
    ID              shift, and go to state 31
    RETURN_STM      shift, and go to state 32
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 33
    FOR_STMT        shift, and go to state 34
    OUTPUT_WRITE    shift, and go to state 35
    OUTPUT_WRITELN  shift, and go to state 36
    INPUT_READ      shift, and go to state 37
    '('             shift, and go to state 38
    '+'             shift, and go to state 39
    '-'             shift, and go to state 40
    '%'             shift, and go to state 41
    '?'             shift, and go to state 42
    '!'             shift, and go to state 43

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 44
    unq_declaration   go to state 45
    command           go to state 152
    $@2               go to state 48
    init_variable     go to state 49
    conditional_stmt  go to state 50
    return_stmt       go to state 51
    iteration         go to state 52
    init_stmt         go to state 53
    output            go to state 54
    input             go to state 55
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 156
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 60
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 151

   38 loop_condition: init_stmt ';' operation ';' • update_stmt

    ID  shift, and go to state 266

    ')'  reduce using rule 41 (update_stmt)

    init_stmt    go to state 153
    update_stmt  go to state 154


State 152

   35 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT command •

    error           reduce using rule 35 (conditional_stmt)
    NUM_INT         reduce using rule 35 (conditional_stmt)
    NUM_FLOAT       reduce using rule 35 (conditional_stmt)
    NIL_CNST        reduce using rule 35 (conditional_stmt)
    ID              reduce using rule 35 (conditional_stmt)
    RETURN_STM      reduce using rule 35 (conditional_stmt)
    T_INT           reduce using rule 35 (conditional_stmt)
    T_FLOAT         reduce using rule 35 (conditional_stmt)
    IF_STMT         reduce using rule 35 (conditional_stmt)
    FOR_STMT        reduce using rule 35 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 35 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 35 (conditional_stmt)
    INPUT_READ      reduce using rule 35 (conditional_stmt)
    '('             reduce using rule 35 (conditional_stmt)
    '{'             reduce using rule 35 (conditional_stmt)
    '}'             reduce using rule 35 (conditional_stmt)
    '+'             reduce using rule 35 (conditional_stmt)
    '-'             reduce using rule 35 (conditional_stmt)
    '%'             reduce using rule 35 (conditional_stmt)
    '?'             reduce using rule 35 (conditional_stmt)
    '!'             reduce using rule 35 (conditional_stmt)


State 153

   40 update_stmt: init_stmt •

    ')'  reduce using rule 40 (update_stmt)


State 154

   38 loop_condition: init_stmt ';' operation ';' update_stmt •

    ')'  reduce using rule 38 (loop_condition)


State 155

   11 unq_declaration: type • ID

    ID  shift, and go to state 267


State 156

   11 unq_declaration: type • ID

    ID  shift, and go to state 268


State 157

   57 number: NUM_INT •

    ')'  reduce using rule 57 (number)


State 158

   58 number: NUM_FLOAT •

    ')'  reduce using rule 58 (number)


State 159

   56 const: NIL_CNST •

    ')'  reduce using rule 56 (const)


State 160

   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   54 expression: ID •

    '('  shift, and go to state 269

    ')'  reduce using rule 54 (expression)


State 161

   50 expression: '(' • expression ')'

    NUM_INT    shift, and go to state 157
    NUM_FLOAT  shift, and go to state 158
    NIL_CNST   shift, and go to state 159
    ID         shift, and go to state 160
    '('        shift, and go to state 161
    '+'        shift, and go to state 162
    '-'        shift, and go to state 163
    '%'        shift, and go to state 164
    '?'        shift, and go to state 165
    '!'        shift, and go to state 166

    func_calling      go to state 167
    expression        go to state 270
    const             go to state 168
    number            go to state 169
    single_operation  go to state 170
    arith_single      go to state 171
    lst_single        go to state 172


State 162

   76 arith_single: '+' • expression

    NUM_INT    shift, and go to state 157
    NUM_FLOAT  shift, and go to state 158
    NIL_CNST   shift, and go to state 159
    ID         shift, and go to state 160
    '('        shift, and go to state 161
    '+'        shift, and go to state 162
    '-'        shift, and go to state 163
    '%'        shift, and go to state 164
    '?'        shift, and go to state 165
    '!'        shift, and go to state 166

    func_calling      go to state 167
    expression        go to state 271
    const             go to state 168
    number            go to state 169
    single_operation  go to state 170
    arith_single      go to state 171
    lst_single        go to state 172


State 163

   77 arith_single: '-' • expression

    NUM_INT    shift, and go to state 157
    NUM_FLOAT  shift, and go to state 158
    NIL_CNST   shift, and go to state 159
    ID         shift, and go to state 160
    '('        shift, and go to state 161
    '+'        shift, and go to state 162
    '-'        shift, and go to state 163
    '%'        shift, and go to state 164
    '?'        shift, and go to state 165
    '!'        shift, and go to state 166

    func_calling      go to state 167
    expression        go to state 272
    const             go to state 168
    number            go to state 169
    single_operation  go to state 170
    arith_single      go to state 171
    lst_single        go to state 172


State 164

   78 lst_single: '%' • expression

    NUM_INT    shift, and go to state 157
    NUM_FLOAT  shift, and go to state 158
    NIL_CNST   shift, and go to state 159
    ID         shift, and go to state 160
    '('        shift, and go to state 161
    '+'        shift, and go to state 162
    '-'        shift, and go to state 163
    '%'        shift, and go to state 164
    '?'        shift, and go to state 165
    '!'        shift, and go to state 166

    func_calling      go to state 167
    expression        go to state 273
    const             go to state 168
    number            go to state 169
    single_operation  go to state 170
    arith_single      go to state 171
    lst_single        go to state 172


State 165

   79 lst_single: '?' • expression

    NUM_INT    shift, and go to state 157
    NUM_FLOAT  shift, and go to state 158
    NIL_CNST   shift, and go to state 159
    ID         shift, and go to state 160
    '('        shift, and go to state 161
    '+'        shift, and go to state 162
    '-'        shift, and go to state 163
    '%'        shift, and go to state 164
    '?'        shift, and go to state 165
    '!'        shift, and go to state 166

    func_calling      go to state 167
    expression        go to state 274
    const             go to state 168
    number            go to state 169
    single_operation  go to state 170
    arith_single      go to state 171
    lst_single        go to state 172


State 166

   70 single_operation: '!' • expression

    NUM_INT    shift, and go to state 157
    NUM_FLOAT  shift, and go to state 158
    NIL_CNST   shift, and go to state 159
    ID         shift, and go to state 160
    '('        shift, and go to state 161
    '+'        shift, and go to state 162
    '-'        shift, and go to state 163
    '%'        shift, and go to state 164
    '?'        shift, and go to state 165
    '!'        shift, and go to state 166

    func_calling      go to state 167
    expression        go to state 275
    const             go to state 168
    number            go to state 169
    single_operation  go to state 170
    arith_single      go to state 171
    lst_single        go to state 172


State 167

   51 expression: func_calling •

    ')'  reduce using rule 51 (expression)


State 168

   53 expression: const •

    ')'  reduce using rule 53 (expression)


State 169

   55 const: number •

    ')'  reduce using rule 55 (const)


State 170

   52 expression: single_operation •

    ')'  reduce using rule 52 (expression)


State 171

   68 single_operation: arith_single •

    ')'  reduce using rule 68 (single_operation)


State 172

   69 single_operation: lst_single •

    ')'  reduce using rule 69 (single_operation)


State 173

   10 var_declaration: unq_declaration ';' •

    error           reduce using rule 10 (var_declaration)
    NUM_INT         reduce using rule 10 (var_declaration)
    NUM_FLOAT       reduce using rule 10 (var_declaration)
    NIL_CNST        reduce using rule 10 (var_declaration)
    ID              reduce using rule 10 (var_declaration)
    RETURN_STM      reduce using rule 10 (var_declaration)
    T_INT           reduce using rule 10 (var_declaration)
    T_FLOAT         reduce using rule 10 (var_declaration)
    IF_STMT         reduce using rule 10 (var_declaration)
    FOR_STMT        reduce using rule 10 (var_declaration)
    OUTPUT_WRITE    reduce using rule 10 (var_declaration)
    OUTPUT_WRITELN  reduce using rule 10 (var_declaration)
    INPUT_READ      reduce using rule 10 (var_declaration)
    '('             reduce using rule 10 (var_declaration)
    '{'             reduce using rule 10 (var_declaration)
    '}'             reduce using rule 10 (var_declaration)
    '+'             reduce using rule 10 (var_declaration)
    '-'             reduce using rule 10 (var_declaration)
    '%'             reduce using rule 10 (var_declaration)
    '?'             reduce using rule 10 (var_declaration)
    '!'             reduce using rule 10 (var_declaration)


State 174

   57 number: NUM_INT •

    ')'         reduce using rule 57 (number)
    AND         reduce using rule 57 (number)
    OR          reduce using rule 57 (number)
    GREATER     reduce using rule 57 (number)
    GREATER_EQ  reduce using rule 57 (number)
    LESS        reduce using rule 57 (number)
    LESS_EQ     reduce using rule 57 (number)
    EQUAL       reduce using rule 57 (number)
    NOT_EQ      reduce using rule 57 (number)
    '+'         reduce using rule 57 (number)
    '-'         reduce using rule 57 (number)
    '*'         reduce using rule 57 (number)
    '/'         reduce using rule 57 (number)
    FILTER      reduce using rule 57 (number)
    MAP         reduce using rule 57 (number)
    ':'         reduce using rule 57 (number)


State 175

   58 number: NUM_FLOAT •

    ')'         reduce using rule 58 (number)
    AND         reduce using rule 58 (number)
    OR          reduce using rule 58 (number)
    GREATER     reduce using rule 58 (number)
    GREATER_EQ  reduce using rule 58 (number)
    LESS        reduce using rule 58 (number)
    LESS_EQ     reduce using rule 58 (number)
    EQUAL       reduce using rule 58 (number)
    NOT_EQ      reduce using rule 58 (number)
    '+'         reduce using rule 58 (number)
    '-'         reduce using rule 58 (number)
    '*'         reduce using rule 58 (number)
    '/'         reduce using rule 58 (number)
    FILTER      reduce using rule 58 (number)
    MAP         reduce using rule 58 (number)
    ':'         reduce using rule 58 (number)


State 176

   56 const: NIL_CNST •

    ')'         reduce using rule 56 (const)
    AND         reduce using rule 56 (const)
    OR          reduce using rule 56 (const)
    GREATER     reduce using rule 56 (const)
    GREATER_EQ  reduce using rule 56 (const)
    LESS        reduce using rule 56 (const)
    LESS_EQ     reduce using rule 56 (const)
    EQUAL       reduce using rule 56 (const)
    NOT_EQ      reduce using rule 56 (const)
    '+'         reduce using rule 56 (const)
    '-'         reduce using rule 56 (const)
    '*'         reduce using rule 56 (const)
    '/'         reduce using rule 56 (const)
    FILTER      reduce using rule 56 (const)
    MAP         reduce using rule 56 (const)
    ':'         reduce using rule 56 (const)


State 177

   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   54 expression: ID •

    '('  shift, and go to state 276

    ')'         reduce using rule 54 (expression)
    AND         reduce using rule 54 (expression)
    OR          reduce using rule 54 (expression)
    GREATER     reduce using rule 54 (expression)
    GREATER_EQ  reduce using rule 54 (expression)
    LESS        reduce using rule 54 (expression)
    LESS_EQ     reduce using rule 54 (expression)
    EQUAL       reduce using rule 54 (expression)
    NOT_EQ      reduce using rule 54 (expression)
    '+'         reduce using rule 54 (expression)
    '-'         reduce using rule 54 (expression)
    '*'         reduce using rule 54 (expression)
    '/'         reduce using rule 54 (expression)
    FILTER      reduce using rule 54 (expression)
    MAP         reduce using rule 54 (expression)
    ':'         reduce using rule 54 (expression)


State 178

   50 expression: '(' • expression ')'

    NUM_INT    shift, and go to state 157
    NUM_FLOAT  shift, and go to state 158
    NIL_CNST   shift, and go to state 159
    ID         shift, and go to state 160
    '('        shift, and go to state 161
    '+'        shift, and go to state 162
    '-'        shift, and go to state 163
    '%'        shift, and go to state 164
    '?'        shift, and go to state 165
    '!'        shift, and go to state 166

    func_calling      go to state 167
    expression        go to state 277
    const             go to state 168
    number            go to state 169
    single_operation  go to state 170
    arith_single      go to state 171
    lst_single        go to state 172


State 179

   76 arith_single: '+' • expression

    NUM_INT    shift, and go to state 174
    NUM_FLOAT  shift, and go to state 175
    NIL_CNST   shift, and go to state 176
    ID         shift, and go to state 177
    '('        shift, and go to state 178
    '+'        shift, and go to state 179
    '-'        shift, and go to state 180
    '%'        shift, and go to state 181
    '?'        shift, and go to state 182
    '!'        shift, and go to state 183

    func_calling      go to state 184
    expression        go to state 278
    const             go to state 186
    number            go to state 187
    single_operation  go to state 188
    arith_single      go to state 190
    lst_single        go to state 191


State 180

   77 arith_single: '-' • expression

    NUM_INT    shift, and go to state 174
    NUM_FLOAT  shift, and go to state 175
    NIL_CNST   shift, and go to state 176
    ID         shift, and go to state 177
    '('        shift, and go to state 178
    '+'        shift, and go to state 179
    '-'        shift, and go to state 180
    '%'        shift, and go to state 181
    '?'        shift, and go to state 182
    '!'        shift, and go to state 183

    func_calling      go to state 184
    expression        go to state 279
    const             go to state 186
    number            go to state 187
    single_operation  go to state 188
    arith_single      go to state 190
    lst_single        go to state 191


State 181

   78 lst_single: '%' • expression

    NUM_INT    shift, and go to state 174
    NUM_FLOAT  shift, and go to state 175
    NIL_CNST   shift, and go to state 176
    ID         shift, and go to state 177
    '('        shift, and go to state 178
    '+'        shift, and go to state 179
    '-'        shift, and go to state 180
    '%'        shift, and go to state 181
    '?'        shift, and go to state 182
    '!'        shift, and go to state 183

    func_calling      go to state 184
    expression        go to state 280
    const             go to state 186
    number            go to state 187
    single_operation  go to state 188
    arith_single      go to state 190
    lst_single        go to state 191


State 182

   79 lst_single: '?' • expression

    NUM_INT    shift, and go to state 174
    NUM_FLOAT  shift, and go to state 175
    NIL_CNST   shift, and go to state 176
    ID         shift, and go to state 177
    '('        shift, and go to state 178
    '+'        shift, and go to state 179
    '-'        shift, and go to state 180
    '%'        shift, and go to state 181
    '?'        shift, and go to state 182
    '!'        shift, and go to state 183

    func_calling      go to state 184
    expression        go to state 281
    const             go to state 186
    number            go to state 187
    single_operation  go to state 188
    arith_single      go to state 190
    lst_single        go to state 191


State 183

   70 single_operation: '!' • expression

    NUM_INT    shift, and go to state 174
    NUM_FLOAT  shift, and go to state 175
    NIL_CNST   shift, and go to state 176
    ID         shift, and go to state 177
    '('        shift, and go to state 178
    '+'        shift, and go to state 179
    '-'        shift, and go to state 180
    '%'        shift, and go to state 181
    '?'        shift, and go to state 182
    '!'        shift, and go to state 183

    func_calling      go to state 184
    expression        go to state 282
    const             go to state 186
    number            go to state 187
    single_operation  go to state 188
    arith_single      go to state 190
    lst_single        go to state 191


State 184

   51 expression: func_calling •

    ')'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)
    FILTER      reduce using rule 51 (expression)
    MAP         reduce using rule 51 (expression)
    ':'         reduce using rule 51 (expression)


State 185

   75 arith_binary: expression •
   80 lst_binary: expression • FILTER expression
   81           | expression • MAP expression
   82           | expression • ':' expression

    FILTER  shift, and go to state 283
    MAP     shift, and go to state 284
    ':'     shift, and go to state 285

    ')'         reduce using rule 75 (arith_binary)
    AND         reduce using rule 75 (arith_binary)
    OR          reduce using rule 75 (arith_binary)
    GREATER     reduce using rule 75 (arith_binary)
    GREATER_EQ  reduce using rule 75 (arith_binary)
    LESS        reduce using rule 75 (arith_binary)
    LESS_EQ     reduce using rule 75 (arith_binary)
    EQUAL       reduce using rule 75 (arith_binary)
    NOT_EQ      reduce using rule 75 (arith_binary)
    '+'         reduce using rule 75 (arith_binary)
    '-'         reduce using rule 75 (arith_binary)
    '*'         reduce using rule 75 (arith_binary)
    '/'         reduce using rule 75 (arith_binary)


State 186

   53 expression: const •

    ')'         reduce using rule 53 (expression)
    AND         reduce using rule 53 (expression)
    OR          reduce using rule 53 (expression)
    GREATER     reduce using rule 53 (expression)
    GREATER_EQ  reduce using rule 53 (expression)
    LESS        reduce using rule 53 (expression)
    LESS_EQ     reduce using rule 53 (expression)
    EQUAL       reduce using rule 53 (expression)
    NOT_EQ      reduce using rule 53 (expression)
    '+'         reduce using rule 53 (expression)
    '-'         reduce using rule 53 (expression)
    '*'         reduce using rule 53 (expression)
    '/'         reduce using rule 53 (expression)
    FILTER      reduce using rule 53 (expression)
    MAP         reduce using rule 53 (expression)
    ':'         reduce using rule 53 (expression)


State 187

   55 const: number •

    ')'         reduce using rule 55 (const)
    AND         reduce using rule 55 (const)
    OR          reduce using rule 55 (const)
    GREATER     reduce using rule 55 (const)
    GREATER_EQ  reduce using rule 55 (const)
    LESS        reduce using rule 55 (const)
    LESS_EQ     reduce using rule 55 (const)
    EQUAL       reduce using rule 55 (const)
    NOT_EQ      reduce using rule 55 (const)
    '+'         reduce using rule 55 (const)
    '-'         reduce using rule 55 (const)
    '*'         reduce using rule 55 (const)
    '/'         reduce using rule 55 (const)
    FILTER      reduce using rule 55 (const)
    MAP         reduce using rule 55 (const)
    ':'         reduce using rule 55 (const)


State 188

   52 expression: single_operation •

    ')'         reduce using rule 52 (expression)
    AND         reduce using rule 52 (expression)
    OR          reduce using rule 52 (expression)
    GREATER     reduce using rule 52 (expression)
    GREATER_EQ  reduce using rule 52 (expression)
    LESS        reduce using rule 52 (expression)
    LESS_EQ     reduce using rule 52 (expression)
    EQUAL       reduce using rule 52 (expression)
    NOT_EQ      reduce using rule 52 (expression)
    '+'         reduce using rule 52 (expression)
    '-'         reduce using rule 52 (expression)
    '*'         reduce using rule 52 (expression)
    '/'         reduce using rule 52 (expression)
    FILTER      reduce using rule 52 (expression)
    MAP         reduce using rule 52 (expression)
    ':'         reduce using rule 52 (expression)


State 189

   64 operation: arith_binary •
   71 arith_binary: arith_binary • '+' expression
   72             | arith_binary • '-' expression
   73             | arith_binary • '*' expression
   74             | arith_binary • '/' expression

    '+'  shift, and go to state 286
    '-'  shift, and go to state 287
    '*'  shift, and go to state 288
    '/'  shift, and go to state 289

    ')'         reduce using rule 64 (operation)
    AND         reduce using rule 64 (operation)
    OR          reduce using rule 64 (operation)
    GREATER     reduce using rule 64 (operation)
    GREATER_EQ  reduce using rule 64 (operation)
    LESS        reduce using rule 64 (operation)
    LESS_EQ     reduce using rule 64 (operation)
    EQUAL       reduce using rule 64 (operation)
    NOT_EQ      reduce using rule 64 (operation)


State 190

   68 single_operation: arith_single •

    ')'         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)
    '+'         reduce using rule 68 (single_operation)
    '-'         reduce using rule 68 (single_operation)
    '*'         reduce using rule 68 (single_operation)
    '/'         reduce using rule 68 (single_operation)
    FILTER      reduce using rule 68 (single_operation)
    MAP         reduce using rule 68 (single_operation)
    ':'         reduce using rule 68 (single_operation)


State 191

   69 single_operation: lst_single •

    ')'         reduce using rule 69 (single_operation)
    AND         reduce using rule 69 (single_operation)
    OR          reduce using rule 69 (single_operation)
    GREATER     reduce using rule 69 (single_operation)
    GREATER_EQ  reduce using rule 69 (single_operation)
    LESS        reduce using rule 69 (single_operation)
    LESS_EQ     reduce using rule 69 (single_operation)
    EQUAL       reduce using rule 69 (single_operation)
    NOT_EQ      reduce using rule 69 (single_operation)
    '+'         reduce using rule 69 (single_operation)
    '-'         reduce using rule 69 (single_operation)
    '*'         reduce using rule 69 (single_operation)
    '/'         reduce using rule 69 (single_operation)
    FILTER      reduce using rule 69 (single_operation)
    MAP         reduce using rule 69 (single_operation)
    ':'         reduce using rule 69 (single_operation)


State 192

   65 operation: lst_binary •

    ')'         reduce using rule 65 (operation)
    AND         reduce using rule 65 (operation)
    OR          reduce using rule 65 (operation)
    GREATER     reduce using rule 65 (operation)
    GREATER_EQ  reduce using rule 65 (operation)
    LESS        reduce using rule 65 (operation)
    LESS_EQ     reduce using rule 65 (operation)
    EQUAL       reduce using rule 65 (operation)
    NOT_EQ      reduce using rule 65 (operation)


State 193

   57 number: NUM_INT •

    ';'         reduce using rule 57 (number)
    AND         reduce using rule 57 (number)
    OR          reduce using rule 57 (number)
    GREATER     reduce using rule 57 (number)
    GREATER_EQ  reduce using rule 57 (number)
    LESS        reduce using rule 57 (number)
    LESS_EQ     reduce using rule 57 (number)
    EQUAL       reduce using rule 57 (number)
    NOT_EQ      reduce using rule 57 (number)


State 194

   58 number: NUM_FLOAT •

    ';'         reduce using rule 58 (number)
    AND         reduce using rule 58 (number)
    OR          reduce using rule 58 (number)
    GREATER     reduce using rule 58 (number)
    GREATER_EQ  reduce using rule 58 (number)
    LESS        reduce using rule 58 (number)
    LESS_EQ     reduce using rule 58 (number)
    EQUAL       reduce using rule 58 (number)
    NOT_EQ      reduce using rule 58 (number)


State 195

   56 const: NIL_CNST •

    ';'         reduce using rule 56 (const)
    AND         reduce using rule 56 (const)
    OR          reduce using rule 56 (const)
    GREATER     reduce using rule 56 (const)
    GREATER_EQ  reduce using rule 56 (const)
    LESS        reduce using rule 56 (const)
    LESS_EQ     reduce using rule 56 (const)
    EQUAL       reduce using rule 56 (const)
    NOT_EQ      reduce using rule 56 (const)


State 196

   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   54 expression: ID •

    '('  shift, and go to state 290

    ';'         reduce using rule 54 (expression)
    AND         reduce using rule 54 (expression)
    OR          reduce using rule 54 (expression)
    GREATER     reduce using rule 54 (expression)
    GREATER_EQ  reduce using rule 54 (expression)
    LESS        reduce using rule 54 (expression)
    LESS_EQ     reduce using rule 54 (expression)
    EQUAL       reduce using rule 54 (expression)
    NOT_EQ      reduce using rule 54 (expression)


State 197

   50 expression: '(' • expression ')'

    NUM_INT    shift, and go to state 157
    NUM_FLOAT  shift, and go to state 158
    NIL_CNST   shift, and go to state 159
    ID         shift, and go to state 160
    '('        shift, and go to state 161
    '+'        shift, and go to state 162
    '-'        shift, and go to state 163
    '%'        shift, and go to state 164
    '?'        shift, and go to state 165
    '!'        shift, and go to state 166

    func_calling      go to state 167
    expression        go to state 291
    const             go to state 168
    number            go to state 169
    single_operation  go to state 170
    arith_single      go to state 171
    lst_single        go to state 172


State 198

   76 arith_single: '+' • expression

    NUM_INT    shift, and go to state 193
    NUM_FLOAT  shift, and go to state 194
    NIL_CNST   shift, and go to state 195
    ID         shift, and go to state 196
    '('        shift, and go to state 197
    '+'        shift, and go to state 198
    '-'        shift, and go to state 199
    '%'        shift, and go to state 200
    '?'        shift, and go to state 201
    '!'        shift, and go to state 202

    func_calling      go to state 203
    expression        go to state 292
    const             go to state 204
    number            go to state 205
    single_operation  go to state 206
    arith_single      go to state 207
    lst_single        go to state 208


State 199

   77 arith_single: '-' • expression

    NUM_INT    shift, and go to state 193
    NUM_FLOAT  shift, and go to state 194
    NIL_CNST   shift, and go to state 195
    ID         shift, and go to state 196
    '('        shift, and go to state 197
    '+'        shift, and go to state 198
    '-'        shift, and go to state 199
    '%'        shift, and go to state 200
    '?'        shift, and go to state 201
    '!'        shift, and go to state 202

    func_calling      go to state 203
    expression        go to state 293
    const             go to state 204
    number            go to state 205
    single_operation  go to state 206
    arith_single      go to state 207
    lst_single        go to state 208


State 200

   78 lst_single: '%' • expression

    NUM_INT    shift, and go to state 193
    NUM_FLOAT  shift, and go to state 194
    NIL_CNST   shift, and go to state 195
    ID         shift, and go to state 196
    '('        shift, and go to state 197
    '+'        shift, and go to state 198
    '-'        shift, and go to state 199
    '%'        shift, and go to state 200
    '?'        shift, and go to state 201
    '!'        shift, and go to state 202

    func_calling      go to state 203
    expression        go to state 294
    const             go to state 204
    number            go to state 205
    single_operation  go to state 206
    arith_single      go to state 207
    lst_single        go to state 208


State 201

   79 lst_single: '?' • expression

    NUM_INT    shift, and go to state 193
    NUM_FLOAT  shift, and go to state 194
    NIL_CNST   shift, and go to state 195
    ID         shift, and go to state 196
    '('        shift, and go to state 197
    '+'        shift, and go to state 198
    '-'        shift, and go to state 199
    '%'        shift, and go to state 200
    '?'        shift, and go to state 201
    '!'        shift, and go to state 202

    func_calling      go to state 203
    expression        go to state 295
    const             go to state 204
    number            go to state 205
    single_operation  go to state 206
    arith_single      go to state 207
    lst_single        go to state 208


State 202

   70 single_operation: '!' • expression

    NUM_INT    shift, and go to state 193
    NUM_FLOAT  shift, and go to state 194
    NIL_CNST   shift, and go to state 195
    ID         shift, and go to state 196
    '('        shift, and go to state 197
    '+'        shift, and go to state 198
    '-'        shift, and go to state 199
    '%'        shift, and go to state 200
    '?'        shift, and go to state 201
    '!'        shift, and go to state 202

    func_calling      go to state 203
    expression        go to state 296
    const             go to state 204
    number            go to state 205
    single_operation  go to state 206
    arith_single      go to state 207
    lst_single        go to state 208


State 203

   51 expression: func_calling •

    ';'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)


State 204

   53 expression: const •

    ';'         reduce using rule 53 (expression)
    AND         reduce using rule 53 (expression)
    OR          reduce using rule 53 (expression)
    GREATER     reduce using rule 53 (expression)
    GREATER_EQ  reduce using rule 53 (expression)
    LESS        reduce using rule 53 (expression)
    LESS_EQ     reduce using rule 53 (expression)
    EQUAL       reduce using rule 53 (expression)
    NOT_EQ      reduce using rule 53 (expression)


State 205

   55 const: number •

    ';'         reduce using rule 55 (const)
    AND         reduce using rule 55 (const)
    OR          reduce using rule 55 (const)
    GREATER     reduce using rule 55 (const)
    GREATER_EQ  reduce using rule 55 (const)
    LESS        reduce using rule 55 (const)
    LESS_EQ     reduce using rule 55 (const)
    EQUAL       reduce using rule 55 (const)
    NOT_EQ      reduce using rule 55 (const)


State 206

   52 expression: single_operation •

    ';'         reduce using rule 52 (expression)
    AND         reduce using rule 52 (expression)
    OR          reduce using rule 52 (expression)
    GREATER     reduce using rule 52 (expression)
    GREATER_EQ  reduce using rule 52 (expression)
    LESS        reduce using rule 52 (expression)
    LESS_EQ     reduce using rule 52 (expression)
    EQUAL       reduce using rule 52 (expression)
    NOT_EQ      reduce using rule 52 (expression)


State 207

   68 single_operation: arith_single •

    ';'         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)


State 208

   69 single_operation: lst_single •

    ';'         reduce using rule 69 (single_operation)
    AND         reduce using rule 69 (single_operation)
    OR          reduce using rule 69 (single_operation)
    GREATER     reduce using rule 69 (single_operation)
    GREATER_EQ  reduce using rule 69 (single_operation)
    LESS        reduce using rule 69 (single_operation)
    LESS_EQ     reduce using rule 69 (single_operation)
    EQUAL       reduce using rule 69 (single_operation)
    NOT_EQ      reduce using rule 69 (single_operation)


State 209

   57 number: NUM_INT •

    ';'         reduce using rule 57 (number)
    AND         reduce using rule 57 (number)
    OR          reduce using rule 57 (number)
    GREATER     reduce using rule 57 (number)
    GREATER_EQ  reduce using rule 57 (number)
    LESS        reduce using rule 57 (number)
    LESS_EQ     reduce using rule 57 (number)
    EQUAL       reduce using rule 57 (number)
    NOT_EQ      reduce using rule 57 (number)
    '+'         reduce using rule 57 (number)
    '-'         reduce using rule 57 (number)
    '*'         reduce using rule 57 (number)
    '/'         reduce using rule 57 (number)


State 210

   58 number: NUM_FLOAT •

    ';'         reduce using rule 58 (number)
    AND         reduce using rule 58 (number)
    OR          reduce using rule 58 (number)
    GREATER     reduce using rule 58 (number)
    GREATER_EQ  reduce using rule 58 (number)
    LESS        reduce using rule 58 (number)
    LESS_EQ     reduce using rule 58 (number)
    EQUAL       reduce using rule 58 (number)
    NOT_EQ      reduce using rule 58 (number)
    '+'         reduce using rule 58 (number)
    '-'         reduce using rule 58 (number)
    '*'         reduce using rule 58 (number)
    '/'         reduce using rule 58 (number)


State 211

   56 const: NIL_CNST •

    ';'         reduce using rule 56 (const)
    AND         reduce using rule 56 (const)
    OR          reduce using rule 56 (const)
    GREATER     reduce using rule 56 (const)
    GREATER_EQ  reduce using rule 56 (const)
    LESS        reduce using rule 56 (const)
    LESS_EQ     reduce using rule 56 (const)
    EQUAL       reduce using rule 56 (const)
    NOT_EQ      reduce using rule 56 (const)
    '+'         reduce using rule 56 (const)
    '-'         reduce using rule 56 (const)
    '*'         reduce using rule 56 (const)
    '/'         reduce using rule 56 (const)


State 212

   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   54 expression: ID •

    '('  shift, and go to state 297

    ';'         reduce using rule 54 (expression)
    AND         reduce using rule 54 (expression)
    OR          reduce using rule 54 (expression)
    GREATER     reduce using rule 54 (expression)
    GREATER_EQ  reduce using rule 54 (expression)
    LESS        reduce using rule 54 (expression)
    LESS_EQ     reduce using rule 54 (expression)
    EQUAL       reduce using rule 54 (expression)
    NOT_EQ      reduce using rule 54 (expression)
    '+'         reduce using rule 54 (expression)
    '-'         reduce using rule 54 (expression)
    '*'         reduce using rule 54 (expression)
    '/'         reduce using rule 54 (expression)


State 213

   50 expression: '(' • expression ')'

    NUM_INT    shift, and go to state 157
    NUM_FLOAT  shift, and go to state 158
    NIL_CNST   shift, and go to state 159
    ID         shift, and go to state 160
    '('        shift, and go to state 161
    '+'        shift, and go to state 162
    '-'        shift, and go to state 163
    '%'        shift, and go to state 164
    '?'        shift, and go to state 165
    '!'        shift, and go to state 166

    func_calling      go to state 167
    expression        go to state 298
    const             go to state 168
    number            go to state 169
    single_operation  go to state 170
    arith_single      go to state 171
    lst_single        go to state 172


State 214

   76 arith_single: '+' • expression

    NUM_INT    shift, and go to state 209
    NUM_FLOAT  shift, and go to state 210
    NIL_CNST   shift, and go to state 211
    ID         shift, and go to state 212
    '('        shift, and go to state 213
    '+'        shift, and go to state 214
    '-'        shift, and go to state 215
    '%'        shift, and go to state 216
    '?'        shift, and go to state 217
    '!'        shift, and go to state 218

    func_calling      go to state 219
    expression        go to state 299
    const             go to state 220
    number            go to state 221
    single_operation  go to state 222
    arith_single      go to state 223
    lst_single        go to state 224


State 215

   77 arith_single: '-' • expression

    NUM_INT    shift, and go to state 209
    NUM_FLOAT  shift, and go to state 210
    NIL_CNST   shift, and go to state 211
    ID         shift, and go to state 212
    '('        shift, and go to state 213
    '+'        shift, and go to state 214
    '-'        shift, and go to state 215
    '%'        shift, and go to state 216
    '?'        shift, and go to state 217
    '!'        shift, and go to state 218

    func_calling      go to state 219
    expression        go to state 300
    const             go to state 220
    number            go to state 221
    single_operation  go to state 222
    arith_single      go to state 223
    lst_single        go to state 224


State 216

   78 lst_single: '%' • expression

    NUM_INT    shift, and go to state 209
    NUM_FLOAT  shift, and go to state 210
    NIL_CNST   shift, and go to state 211
    ID         shift, and go to state 212
    '('        shift, and go to state 213
    '+'        shift, and go to state 214
    '-'        shift, and go to state 215
    '%'        shift, and go to state 216
    '?'        shift, and go to state 217
    '!'        shift, and go to state 218

    func_calling      go to state 219
    expression        go to state 301
    const             go to state 220
    number            go to state 221
    single_operation  go to state 222
    arith_single      go to state 223
    lst_single        go to state 224


State 217

   79 lst_single: '?' • expression

    NUM_INT    shift, and go to state 209
    NUM_FLOAT  shift, and go to state 210
    NIL_CNST   shift, and go to state 211
    ID         shift, and go to state 212
    '('        shift, and go to state 213
    '+'        shift, and go to state 214
    '-'        shift, and go to state 215
    '%'        shift, and go to state 216
    '?'        shift, and go to state 217
    '!'        shift, and go to state 218

    func_calling      go to state 219
    expression        go to state 302
    const             go to state 220
    number            go to state 221
    single_operation  go to state 222
    arith_single      go to state 223
    lst_single        go to state 224


State 218

   70 single_operation: '!' • expression

    NUM_INT    shift, and go to state 209
    NUM_FLOAT  shift, and go to state 210
    NIL_CNST   shift, and go to state 211
    ID         shift, and go to state 212
    '('        shift, and go to state 213
    '+'        shift, and go to state 214
    '-'        shift, and go to state 215
    '%'        shift, and go to state 216
    '?'        shift, and go to state 217
    '!'        shift, and go to state 218

    func_calling      go to state 219
    expression        go to state 303
    const             go to state 220
    number            go to state 221
    single_operation  go to state 222
    arith_single      go to state 223
    lst_single        go to state 224


State 219

   51 expression: func_calling •

    ';'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)


State 220

   53 expression: const •

    ';'         reduce using rule 53 (expression)
    AND         reduce using rule 53 (expression)
    OR          reduce using rule 53 (expression)
    GREATER     reduce using rule 53 (expression)
    GREATER_EQ  reduce using rule 53 (expression)
    LESS        reduce using rule 53 (expression)
    LESS_EQ     reduce using rule 53 (expression)
    EQUAL       reduce using rule 53 (expression)
    NOT_EQ      reduce using rule 53 (expression)
    '+'         reduce using rule 53 (expression)
    '-'         reduce using rule 53 (expression)
    '*'         reduce using rule 53 (expression)
    '/'         reduce using rule 53 (expression)


State 221

   55 const: number •

    ';'         reduce using rule 55 (const)
    AND         reduce using rule 55 (const)
    OR          reduce using rule 55 (const)
    GREATER     reduce using rule 55 (const)
    GREATER_EQ  reduce using rule 55 (const)
    LESS        reduce using rule 55 (const)
    LESS_EQ     reduce using rule 55 (const)
    EQUAL       reduce using rule 55 (const)
    NOT_EQ      reduce using rule 55 (const)
    '+'         reduce using rule 55 (const)
    '-'         reduce using rule 55 (const)
    '*'         reduce using rule 55 (const)
    '/'         reduce using rule 55 (const)


State 222

   52 expression: single_operation •

    ';'         reduce using rule 52 (expression)
    AND         reduce using rule 52 (expression)
    OR          reduce using rule 52 (expression)
    GREATER     reduce using rule 52 (expression)
    GREATER_EQ  reduce using rule 52 (expression)
    LESS        reduce using rule 52 (expression)
    LESS_EQ     reduce using rule 52 (expression)
    EQUAL       reduce using rule 52 (expression)
    NOT_EQ      reduce using rule 52 (expression)
    '+'         reduce using rule 52 (expression)
    '-'         reduce using rule 52 (expression)
    '*'         reduce using rule 52 (expression)
    '/'         reduce using rule 52 (expression)


State 223

   68 single_operation: arith_single •

    ';'         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)
    '+'         reduce using rule 68 (single_operation)
    '-'         reduce using rule 68 (single_operation)
    '*'         reduce using rule 68 (single_operation)
    '/'         reduce using rule 68 (single_operation)


State 224

   69 single_operation: lst_single •

    ';'         reduce using rule 69 (single_operation)
    AND         reduce using rule 69 (single_operation)
    OR          reduce using rule 69 (single_operation)
    GREATER     reduce using rule 69 (single_operation)
    GREATER_EQ  reduce using rule 69 (single_operation)
    LESS        reduce using rule 69 (single_operation)
    LESS_EQ     reduce using rule 69 (single_operation)
    EQUAL       reduce using rule 69 (single_operation)
    NOT_EQ      reduce using rule 69 (single_operation)
    '+'         reduce using rule 69 (single_operation)
    '-'         reduce using rule 69 (single_operation)
    '*'         reduce using rule 69 (single_operation)
    '/'         reduce using rule 69 (single_operation)


State 225

   57 number: NUM_INT •

    ')'         reduce using rule 57 (number)
    ','         reduce using rule 57 (number)
    AND         reduce using rule 57 (number)
    OR          reduce using rule 57 (number)
    GREATER     reduce using rule 57 (number)
    GREATER_EQ  reduce using rule 57 (number)
    LESS        reduce using rule 57 (number)
    LESS_EQ     reduce using rule 57 (number)
    EQUAL       reduce using rule 57 (number)
    NOT_EQ      reduce using rule 57 (number)
    '+'         reduce using rule 57 (number)
    '-'         reduce using rule 57 (number)
    '*'         reduce using rule 57 (number)
    '/'         reduce using rule 57 (number)
    FILTER      reduce using rule 57 (number)
    MAP         reduce using rule 57 (number)
    ':'         reduce using rule 57 (number)


State 226

   58 number: NUM_FLOAT •

    ')'         reduce using rule 58 (number)
    ','         reduce using rule 58 (number)
    AND         reduce using rule 58 (number)
    OR          reduce using rule 58 (number)
    GREATER     reduce using rule 58 (number)
    GREATER_EQ  reduce using rule 58 (number)
    LESS        reduce using rule 58 (number)
    LESS_EQ     reduce using rule 58 (number)
    EQUAL       reduce using rule 58 (number)
    NOT_EQ      reduce using rule 58 (number)
    '+'         reduce using rule 58 (number)
    '-'         reduce using rule 58 (number)
    '*'         reduce using rule 58 (number)
    '/'         reduce using rule 58 (number)
    FILTER      reduce using rule 58 (number)
    MAP         reduce using rule 58 (number)
    ':'         reduce using rule 58 (number)


State 227

   56 const: NIL_CNST •

    ')'         reduce using rule 56 (const)
    ','         reduce using rule 56 (const)
    AND         reduce using rule 56 (const)
    OR          reduce using rule 56 (const)
    GREATER     reduce using rule 56 (const)
    GREATER_EQ  reduce using rule 56 (const)
    LESS        reduce using rule 56 (const)
    LESS_EQ     reduce using rule 56 (const)
    EQUAL       reduce using rule 56 (const)
    NOT_EQ      reduce using rule 56 (const)
    '+'         reduce using rule 56 (const)
    '-'         reduce using rule 56 (const)
    '*'         reduce using rule 56 (const)
    '/'         reduce using rule 56 (const)
    FILTER      reduce using rule 56 (const)
    MAP         reduce using rule 56 (const)
    ':'         reduce using rule 56 (const)


State 228

   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   54 expression: ID •

    '('  shift, and go to state 304

    ')'         reduce using rule 54 (expression)
    ','         reduce using rule 54 (expression)
    AND         reduce using rule 54 (expression)
    OR          reduce using rule 54 (expression)
    GREATER     reduce using rule 54 (expression)
    GREATER_EQ  reduce using rule 54 (expression)
    LESS        reduce using rule 54 (expression)
    LESS_EQ     reduce using rule 54 (expression)
    EQUAL       reduce using rule 54 (expression)
    NOT_EQ      reduce using rule 54 (expression)
    '+'         reduce using rule 54 (expression)
    '-'         reduce using rule 54 (expression)
    '*'         reduce using rule 54 (expression)
    '/'         reduce using rule 54 (expression)
    FILTER      reduce using rule 54 (expression)
    MAP         reduce using rule 54 (expression)
    ':'         reduce using rule 54 (expression)


State 229

   50 expression: '(' • expression ')'

    NUM_INT    shift, and go to state 157
    NUM_FLOAT  shift, and go to state 158
    NIL_CNST   shift, and go to state 159
    ID         shift, and go to state 160
    '('        shift, and go to state 161
    '+'        shift, and go to state 162
    '-'        shift, and go to state 163
    '%'        shift, and go to state 164
    '?'        shift, and go to state 165
    '!'        shift, and go to state 166

    func_calling      go to state 167
    expression        go to state 305
    const             go to state 168
    number            go to state 169
    single_operation  go to state 170
    arith_single      go to state 171
    lst_single        go to state 172


State 230

   76 arith_single: '+' • expression

    NUM_INT    shift, and go to state 225
    NUM_FLOAT  shift, and go to state 226
    NIL_CNST   shift, and go to state 227
    ID         shift, and go to state 228
    '('        shift, and go to state 229
    '+'        shift, and go to state 230
    '-'        shift, and go to state 231
    '%'        shift, and go to state 232
    '?'        shift, and go to state 233
    '!'        shift, and go to state 234

    func_calling      go to state 235
    expression        go to state 306
    const             go to state 237
    number            go to state 238
    single_operation  go to state 239
    arith_single      go to state 241
    lst_single        go to state 242


State 231

   77 arith_single: '-' • expression

    NUM_INT    shift, and go to state 225
    NUM_FLOAT  shift, and go to state 226
    NIL_CNST   shift, and go to state 227
    ID         shift, and go to state 228
    '('        shift, and go to state 229
    '+'        shift, and go to state 230
    '-'        shift, and go to state 231
    '%'        shift, and go to state 232
    '?'        shift, and go to state 233
    '!'        shift, and go to state 234

    func_calling      go to state 235
    expression        go to state 307
    const             go to state 237
    number            go to state 238
    single_operation  go to state 239
    arith_single      go to state 241
    lst_single        go to state 242


State 232

   78 lst_single: '%' • expression

    NUM_INT    shift, and go to state 225
    NUM_FLOAT  shift, and go to state 226
    NIL_CNST   shift, and go to state 227
    ID         shift, and go to state 228
    '('        shift, and go to state 229
    '+'        shift, and go to state 230
    '-'        shift, and go to state 231
    '%'        shift, and go to state 232
    '?'        shift, and go to state 233
    '!'        shift, and go to state 234

    func_calling      go to state 235
    expression        go to state 308
    const             go to state 237
    number            go to state 238
    single_operation  go to state 239
    arith_single      go to state 241
    lst_single        go to state 242


State 233

   79 lst_single: '?' • expression

    NUM_INT    shift, and go to state 225
    NUM_FLOAT  shift, and go to state 226
    NIL_CNST   shift, and go to state 227
    ID         shift, and go to state 228
    '('        shift, and go to state 229
    '+'        shift, and go to state 230
    '-'        shift, and go to state 231
    '%'        shift, and go to state 232
    '?'        shift, and go to state 233
    '!'        shift, and go to state 234

    func_calling      go to state 235
    expression        go to state 309
    const             go to state 237
    number            go to state 238
    single_operation  go to state 239
    arith_single      go to state 241
    lst_single        go to state 242


State 234

   70 single_operation: '!' • expression

    NUM_INT    shift, and go to state 225
    NUM_FLOAT  shift, and go to state 226
    NIL_CNST   shift, and go to state 227
    ID         shift, and go to state 228
    '('        shift, and go to state 229
    '+'        shift, and go to state 230
    '-'        shift, and go to state 231
    '%'        shift, and go to state 232
    '?'        shift, and go to state 233
    '!'        shift, and go to state 234

    func_calling      go to state 235
    expression        go to state 310
    const             go to state 237
    number            go to state 238
    single_operation  go to state 239
    arith_single      go to state 241
    lst_single        go to state 242


State 235

   51 expression: func_calling •

    ')'         reduce using rule 51 (expression)
    ','         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)
    FILTER      reduce using rule 51 (expression)
    MAP         reduce using rule 51 (expression)
    ':'         reduce using rule 51 (expression)


State 236

   75 arith_binary: expression •
   80 lst_binary: expression • FILTER expression
   81           | expression • MAP expression
   82           | expression • ':' expression

    FILTER  shift, and go to state 311
    MAP     shift, and go to state 312
    ':'     shift, and go to state 313

    ')'         reduce using rule 75 (arith_binary)
    ','         reduce using rule 75 (arith_binary)
    AND         reduce using rule 75 (arith_binary)
    OR          reduce using rule 75 (arith_binary)
    GREATER     reduce using rule 75 (arith_binary)
    GREATER_EQ  reduce using rule 75 (arith_binary)
    LESS        reduce using rule 75 (arith_binary)
    LESS_EQ     reduce using rule 75 (arith_binary)
    EQUAL       reduce using rule 75 (arith_binary)
    NOT_EQ      reduce using rule 75 (arith_binary)
    '+'         reduce using rule 75 (arith_binary)
    '-'         reduce using rule 75 (arith_binary)
    '*'         reduce using rule 75 (arith_binary)
    '/'         reduce using rule 75 (arith_binary)


State 237

   53 expression: const •

    ')'         reduce using rule 53 (expression)
    ','         reduce using rule 53 (expression)
    AND         reduce using rule 53 (expression)
    OR          reduce using rule 53 (expression)
    GREATER     reduce using rule 53 (expression)
    GREATER_EQ  reduce using rule 53 (expression)
    LESS        reduce using rule 53 (expression)
    LESS_EQ     reduce using rule 53 (expression)
    EQUAL       reduce using rule 53 (expression)
    NOT_EQ      reduce using rule 53 (expression)
    '+'         reduce using rule 53 (expression)
    '-'         reduce using rule 53 (expression)
    '*'         reduce using rule 53 (expression)
    '/'         reduce using rule 53 (expression)
    FILTER      reduce using rule 53 (expression)
    MAP         reduce using rule 53 (expression)
    ':'         reduce using rule 53 (expression)


State 238

   55 const: number •

    ')'         reduce using rule 55 (const)
    ','         reduce using rule 55 (const)
    AND         reduce using rule 55 (const)
    OR          reduce using rule 55 (const)
    GREATER     reduce using rule 55 (const)
    GREATER_EQ  reduce using rule 55 (const)
    LESS        reduce using rule 55 (const)
    LESS_EQ     reduce using rule 55 (const)
    EQUAL       reduce using rule 55 (const)
    NOT_EQ      reduce using rule 55 (const)
    '+'         reduce using rule 55 (const)
    '-'         reduce using rule 55 (const)
    '*'         reduce using rule 55 (const)
    '/'         reduce using rule 55 (const)
    FILTER      reduce using rule 55 (const)
    MAP         reduce using rule 55 (const)
    ':'         reduce using rule 55 (const)


State 239

   52 expression: single_operation •

    ')'         reduce using rule 52 (expression)
    ','         reduce using rule 52 (expression)
    AND         reduce using rule 52 (expression)
    OR          reduce using rule 52 (expression)
    GREATER     reduce using rule 52 (expression)
    GREATER_EQ  reduce using rule 52 (expression)
    LESS        reduce using rule 52 (expression)
    LESS_EQ     reduce using rule 52 (expression)
    EQUAL       reduce using rule 52 (expression)
    NOT_EQ      reduce using rule 52 (expression)
    '+'         reduce using rule 52 (expression)
    '-'         reduce using rule 52 (expression)
    '*'         reduce using rule 52 (expression)
    '/'         reduce using rule 52 (expression)
    FILTER      reduce using rule 52 (expression)
    MAP         reduce using rule 52 (expression)
    ':'         reduce using rule 52 (expression)


State 240

   64 operation: arith_binary •
   71 arith_binary: arith_binary • '+' expression
   72             | arith_binary • '-' expression
   73             | arith_binary • '*' expression
   74             | arith_binary • '/' expression

    '+'  shift, and go to state 314
    '-'  shift, and go to state 315
    '*'  shift, and go to state 316
    '/'  shift, and go to state 317

    ')'         reduce using rule 64 (operation)
    ','         reduce using rule 64 (operation)
    AND         reduce using rule 64 (operation)
    OR          reduce using rule 64 (operation)
    GREATER     reduce using rule 64 (operation)
    GREATER_EQ  reduce using rule 64 (operation)
    LESS        reduce using rule 64 (operation)
    LESS_EQ     reduce using rule 64 (operation)
    EQUAL       reduce using rule 64 (operation)
    NOT_EQ      reduce using rule 64 (operation)


State 241

   68 single_operation: arith_single •

    ')'         reduce using rule 68 (single_operation)
    ','         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)
    '+'         reduce using rule 68 (single_operation)
    '-'         reduce using rule 68 (single_operation)
    '*'         reduce using rule 68 (single_operation)
    '/'         reduce using rule 68 (single_operation)
    FILTER      reduce using rule 68 (single_operation)
    MAP         reduce using rule 68 (single_operation)
    ':'         reduce using rule 68 (single_operation)


State 242

   69 single_operation: lst_single •

    ')'         reduce using rule 69 (single_operation)
    ','         reduce using rule 69 (single_operation)
    AND         reduce using rule 69 (single_operation)
    OR          reduce using rule 69 (single_operation)
    GREATER     reduce using rule 69 (single_operation)
    GREATER_EQ  reduce using rule 69 (single_operation)
    LESS        reduce using rule 69 (single_operation)
    LESS_EQ     reduce using rule 69 (single_operation)
    EQUAL       reduce using rule 69 (single_operation)
    NOT_EQ      reduce using rule 69 (single_operation)
    '+'         reduce using rule 69 (single_operation)
    '-'         reduce using rule 69 (single_operation)
    '*'         reduce using rule 69 (single_operation)
    '/'         reduce using rule 69 (single_operation)
    FILTER      reduce using rule 69 (single_operation)
    MAP         reduce using rule 69 (single_operation)
    ':'         reduce using rule 69 (single_operation)


State 243

   65 operation: lst_binary •

    ')'         reduce using rule 65 (operation)
    ','         reduce using rule 65 (operation)
    AND         reduce using rule 65 (operation)
    OR          reduce using rule 65 (operation)
    GREATER     reduce using rule 65 (operation)
    GREATER_EQ  reduce using rule 65 (operation)
    LESS        reduce using rule 65 (operation)
    LESS_EQ     reduce using rule 65 (operation)
    EQUAL       reduce using rule 65 (operation)
    NOT_EQ      reduce using rule 65 (operation)


State 244

   67 operation: operation logical_op • expression

    NUM_INT    shift, and go to state 318
    NUM_FLOAT  shift, and go to state 319
    NIL_CNST   shift, and go to state 320
    ID         shift, and go to state 321
    '('        shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 329
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 245

   66 operation: operation relational_op • expression

    NUM_INT    shift, and go to state 318
    NUM_FLOAT  shift, and go to state 319
    NIL_CNST   shift, and go to state 320
    ID         shift, and go to state 321
    '('        shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 335
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 246

   67 operation: operation logical_op • expression

    NUM_INT    shift, and go to state 336
    NUM_FLOAT  shift, and go to state 337
    NIL_CNST   shift, and go to state 338
    ID         shift, and go to state 339
    '('        shift, and go to state 340
    '+'        shift, and go to state 341
    '-'        shift, and go to state 342
    '%'        shift, and go to state 343
    '?'        shift, and go to state 344
    '!'        shift, and go to state 345

    func_calling      go to state 346
    expression        go to state 347
    const             go to state 348
    number            go to state 349
    single_operation  go to state 350
    arith_single      go to state 351
    lst_single        go to state 352


State 247

   66 operation: operation relational_op • expression

    NUM_INT    shift, and go to state 336
    NUM_FLOAT  shift, and go to state 337
    NIL_CNST   shift, and go to state 338
    ID         shift, and go to state 339
    '('        shift, and go to state 340
    '+'        shift, and go to state 341
    '-'        shift, and go to state 342
    '%'        shift, and go to state 343
    '?'        shift, and go to state 344
    '!'        shift, and go to state 345

    func_calling      go to state 346
    expression        go to state 353
    const             go to state 348
    number            go to state 349
    single_operation  go to state 350
    arith_single      go to state 351
    lst_single        go to state 352


State 248

   32 command: error •

    error           reduce using rule 32 (command)
    NUM_INT         reduce using rule 32 (command)
    NUM_FLOAT       reduce using rule 32 (command)
    NIL_CNST        reduce using rule 32 (command)
    ID              reduce using rule 32 (command)
    RETURN_STM      reduce using rule 32 (command)
    T_INT           reduce using rule 32 (command)
    T_FLOAT         reduce using rule 32 (command)
    IF_STMT         reduce using rule 32 (command)
    ELSE_STMT       reduce using rule 32 (command)
    FOR_STMT        reduce using rule 32 (command)
    OUTPUT_WRITE    reduce using rule 32 (command)
    OUTPUT_WRITELN  reduce using rule 32 (command)
    INPUT_READ      reduce using rule 32 (command)
    '('             reduce using rule 32 (command)
    '{'             reduce using rule 32 (command)
    '}'             reduce using rule 32 (command)
    '+'             reduce using rule 32 (command)
    '-'             reduce using rule 32 (command)
    '%'             reduce using rule 32 (command)
    '?'             reduce using rule 32 (command)
    '!'             reduce using rule 32 (command)


State 249

   36 return_stmt: RETURN_STM • operation ';'

    NUM_INT    shift, and go to state 28
    NUM_FLOAT  shift, and go to state 29
    NIL_CNST   shift, and go to state 30
    ID         shift, and go to state 68
    '('        shift, and go to state 38
    '+'        shift, and go to state 39
    '-'        shift, and go to state 40
    '%'        shift, and go to state 41
    '?'        shift, and go to state 42
    '!'        shift, and go to state 43

    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    operation         go to state 354
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 250

   34 conditional_stmt: IF_STMT • '(' operation ')' command
   35                 | IF_STMT • '(' operation ')' command ELSE_STMT command

    '('  shift, and go to state 355


State 251

   37 iteration: FOR_STMT • '(' loop_condition ')' command

    '('  shift, and go to state 356


State 252

   42 output: OUTPUT_WRITE • '(' operation ')' ';'
   44       | OUTPUT_WRITE • '(' STRING ')' ';'

    '('  shift, and go to state 357


State 253

   43 output: OUTPUT_WRITELN • '(' operation ')' ';'
   45       | OUTPUT_WRITELN • '(' STRING ')' ';'

    '('  shift, and go to state 358


State 254

   46 input: INPUT_READ • '(' expression ')' ';'

    '('  shift, and go to state 359


State 255

   22 command: var_declaration •

    error           reduce using rule 22 (command)
    NUM_INT         reduce using rule 22 (command)
    NUM_FLOAT       reduce using rule 22 (command)
    NIL_CNST        reduce using rule 22 (command)
    ID              reduce using rule 22 (command)
    RETURN_STM      reduce using rule 22 (command)
    T_INT           reduce using rule 22 (command)
    T_FLOAT         reduce using rule 22 (command)
    IF_STMT         reduce using rule 22 (command)
    ELSE_STMT       reduce using rule 22 (command)
    FOR_STMT        reduce using rule 22 (command)
    OUTPUT_WRITE    reduce using rule 22 (command)
    OUTPUT_WRITELN  reduce using rule 22 (command)
    INPUT_READ      reduce using rule 22 (command)
    '('             reduce using rule 22 (command)
    '{'             reduce using rule 22 (command)
    '}'             reduce using rule 22 (command)
    '+'             reduce using rule 22 (command)
    '-'             reduce using rule 22 (command)
    '%'             reduce using rule 22 (command)
    '?'             reduce using rule 22 (command)
    '!'             reduce using rule 22 (command)


State 256

   10 var_declaration: unq_declaration • ';'

    ';'  shift, and go to state 360


State 257

   30 command: $@2 • '{' block_commands '}'

    '{'  shift, and go to state 361


State 258

   23 command: init_variable •

    error           reduce using rule 23 (command)
    NUM_INT         reduce using rule 23 (command)
    NUM_FLOAT       reduce using rule 23 (command)
    NIL_CNST        reduce using rule 23 (command)
    ID              reduce using rule 23 (command)
    RETURN_STM      reduce using rule 23 (command)
    T_INT           reduce using rule 23 (command)
    T_FLOAT         reduce using rule 23 (command)
    IF_STMT         reduce using rule 23 (command)
    ELSE_STMT       reduce using rule 23 (command)
    FOR_STMT        reduce using rule 23 (command)
    OUTPUT_WRITE    reduce using rule 23 (command)
    OUTPUT_WRITELN  reduce using rule 23 (command)
    INPUT_READ      reduce using rule 23 (command)
    '('             reduce using rule 23 (command)
    '{'             reduce using rule 23 (command)
    '}'             reduce using rule 23 (command)
    '+'             reduce using rule 23 (command)
    '-'             reduce using rule 23 (command)
    '%'             reduce using rule 23 (command)
    '?'             reduce using rule 23 (command)
    '!'             reduce using rule 23 (command)


State 259

   24 command: conditional_stmt •

    error           reduce using rule 24 (command)
    NUM_INT         reduce using rule 24 (command)
    NUM_FLOAT       reduce using rule 24 (command)
    NIL_CNST        reduce using rule 24 (command)
    ID              reduce using rule 24 (command)
    RETURN_STM      reduce using rule 24 (command)
    T_INT           reduce using rule 24 (command)
    T_FLOAT         reduce using rule 24 (command)
    IF_STMT         reduce using rule 24 (command)
    ELSE_STMT       reduce using rule 24 (command)
    FOR_STMT        reduce using rule 24 (command)
    OUTPUT_WRITE    reduce using rule 24 (command)
    OUTPUT_WRITELN  reduce using rule 24 (command)
    INPUT_READ      reduce using rule 24 (command)
    '('             reduce using rule 24 (command)
    '{'             reduce using rule 24 (command)
    '}'             reduce using rule 24 (command)
    '+'             reduce using rule 24 (command)
    '-'             reduce using rule 24 (command)
    '%'             reduce using rule 24 (command)
    '?'             reduce using rule 24 (command)
    '!'             reduce using rule 24 (command)


State 260

   25 command: return_stmt •

    error           reduce using rule 25 (command)
    NUM_INT         reduce using rule 25 (command)
    NUM_FLOAT       reduce using rule 25 (command)
    NIL_CNST        reduce using rule 25 (command)
    ID              reduce using rule 25 (command)
    RETURN_STM      reduce using rule 25 (command)
    T_INT           reduce using rule 25 (command)
    T_FLOAT         reduce using rule 25 (command)
    IF_STMT         reduce using rule 25 (command)
    ELSE_STMT       reduce using rule 25 (command)
    FOR_STMT        reduce using rule 25 (command)
    OUTPUT_WRITE    reduce using rule 25 (command)
    OUTPUT_WRITELN  reduce using rule 25 (command)
    INPUT_READ      reduce using rule 25 (command)
    '('             reduce using rule 25 (command)
    '{'             reduce using rule 25 (command)
    '}'             reduce using rule 25 (command)
    '+'             reduce using rule 25 (command)
    '-'             reduce using rule 25 (command)
    '%'             reduce using rule 25 (command)
    '?'             reduce using rule 25 (command)
    '!'             reduce using rule 25 (command)


State 261

   26 command: iteration •

    error           reduce using rule 26 (command)
    NUM_INT         reduce using rule 26 (command)
    NUM_FLOAT       reduce using rule 26 (command)
    NIL_CNST        reduce using rule 26 (command)
    ID              reduce using rule 26 (command)
    RETURN_STM      reduce using rule 26 (command)
    T_INT           reduce using rule 26 (command)
    T_FLOAT         reduce using rule 26 (command)
    IF_STMT         reduce using rule 26 (command)
    ELSE_STMT       reduce using rule 26 (command)
    FOR_STMT        reduce using rule 26 (command)
    OUTPUT_WRITE    reduce using rule 26 (command)
    OUTPUT_WRITELN  reduce using rule 26 (command)
    INPUT_READ      reduce using rule 26 (command)
    '('             reduce using rule 26 (command)
    '{'             reduce using rule 26 (command)
    '}'             reduce using rule 26 (command)
    '+'             reduce using rule 26 (command)
    '-'             reduce using rule 26 (command)
    '%'             reduce using rule 26 (command)
    '?'             reduce using rule 26 (command)
    '!'             reduce using rule 26 (command)


State 262

   33 init_variable: init_stmt • ';'

    ';'  shift, and go to state 362


State 263

   28 command: output •

    error           reduce using rule 28 (command)
    NUM_INT         reduce using rule 28 (command)
    NUM_FLOAT       reduce using rule 28 (command)
    NIL_CNST        reduce using rule 28 (command)
    ID              reduce using rule 28 (command)
    RETURN_STM      reduce using rule 28 (command)
    T_INT           reduce using rule 28 (command)
    T_FLOAT         reduce using rule 28 (command)
    IF_STMT         reduce using rule 28 (command)
    ELSE_STMT       reduce using rule 28 (command)
    FOR_STMT        reduce using rule 28 (command)
    OUTPUT_WRITE    reduce using rule 28 (command)
    OUTPUT_WRITELN  reduce using rule 28 (command)
    INPUT_READ      reduce using rule 28 (command)
    '('             reduce using rule 28 (command)
    '{'             reduce using rule 28 (command)
    '}'             reduce using rule 28 (command)
    '+'             reduce using rule 28 (command)
    '-'             reduce using rule 28 (command)
    '%'             reduce using rule 28 (command)
    '?'             reduce using rule 28 (command)
    '!'             reduce using rule 28 (command)


State 264

   27 command: input •

    error           reduce using rule 27 (command)
    NUM_INT         reduce using rule 27 (command)
    NUM_FLOAT       reduce using rule 27 (command)
    NIL_CNST        reduce using rule 27 (command)
    ID              reduce using rule 27 (command)
    RETURN_STM      reduce using rule 27 (command)
    T_INT           reduce using rule 27 (command)
    T_FLOAT         reduce using rule 27 (command)
    IF_STMT         reduce using rule 27 (command)
    ELSE_STMT       reduce using rule 27 (command)
    FOR_STMT        reduce using rule 27 (command)
    OUTPUT_WRITE    reduce using rule 27 (command)
    OUTPUT_WRITELN  reduce using rule 27 (command)
    INPUT_READ      reduce using rule 27 (command)
    '('             reduce using rule 27 (command)
    '{'             reduce using rule 27 (command)
    '}'             reduce using rule 27 (command)
    '+'             reduce using rule 27 (command)
    '-'             reduce using rule 27 (command)
    '%'             reduce using rule 27 (command)
    '?'             reduce using rule 27 (command)
    '!'             reduce using rule 27 (command)


State 265

   31 command: operation • ';'
   66 operation: operation • relational_op expression
   67          | operation • logical_op expression

    ';'         shift, and go to state 363
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    GREATER     shift, and go to state 91
    GREATER_EQ  shift, and go to state 92
    LESS        shift, and go to state 93
    LESS_EQ     shift, and go to state 94
    EQUAL       shift, and go to state 95
    NOT_EQ      shift, and go to state 96

    logical_op     go to state 97
    relational_op  go to state 98


State 266

   39 init_stmt: ID • '=' operation

    '='  shift, and go to state 364


State 267

   11 unq_declaration: type ID •

    ')'  reduce using rule 11 (unq_declaration)
    ','  reduce using rule 11 (unq_declaration)


State 268

   11 unq_declaration: type ID •

    ';'  reduce using rule 11 (unq_declaration)


State 269

   49 func_calling: ID '(' • $@3 calling_parameters $@4 ')'

    NUM_INT    reduce using rule 47 ($@3)
    NUM_FLOAT  reduce using rule 47 ($@3)
    NIL_CNST   reduce using rule 47 ($@3)
    ID         reduce using rule 47 ($@3)
    '('        reduce using rule 47 ($@3)
    ')'        reduce using rule 47 ($@3)
    '+'        reduce using rule 47 ($@3)
    '-'        reduce using rule 47 ($@3)
    '%'        reduce using rule 47 ($@3)
    '?'        reduce using rule 47 ($@3)
    '!'        reduce using rule 47 ($@3)

    $@3  go to state 365


State 270

   50 expression: '(' expression • ')'

    ')'  shift, and go to state 366


State 271

   76 arith_single: '+' expression •

    ')'  reduce using rule 76 (arith_single)


State 272

   77 arith_single: '-' expression •

    ')'  reduce using rule 77 (arith_single)


State 273

   78 lst_single: '%' expression •

    ')'  reduce using rule 78 (lst_single)


State 274

   79 lst_single: '?' expression •

    ')'  reduce using rule 79 (lst_single)


State 275

   70 single_operation: '!' expression •

    ')'  reduce using rule 70 (single_operation)


State 276

   49 func_calling: ID '(' • $@3 calling_parameters $@4 ')'

    NUM_INT    reduce using rule 47 ($@3)
    NUM_FLOAT  reduce using rule 47 ($@3)
    NIL_CNST   reduce using rule 47 ($@3)
    ID         reduce using rule 47 ($@3)
    '('        reduce using rule 47 ($@3)
    ')'        reduce using rule 47 ($@3)
    '+'        reduce using rule 47 ($@3)
    '-'        reduce using rule 47 ($@3)
    '%'        reduce using rule 47 ($@3)
    '?'        reduce using rule 47 ($@3)
    '!'        reduce using rule 47 ($@3)

    $@3  go to state 367


State 277

   50 expression: '(' expression • ')'

    ')'  shift, and go to state 368


State 278

   76 arith_single: '+' expression •

    ')'         reduce using rule 76 (arith_single)
    AND         reduce using rule 76 (arith_single)
    OR          reduce using rule 76 (arith_single)
    GREATER     reduce using rule 76 (arith_single)
    GREATER_EQ  reduce using rule 76 (arith_single)
    LESS        reduce using rule 76 (arith_single)
    LESS_EQ     reduce using rule 76 (arith_single)
    EQUAL       reduce using rule 76 (arith_single)
    NOT_EQ      reduce using rule 76 (arith_single)
    '+'         reduce using rule 76 (arith_single)
    '-'         reduce using rule 76 (arith_single)
    '*'         reduce using rule 76 (arith_single)
    '/'         reduce using rule 76 (arith_single)
    FILTER      reduce using rule 76 (arith_single)
    MAP         reduce using rule 76 (arith_single)
    ':'         reduce using rule 76 (arith_single)


State 279

   77 arith_single: '-' expression •

    ')'         reduce using rule 77 (arith_single)
    AND         reduce using rule 77 (arith_single)
    OR          reduce using rule 77 (arith_single)
    GREATER     reduce using rule 77 (arith_single)
    GREATER_EQ  reduce using rule 77 (arith_single)
    LESS        reduce using rule 77 (arith_single)
    LESS_EQ     reduce using rule 77 (arith_single)
    EQUAL       reduce using rule 77 (arith_single)
    NOT_EQ      reduce using rule 77 (arith_single)
    '+'         reduce using rule 77 (arith_single)
    '-'         reduce using rule 77 (arith_single)
    '*'         reduce using rule 77 (arith_single)
    '/'         reduce using rule 77 (arith_single)
    FILTER      reduce using rule 77 (arith_single)
    MAP         reduce using rule 77 (arith_single)
    ':'         reduce using rule 77 (arith_single)


State 280

   78 lst_single: '%' expression •

    ')'         reduce using rule 78 (lst_single)
    AND         reduce using rule 78 (lst_single)
    OR          reduce using rule 78 (lst_single)
    GREATER     reduce using rule 78 (lst_single)
    GREATER_EQ  reduce using rule 78 (lst_single)
    LESS        reduce using rule 78 (lst_single)
    LESS_EQ     reduce using rule 78 (lst_single)
    EQUAL       reduce using rule 78 (lst_single)
    NOT_EQ      reduce using rule 78 (lst_single)
    '+'         reduce using rule 78 (lst_single)
    '-'         reduce using rule 78 (lst_single)
    '*'         reduce using rule 78 (lst_single)
    '/'         reduce using rule 78 (lst_single)
    FILTER      reduce using rule 78 (lst_single)
    MAP         reduce using rule 78 (lst_single)
    ':'         reduce using rule 78 (lst_single)


State 281

   79 lst_single: '?' expression •

    ')'         reduce using rule 79 (lst_single)
    AND         reduce using rule 79 (lst_single)
    OR          reduce using rule 79 (lst_single)
    GREATER     reduce using rule 79 (lst_single)
    GREATER_EQ  reduce using rule 79 (lst_single)
    LESS        reduce using rule 79 (lst_single)
    LESS_EQ     reduce using rule 79 (lst_single)
    EQUAL       reduce using rule 79 (lst_single)
    NOT_EQ      reduce using rule 79 (lst_single)
    '+'         reduce using rule 79 (lst_single)
    '-'         reduce using rule 79 (lst_single)
    '*'         reduce using rule 79 (lst_single)
    '/'         reduce using rule 79 (lst_single)
    FILTER      reduce using rule 79 (lst_single)
    MAP         reduce using rule 79 (lst_single)
    ':'         reduce using rule 79 (lst_single)


State 282

   70 single_operation: '!' expression •

    ')'         reduce using rule 70 (single_operation)
    AND         reduce using rule 70 (single_operation)
    OR          reduce using rule 70 (single_operation)
    GREATER     reduce using rule 70 (single_operation)
    GREATER_EQ  reduce using rule 70 (single_operation)
    LESS        reduce using rule 70 (single_operation)
    LESS_EQ     reduce using rule 70 (single_operation)
    EQUAL       reduce using rule 70 (single_operation)
    NOT_EQ      reduce using rule 70 (single_operation)
    '+'         reduce using rule 70 (single_operation)
    '-'         reduce using rule 70 (single_operation)
    '*'         reduce using rule 70 (single_operation)
    '/'         reduce using rule 70 (single_operation)
    FILTER      reduce using rule 70 (single_operation)
    MAP         reduce using rule 70 (single_operation)
    ':'         reduce using rule 70 (single_operation)


State 283

   80 lst_binary: expression FILTER • expression

    NUM_INT    shift, and go to state 318
    NUM_FLOAT  shift, and go to state 319
    NIL_CNST   shift, and go to state 320
    ID         shift, and go to state 321
    '('        shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 369
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 284

   81 lst_binary: expression MAP • expression

    NUM_INT    shift, and go to state 318
    NUM_FLOAT  shift, and go to state 319
    NIL_CNST   shift, and go to state 320
    ID         shift, and go to state 321
    '('        shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 370
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 285

   82 lst_binary: expression ':' • expression

    NUM_INT    shift, and go to state 318
    NUM_FLOAT  shift, and go to state 319
    NIL_CNST   shift, and go to state 320
    ID         shift, and go to state 321
    '('        shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 371
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 286

   71 arith_binary: arith_binary '+' • expression

    NUM_INT    shift, and go to state 372
    NUM_FLOAT  shift, and go to state 373
    NIL_CNST   shift, and go to state 374
    ID         shift, and go to state 375
    '('        shift, and go to state 376
    '+'        shift, and go to state 377
    '-'        shift, and go to state 378
    '%'        shift, and go to state 379
    '?'        shift, and go to state 380
    '!'        shift, and go to state 381

    func_calling      go to state 382
    expression        go to state 383
    const             go to state 384
    number            go to state 385
    single_operation  go to state 386
    arith_single      go to state 387
    lst_single        go to state 388


State 287

   72 arith_binary: arith_binary '-' • expression

    NUM_INT    shift, and go to state 372
    NUM_FLOAT  shift, and go to state 373
    NIL_CNST   shift, and go to state 374
    ID         shift, and go to state 375
    '('        shift, and go to state 376
    '+'        shift, and go to state 377
    '-'        shift, and go to state 378
    '%'        shift, and go to state 379
    '?'        shift, and go to state 380
    '!'        shift, and go to state 381

    func_calling      go to state 382
    expression        go to state 389
    const             go to state 384
    number            go to state 385
    single_operation  go to state 386
    arith_single      go to state 387
    lst_single        go to state 388


State 288

   73 arith_binary: arith_binary '*' • expression

    NUM_INT    shift, and go to state 372
    NUM_FLOAT  shift, and go to state 373
    NIL_CNST   shift, and go to state 374
    ID         shift, and go to state 375
    '('        shift, and go to state 376
    '+'        shift, and go to state 377
    '-'        shift, and go to state 378
    '%'        shift, and go to state 379
    '?'        shift, and go to state 380
    '!'        shift, and go to state 381

    func_calling      go to state 382
    expression        go to state 390
    const             go to state 384
    number            go to state 385
    single_operation  go to state 386
    arith_single      go to state 387
    lst_single        go to state 388


State 289

   74 arith_binary: arith_binary '/' • expression

    NUM_INT    shift, and go to state 372
    NUM_FLOAT  shift, and go to state 373
    NIL_CNST   shift, and go to state 374
    ID         shift, and go to state 375
    '('        shift, and go to state 376
    '+'        shift, and go to state 377
    '-'        shift, and go to state 378
    '%'        shift, and go to state 379
    '?'        shift, and go to state 380
    '!'        shift, and go to state 381

    func_calling      go to state 382
    expression        go to state 391
    const             go to state 384
    number            go to state 385
    single_operation  go to state 386
    arith_single      go to state 387
    lst_single        go to state 388


State 290

   49 func_calling: ID '(' • $@3 calling_parameters $@4 ')'

    NUM_INT    reduce using rule 47 ($@3)
    NUM_FLOAT  reduce using rule 47 ($@3)
    NIL_CNST   reduce using rule 47 ($@3)
    ID         reduce using rule 47 ($@3)
    '('        reduce using rule 47 ($@3)
    ')'        reduce using rule 47 ($@3)
    '+'        reduce using rule 47 ($@3)
    '-'        reduce using rule 47 ($@3)
    '%'        reduce using rule 47 ($@3)
    '?'        reduce using rule 47 ($@3)
    '!'        reduce using rule 47 ($@3)

    $@3  go to state 392


State 291

   50 expression: '(' expression • ')'

    ')'  shift, and go to state 393


State 292

   76 arith_single: '+' expression •

    ';'         reduce using rule 76 (arith_single)
    AND         reduce using rule 76 (arith_single)
    OR          reduce using rule 76 (arith_single)
    GREATER     reduce using rule 76 (arith_single)
    GREATER_EQ  reduce using rule 76 (arith_single)
    LESS        reduce using rule 76 (arith_single)
    LESS_EQ     reduce using rule 76 (arith_single)
    EQUAL       reduce using rule 76 (arith_single)
    NOT_EQ      reduce using rule 76 (arith_single)


State 293

   77 arith_single: '-' expression •

    ';'         reduce using rule 77 (arith_single)
    AND         reduce using rule 77 (arith_single)
    OR          reduce using rule 77 (arith_single)
    GREATER     reduce using rule 77 (arith_single)
    GREATER_EQ  reduce using rule 77 (arith_single)
    LESS        reduce using rule 77 (arith_single)
    LESS_EQ     reduce using rule 77 (arith_single)
    EQUAL       reduce using rule 77 (arith_single)
    NOT_EQ      reduce using rule 77 (arith_single)


State 294

   78 lst_single: '%' expression •

    ';'         reduce using rule 78 (lst_single)
    AND         reduce using rule 78 (lst_single)
    OR          reduce using rule 78 (lst_single)
    GREATER     reduce using rule 78 (lst_single)
    GREATER_EQ  reduce using rule 78 (lst_single)
    LESS        reduce using rule 78 (lst_single)
    LESS_EQ     reduce using rule 78 (lst_single)
    EQUAL       reduce using rule 78 (lst_single)
    NOT_EQ      reduce using rule 78 (lst_single)


State 295

   79 lst_single: '?' expression •

    ';'         reduce using rule 79 (lst_single)
    AND         reduce using rule 79 (lst_single)
    OR          reduce using rule 79 (lst_single)
    GREATER     reduce using rule 79 (lst_single)
    GREATER_EQ  reduce using rule 79 (lst_single)
    LESS        reduce using rule 79 (lst_single)
    LESS_EQ     reduce using rule 79 (lst_single)
    EQUAL       reduce using rule 79 (lst_single)
    NOT_EQ      reduce using rule 79 (lst_single)


State 296

   70 single_operation: '!' expression •

    ';'         reduce using rule 70 (single_operation)
    AND         reduce using rule 70 (single_operation)
    OR          reduce using rule 70 (single_operation)
    GREATER     reduce using rule 70 (single_operation)
    GREATER_EQ  reduce using rule 70 (single_operation)
    LESS        reduce using rule 70 (single_operation)
    LESS_EQ     reduce using rule 70 (single_operation)
    EQUAL       reduce using rule 70 (single_operation)
    NOT_EQ      reduce using rule 70 (single_operation)


State 297

   49 func_calling: ID '(' • $@3 calling_parameters $@4 ')'

    NUM_INT    reduce using rule 47 ($@3)
    NUM_FLOAT  reduce using rule 47 ($@3)
    NIL_CNST   reduce using rule 47 ($@3)
    ID         reduce using rule 47 ($@3)
    '('        reduce using rule 47 ($@3)
    ')'        reduce using rule 47 ($@3)
    '+'        reduce using rule 47 ($@3)
    '-'        reduce using rule 47 ($@3)
    '%'        reduce using rule 47 ($@3)
    '?'        reduce using rule 47 ($@3)
    '!'        reduce using rule 47 ($@3)

    $@3  go to state 394


State 298

   50 expression: '(' expression • ')'

    ')'  shift, and go to state 395


State 299

   76 arith_single: '+' expression •

    ';'         reduce using rule 76 (arith_single)
    AND         reduce using rule 76 (arith_single)
    OR          reduce using rule 76 (arith_single)
    GREATER     reduce using rule 76 (arith_single)
    GREATER_EQ  reduce using rule 76 (arith_single)
    LESS        reduce using rule 76 (arith_single)
    LESS_EQ     reduce using rule 76 (arith_single)
    EQUAL       reduce using rule 76 (arith_single)
    NOT_EQ      reduce using rule 76 (arith_single)
    '+'         reduce using rule 76 (arith_single)
    '-'         reduce using rule 76 (arith_single)
    '*'         reduce using rule 76 (arith_single)
    '/'         reduce using rule 76 (arith_single)


State 300

   77 arith_single: '-' expression •

    ';'         reduce using rule 77 (arith_single)
    AND         reduce using rule 77 (arith_single)
    OR          reduce using rule 77 (arith_single)
    GREATER     reduce using rule 77 (arith_single)
    GREATER_EQ  reduce using rule 77 (arith_single)
    LESS        reduce using rule 77 (arith_single)
    LESS_EQ     reduce using rule 77 (arith_single)
    EQUAL       reduce using rule 77 (arith_single)
    NOT_EQ      reduce using rule 77 (arith_single)
    '+'         reduce using rule 77 (arith_single)
    '-'         reduce using rule 77 (arith_single)
    '*'         reduce using rule 77 (arith_single)
    '/'         reduce using rule 77 (arith_single)


State 301

   78 lst_single: '%' expression •

    ';'         reduce using rule 78 (lst_single)
    AND         reduce using rule 78 (lst_single)
    OR          reduce using rule 78 (lst_single)
    GREATER     reduce using rule 78 (lst_single)
    GREATER_EQ  reduce using rule 78 (lst_single)
    LESS        reduce using rule 78 (lst_single)
    LESS_EQ     reduce using rule 78 (lst_single)
    EQUAL       reduce using rule 78 (lst_single)
    NOT_EQ      reduce using rule 78 (lst_single)
    '+'         reduce using rule 78 (lst_single)
    '-'         reduce using rule 78 (lst_single)
    '*'         reduce using rule 78 (lst_single)
    '/'         reduce using rule 78 (lst_single)


State 302

   79 lst_single: '?' expression •

    ';'         reduce using rule 79 (lst_single)
    AND         reduce using rule 79 (lst_single)
    OR          reduce using rule 79 (lst_single)
    GREATER     reduce using rule 79 (lst_single)
    GREATER_EQ  reduce using rule 79 (lst_single)
    LESS        reduce using rule 79 (lst_single)
    LESS_EQ     reduce using rule 79 (lst_single)
    EQUAL       reduce using rule 79 (lst_single)
    NOT_EQ      reduce using rule 79 (lst_single)
    '+'         reduce using rule 79 (lst_single)
    '-'         reduce using rule 79 (lst_single)
    '*'         reduce using rule 79 (lst_single)
    '/'         reduce using rule 79 (lst_single)


State 303

   70 single_operation: '!' expression •

    ';'         reduce using rule 70 (single_operation)
    AND         reduce using rule 70 (single_operation)
    OR          reduce using rule 70 (single_operation)
    GREATER     reduce using rule 70 (single_operation)
    GREATER_EQ  reduce using rule 70 (single_operation)
    LESS        reduce using rule 70 (single_operation)
    LESS_EQ     reduce using rule 70 (single_operation)
    EQUAL       reduce using rule 70 (single_operation)
    NOT_EQ      reduce using rule 70 (single_operation)
    '+'         reduce using rule 70 (single_operation)
    '-'         reduce using rule 70 (single_operation)
    '*'         reduce using rule 70 (single_operation)
    '/'         reduce using rule 70 (single_operation)


State 304

   49 func_calling: ID '(' • $@3 calling_parameters $@4 ')'

    NUM_INT    reduce using rule 47 ($@3)
    NUM_FLOAT  reduce using rule 47 ($@3)
    NIL_CNST   reduce using rule 47 ($@3)
    ID         reduce using rule 47 ($@3)
    '('        reduce using rule 47 ($@3)
    ')'        reduce using rule 47 ($@3)
    '+'        reduce using rule 47 ($@3)
    '-'        reduce using rule 47 ($@3)
    '%'        reduce using rule 47 ($@3)
    '?'        reduce using rule 47 ($@3)
    '!'        reduce using rule 47 ($@3)

    $@3  go to state 396


State 305

   50 expression: '(' expression • ')'

    ')'  shift, and go to state 397


State 306

   76 arith_single: '+' expression •

    ')'         reduce using rule 76 (arith_single)
    ','         reduce using rule 76 (arith_single)
    AND         reduce using rule 76 (arith_single)
    OR          reduce using rule 76 (arith_single)
    GREATER     reduce using rule 76 (arith_single)
    GREATER_EQ  reduce using rule 76 (arith_single)
    LESS        reduce using rule 76 (arith_single)
    LESS_EQ     reduce using rule 76 (arith_single)
    EQUAL       reduce using rule 76 (arith_single)
    NOT_EQ      reduce using rule 76 (arith_single)
    '+'         reduce using rule 76 (arith_single)
    '-'         reduce using rule 76 (arith_single)
    '*'         reduce using rule 76 (arith_single)
    '/'         reduce using rule 76 (arith_single)
    FILTER      reduce using rule 76 (arith_single)
    MAP         reduce using rule 76 (arith_single)
    ':'         reduce using rule 76 (arith_single)


State 307

   77 arith_single: '-' expression •

    ')'         reduce using rule 77 (arith_single)
    ','         reduce using rule 77 (arith_single)
    AND         reduce using rule 77 (arith_single)
    OR          reduce using rule 77 (arith_single)
    GREATER     reduce using rule 77 (arith_single)
    GREATER_EQ  reduce using rule 77 (arith_single)
    LESS        reduce using rule 77 (arith_single)
    LESS_EQ     reduce using rule 77 (arith_single)
    EQUAL       reduce using rule 77 (arith_single)
    NOT_EQ      reduce using rule 77 (arith_single)
    '+'         reduce using rule 77 (arith_single)
    '-'         reduce using rule 77 (arith_single)
    '*'         reduce using rule 77 (arith_single)
    '/'         reduce using rule 77 (arith_single)
    FILTER      reduce using rule 77 (arith_single)
    MAP         reduce using rule 77 (arith_single)
    ':'         reduce using rule 77 (arith_single)


State 308

   78 lst_single: '%' expression •

    ')'         reduce using rule 78 (lst_single)
    ','         reduce using rule 78 (lst_single)
    AND         reduce using rule 78 (lst_single)
    OR          reduce using rule 78 (lst_single)
    GREATER     reduce using rule 78 (lst_single)
    GREATER_EQ  reduce using rule 78 (lst_single)
    LESS        reduce using rule 78 (lst_single)
    LESS_EQ     reduce using rule 78 (lst_single)
    EQUAL       reduce using rule 78 (lst_single)
    NOT_EQ      reduce using rule 78 (lst_single)
    '+'         reduce using rule 78 (lst_single)
    '-'         reduce using rule 78 (lst_single)
    '*'         reduce using rule 78 (lst_single)
    '/'         reduce using rule 78 (lst_single)
    FILTER      reduce using rule 78 (lst_single)
    MAP         reduce using rule 78 (lst_single)
    ':'         reduce using rule 78 (lst_single)


State 309

   79 lst_single: '?' expression •

    ')'         reduce using rule 79 (lst_single)
    ','         reduce using rule 79 (lst_single)
    AND         reduce using rule 79 (lst_single)
    OR          reduce using rule 79 (lst_single)
    GREATER     reduce using rule 79 (lst_single)
    GREATER_EQ  reduce using rule 79 (lst_single)
    LESS        reduce using rule 79 (lst_single)
    LESS_EQ     reduce using rule 79 (lst_single)
    EQUAL       reduce using rule 79 (lst_single)
    NOT_EQ      reduce using rule 79 (lst_single)
    '+'         reduce using rule 79 (lst_single)
    '-'         reduce using rule 79 (lst_single)
    '*'         reduce using rule 79 (lst_single)
    '/'         reduce using rule 79 (lst_single)
    FILTER      reduce using rule 79 (lst_single)
    MAP         reduce using rule 79 (lst_single)
    ':'         reduce using rule 79 (lst_single)


State 310

   70 single_operation: '!' expression •

    ')'         reduce using rule 70 (single_operation)
    ','         reduce using rule 70 (single_operation)
    AND         reduce using rule 70 (single_operation)
    OR          reduce using rule 70 (single_operation)
    GREATER     reduce using rule 70 (single_operation)
    GREATER_EQ  reduce using rule 70 (single_operation)
    LESS        reduce using rule 70 (single_operation)
    LESS_EQ     reduce using rule 70 (single_operation)
    EQUAL       reduce using rule 70 (single_operation)
    NOT_EQ      reduce using rule 70 (single_operation)
    '+'         reduce using rule 70 (single_operation)
    '-'         reduce using rule 70 (single_operation)
    '*'         reduce using rule 70 (single_operation)
    '/'         reduce using rule 70 (single_operation)
    FILTER      reduce using rule 70 (single_operation)
    MAP         reduce using rule 70 (single_operation)
    ':'         reduce using rule 70 (single_operation)


State 311

   80 lst_binary: expression FILTER • expression

    NUM_INT    shift, and go to state 336
    NUM_FLOAT  shift, and go to state 337
    NIL_CNST   shift, and go to state 338
    ID         shift, and go to state 339
    '('        shift, and go to state 340
    '+'        shift, and go to state 341
    '-'        shift, and go to state 342
    '%'        shift, and go to state 343
    '?'        shift, and go to state 344
    '!'        shift, and go to state 345

    func_calling      go to state 346
    expression        go to state 398
    const             go to state 348
    number            go to state 349
    single_operation  go to state 350
    arith_single      go to state 351
    lst_single        go to state 352


State 312

   81 lst_binary: expression MAP • expression

    NUM_INT    shift, and go to state 336
    NUM_FLOAT  shift, and go to state 337
    NIL_CNST   shift, and go to state 338
    ID         shift, and go to state 339
    '('        shift, and go to state 340
    '+'        shift, and go to state 341
    '-'        shift, and go to state 342
    '%'        shift, and go to state 343
    '?'        shift, and go to state 344
    '!'        shift, and go to state 345

    func_calling      go to state 346
    expression        go to state 399
    const             go to state 348
    number            go to state 349
    single_operation  go to state 350
    arith_single      go to state 351
    lst_single        go to state 352


State 313

   82 lst_binary: expression ':' • expression

    NUM_INT    shift, and go to state 336
    NUM_FLOAT  shift, and go to state 337
    NIL_CNST   shift, and go to state 338
    ID         shift, and go to state 339
    '('        shift, and go to state 340
    '+'        shift, and go to state 341
    '-'        shift, and go to state 342
    '%'        shift, and go to state 343
    '?'        shift, and go to state 344
    '!'        shift, and go to state 345

    func_calling      go to state 346
    expression        go to state 400
    const             go to state 348
    number            go to state 349
    single_operation  go to state 350
    arith_single      go to state 351
    lst_single        go to state 352


State 314

   71 arith_binary: arith_binary '+' • expression

    NUM_INT    shift, and go to state 401
    NUM_FLOAT  shift, and go to state 402
    NIL_CNST   shift, and go to state 403
    ID         shift, and go to state 404
    '('        shift, and go to state 405
    '+'        shift, and go to state 406
    '-'        shift, and go to state 407
    '%'        shift, and go to state 408
    '?'        shift, and go to state 409
    '!'        shift, and go to state 410

    func_calling      go to state 411
    expression        go to state 412
    const             go to state 413
    number            go to state 414
    single_operation  go to state 415
    arith_single      go to state 416
    lst_single        go to state 417


State 315

   72 arith_binary: arith_binary '-' • expression

    NUM_INT    shift, and go to state 401
    NUM_FLOAT  shift, and go to state 402
    NIL_CNST   shift, and go to state 403
    ID         shift, and go to state 404
    '('        shift, and go to state 405
    '+'        shift, and go to state 406
    '-'        shift, and go to state 407
    '%'        shift, and go to state 408
    '?'        shift, and go to state 409
    '!'        shift, and go to state 410

    func_calling      go to state 411
    expression        go to state 418
    const             go to state 413
    number            go to state 414
    single_operation  go to state 415
    arith_single      go to state 416
    lst_single        go to state 417


State 316

   73 arith_binary: arith_binary '*' • expression

    NUM_INT    shift, and go to state 401
    NUM_FLOAT  shift, and go to state 402
    NIL_CNST   shift, and go to state 403
    ID         shift, and go to state 404
    '('        shift, and go to state 405
    '+'        shift, and go to state 406
    '-'        shift, and go to state 407
    '%'        shift, and go to state 408
    '?'        shift, and go to state 409
    '!'        shift, and go to state 410

    func_calling      go to state 411
    expression        go to state 419
    const             go to state 413
    number            go to state 414
    single_operation  go to state 415
    arith_single      go to state 416
    lst_single        go to state 417


State 317

   74 arith_binary: arith_binary '/' • expression

    NUM_INT    shift, and go to state 401
    NUM_FLOAT  shift, and go to state 402
    NIL_CNST   shift, and go to state 403
    ID         shift, and go to state 404
    '('        shift, and go to state 405
    '+'        shift, and go to state 406
    '-'        shift, and go to state 407
    '%'        shift, and go to state 408
    '?'        shift, and go to state 409
    '!'        shift, and go to state 410

    func_calling      go to state 411
    expression        go to state 420
    const             go to state 413
    number            go to state 414
    single_operation  go to state 415
    arith_single      go to state 416
    lst_single        go to state 417


State 318

   57 number: NUM_INT •

    ')'         reduce using rule 57 (number)
    AND         reduce using rule 57 (number)
    OR          reduce using rule 57 (number)
    GREATER     reduce using rule 57 (number)
    GREATER_EQ  reduce using rule 57 (number)
    LESS        reduce using rule 57 (number)
    LESS_EQ     reduce using rule 57 (number)
    EQUAL       reduce using rule 57 (number)
    NOT_EQ      reduce using rule 57 (number)


State 319

   58 number: NUM_FLOAT •

    ')'         reduce using rule 58 (number)
    AND         reduce using rule 58 (number)
    OR          reduce using rule 58 (number)
    GREATER     reduce using rule 58 (number)
    GREATER_EQ  reduce using rule 58 (number)
    LESS        reduce using rule 58 (number)
    LESS_EQ     reduce using rule 58 (number)
    EQUAL       reduce using rule 58 (number)
    NOT_EQ      reduce using rule 58 (number)


State 320

   56 const: NIL_CNST •

    ')'         reduce using rule 56 (const)
    AND         reduce using rule 56 (const)
    OR          reduce using rule 56 (const)
    GREATER     reduce using rule 56 (const)
    GREATER_EQ  reduce using rule 56 (const)
    LESS        reduce using rule 56 (const)
    LESS_EQ     reduce using rule 56 (const)
    EQUAL       reduce using rule 56 (const)
    NOT_EQ      reduce using rule 56 (const)


State 321

   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   54 expression: ID •

    '('  shift, and go to state 421

    ')'         reduce using rule 54 (expression)
    AND         reduce using rule 54 (expression)
    OR          reduce using rule 54 (expression)
    GREATER     reduce using rule 54 (expression)
    GREATER_EQ  reduce using rule 54 (expression)
    LESS        reduce using rule 54 (expression)
    LESS_EQ     reduce using rule 54 (expression)
    EQUAL       reduce using rule 54 (expression)
    NOT_EQ      reduce using rule 54 (expression)


State 322

   50 expression: '(' • expression ')'

    NUM_INT    shift, and go to state 157
    NUM_FLOAT  shift, and go to state 158
    NIL_CNST   shift, and go to state 159
    ID         shift, and go to state 160
    '('        shift, and go to state 161
    '+'        shift, and go to state 162
    '-'        shift, and go to state 163
    '%'        shift, and go to state 164
    '?'        shift, and go to state 165
    '!'        shift, and go to state 166

    func_calling      go to state 167
    expression        go to state 422
    const             go to state 168
    number            go to state 169
    single_operation  go to state 170
    arith_single      go to state 171
    lst_single        go to state 172


State 323

   76 arith_single: '+' • expression

    NUM_INT    shift, and go to state 318
    NUM_FLOAT  shift, and go to state 319
    NIL_CNST   shift, and go to state 320
    ID         shift, and go to state 321
    '('        shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 423
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 324

   77 arith_single: '-' • expression

    NUM_INT    shift, and go to state 318
    NUM_FLOAT  shift, and go to state 319
    NIL_CNST   shift, and go to state 320
    ID         shift, and go to state 321
    '('        shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 424
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 325

   78 lst_single: '%' • expression

    NUM_INT    shift, and go to state 318
    NUM_FLOAT  shift, and go to state 319
    NIL_CNST   shift, and go to state 320
    ID         shift, and go to state 321
    '('        shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 425
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 326

   79 lst_single: '?' • expression

    NUM_INT    shift, and go to state 318
    NUM_FLOAT  shift, and go to state 319
    NIL_CNST   shift, and go to state 320
    ID         shift, and go to state 321
    '('        shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 426
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 327

   70 single_operation: '!' • expression

    NUM_INT    shift, and go to state 318
    NUM_FLOAT  shift, and go to state 319
    NIL_CNST   shift, and go to state 320
    ID         shift, and go to state 321
    '('        shift, and go to state 322
    '+'        shift, and go to state 323
    '-'        shift, and go to state 324
    '%'        shift, and go to state 325
    '?'        shift, and go to state 326
    '!'        shift, and go to state 327

    func_calling      go to state 328
    expression        go to state 427
    const             go to state 330
    number            go to state 331
    single_operation  go to state 332
    arith_single      go to state 333
    lst_single        go to state 334


State 328

   51 expression: func_calling •

    ')'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)


State 329

   67 operation: operation logical_op expression •

    ')'         reduce using rule 67 (operation)
    AND         reduce using rule 67 (operation)
    OR          reduce using rule 67 (operation)
    GREATER     reduce using rule 67 (operation)
    GREATER_EQ  reduce using rule 67 (operation)
    LESS        reduce using rule 67 (operation)
    LESS_EQ     reduce using rule 67 (operation)
    EQUAL       reduce using rule 67 (operation)
    NOT_EQ      reduce using rule 67 (operation)


State 330

   53 expression: const •

    ')'         reduce using rule 53 (expression)
    AND         reduce using rule 53 (expression)
    OR          reduce using rule 53 (expression)
    GREATER     reduce using rule 53 (expression)
    GREATER_EQ  reduce using rule 53 (expression)
    LESS        reduce using rule 53 (expression)
    LESS_EQ     reduce using rule 53 (expression)
    EQUAL       reduce using rule 53 (expression)
    NOT_EQ      reduce using rule 53 (expression)


State 331

   55 const: number •

    ')'         reduce using rule 55 (const)
    AND         reduce using rule 55 (const)
    OR          reduce using rule 55 (const)
    GREATER     reduce using rule 55 (const)
    GREATER_EQ  reduce using rule 55 (const)
    LESS        reduce using rule 55 (const)
    LESS_EQ     reduce using rule 55 (const)
    EQUAL       reduce using rule 55 (const)
    NOT_EQ      reduce using rule 55 (const)


State 332

   52 expression: single_operation •

    ')'         reduce using rule 52 (expression)
    AND         reduce using rule 52 (expression)
    OR          reduce using rule 52 (expression)
    GREATER     reduce using rule 52 (expression)
    GREATER_EQ  reduce using rule 52 (expression)
    LESS        reduce using rule 52 (expression)
    LESS_EQ     reduce using rule 52 (expression)
    EQUAL       reduce using rule 52 (expression)
    NOT_EQ      reduce using rule 52 (expression)


State 333

   68 single_operation: arith_single •

    ')'         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)


State 334

   69 single_operation: lst_single •

    ')'         reduce using rule 69 (single_operation)
    AND         reduce using rule 69 (single_operation)
    OR          reduce using rule 69 (single_operation)
    GREATER     reduce using rule 69 (single_operation)
    GREATER_EQ  reduce using rule 69 (single_operation)
    LESS        reduce using rule 69 (single_operation)
    LESS_EQ     reduce using rule 69 (single_operation)
    EQUAL       reduce using rule 69 (single_operation)
    NOT_EQ      reduce using rule 69 (single_operation)


State 335

   66 operation: operation relational_op expression •

    ')'         reduce using rule 66 (operation)
    AND         reduce using rule 66 (operation)
    OR          reduce using rule 66 (operation)
    GREATER     reduce using rule 66 (operation)
    GREATER_EQ  reduce using rule 66 (operation)
    LESS        reduce using rule 66 (operation)
    LESS_EQ     reduce using rule 66 (operation)
    EQUAL       reduce using rule 66 (operation)
    NOT_EQ      reduce using rule 66 (operation)


State 336

   57 number: NUM_INT •

    ')'         reduce using rule 57 (number)
    ','         reduce using rule 57 (number)
    AND         reduce using rule 57 (number)
    OR          reduce using rule 57 (number)
    GREATER     reduce using rule 57 (number)
    GREATER_EQ  reduce using rule 57 (number)
    LESS        reduce using rule 57 (number)
    LESS_EQ     reduce using rule 57 (number)
    EQUAL       reduce using rule 57 (number)
    NOT_EQ      reduce using rule 57 (number)


State 337

   58 number: NUM_FLOAT •

    ')'         reduce using rule 58 (number)
    ','         reduce using rule 58 (number)
    AND         reduce using rule 58 (number)
    OR          reduce using rule 58 (number)
    GREATER     reduce using rule 58 (number)
    GREATER_EQ  reduce using rule 58 (number)
    LESS        reduce using rule 58 (number)
    LESS_EQ     reduce using rule 58 (number)
    EQUAL       reduce using rule 58 (number)
    NOT_EQ      reduce using rule 58 (number)


State 338

   56 const: NIL_CNST •

    ')'         reduce using rule 56 (const)
    ','         reduce using rule 56 (const)
    AND         reduce using rule 56 (const)
    OR          reduce using rule 56 (const)
    GREATER     reduce using rule 56 (const)
    GREATER_EQ  reduce using rule 56 (const)
    LESS        reduce using rule 56 (const)
    LESS_EQ     reduce using rule 56 (const)
    EQUAL       reduce using rule 56 (const)
    NOT_EQ      reduce using rule 56 (const)


State 339

   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   54 expression: ID •

    '('  shift, and go to state 428

    ')'         reduce using rule 54 (expression)
    ','         reduce using rule 54 (expression)
    AND         reduce using rule 54 (expression)
    OR          reduce using rule 54 (expression)
    GREATER     reduce using rule 54 (expression)
    GREATER_EQ  reduce using rule 54 (expression)
    LESS        reduce using rule 54 (expression)
    LESS_EQ     reduce using rule 54 (expression)
    EQUAL       reduce using rule 54 (expression)
    NOT_EQ      reduce using rule 54 (expression)


State 340

   50 expression: '(' • expression ')'

    NUM_INT    shift, and go to state 157
    NUM_FLOAT  shift, and go to state 158
    NIL_CNST   shift, and go to state 159
    ID         shift, and go to state 160
    '('        shift, and go to state 161
    '+'        shift, and go to state 162
    '-'        shift, and go to state 163
    '%'        shift, and go to state 164
    '?'        shift, and go to state 165
    '!'        shift, and go to state 166

    func_calling      go to state 167
    expression        go to state 429
    const             go to state 168
    number            go to state 169
    single_operation  go to state 170
    arith_single      go to state 171
    lst_single        go to state 172


State 341

   76 arith_single: '+' • expression

    NUM_INT    shift, and go to state 336
    NUM_FLOAT  shift, and go to state 337
    NIL_CNST   shift, and go to state 338
    ID         shift, and go to state 339
    '('        shift, and go to state 340
    '+'        shift, and go to state 341
    '-'        shift, and go to state 342
    '%'        shift, and go to state 343
    '?'        shift, and go to state 344
    '!'        shift, and go to state 345

    func_calling      go to state 346
    expression        go to state 430
    const             go to state 348
    number            go to state 349
    single_operation  go to state 350
    arith_single      go to state 351
    lst_single        go to state 352


State 342

   77 arith_single: '-' • expression

    NUM_INT    shift, and go to state 336
    NUM_FLOAT  shift, and go to state 337
    NIL_CNST   shift, and go to state 338
    ID         shift, and go to state 339
    '('        shift, and go to state 340
    '+'        shift, and go to state 341
    '-'        shift, and go to state 342
    '%'        shift, and go to state 343
    '?'        shift, and go to state 344
    '!'        shift, and go to state 345

    func_calling      go to state 346
    expression        go to state 431
    const             go to state 348
    number            go to state 349
    single_operation  go to state 350
    arith_single      go to state 351
    lst_single        go to state 352


State 343

   78 lst_single: '%' • expression

    NUM_INT    shift, and go to state 336
    NUM_FLOAT  shift, and go to state 337
    NIL_CNST   shift, and go to state 338
    ID         shift, and go to state 339
    '('        shift, and go to state 340
    '+'        shift, and go to state 341
    '-'        shift, and go to state 342
    '%'        shift, and go to state 343
    '?'        shift, and go to state 344
    '!'        shift, and go to state 345

    func_calling      go to state 346
    expression        go to state 432
    const             go to state 348
    number            go to state 349
    single_operation  go to state 350
    arith_single      go to state 351
    lst_single        go to state 352


State 344

   79 lst_single: '?' • expression

    NUM_INT    shift, and go to state 336
    NUM_FLOAT  shift, and go to state 337
    NIL_CNST   shift, and go to state 338
    ID         shift, and go to state 339
    '('        shift, and go to state 340
    '+'        shift, and go to state 341
    '-'        shift, and go to state 342
    '%'        shift, and go to state 343
    '?'        shift, and go to state 344
    '!'        shift, and go to state 345

    func_calling      go to state 346
    expression        go to state 433
    const             go to state 348
    number            go to state 349
    single_operation  go to state 350
    arith_single      go to state 351
    lst_single        go to state 352


State 345

   70 single_operation: '!' • expression

    NUM_INT    shift, and go to state 336
    NUM_FLOAT  shift, and go to state 337
    NIL_CNST   shift, and go to state 338
    ID         shift, and go to state 339
    '('        shift, and go to state 340
    '+'        shift, and go to state 341
    '-'        shift, and go to state 342
    '%'        shift, and go to state 343
    '?'        shift, and go to state 344
    '!'        shift, and go to state 345

    func_calling      go to state 346
    expression        go to state 434
    const             go to state 348
    number            go to state 349
    single_operation  go to state 350
    arith_single      go to state 351
    lst_single        go to state 352


State 346

   51 expression: func_calling •

    ')'         reduce using rule 51 (expression)
    ','         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)


State 347

   67 operation: operation logical_op expression •

    ')'         reduce using rule 67 (operation)
    ','         reduce using rule 67 (operation)
    AND         reduce using rule 67 (operation)
    OR          reduce using rule 67 (operation)
    GREATER     reduce using rule 67 (operation)
    GREATER_EQ  reduce using rule 67 (operation)
    LESS        reduce using rule 67 (operation)
    LESS_EQ     reduce using rule 67 (operation)
    EQUAL       reduce using rule 67 (operation)
    NOT_EQ      reduce using rule 67 (operation)


State 348

   53 expression: const •

    ')'         reduce using rule 53 (expression)
    ','         reduce using rule 53 (expression)
    AND         reduce using rule 53 (expression)
    OR          reduce using rule 53 (expression)
    GREATER     reduce using rule 53 (expression)
    GREATER_EQ  reduce using rule 53 (expression)
    LESS        reduce using rule 53 (expression)
    LESS_EQ     reduce using rule 53 (expression)
    EQUAL       reduce using rule 53 (expression)
    NOT_EQ      reduce using rule 53 (expression)


State 349

   55 const: number •

    ')'         reduce using rule 55 (const)
    ','         reduce using rule 55 (const)
    AND         reduce using rule 55 (const)
    OR          reduce using rule 55 (const)
    GREATER     reduce using rule 55 (const)
    GREATER_EQ  reduce using rule 55 (const)
    LESS        reduce using rule 55 (const)
    LESS_EQ     reduce using rule 55 (const)
    EQUAL       reduce using rule 55 (const)
    NOT_EQ      reduce using rule 55 (const)


State 350

   52 expression: single_operation •

    ')'         reduce using rule 52 (expression)
    ','         reduce using rule 52 (expression)
    AND         reduce using rule 52 (expression)
    OR          reduce using rule 52 (expression)
    GREATER     reduce using rule 52 (expression)
    GREATER_EQ  reduce using rule 52 (expression)
    LESS        reduce using rule 52 (expression)
    LESS_EQ     reduce using rule 52 (expression)
    EQUAL       reduce using rule 52 (expression)
    NOT_EQ      reduce using rule 52 (expression)


State 351

   68 single_operation: arith_single •

    ')'         reduce using rule 68 (single_operation)
    ','         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)


State 352

   69 single_operation: lst_single •

    ')'         reduce using rule 69 (single_operation)
    ','         reduce using rule 69 (single_operation)
    AND         reduce using rule 69 (single_operation)
    OR          reduce using rule 69 (single_operation)
    GREATER     reduce using rule 69 (single_operation)
    GREATER_EQ  reduce using rule 69 (single_operation)
    LESS        reduce using rule 69 (single_operation)
    LESS_EQ     reduce using rule 69 (single_operation)
    EQUAL       reduce using rule 69 (single_operation)
    NOT_EQ      reduce using rule 69 (single_operation)


State 353

   66 operation: operation relational_op expression •

    ')'         reduce using rule 66 (operation)
    ','         reduce using rule 66 (operation)
    AND         reduce using rule 66 (operation)
    OR          reduce using rule 66 (operation)
    GREATER     reduce using rule 66 (operation)
    GREATER_EQ  reduce using rule 66 (operation)
    LESS        reduce using rule 66 (operation)
    LESS_EQ     reduce using rule 66 (operation)
    EQUAL       reduce using rule 66 (operation)
    NOT_EQ      reduce using rule 66 (operation)


State 354

   36 return_stmt: RETURN_STM operation • ';'
   66 operation: operation • relational_op expression
   67          | operation • logical_op expression

    ';'         shift, and go to state 435
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    GREATER     shift, and go to state 91
    GREATER_EQ  shift, and go to state 92
    LESS        shift, and go to state 93
    LESS_EQ     shift, and go to state 94
    EQUAL       shift, and go to state 95
    NOT_EQ      shift, and go to state 96

    logical_op     go to state 97
    relational_op  go to state 98


State 355

   34 conditional_stmt: IF_STMT '(' • operation ')' command
   35                 | IF_STMT '(' • operation ')' command ELSE_STMT command

    NUM_INT    shift, and go to state 174
    NUM_FLOAT  shift, and go to state 175
    NIL_CNST   shift, and go to state 176
    ID         shift, and go to state 177
    '('        shift, and go to state 178
    '+'        shift, and go to state 179
    '-'        shift, and go to state 180
    '%'        shift, and go to state 181
    '?'        shift, and go to state 182
    '!'        shift, and go to state 183

    func_calling      go to state 184
    expression        go to state 185
    const             go to state 186
    number            go to state 187
    operation         go to state 436
    single_operation  go to state 188
    arith_binary      go to state 189
    arith_single      go to state 190
    lst_single        go to state 191
    lst_binary        go to state 192


State 356

   37 iteration: FOR_STMT '(' • loop_condition ')' command

    ID  shift, and go to state 107

    loop_condition  go to state 437
    init_stmt       go to state 109


State 357

   42 output: OUTPUT_WRITE '(' • operation ')' ';'
   44       | OUTPUT_WRITE '(' • STRING ')' ';'

    NUM_INT    shift, and go to state 174
    NUM_FLOAT  shift, and go to state 175
    STRING     shift, and go to state 438
    NIL_CNST   shift, and go to state 176
    ID         shift, and go to state 177
    '('        shift, and go to state 178
    '+'        shift, and go to state 179
    '-'        shift, and go to state 180
    '%'        shift, and go to state 181
    '?'        shift, and go to state 182
    '!'        shift, and go to state 183

    func_calling      go to state 184
    expression        go to state 185
    const             go to state 186
    number            go to state 187
    operation         go to state 439
    single_operation  go to state 188
    arith_binary      go to state 189
    arith_single      go to state 190
    lst_single        go to state 191
    lst_binary        go to state 192


State 358

   43 output: OUTPUT_WRITELN '(' • operation ')' ';'
   45       | OUTPUT_WRITELN '(' • STRING ')' ';'

    NUM_INT    shift, and go to state 174
    NUM_FLOAT  shift, and go to state 175
    STRING     shift, and go to state 440
    NIL_CNST   shift, and go to state 176
    ID         shift, and go to state 177
    '('        shift, and go to state 178
    '+'        shift, and go to state 179
    '-'        shift, and go to state 180
    '%'        shift, and go to state 181
    '?'        shift, and go to state 182
    '!'        shift, and go to state 183

    func_calling      go to state 184
    expression        go to state 185
    const             go to state 186
    number            go to state 187
    operation         go to state 441
    single_operation  go to state 188
    arith_binary      go to state 189
    arith_single      go to state 190
    lst_single        go to state 191
    lst_binary        go to state 192


State 359

   46 input: INPUT_READ '(' • expression ')' ';'

    NUM_INT    shift, and go to state 157
    NUM_FLOAT  shift, and go to state 158
    NIL_CNST   shift, and go to state 159
    ID         shift, and go to state 160
    '('        shift, and go to state 161
    '+'        shift, and go to state 162
    '-'        shift, and go to state 163
    '%'        shift, and go to state 164
    '?'        shift, and go to state 165
    '!'        shift, and go to state 166

    func_calling      go to state 167
    expression        go to state 442
    const             go to state 168
    number            go to state 169
    single_operation  go to state 170
    arith_single      go to state 171
    lst_single        go to state 172


State 360

   10 var_declaration: unq_declaration ';' •

    error           reduce using rule 10 (var_declaration)
    NUM_INT         reduce using rule 10 (var_declaration)
    NUM_FLOAT       reduce using rule 10 (var_declaration)
    NIL_CNST        reduce using rule 10 (var_declaration)
    ID              reduce using rule 10 (var_declaration)
    RETURN_STM      reduce using rule 10 (var_declaration)
    T_INT           reduce using rule 10 (var_declaration)
    T_FLOAT         reduce using rule 10 (var_declaration)
    IF_STMT         reduce using rule 10 (var_declaration)
    ELSE_STMT       reduce using rule 10 (var_declaration)
    FOR_STMT        reduce using rule 10 (var_declaration)
    OUTPUT_WRITE    reduce using rule 10 (var_declaration)
    OUTPUT_WRITELN  reduce using rule 10 (var_declaration)
    INPUT_READ      reduce using rule 10 (var_declaration)
    '('             reduce using rule 10 (var_declaration)
    '{'             reduce using rule 10 (var_declaration)
    '}'             reduce using rule 10 (var_declaration)
    '+'             reduce using rule 10 (var_declaration)
    '-'             reduce using rule 10 (var_declaration)
    '%'             reduce using rule 10 (var_declaration)
    '?'             reduce using rule 10 (var_declaration)
    '!'             reduce using rule 10 (var_declaration)


State 361

   30 command: $@2 '{' • block_commands '}'

    error           shift, and go to state 27
    NUM_INT         shift, and go to state 28
    NUM_FLOAT       shift, and go to state 29
    NIL_CNST        shift, and go to state 30
    ID              shift, and go to state 31
    RETURN_STM      shift, and go to state 32
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 33
    FOR_STMT        shift, and go to state 34
    OUTPUT_WRITE    shift, and go to state 35
    OUTPUT_WRITELN  shift, and go to state 36
    INPUT_READ      shift, and go to state 37
    '('             shift, and go to state 38
    '+'             shift, and go to state 39
    '-'             shift, and go to state 40
    '%'             shift, and go to state 41
    '?'             shift, and go to state 42
    '!'             shift, and go to state 43

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 44
    unq_declaration   go to state 45
    block_commands    go to state 443
    command           go to state 47
    $@2               go to state 48
    init_variable     go to state 49
    conditional_stmt  go to state 50
    return_stmt       go to state 51
    iteration         go to state 52
    init_stmt         go to state 53
    output            go to state 54
    input             go to state 55
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 156
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 60
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 362

   33 init_variable: init_stmt ';' •

    error           reduce using rule 33 (init_variable)
    NUM_INT         reduce using rule 33 (init_variable)
    NUM_FLOAT       reduce using rule 33 (init_variable)
    NIL_CNST        reduce using rule 33 (init_variable)
    ID              reduce using rule 33 (init_variable)
    RETURN_STM      reduce using rule 33 (init_variable)
    T_INT           reduce using rule 33 (init_variable)
    T_FLOAT         reduce using rule 33 (init_variable)
    IF_STMT         reduce using rule 33 (init_variable)
    ELSE_STMT       reduce using rule 33 (init_variable)
    FOR_STMT        reduce using rule 33 (init_variable)
    OUTPUT_WRITE    reduce using rule 33 (init_variable)
    OUTPUT_WRITELN  reduce using rule 33 (init_variable)
    INPUT_READ      reduce using rule 33 (init_variable)
    '('             reduce using rule 33 (init_variable)
    '{'             reduce using rule 33 (init_variable)
    '}'             reduce using rule 33 (init_variable)
    '+'             reduce using rule 33 (init_variable)
    '-'             reduce using rule 33 (init_variable)
    '%'             reduce using rule 33 (init_variable)
    '?'             reduce using rule 33 (init_variable)
    '!'             reduce using rule 33 (init_variable)


State 363

   31 command: operation ';' •

    error           reduce using rule 31 (command)
    NUM_INT         reduce using rule 31 (command)
    NUM_FLOAT       reduce using rule 31 (command)
    NIL_CNST        reduce using rule 31 (command)
    ID              reduce using rule 31 (command)
    RETURN_STM      reduce using rule 31 (command)
    T_INT           reduce using rule 31 (command)
    T_FLOAT         reduce using rule 31 (command)
    IF_STMT         reduce using rule 31 (command)
    ELSE_STMT       reduce using rule 31 (command)
    FOR_STMT        reduce using rule 31 (command)
    OUTPUT_WRITE    reduce using rule 31 (command)
    OUTPUT_WRITELN  reduce using rule 31 (command)
    INPUT_READ      reduce using rule 31 (command)
    '('             reduce using rule 31 (command)
    '{'             reduce using rule 31 (command)
    '}'             reduce using rule 31 (command)
    '+'             reduce using rule 31 (command)
    '-'             reduce using rule 31 (command)
    '%'             reduce using rule 31 (command)
    '?'             reduce using rule 31 (command)
    '!'             reduce using rule 31 (command)


State 364

   39 init_stmt: ID '=' • operation

    NUM_INT    shift, and go to state 174
    NUM_FLOAT  shift, and go to state 175
    NIL_CNST   shift, and go to state 176
    ID         shift, and go to state 177
    '('        shift, and go to state 178
    '+'        shift, and go to state 179
    '-'        shift, and go to state 180
    '%'        shift, and go to state 181
    '?'        shift, and go to state 182
    '!'        shift, and go to state 183

    func_calling      go to state 184
    expression        go to state 185
    const             go to state 186
    number            go to state 187
    operation         go to state 444
    single_operation  go to state 188
    arith_binary      go to state 189
    arith_single      go to state 190
    lst_single        go to state 191
    lst_binary        go to state 192


State 365

   49 func_calling: ID '(' $@3 • calling_parameters $@4 ')'

    NUM_INT    shift, and go to state 225
    NUM_FLOAT  shift, and go to state 226
    NIL_CNST   shift, and go to state 227
    ID         shift, and go to state 228
    '('        shift, and go to state 229
    '+'        shift, and go to state 230
    '-'        shift, and go to state 231
    '%'        shift, and go to state 232
    '?'        shift, and go to state 233
    '!'        shift, and go to state 234

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 445
    lst_calling_parameters  go to state 127
    func_calling            go to state 235
    expression              go to state 236
    const                   go to state 237
    number                  go to state 238
    operation               go to state 128
    single_operation        go to state 239
    arith_binary            go to state 240
    arith_single            go to state 241
    lst_single              go to state 242
    lst_binary              go to state 243


State 366

   50 expression: '(' expression ')' •

    ')'  reduce using rule 50 (expression)


State 367

   49 func_calling: ID '(' $@3 • calling_parameters $@4 ')'

    NUM_INT    shift, and go to state 225
    NUM_FLOAT  shift, and go to state 226
    NIL_CNST   shift, and go to state 227
    ID         shift, and go to state 228
    '('        shift, and go to state 229
    '+'        shift, and go to state 230
    '-'        shift, and go to state 231
    '%'        shift, and go to state 232
    '?'        shift, and go to state 233
    '!'        shift, and go to state 234

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 446
    lst_calling_parameters  go to state 127
    func_calling            go to state 235
    expression              go to state 236
    const                   go to state 237
    number                  go to state 238
    operation               go to state 128
    single_operation        go to state 239
    arith_binary            go to state 240
    arith_single            go to state 241
    lst_single              go to state 242
    lst_binary              go to state 243


State 368

   50 expression: '(' expression ')' •

    ')'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)
    FILTER      reduce using rule 50 (expression)
    MAP         reduce using rule 50 (expression)
    ':'         reduce using rule 50 (expression)


State 369

   80 lst_binary: expression FILTER expression •

    ')'         reduce using rule 80 (lst_binary)
    AND         reduce using rule 80 (lst_binary)
    OR          reduce using rule 80 (lst_binary)
    GREATER     reduce using rule 80 (lst_binary)
    GREATER_EQ  reduce using rule 80 (lst_binary)
    LESS        reduce using rule 80 (lst_binary)
    LESS_EQ     reduce using rule 80 (lst_binary)
    EQUAL       reduce using rule 80 (lst_binary)
    NOT_EQ      reduce using rule 80 (lst_binary)


State 370

   81 lst_binary: expression MAP expression •

    ')'         reduce using rule 81 (lst_binary)
    AND         reduce using rule 81 (lst_binary)
    OR          reduce using rule 81 (lst_binary)
    GREATER     reduce using rule 81 (lst_binary)
    GREATER_EQ  reduce using rule 81 (lst_binary)
    LESS        reduce using rule 81 (lst_binary)
    LESS_EQ     reduce using rule 81 (lst_binary)
    EQUAL       reduce using rule 81 (lst_binary)
    NOT_EQ      reduce using rule 81 (lst_binary)


State 371

   82 lst_binary: expression ':' expression •

    ')'         reduce using rule 82 (lst_binary)
    AND         reduce using rule 82 (lst_binary)
    OR          reduce using rule 82 (lst_binary)
    GREATER     reduce using rule 82 (lst_binary)
    GREATER_EQ  reduce using rule 82 (lst_binary)
    LESS        reduce using rule 82 (lst_binary)
    LESS_EQ     reduce using rule 82 (lst_binary)
    EQUAL       reduce using rule 82 (lst_binary)
    NOT_EQ      reduce using rule 82 (lst_binary)


State 372

   57 number: NUM_INT •

    ')'         reduce using rule 57 (number)
    AND         reduce using rule 57 (number)
    OR          reduce using rule 57 (number)
    GREATER     reduce using rule 57 (number)
    GREATER_EQ  reduce using rule 57 (number)
    LESS        reduce using rule 57 (number)
    LESS_EQ     reduce using rule 57 (number)
    EQUAL       reduce using rule 57 (number)
    NOT_EQ      reduce using rule 57 (number)
    '+'         reduce using rule 57 (number)
    '-'         reduce using rule 57 (number)
    '*'         reduce using rule 57 (number)
    '/'         reduce using rule 57 (number)


State 373

   58 number: NUM_FLOAT •

    ')'         reduce using rule 58 (number)
    AND         reduce using rule 58 (number)
    OR          reduce using rule 58 (number)
    GREATER     reduce using rule 58 (number)
    GREATER_EQ  reduce using rule 58 (number)
    LESS        reduce using rule 58 (number)
    LESS_EQ     reduce using rule 58 (number)
    EQUAL       reduce using rule 58 (number)
    NOT_EQ      reduce using rule 58 (number)
    '+'         reduce using rule 58 (number)
    '-'         reduce using rule 58 (number)
    '*'         reduce using rule 58 (number)
    '/'         reduce using rule 58 (number)


State 374

   56 const: NIL_CNST •

    ')'         reduce using rule 56 (const)
    AND         reduce using rule 56 (const)
    OR          reduce using rule 56 (const)
    GREATER     reduce using rule 56 (const)
    GREATER_EQ  reduce using rule 56 (const)
    LESS        reduce using rule 56 (const)
    LESS_EQ     reduce using rule 56 (const)
    EQUAL       reduce using rule 56 (const)
    NOT_EQ      reduce using rule 56 (const)
    '+'         reduce using rule 56 (const)
    '-'         reduce using rule 56 (const)
    '*'         reduce using rule 56 (const)
    '/'         reduce using rule 56 (const)


State 375

   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   54 expression: ID •

    '('  shift, and go to state 447

    ')'         reduce using rule 54 (expression)
    AND         reduce using rule 54 (expression)
    OR          reduce using rule 54 (expression)
    GREATER     reduce using rule 54 (expression)
    GREATER_EQ  reduce using rule 54 (expression)
    LESS        reduce using rule 54 (expression)
    LESS_EQ     reduce using rule 54 (expression)
    EQUAL       reduce using rule 54 (expression)
    NOT_EQ      reduce using rule 54 (expression)
    '+'         reduce using rule 54 (expression)
    '-'         reduce using rule 54 (expression)
    '*'         reduce using rule 54 (expression)
    '/'         reduce using rule 54 (expression)


State 376

   50 expression: '(' • expression ')'

    NUM_INT    shift, and go to state 157
    NUM_FLOAT  shift, and go to state 158
    NIL_CNST   shift, and go to state 159
    ID         shift, and go to state 160
    '('        shift, and go to state 161
    '+'        shift, and go to state 162
    '-'        shift, and go to state 163
    '%'        shift, and go to state 164
    '?'        shift, and go to state 165
    '!'        shift, and go to state 166

    func_calling      go to state 167
    expression        go to state 448
    const             go to state 168
    number            go to state 169
    single_operation  go to state 170
    arith_single      go to state 171
    lst_single        go to state 172


State 377

   76 arith_single: '+' • expression

    NUM_INT    shift, and go to state 372
    NUM_FLOAT  shift, and go to state 373
    NIL_CNST   shift, and go to state 374
    ID         shift, and go to state 375
    '('        shift, and go to state 376
    '+'        shift, and go to state 377
    '-'        shift, and go to state 378
    '%'        shift, and go to state 379
    '?'        shift, and go to state 380
    '!'        shift, and go to state 381

    func_calling      go to state 382
    expression        go to state 449
    const             go to state 384
    number            go to state 385
    single_operation  go to state 386
    arith_single      go to state 387
    lst_single        go to state 388


State 378

   77 arith_single: '-' • expression

    NUM_INT    shift, and go to state 372
    NUM_FLOAT  shift, and go to state 373
    NIL_CNST   shift, and go to state 374
    ID         shift, and go to state 375
    '('        shift, and go to state 376
    '+'        shift, and go to state 377
    '-'        shift, and go to state 378
    '%'        shift, and go to state 379
    '?'        shift, and go to state 380
    '!'        shift, and go to state 381

    func_calling      go to state 382
    expression        go to state 450
    const             go to state 384
    number            go to state 385
    single_operation  go to state 386
    arith_single      go to state 387
    lst_single        go to state 388


State 379

   78 lst_single: '%' • expression

    NUM_INT    shift, and go to state 372
    NUM_FLOAT  shift, and go to state 373
    NIL_CNST   shift, and go to state 374
    ID         shift, and go to state 375
    '('        shift, and go to state 376
    '+'        shift, and go to state 377
    '-'        shift, and go to state 378
    '%'        shift, and go to state 379
    '?'        shift, and go to state 380
    '!'        shift, and go to state 381

    func_calling      go to state 382
    expression        go to state 451
    const             go to state 384
    number            go to state 385
    single_operation  go to state 386
    arith_single      go to state 387
    lst_single        go to state 388


State 380

   79 lst_single: '?' • expression

    NUM_INT    shift, and go to state 372
    NUM_FLOAT  shift, and go to state 373
    NIL_CNST   shift, and go to state 374
    ID         shift, and go to state 375
    '('        shift, and go to state 376
    '+'        shift, and go to state 377
    '-'        shift, and go to state 378
    '%'        shift, and go to state 379
    '?'        shift, and go to state 380
    '!'        shift, and go to state 381

    func_calling      go to state 382
    expression        go to state 452
    const             go to state 384
    number            go to state 385
    single_operation  go to state 386
    arith_single      go to state 387
    lst_single        go to state 388


State 381

   70 single_operation: '!' • expression

    NUM_INT    shift, and go to state 372
    NUM_FLOAT  shift, and go to state 373
    NIL_CNST   shift, and go to state 374
    ID         shift, and go to state 375
    '('        shift, and go to state 376
    '+'        shift, and go to state 377
    '-'        shift, and go to state 378
    '%'        shift, and go to state 379
    '?'        shift, and go to state 380
    '!'        shift, and go to state 381

    func_calling      go to state 382
    expression        go to state 453
    const             go to state 384
    number            go to state 385
    single_operation  go to state 386
    arith_single      go to state 387
    lst_single        go to state 388


State 382

   51 expression: func_calling •

    ')'         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)


State 383

   71 arith_binary: arith_binary '+' expression •

    ')'         reduce using rule 71 (arith_binary)
    AND         reduce using rule 71 (arith_binary)
    OR          reduce using rule 71 (arith_binary)
    GREATER     reduce using rule 71 (arith_binary)
    GREATER_EQ  reduce using rule 71 (arith_binary)
    LESS        reduce using rule 71 (arith_binary)
    LESS_EQ     reduce using rule 71 (arith_binary)
    EQUAL       reduce using rule 71 (arith_binary)
    NOT_EQ      reduce using rule 71 (arith_binary)
    '+'         reduce using rule 71 (arith_binary)
    '-'         reduce using rule 71 (arith_binary)
    '*'         reduce using rule 71 (arith_binary)
    '/'         reduce using rule 71 (arith_binary)


State 384

   53 expression: const •

    ')'         reduce using rule 53 (expression)
    AND         reduce using rule 53 (expression)
    OR          reduce using rule 53 (expression)
    GREATER     reduce using rule 53 (expression)
    GREATER_EQ  reduce using rule 53 (expression)
    LESS        reduce using rule 53 (expression)
    LESS_EQ     reduce using rule 53 (expression)
    EQUAL       reduce using rule 53 (expression)
    NOT_EQ      reduce using rule 53 (expression)
    '+'         reduce using rule 53 (expression)
    '-'         reduce using rule 53 (expression)
    '*'         reduce using rule 53 (expression)
    '/'         reduce using rule 53 (expression)


State 385

   55 const: number •

    ')'         reduce using rule 55 (const)
    AND         reduce using rule 55 (const)
    OR          reduce using rule 55 (const)
    GREATER     reduce using rule 55 (const)
    GREATER_EQ  reduce using rule 55 (const)
    LESS        reduce using rule 55 (const)
    LESS_EQ     reduce using rule 55 (const)
    EQUAL       reduce using rule 55 (const)
    NOT_EQ      reduce using rule 55 (const)
    '+'         reduce using rule 55 (const)
    '-'         reduce using rule 55 (const)
    '*'         reduce using rule 55 (const)
    '/'         reduce using rule 55 (const)


State 386

   52 expression: single_operation •

    ')'         reduce using rule 52 (expression)
    AND         reduce using rule 52 (expression)
    OR          reduce using rule 52 (expression)
    GREATER     reduce using rule 52 (expression)
    GREATER_EQ  reduce using rule 52 (expression)
    LESS        reduce using rule 52 (expression)
    LESS_EQ     reduce using rule 52 (expression)
    EQUAL       reduce using rule 52 (expression)
    NOT_EQ      reduce using rule 52 (expression)
    '+'         reduce using rule 52 (expression)
    '-'         reduce using rule 52 (expression)
    '*'         reduce using rule 52 (expression)
    '/'         reduce using rule 52 (expression)


State 387

   68 single_operation: arith_single •

    ')'         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)
    '+'         reduce using rule 68 (single_operation)
    '-'         reduce using rule 68 (single_operation)
    '*'         reduce using rule 68 (single_operation)
    '/'         reduce using rule 68 (single_operation)


State 388

   69 single_operation: lst_single •

    ')'         reduce using rule 69 (single_operation)
    AND         reduce using rule 69 (single_operation)
    OR          reduce using rule 69 (single_operation)
    GREATER     reduce using rule 69 (single_operation)
    GREATER_EQ  reduce using rule 69 (single_operation)
    LESS        reduce using rule 69 (single_operation)
    LESS_EQ     reduce using rule 69 (single_operation)
    EQUAL       reduce using rule 69 (single_operation)
    NOT_EQ      reduce using rule 69 (single_operation)
    '+'         reduce using rule 69 (single_operation)
    '-'         reduce using rule 69 (single_operation)
    '*'         reduce using rule 69 (single_operation)
    '/'         reduce using rule 69 (single_operation)


State 389

   72 arith_binary: arith_binary '-' expression •

    ')'         reduce using rule 72 (arith_binary)
    AND         reduce using rule 72 (arith_binary)
    OR          reduce using rule 72 (arith_binary)
    GREATER     reduce using rule 72 (arith_binary)
    GREATER_EQ  reduce using rule 72 (arith_binary)
    LESS        reduce using rule 72 (arith_binary)
    LESS_EQ     reduce using rule 72 (arith_binary)
    EQUAL       reduce using rule 72 (arith_binary)
    NOT_EQ      reduce using rule 72 (arith_binary)
    '+'         reduce using rule 72 (arith_binary)
    '-'         reduce using rule 72 (arith_binary)
    '*'         reduce using rule 72 (arith_binary)
    '/'         reduce using rule 72 (arith_binary)


State 390

   73 arith_binary: arith_binary '*' expression •

    ')'         reduce using rule 73 (arith_binary)
    AND         reduce using rule 73 (arith_binary)
    OR          reduce using rule 73 (arith_binary)
    GREATER     reduce using rule 73 (arith_binary)
    GREATER_EQ  reduce using rule 73 (arith_binary)
    LESS        reduce using rule 73 (arith_binary)
    LESS_EQ     reduce using rule 73 (arith_binary)
    EQUAL       reduce using rule 73 (arith_binary)
    NOT_EQ      reduce using rule 73 (arith_binary)
    '+'         reduce using rule 73 (arith_binary)
    '-'         reduce using rule 73 (arith_binary)
    '*'         reduce using rule 73 (arith_binary)
    '/'         reduce using rule 73 (arith_binary)


State 391

   74 arith_binary: arith_binary '/' expression •

    ')'         reduce using rule 74 (arith_binary)
    AND         reduce using rule 74 (arith_binary)
    OR          reduce using rule 74 (arith_binary)
    GREATER     reduce using rule 74 (arith_binary)
    GREATER_EQ  reduce using rule 74 (arith_binary)
    LESS        reduce using rule 74 (arith_binary)
    LESS_EQ     reduce using rule 74 (arith_binary)
    EQUAL       reduce using rule 74 (arith_binary)
    NOT_EQ      reduce using rule 74 (arith_binary)
    '+'         reduce using rule 74 (arith_binary)
    '-'         reduce using rule 74 (arith_binary)
    '*'         reduce using rule 74 (arith_binary)
    '/'         reduce using rule 74 (arith_binary)


State 392

   49 func_calling: ID '(' $@3 • calling_parameters $@4 ')'

    NUM_INT    shift, and go to state 225
    NUM_FLOAT  shift, and go to state 226
    NIL_CNST   shift, and go to state 227
    ID         shift, and go to state 228
    '('        shift, and go to state 229
    '+'        shift, and go to state 230
    '-'        shift, and go to state 231
    '%'        shift, and go to state 232
    '?'        shift, and go to state 233
    '!'        shift, and go to state 234

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 454
    lst_calling_parameters  go to state 127
    func_calling            go to state 235
    expression              go to state 236
    const                   go to state 237
    number                  go to state 238
    operation               go to state 128
    single_operation        go to state 239
    arith_binary            go to state 240
    arith_single            go to state 241
    lst_single              go to state 242
    lst_binary              go to state 243


State 393

   50 expression: '(' expression ')' •

    ';'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)


State 394

   49 func_calling: ID '(' $@3 • calling_parameters $@4 ')'

    NUM_INT    shift, and go to state 225
    NUM_FLOAT  shift, and go to state 226
    NIL_CNST   shift, and go to state 227
    ID         shift, and go to state 228
    '('        shift, and go to state 229
    '+'        shift, and go to state 230
    '-'        shift, and go to state 231
    '%'        shift, and go to state 232
    '?'        shift, and go to state 233
    '!'        shift, and go to state 234

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 455
    lst_calling_parameters  go to state 127
    func_calling            go to state 235
    expression              go to state 236
    const                   go to state 237
    number                  go to state 238
    operation               go to state 128
    single_operation        go to state 239
    arith_binary            go to state 240
    arith_single            go to state 241
    lst_single              go to state 242
    lst_binary              go to state 243


State 395

   50 expression: '(' expression ')' •

    ';'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)


State 396

   49 func_calling: ID '(' $@3 • calling_parameters $@4 ')'

    NUM_INT    shift, and go to state 225
    NUM_FLOAT  shift, and go to state 226
    NIL_CNST   shift, and go to state 227
    ID         shift, and go to state 228
    '('        shift, and go to state 229
    '+'        shift, and go to state 230
    '-'        shift, and go to state 231
    '%'        shift, and go to state 232
    '?'        shift, and go to state 233
    '!'        shift, and go to state 234

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 456
    lst_calling_parameters  go to state 127
    func_calling            go to state 235
    expression              go to state 236
    const                   go to state 237
    number                  go to state 238
    operation               go to state 128
    single_operation        go to state 239
    arith_binary            go to state 240
    arith_single            go to state 241
    lst_single              go to state 242
    lst_binary              go to state 243


State 397

   50 expression: '(' expression ')' •

    ')'         reduce using rule 50 (expression)
    ','         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)
    FILTER      reduce using rule 50 (expression)
    MAP         reduce using rule 50 (expression)
    ':'         reduce using rule 50 (expression)


State 398

   80 lst_binary: expression FILTER expression •

    ')'         reduce using rule 80 (lst_binary)
    ','         reduce using rule 80 (lst_binary)
    AND         reduce using rule 80 (lst_binary)
    OR          reduce using rule 80 (lst_binary)
    GREATER     reduce using rule 80 (lst_binary)
    GREATER_EQ  reduce using rule 80 (lst_binary)
    LESS        reduce using rule 80 (lst_binary)
    LESS_EQ     reduce using rule 80 (lst_binary)
    EQUAL       reduce using rule 80 (lst_binary)
    NOT_EQ      reduce using rule 80 (lst_binary)


State 399

   81 lst_binary: expression MAP expression •

    ')'         reduce using rule 81 (lst_binary)
    ','         reduce using rule 81 (lst_binary)
    AND         reduce using rule 81 (lst_binary)
    OR          reduce using rule 81 (lst_binary)
    GREATER     reduce using rule 81 (lst_binary)
    GREATER_EQ  reduce using rule 81 (lst_binary)
    LESS        reduce using rule 81 (lst_binary)
    LESS_EQ     reduce using rule 81 (lst_binary)
    EQUAL       reduce using rule 81 (lst_binary)
    NOT_EQ      reduce using rule 81 (lst_binary)


State 400

   82 lst_binary: expression ':' expression •

    ')'         reduce using rule 82 (lst_binary)
    ','         reduce using rule 82 (lst_binary)
    AND         reduce using rule 82 (lst_binary)
    OR          reduce using rule 82 (lst_binary)
    GREATER     reduce using rule 82 (lst_binary)
    GREATER_EQ  reduce using rule 82 (lst_binary)
    LESS        reduce using rule 82 (lst_binary)
    LESS_EQ     reduce using rule 82 (lst_binary)
    EQUAL       reduce using rule 82 (lst_binary)
    NOT_EQ      reduce using rule 82 (lst_binary)


State 401

   57 number: NUM_INT •

    ')'         reduce using rule 57 (number)
    ','         reduce using rule 57 (number)
    AND         reduce using rule 57 (number)
    OR          reduce using rule 57 (number)
    GREATER     reduce using rule 57 (number)
    GREATER_EQ  reduce using rule 57 (number)
    LESS        reduce using rule 57 (number)
    LESS_EQ     reduce using rule 57 (number)
    EQUAL       reduce using rule 57 (number)
    NOT_EQ      reduce using rule 57 (number)
    '+'         reduce using rule 57 (number)
    '-'         reduce using rule 57 (number)
    '*'         reduce using rule 57 (number)
    '/'         reduce using rule 57 (number)


State 402

   58 number: NUM_FLOAT •

    ')'         reduce using rule 58 (number)
    ','         reduce using rule 58 (number)
    AND         reduce using rule 58 (number)
    OR          reduce using rule 58 (number)
    GREATER     reduce using rule 58 (number)
    GREATER_EQ  reduce using rule 58 (number)
    LESS        reduce using rule 58 (number)
    LESS_EQ     reduce using rule 58 (number)
    EQUAL       reduce using rule 58 (number)
    NOT_EQ      reduce using rule 58 (number)
    '+'         reduce using rule 58 (number)
    '-'         reduce using rule 58 (number)
    '*'         reduce using rule 58 (number)
    '/'         reduce using rule 58 (number)


State 403

   56 const: NIL_CNST •

    ')'         reduce using rule 56 (const)
    ','         reduce using rule 56 (const)
    AND         reduce using rule 56 (const)
    OR          reduce using rule 56 (const)
    GREATER     reduce using rule 56 (const)
    GREATER_EQ  reduce using rule 56 (const)
    LESS        reduce using rule 56 (const)
    LESS_EQ     reduce using rule 56 (const)
    EQUAL       reduce using rule 56 (const)
    NOT_EQ      reduce using rule 56 (const)
    '+'         reduce using rule 56 (const)
    '-'         reduce using rule 56 (const)
    '*'         reduce using rule 56 (const)
    '/'         reduce using rule 56 (const)


State 404

   49 func_calling: ID • '(' $@3 calling_parameters $@4 ')'
   54 expression: ID •

    '('  shift, and go to state 457

    ')'         reduce using rule 54 (expression)
    ','         reduce using rule 54 (expression)
    AND         reduce using rule 54 (expression)
    OR          reduce using rule 54 (expression)
    GREATER     reduce using rule 54 (expression)
    GREATER_EQ  reduce using rule 54 (expression)
    LESS        reduce using rule 54 (expression)
    LESS_EQ     reduce using rule 54 (expression)
    EQUAL       reduce using rule 54 (expression)
    NOT_EQ      reduce using rule 54 (expression)
    '+'         reduce using rule 54 (expression)
    '-'         reduce using rule 54 (expression)
    '*'         reduce using rule 54 (expression)
    '/'         reduce using rule 54 (expression)


State 405

   50 expression: '(' • expression ')'

    NUM_INT    shift, and go to state 157
    NUM_FLOAT  shift, and go to state 158
    NIL_CNST   shift, and go to state 159
    ID         shift, and go to state 160
    '('        shift, and go to state 161
    '+'        shift, and go to state 162
    '-'        shift, and go to state 163
    '%'        shift, and go to state 164
    '?'        shift, and go to state 165
    '!'        shift, and go to state 166

    func_calling      go to state 167
    expression        go to state 458
    const             go to state 168
    number            go to state 169
    single_operation  go to state 170
    arith_single      go to state 171
    lst_single        go to state 172


State 406

   76 arith_single: '+' • expression

    NUM_INT    shift, and go to state 401
    NUM_FLOAT  shift, and go to state 402
    NIL_CNST   shift, and go to state 403
    ID         shift, and go to state 404
    '('        shift, and go to state 405
    '+'        shift, and go to state 406
    '-'        shift, and go to state 407
    '%'        shift, and go to state 408
    '?'        shift, and go to state 409
    '!'        shift, and go to state 410

    func_calling      go to state 411
    expression        go to state 459
    const             go to state 413
    number            go to state 414
    single_operation  go to state 415
    arith_single      go to state 416
    lst_single        go to state 417


State 407

   77 arith_single: '-' • expression

    NUM_INT    shift, and go to state 401
    NUM_FLOAT  shift, and go to state 402
    NIL_CNST   shift, and go to state 403
    ID         shift, and go to state 404
    '('        shift, and go to state 405
    '+'        shift, and go to state 406
    '-'        shift, and go to state 407
    '%'        shift, and go to state 408
    '?'        shift, and go to state 409
    '!'        shift, and go to state 410

    func_calling      go to state 411
    expression        go to state 460
    const             go to state 413
    number            go to state 414
    single_operation  go to state 415
    arith_single      go to state 416
    lst_single        go to state 417


State 408

   78 lst_single: '%' • expression

    NUM_INT    shift, and go to state 401
    NUM_FLOAT  shift, and go to state 402
    NIL_CNST   shift, and go to state 403
    ID         shift, and go to state 404
    '('        shift, and go to state 405
    '+'        shift, and go to state 406
    '-'        shift, and go to state 407
    '%'        shift, and go to state 408
    '?'        shift, and go to state 409
    '!'        shift, and go to state 410

    func_calling      go to state 411
    expression        go to state 461
    const             go to state 413
    number            go to state 414
    single_operation  go to state 415
    arith_single      go to state 416
    lst_single        go to state 417


State 409

   79 lst_single: '?' • expression

    NUM_INT    shift, and go to state 401
    NUM_FLOAT  shift, and go to state 402
    NIL_CNST   shift, and go to state 403
    ID         shift, and go to state 404
    '('        shift, and go to state 405
    '+'        shift, and go to state 406
    '-'        shift, and go to state 407
    '%'        shift, and go to state 408
    '?'        shift, and go to state 409
    '!'        shift, and go to state 410

    func_calling      go to state 411
    expression        go to state 462
    const             go to state 413
    number            go to state 414
    single_operation  go to state 415
    arith_single      go to state 416
    lst_single        go to state 417


State 410

   70 single_operation: '!' • expression

    NUM_INT    shift, and go to state 401
    NUM_FLOAT  shift, and go to state 402
    NIL_CNST   shift, and go to state 403
    ID         shift, and go to state 404
    '('        shift, and go to state 405
    '+'        shift, and go to state 406
    '-'        shift, and go to state 407
    '%'        shift, and go to state 408
    '?'        shift, and go to state 409
    '!'        shift, and go to state 410

    func_calling      go to state 411
    expression        go to state 463
    const             go to state 413
    number            go to state 414
    single_operation  go to state 415
    arith_single      go to state 416
    lst_single        go to state 417


State 411

   51 expression: func_calling •

    ')'         reduce using rule 51 (expression)
    ','         reduce using rule 51 (expression)
    AND         reduce using rule 51 (expression)
    OR          reduce using rule 51 (expression)
    GREATER     reduce using rule 51 (expression)
    GREATER_EQ  reduce using rule 51 (expression)
    LESS        reduce using rule 51 (expression)
    LESS_EQ     reduce using rule 51 (expression)
    EQUAL       reduce using rule 51 (expression)
    NOT_EQ      reduce using rule 51 (expression)
    '+'         reduce using rule 51 (expression)
    '-'         reduce using rule 51 (expression)
    '*'         reduce using rule 51 (expression)
    '/'         reduce using rule 51 (expression)


State 412

   71 arith_binary: arith_binary '+' expression •

    ')'         reduce using rule 71 (arith_binary)
    ','         reduce using rule 71 (arith_binary)
    AND         reduce using rule 71 (arith_binary)
    OR          reduce using rule 71 (arith_binary)
    GREATER     reduce using rule 71 (arith_binary)
    GREATER_EQ  reduce using rule 71 (arith_binary)
    LESS        reduce using rule 71 (arith_binary)
    LESS_EQ     reduce using rule 71 (arith_binary)
    EQUAL       reduce using rule 71 (arith_binary)
    NOT_EQ      reduce using rule 71 (arith_binary)
    '+'         reduce using rule 71 (arith_binary)
    '-'         reduce using rule 71 (arith_binary)
    '*'         reduce using rule 71 (arith_binary)
    '/'         reduce using rule 71 (arith_binary)


State 413

   53 expression: const •

    ')'         reduce using rule 53 (expression)
    ','         reduce using rule 53 (expression)
    AND         reduce using rule 53 (expression)
    OR          reduce using rule 53 (expression)
    GREATER     reduce using rule 53 (expression)
    GREATER_EQ  reduce using rule 53 (expression)
    LESS        reduce using rule 53 (expression)
    LESS_EQ     reduce using rule 53 (expression)
    EQUAL       reduce using rule 53 (expression)
    NOT_EQ      reduce using rule 53 (expression)
    '+'         reduce using rule 53 (expression)
    '-'         reduce using rule 53 (expression)
    '*'         reduce using rule 53 (expression)
    '/'         reduce using rule 53 (expression)


State 414

   55 const: number •

    ')'         reduce using rule 55 (const)
    ','         reduce using rule 55 (const)
    AND         reduce using rule 55 (const)
    OR          reduce using rule 55 (const)
    GREATER     reduce using rule 55 (const)
    GREATER_EQ  reduce using rule 55 (const)
    LESS        reduce using rule 55 (const)
    LESS_EQ     reduce using rule 55 (const)
    EQUAL       reduce using rule 55 (const)
    NOT_EQ      reduce using rule 55 (const)
    '+'         reduce using rule 55 (const)
    '-'         reduce using rule 55 (const)
    '*'         reduce using rule 55 (const)
    '/'         reduce using rule 55 (const)


State 415

   52 expression: single_operation •

    ')'         reduce using rule 52 (expression)
    ','         reduce using rule 52 (expression)
    AND         reduce using rule 52 (expression)
    OR          reduce using rule 52 (expression)
    GREATER     reduce using rule 52 (expression)
    GREATER_EQ  reduce using rule 52 (expression)
    LESS        reduce using rule 52 (expression)
    LESS_EQ     reduce using rule 52 (expression)
    EQUAL       reduce using rule 52 (expression)
    NOT_EQ      reduce using rule 52 (expression)
    '+'         reduce using rule 52 (expression)
    '-'         reduce using rule 52 (expression)
    '*'         reduce using rule 52 (expression)
    '/'         reduce using rule 52 (expression)


State 416

   68 single_operation: arith_single •

    ')'         reduce using rule 68 (single_operation)
    ','         reduce using rule 68 (single_operation)
    AND         reduce using rule 68 (single_operation)
    OR          reduce using rule 68 (single_operation)
    GREATER     reduce using rule 68 (single_operation)
    GREATER_EQ  reduce using rule 68 (single_operation)
    LESS        reduce using rule 68 (single_operation)
    LESS_EQ     reduce using rule 68 (single_operation)
    EQUAL       reduce using rule 68 (single_operation)
    NOT_EQ      reduce using rule 68 (single_operation)
    '+'         reduce using rule 68 (single_operation)
    '-'         reduce using rule 68 (single_operation)
    '*'         reduce using rule 68 (single_operation)
    '/'         reduce using rule 68 (single_operation)


State 417

   69 single_operation: lst_single •

    ')'         reduce using rule 69 (single_operation)
    ','         reduce using rule 69 (single_operation)
    AND         reduce using rule 69 (single_operation)
    OR          reduce using rule 69 (single_operation)
    GREATER     reduce using rule 69 (single_operation)
    GREATER_EQ  reduce using rule 69 (single_operation)
    LESS        reduce using rule 69 (single_operation)
    LESS_EQ     reduce using rule 69 (single_operation)
    EQUAL       reduce using rule 69 (single_operation)
    NOT_EQ      reduce using rule 69 (single_operation)
    '+'         reduce using rule 69 (single_operation)
    '-'         reduce using rule 69 (single_operation)
    '*'         reduce using rule 69 (single_operation)
    '/'         reduce using rule 69 (single_operation)


State 418

   72 arith_binary: arith_binary '-' expression •

    ')'         reduce using rule 72 (arith_binary)
    ','         reduce using rule 72 (arith_binary)
    AND         reduce using rule 72 (arith_binary)
    OR          reduce using rule 72 (arith_binary)
    GREATER     reduce using rule 72 (arith_binary)
    GREATER_EQ  reduce using rule 72 (arith_binary)
    LESS        reduce using rule 72 (arith_binary)
    LESS_EQ     reduce using rule 72 (arith_binary)
    EQUAL       reduce using rule 72 (arith_binary)
    NOT_EQ      reduce using rule 72 (arith_binary)
    '+'         reduce using rule 72 (arith_binary)
    '-'         reduce using rule 72 (arith_binary)
    '*'         reduce using rule 72 (arith_binary)
    '/'         reduce using rule 72 (arith_binary)


State 419

   73 arith_binary: arith_binary '*' expression •

    ')'         reduce using rule 73 (arith_binary)
    ','         reduce using rule 73 (arith_binary)
    AND         reduce using rule 73 (arith_binary)
    OR          reduce using rule 73 (arith_binary)
    GREATER     reduce using rule 73 (arith_binary)
    GREATER_EQ  reduce using rule 73 (arith_binary)
    LESS        reduce using rule 73 (arith_binary)
    LESS_EQ     reduce using rule 73 (arith_binary)
    EQUAL       reduce using rule 73 (arith_binary)
    NOT_EQ      reduce using rule 73 (arith_binary)
    '+'         reduce using rule 73 (arith_binary)
    '-'         reduce using rule 73 (arith_binary)
    '*'         reduce using rule 73 (arith_binary)
    '/'         reduce using rule 73 (arith_binary)


State 420

   74 arith_binary: arith_binary '/' expression •

    ')'         reduce using rule 74 (arith_binary)
    ','         reduce using rule 74 (arith_binary)
    AND         reduce using rule 74 (arith_binary)
    OR          reduce using rule 74 (arith_binary)
    GREATER     reduce using rule 74 (arith_binary)
    GREATER_EQ  reduce using rule 74 (arith_binary)
    LESS        reduce using rule 74 (arith_binary)
    LESS_EQ     reduce using rule 74 (arith_binary)
    EQUAL       reduce using rule 74 (arith_binary)
    NOT_EQ      reduce using rule 74 (arith_binary)
    '+'         reduce using rule 74 (arith_binary)
    '-'         reduce using rule 74 (arith_binary)
    '*'         reduce using rule 74 (arith_binary)
    '/'         reduce using rule 74 (arith_binary)


State 421

   49 func_calling: ID '(' • $@3 calling_parameters $@4 ')'

    NUM_INT    reduce using rule 47 ($@3)
    NUM_FLOAT  reduce using rule 47 ($@3)
    NIL_CNST   reduce using rule 47 ($@3)
    ID         reduce using rule 47 ($@3)
    '('        reduce using rule 47 ($@3)
    ')'        reduce using rule 47 ($@3)
    '+'        reduce using rule 47 ($@3)
    '-'        reduce using rule 47 ($@3)
    '%'        reduce using rule 47 ($@3)
    '?'        reduce using rule 47 ($@3)
    '!'        reduce using rule 47 ($@3)

    $@3  go to state 464


State 422

   50 expression: '(' expression • ')'

    ')'  shift, and go to state 465


State 423

   76 arith_single: '+' expression •

    ')'         reduce using rule 76 (arith_single)
    AND         reduce using rule 76 (arith_single)
    OR          reduce using rule 76 (arith_single)
    GREATER     reduce using rule 76 (arith_single)
    GREATER_EQ  reduce using rule 76 (arith_single)
    LESS        reduce using rule 76 (arith_single)
    LESS_EQ     reduce using rule 76 (arith_single)
    EQUAL       reduce using rule 76 (arith_single)
    NOT_EQ      reduce using rule 76 (arith_single)


State 424

   77 arith_single: '-' expression •

    ')'         reduce using rule 77 (arith_single)
    AND         reduce using rule 77 (arith_single)
    OR          reduce using rule 77 (arith_single)
    GREATER     reduce using rule 77 (arith_single)
    GREATER_EQ  reduce using rule 77 (arith_single)
    LESS        reduce using rule 77 (arith_single)
    LESS_EQ     reduce using rule 77 (arith_single)
    EQUAL       reduce using rule 77 (arith_single)
    NOT_EQ      reduce using rule 77 (arith_single)


State 425

   78 lst_single: '%' expression •

    ')'         reduce using rule 78 (lst_single)
    AND         reduce using rule 78 (lst_single)
    OR          reduce using rule 78 (lst_single)
    GREATER     reduce using rule 78 (lst_single)
    GREATER_EQ  reduce using rule 78 (lst_single)
    LESS        reduce using rule 78 (lst_single)
    LESS_EQ     reduce using rule 78 (lst_single)
    EQUAL       reduce using rule 78 (lst_single)
    NOT_EQ      reduce using rule 78 (lst_single)


State 426

   79 lst_single: '?' expression •

    ')'         reduce using rule 79 (lst_single)
    AND         reduce using rule 79 (lst_single)
    OR          reduce using rule 79 (lst_single)
    GREATER     reduce using rule 79 (lst_single)
    GREATER_EQ  reduce using rule 79 (lst_single)
    LESS        reduce using rule 79 (lst_single)
    LESS_EQ     reduce using rule 79 (lst_single)
    EQUAL       reduce using rule 79 (lst_single)
    NOT_EQ      reduce using rule 79 (lst_single)


State 427

   70 single_operation: '!' expression •

    ')'         reduce using rule 70 (single_operation)
    AND         reduce using rule 70 (single_operation)
    OR          reduce using rule 70 (single_operation)
    GREATER     reduce using rule 70 (single_operation)
    GREATER_EQ  reduce using rule 70 (single_operation)
    LESS        reduce using rule 70 (single_operation)
    LESS_EQ     reduce using rule 70 (single_operation)
    EQUAL       reduce using rule 70 (single_operation)
    NOT_EQ      reduce using rule 70 (single_operation)


State 428

   49 func_calling: ID '(' • $@3 calling_parameters $@4 ')'

    NUM_INT    reduce using rule 47 ($@3)
    NUM_FLOAT  reduce using rule 47 ($@3)
    NIL_CNST   reduce using rule 47 ($@3)
    ID         reduce using rule 47 ($@3)
    '('        reduce using rule 47 ($@3)
    ')'        reduce using rule 47 ($@3)
    '+'        reduce using rule 47 ($@3)
    '-'        reduce using rule 47 ($@3)
    '%'        reduce using rule 47 ($@3)
    '?'        reduce using rule 47 ($@3)
    '!'        reduce using rule 47 ($@3)

    $@3  go to state 466


State 429

   50 expression: '(' expression • ')'

    ')'  shift, and go to state 467


State 430

   76 arith_single: '+' expression •

    ')'         reduce using rule 76 (arith_single)
    ','         reduce using rule 76 (arith_single)
    AND         reduce using rule 76 (arith_single)
    OR          reduce using rule 76 (arith_single)
    GREATER     reduce using rule 76 (arith_single)
    GREATER_EQ  reduce using rule 76 (arith_single)
    LESS        reduce using rule 76 (arith_single)
    LESS_EQ     reduce using rule 76 (arith_single)
    EQUAL       reduce using rule 76 (arith_single)
    NOT_EQ      reduce using rule 76 (arith_single)


State 431

   77 arith_single: '-' expression •

    ')'         reduce using rule 77 (arith_single)
    ','         reduce using rule 77 (arith_single)
    AND         reduce using rule 77 (arith_single)
    OR          reduce using rule 77 (arith_single)
    GREATER     reduce using rule 77 (arith_single)
    GREATER_EQ  reduce using rule 77 (arith_single)
    LESS        reduce using rule 77 (arith_single)
    LESS_EQ     reduce using rule 77 (arith_single)
    EQUAL       reduce using rule 77 (arith_single)
    NOT_EQ      reduce using rule 77 (arith_single)


State 432

   78 lst_single: '%' expression •

    ')'         reduce using rule 78 (lst_single)
    ','         reduce using rule 78 (lst_single)
    AND         reduce using rule 78 (lst_single)
    OR          reduce using rule 78 (lst_single)
    GREATER     reduce using rule 78 (lst_single)
    GREATER_EQ  reduce using rule 78 (lst_single)
    LESS        reduce using rule 78 (lst_single)
    LESS_EQ     reduce using rule 78 (lst_single)
    EQUAL       reduce using rule 78 (lst_single)
    NOT_EQ      reduce using rule 78 (lst_single)


State 433

   79 lst_single: '?' expression •

    ')'         reduce using rule 79 (lst_single)
    ','         reduce using rule 79 (lst_single)
    AND         reduce using rule 79 (lst_single)
    OR          reduce using rule 79 (lst_single)
    GREATER     reduce using rule 79 (lst_single)
    GREATER_EQ  reduce using rule 79 (lst_single)
    LESS        reduce using rule 79 (lst_single)
    LESS_EQ     reduce using rule 79 (lst_single)
    EQUAL       reduce using rule 79 (lst_single)
    NOT_EQ      reduce using rule 79 (lst_single)


State 434

   70 single_operation: '!' expression •

    ')'         reduce using rule 70 (single_operation)
    ','         reduce using rule 70 (single_operation)
    AND         reduce using rule 70 (single_operation)
    OR          reduce using rule 70 (single_operation)
    GREATER     reduce using rule 70 (single_operation)
    GREATER_EQ  reduce using rule 70 (single_operation)
    LESS        reduce using rule 70 (single_operation)
    LESS_EQ     reduce using rule 70 (single_operation)
    EQUAL       reduce using rule 70 (single_operation)
    NOT_EQ      reduce using rule 70 (single_operation)


State 435

   36 return_stmt: RETURN_STM operation ';' •

    error           reduce using rule 36 (return_stmt)
    NUM_INT         reduce using rule 36 (return_stmt)
    NUM_FLOAT       reduce using rule 36 (return_stmt)
    NIL_CNST        reduce using rule 36 (return_stmt)
    ID              reduce using rule 36 (return_stmt)
    RETURN_STM      reduce using rule 36 (return_stmt)
    T_INT           reduce using rule 36 (return_stmt)
    T_FLOAT         reduce using rule 36 (return_stmt)
    IF_STMT         reduce using rule 36 (return_stmt)
    ELSE_STMT       reduce using rule 36 (return_stmt)
    FOR_STMT        reduce using rule 36 (return_stmt)
    OUTPUT_WRITE    reduce using rule 36 (return_stmt)
    OUTPUT_WRITELN  reduce using rule 36 (return_stmt)
    INPUT_READ      reduce using rule 36 (return_stmt)
    '('             reduce using rule 36 (return_stmt)
    '{'             reduce using rule 36 (return_stmt)
    '}'             reduce using rule 36 (return_stmt)
    '+'             reduce using rule 36 (return_stmt)
    '-'             reduce using rule 36 (return_stmt)
    '%'             reduce using rule 36 (return_stmt)
    '?'             reduce using rule 36 (return_stmt)
    '!'             reduce using rule 36 (return_stmt)


State 436

   34 conditional_stmt: IF_STMT '(' operation • ')' command
   35                 | IF_STMT '(' operation • ')' command ELSE_STMT command
   66 operation: operation • relational_op expression
   67          | operation • logical_op expression

    ')'         shift, and go to state 468
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    GREATER     shift, and go to state 91
    GREATER_EQ  shift, and go to state 92
    LESS        shift, and go to state 93
    LESS_EQ     shift, and go to state 94
    EQUAL       shift, and go to state 95
    NOT_EQ      shift, and go to state 96

    logical_op     go to state 244
    relational_op  go to state 245


State 437

   37 iteration: FOR_STMT '(' loop_condition • ')' command

    ')'  shift, and go to state 469


State 438

   44 output: OUTPUT_WRITE '(' STRING • ')' ';'

    ')'  shift, and go to state 470


State 439

   42 output: OUTPUT_WRITE '(' operation • ')' ';'
   66 operation: operation • relational_op expression
   67          | operation • logical_op expression

    ')'         shift, and go to state 471
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    GREATER     shift, and go to state 91
    GREATER_EQ  shift, and go to state 92
    LESS        shift, and go to state 93
    LESS_EQ     shift, and go to state 94
    EQUAL       shift, and go to state 95
    NOT_EQ      shift, and go to state 96

    logical_op     go to state 244
    relational_op  go to state 245


State 440

   45 output: OUTPUT_WRITELN '(' STRING • ')' ';'

    ')'  shift, and go to state 472


State 441

   43 output: OUTPUT_WRITELN '(' operation • ')' ';'
   66 operation: operation • relational_op expression
   67          | operation • logical_op expression

    ')'         shift, and go to state 473
    AND         shift, and go to state 89
    OR          shift, and go to state 90
    GREATER     shift, and go to state 91
    GREATER_EQ  shift, and go to state 92
    LESS        shift, and go to state 93
    LESS_EQ     shift, and go to state 94
    EQUAL       shift, and go to state 95
    NOT_EQ      shift, and go to state 96

    logical_op     go to state 244
    relational_op  go to state 245


State 442

   46 input: INPUT_READ '(' expression • ')' ';'

    ')'  shift, and go to state 474


State 443

   30 command: $@2 '{' block_commands • '}'

    '}'  shift, and go to state 475


State 444

   39 init_stmt: ID '=' operation •
   66 operation: operation • relational_op expression
   67          | operation • logical_op expression

    AND         shift, and go to state 89
    OR          shift, and go to state 90
    GREATER     shift, and go to state 91
    GREATER_EQ  shift, and go to state 92
    LESS        shift, and go to state 93
    LESS_EQ     shift, and go to state 94
    EQUAL       shift, and go to state 95
    NOT_EQ      shift, and go to state 96

    ')'  reduce using rule 39 (init_stmt)

    logical_op     go to state 244
    relational_op  go to state 245


State 445

   49 func_calling: ID '(' $@3 calling_parameters • $@4 ')'

    ')'  reduce using rule 48 ($@4)

    $@4  go to state 476


State 446

   49 func_calling: ID '(' $@3 calling_parameters • $@4 ')'

    ')'  reduce using rule 48 ($@4)

    $@4  go to state 477


State 447

   49 func_calling: ID '(' • $@3 calling_parameters $@4 ')'

    NUM_INT    reduce using rule 47 ($@3)
    NUM_FLOAT  reduce using rule 47 ($@3)
    NIL_CNST   reduce using rule 47 ($@3)
    ID         reduce using rule 47 ($@3)
    '('        reduce using rule 47 ($@3)
    ')'        reduce using rule 47 ($@3)
    '+'        reduce using rule 47 ($@3)
    '-'        reduce using rule 47 ($@3)
    '%'        reduce using rule 47 ($@3)
    '?'        reduce using rule 47 ($@3)
    '!'        reduce using rule 47 ($@3)

    $@3  go to state 478


State 448

   50 expression: '(' expression • ')'

    ')'  shift, and go to state 479


State 449

   76 arith_single: '+' expression •

    ')'         reduce using rule 76 (arith_single)
    AND         reduce using rule 76 (arith_single)
    OR          reduce using rule 76 (arith_single)
    GREATER     reduce using rule 76 (arith_single)
    GREATER_EQ  reduce using rule 76 (arith_single)
    LESS        reduce using rule 76 (arith_single)
    LESS_EQ     reduce using rule 76 (arith_single)
    EQUAL       reduce using rule 76 (arith_single)
    NOT_EQ      reduce using rule 76 (arith_single)
    '+'         reduce using rule 76 (arith_single)
    '-'         reduce using rule 76 (arith_single)
    '*'         reduce using rule 76 (arith_single)
    '/'         reduce using rule 76 (arith_single)


State 450

   77 arith_single: '-' expression •

    ')'         reduce using rule 77 (arith_single)
    AND         reduce using rule 77 (arith_single)
    OR          reduce using rule 77 (arith_single)
    GREATER     reduce using rule 77 (arith_single)
    GREATER_EQ  reduce using rule 77 (arith_single)
    LESS        reduce using rule 77 (arith_single)
    LESS_EQ     reduce using rule 77 (arith_single)
    EQUAL       reduce using rule 77 (arith_single)
    NOT_EQ      reduce using rule 77 (arith_single)
    '+'         reduce using rule 77 (arith_single)
    '-'         reduce using rule 77 (arith_single)
    '*'         reduce using rule 77 (arith_single)
    '/'         reduce using rule 77 (arith_single)


State 451

   78 lst_single: '%' expression •

    ')'         reduce using rule 78 (lst_single)
    AND         reduce using rule 78 (lst_single)
    OR          reduce using rule 78 (lst_single)
    GREATER     reduce using rule 78 (lst_single)
    GREATER_EQ  reduce using rule 78 (lst_single)
    LESS        reduce using rule 78 (lst_single)
    LESS_EQ     reduce using rule 78 (lst_single)
    EQUAL       reduce using rule 78 (lst_single)
    NOT_EQ      reduce using rule 78 (lst_single)
    '+'         reduce using rule 78 (lst_single)
    '-'         reduce using rule 78 (lst_single)
    '*'         reduce using rule 78 (lst_single)
    '/'         reduce using rule 78 (lst_single)


State 452

   79 lst_single: '?' expression •

    ')'         reduce using rule 79 (lst_single)
    AND         reduce using rule 79 (lst_single)
    OR          reduce using rule 79 (lst_single)
    GREATER     reduce using rule 79 (lst_single)
    GREATER_EQ  reduce using rule 79 (lst_single)
    LESS        reduce using rule 79 (lst_single)
    LESS_EQ     reduce using rule 79 (lst_single)
    EQUAL       reduce using rule 79 (lst_single)
    NOT_EQ      reduce using rule 79 (lst_single)
    '+'         reduce using rule 79 (lst_single)
    '-'         reduce using rule 79 (lst_single)
    '*'         reduce using rule 79 (lst_single)
    '/'         reduce using rule 79 (lst_single)


State 453

   70 single_operation: '!' expression •

    ')'         reduce using rule 70 (single_operation)
    AND         reduce using rule 70 (single_operation)
    OR          reduce using rule 70 (single_operation)
    GREATER     reduce using rule 70 (single_operation)
    GREATER_EQ  reduce using rule 70 (single_operation)
    LESS        reduce using rule 70 (single_operation)
    LESS_EQ     reduce using rule 70 (single_operation)
    EQUAL       reduce using rule 70 (single_operation)
    NOT_EQ      reduce using rule 70 (single_operation)
    '+'         reduce using rule 70 (single_operation)
    '-'         reduce using rule 70 (single_operation)
    '*'         reduce using rule 70 (single_operation)
    '/'         reduce using rule 70 (single_operation)


State 454

   49 func_calling: ID '(' $@3 calling_parameters • $@4 ')'

    ')'  reduce using rule 48 ($@4)

    $@4  go to state 480


State 455

   49 func_calling: ID '(' $@3 calling_parameters • $@4 ')'

    ')'  reduce using rule 48 ($@4)

    $@4  go to state 481


State 456

   49 func_calling: ID '(' $@3 calling_parameters • $@4 ')'

    ')'  reduce using rule 48 ($@4)

    $@4  go to state 482


State 457

   49 func_calling: ID '(' • $@3 calling_parameters $@4 ')'

    NUM_INT    reduce using rule 47 ($@3)
    NUM_FLOAT  reduce using rule 47 ($@3)
    NIL_CNST   reduce using rule 47 ($@3)
    ID         reduce using rule 47 ($@3)
    '('        reduce using rule 47 ($@3)
    ')'        reduce using rule 47 ($@3)
    '+'        reduce using rule 47 ($@3)
    '-'        reduce using rule 47 ($@3)
    '%'        reduce using rule 47 ($@3)
    '?'        reduce using rule 47 ($@3)
    '!'        reduce using rule 47 ($@3)

    $@3  go to state 483


State 458

   50 expression: '(' expression • ')'

    ')'  shift, and go to state 484


State 459

   76 arith_single: '+' expression •

    ')'         reduce using rule 76 (arith_single)
    ','         reduce using rule 76 (arith_single)
    AND         reduce using rule 76 (arith_single)
    OR          reduce using rule 76 (arith_single)
    GREATER     reduce using rule 76 (arith_single)
    GREATER_EQ  reduce using rule 76 (arith_single)
    LESS        reduce using rule 76 (arith_single)
    LESS_EQ     reduce using rule 76 (arith_single)
    EQUAL       reduce using rule 76 (arith_single)
    NOT_EQ      reduce using rule 76 (arith_single)
    '+'         reduce using rule 76 (arith_single)
    '-'         reduce using rule 76 (arith_single)
    '*'         reduce using rule 76 (arith_single)
    '/'         reduce using rule 76 (arith_single)


State 460

   77 arith_single: '-' expression •

    ')'         reduce using rule 77 (arith_single)
    ','         reduce using rule 77 (arith_single)
    AND         reduce using rule 77 (arith_single)
    OR          reduce using rule 77 (arith_single)
    GREATER     reduce using rule 77 (arith_single)
    GREATER_EQ  reduce using rule 77 (arith_single)
    LESS        reduce using rule 77 (arith_single)
    LESS_EQ     reduce using rule 77 (arith_single)
    EQUAL       reduce using rule 77 (arith_single)
    NOT_EQ      reduce using rule 77 (arith_single)
    '+'         reduce using rule 77 (arith_single)
    '-'         reduce using rule 77 (arith_single)
    '*'         reduce using rule 77 (arith_single)
    '/'         reduce using rule 77 (arith_single)


State 461

   78 lst_single: '%' expression •

    ')'         reduce using rule 78 (lst_single)
    ','         reduce using rule 78 (lst_single)
    AND         reduce using rule 78 (lst_single)
    OR          reduce using rule 78 (lst_single)
    GREATER     reduce using rule 78 (lst_single)
    GREATER_EQ  reduce using rule 78 (lst_single)
    LESS        reduce using rule 78 (lst_single)
    LESS_EQ     reduce using rule 78 (lst_single)
    EQUAL       reduce using rule 78 (lst_single)
    NOT_EQ      reduce using rule 78 (lst_single)
    '+'         reduce using rule 78 (lst_single)
    '-'         reduce using rule 78 (lst_single)
    '*'         reduce using rule 78 (lst_single)
    '/'         reduce using rule 78 (lst_single)


State 462

   79 lst_single: '?' expression •

    ')'         reduce using rule 79 (lst_single)
    ','         reduce using rule 79 (lst_single)
    AND         reduce using rule 79 (lst_single)
    OR          reduce using rule 79 (lst_single)
    GREATER     reduce using rule 79 (lst_single)
    GREATER_EQ  reduce using rule 79 (lst_single)
    LESS        reduce using rule 79 (lst_single)
    LESS_EQ     reduce using rule 79 (lst_single)
    EQUAL       reduce using rule 79 (lst_single)
    NOT_EQ      reduce using rule 79 (lst_single)
    '+'         reduce using rule 79 (lst_single)
    '-'         reduce using rule 79 (lst_single)
    '*'         reduce using rule 79 (lst_single)
    '/'         reduce using rule 79 (lst_single)


State 463

   70 single_operation: '!' expression •

    ')'         reduce using rule 70 (single_operation)
    ','         reduce using rule 70 (single_operation)
    AND         reduce using rule 70 (single_operation)
    OR          reduce using rule 70 (single_operation)
    GREATER     reduce using rule 70 (single_operation)
    GREATER_EQ  reduce using rule 70 (single_operation)
    LESS        reduce using rule 70 (single_operation)
    LESS_EQ     reduce using rule 70 (single_operation)
    EQUAL       reduce using rule 70 (single_operation)
    NOT_EQ      reduce using rule 70 (single_operation)
    '+'         reduce using rule 70 (single_operation)
    '-'         reduce using rule 70 (single_operation)
    '*'         reduce using rule 70 (single_operation)
    '/'         reduce using rule 70 (single_operation)


State 464

   49 func_calling: ID '(' $@3 • calling_parameters $@4 ')'

    NUM_INT    shift, and go to state 225
    NUM_FLOAT  shift, and go to state 226
    NIL_CNST   shift, and go to state 227
    ID         shift, and go to state 228
    '('        shift, and go to state 229
    '+'        shift, and go to state 230
    '-'        shift, and go to state 231
    '%'        shift, and go to state 232
    '?'        shift, and go to state 233
    '!'        shift, and go to state 234

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 485
    lst_calling_parameters  go to state 127
    func_calling            go to state 235
    expression              go to state 236
    const                   go to state 237
    number                  go to state 238
    operation               go to state 128
    single_operation        go to state 239
    arith_binary            go to state 240
    arith_single            go to state 241
    lst_single              go to state 242
    lst_binary              go to state 243


State 465

   50 expression: '(' expression ')' •

    ')'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)


State 466

   49 func_calling: ID '(' $@3 • calling_parameters $@4 ')'

    NUM_INT    shift, and go to state 225
    NUM_FLOAT  shift, and go to state 226
    NIL_CNST   shift, and go to state 227
    ID         shift, and go to state 228
    '('        shift, and go to state 229
    '+'        shift, and go to state 230
    '-'        shift, and go to state 231
    '%'        shift, and go to state 232
    '?'        shift, and go to state 233
    '!'        shift, and go to state 234

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 486
    lst_calling_parameters  go to state 127
    func_calling            go to state 235
    expression              go to state 236
    const                   go to state 237
    number                  go to state 238
    operation               go to state 128
    single_operation        go to state 239
    arith_binary            go to state 240
    arith_single            go to state 241
    lst_single              go to state 242
    lst_binary              go to state 243


State 467

   50 expression: '(' expression ')' •

    ')'         reduce using rule 50 (expression)
    ','         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)


State 468

   34 conditional_stmt: IF_STMT '(' operation ')' • command
   35                 | IF_STMT '(' operation ')' • command ELSE_STMT command

    error           shift, and go to state 248
    NUM_INT         shift, and go to state 28
    NUM_FLOAT       shift, and go to state 29
    NIL_CNST        shift, and go to state 30
    ID              shift, and go to state 31
    RETURN_STM      shift, and go to state 249
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 250
    FOR_STMT        shift, and go to state 251
    OUTPUT_WRITE    shift, and go to state 252
    OUTPUT_WRITELN  shift, and go to state 253
    INPUT_READ      shift, and go to state 254
    '('             shift, and go to state 38
    '+'             shift, and go to state 39
    '-'             shift, and go to state 40
    '%'             shift, and go to state 41
    '?'             shift, and go to state 42
    '!'             shift, and go to state 43

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 255
    unq_declaration   go to state 256
    command           go to state 487
    $@2               go to state 257
    init_variable     go to state 258
    conditional_stmt  go to state 259
    return_stmt       go to state 260
    iteration         go to state 261
    init_stmt         go to state 262
    output            go to state 263
    input             go to state 264
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 156
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 265
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 469

   37 iteration: FOR_STMT '(' loop_condition ')' • command

    error           shift, and go to state 248
    NUM_INT         shift, and go to state 28
    NUM_FLOAT       shift, and go to state 29
    NIL_CNST        shift, and go to state 30
    ID              shift, and go to state 31
    RETURN_STM      shift, and go to state 249
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 250
    FOR_STMT        shift, and go to state 251
    OUTPUT_WRITE    shift, and go to state 252
    OUTPUT_WRITELN  shift, and go to state 253
    INPUT_READ      shift, and go to state 254
    '('             shift, and go to state 38
    '+'             shift, and go to state 39
    '-'             shift, and go to state 40
    '%'             shift, and go to state 41
    '?'             shift, and go to state 42
    '!'             shift, and go to state 43

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 255
    unq_declaration   go to state 256
    command           go to state 488
    $@2               go to state 257
    init_variable     go to state 258
    conditional_stmt  go to state 259
    return_stmt       go to state 260
    iteration         go to state 261
    init_stmt         go to state 262
    output            go to state 263
    input             go to state 264
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 156
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 265
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 470

   44 output: OUTPUT_WRITE '(' STRING ')' • ';'

    ';'  shift, and go to state 489


State 471

   42 output: OUTPUT_WRITE '(' operation ')' • ';'

    ';'  shift, and go to state 490


State 472

   45 output: OUTPUT_WRITELN '(' STRING ')' • ';'

    ';'  shift, and go to state 491


State 473

   43 output: OUTPUT_WRITELN '(' operation ')' • ';'

    ';'  shift, and go to state 492


State 474

   46 input: INPUT_READ '(' expression ')' • ';'

    ';'  shift, and go to state 493


State 475

   30 command: $@2 '{' block_commands '}' •

    error           reduce using rule 30 (command)
    NUM_INT         reduce using rule 30 (command)
    NUM_FLOAT       reduce using rule 30 (command)
    NIL_CNST        reduce using rule 30 (command)
    ID              reduce using rule 30 (command)
    RETURN_STM      reduce using rule 30 (command)
    T_INT           reduce using rule 30 (command)
    T_FLOAT         reduce using rule 30 (command)
    IF_STMT         reduce using rule 30 (command)
    ELSE_STMT       reduce using rule 30 (command)
    FOR_STMT        reduce using rule 30 (command)
    OUTPUT_WRITE    reduce using rule 30 (command)
    OUTPUT_WRITELN  reduce using rule 30 (command)
    INPUT_READ      reduce using rule 30 (command)
    '('             reduce using rule 30 (command)
    '{'             reduce using rule 30 (command)
    '}'             reduce using rule 30 (command)
    '+'             reduce using rule 30 (command)
    '-'             reduce using rule 30 (command)
    '%'             reduce using rule 30 (command)
    '?'             reduce using rule 30 (command)
    '!'             reduce using rule 30 (command)


State 476

   49 func_calling: ID '(' $@3 calling_parameters $@4 • ')'

    ')'  shift, and go to state 494


State 477

   49 func_calling: ID '(' $@3 calling_parameters $@4 • ')'

    ')'  shift, and go to state 495


State 478

   49 func_calling: ID '(' $@3 • calling_parameters $@4 ')'

    NUM_INT    shift, and go to state 225
    NUM_FLOAT  shift, and go to state 226
    NIL_CNST   shift, and go to state 227
    ID         shift, and go to state 228
    '('        shift, and go to state 229
    '+'        shift, and go to state 230
    '-'        shift, and go to state 231
    '%'        shift, and go to state 232
    '?'        shift, and go to state 233
    '!'        shift, and go to state 234

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 496
    lst_calling_parameters  go to state 127
    func_calling            go to state 235
    expression              go to state 236
    const                   go to state 237
    number                  go to state 238
    operation               go to state 128
    single_operation        go to state 239
    arith_binary            go to state 240
    arith_single            go to state 241
    lst_single              go to state 242
    lst_binary              go to state 243


State 479

   50 expression: '(' expression ')' •

    ')'         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)


State 480

   49 func_calling: ID '(' $@3 calling_parameters $@4 • ')'

    ')'  shift, and go to state 497


State 481

   49 func_calling: ID '(' $@3 calling_parameters $@4 • ')'

    ')'  shift, and go to state 498


State 482

   49 func_calling: ID '(' $@3 calling_parameters $@4 • ')'

    ')'  shift, and go to state 499


State 483

   49 func_calling: ID '(' $@3 • calling_parameters $@4 ')'

    NUM_INT    shift, and go to state 225
    NUM_FLOAT  shift, and go to state 226
    NIL_CNST   shift, and go to state 227
    ID         shift, and go to state 228
    '('        shift, and go to state 229
    '+'        shift, and go to state 230
    '-'        shift, and go to state 231
    '%'        shift, and go to state 232
    '?'        shift, and go to state 233
    '!'        shift, and go to state 234

    ')'  reduce using rule 17 (calling_parameters)

    calling_parameters      go to state 500
    lst_calling_parameters  go to state 127
    func_calling            go to state 235
    expression              go to state 236
    const                   go to state 237
    number                  go to state 238
    operation               go to state 128
    single_operation        go to state 239
    arith_binary            go to state 240
    arith_single            go to state 241
    lst_single              go to state 242
    lst_binary              go to state 243


State 484

   50 expression: '(' expression ')' •

    ')'         reduce using rule 50 (expression)
    ','         reduce using rule 50 (expression)
    AND         reduce using rule 50 (expression)
    OR          reduce using rule 50 (expression)
    GREATER     reduce using rule 50 (expression)
    GREATER_EQ  reduce using rule 50 (expression)
    LESS        reduce using rule 50 (expression)
    LESS_EQ     reduce using rule 50 (expression)
    EQUAL       reduce using rule 50 (expression)
    NOT_EQ      reduce using rule 50 (expression)
    '+'         reduce using rule 50 (expression)
    '-'         reduce using rule 50 (expression)
    '*'         reduce using rule 50 (expression)
    '/'         reduce using rule 50 (expression)


State 485

   49 func_calling: ID '(' $@3 calling_parameters • $@4 ')'

    ')'  reduce using rule 48 ($@4)

    $@4  go to state 501


State 486

   49 func_calling: ID '(' $@3 calling_parameters • $@4 ')'

    ')'  reduce using rule 48 ($@4)

    $@4  go to state 502


State 487

   34 conditional_stmt: IF_STMT '(' operation ')' command •
   35                 | IF_STMT '(' operation ')' command • ELSE_STMT command

    ELSE_STMT  shift, and go to state 503

    error           reduce using rule 34 (conditional_stmt)
    NUM_INT         reduce using rule 34 (conditional_stmt)
    NUM_FLOAT       reduce using rule 34 (conditional_stmt)
    NIL_CNST        reduce using rule 34 (conditional_stmt)
    ID              reduce using rule 34 (conditional_stmt)
    RETURN_STM      reduce using rule 34 (conditional_stmt)
    T_INT           reduce using rule 34 (conditional_stmt)
    T_FLOAT         reduce using rule 34 (conditional_stmt)
    IF_STMT         reduce using rule 34 (conditional_stmt)
    FOR_STMT        reduce using rule 34 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 34 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 34 (conditional_stmt)
    INPUT_READ      reduce using rule 34 (conditional_stmt)
    '('             reduce using rule 34 (conditional_stmt)
    '{'             reduce using rule 34 (conditional_stmt)
    '}'             reduce using rule 34 (conditional_stmt)
    '+'             reduce using rule 34 (conditional_stmt)
    '-'             reduce using rule 34 (conditional_stmt)
    '%'             reduce using rule 34 (conditional_stmt)
    '?'             reduce using rule 34 (conditional_stmt)
    '!'             reduce using rule 34 (conditional_stmt)


State 488

   37 iteration: FOR_STMT '(' loop_condition ')' command •

    error           reduce using rule 37 (iteration)
    NUM_INT         reduce using rule 37 (iteration)
    NUM_FLOAT       reduce using rule 37 (iteration)
    NIL_CNST        reduce using rule 37 (iteration)
    ID              reduce using rule 37 (iteration)
    RETURN_STM      reduce using rule 37 (iteration)
    T_INT           reduce using rule 37 (iteration)
    T_FLOAT         reduce using rule 37 (iteration)
    IF_STMT         reduce using rule 37 (iteration)
    ELSE_STMT       reduce using rule 37 (iteration)
    FOR_STMT        reduce using rule 37 (iteration)
    OUTPUT_WRITE    reduce using rule 37 (iteration)
    OUTPUT_WRITELN  reduce using rule 37 (iteration)
    INPUT_READ      reduce using rule 37 (iteration)
    '('             reduce using rule 37 (iteration)
    '{'             reduce using rule 37 (iteration)
    '}'             reduce using rule 37 (iteration)
    '+'             reduce using rule 37 (iteration)
    '-'             reduce using rule 37 (iteration)
    '%'             reduce using rule 37 (iteration)
    '?'             reduce using rule 37 (iteration)
    '!'             reduce using rule 37 (iteration)


State 489

   44 output: OUTPUT_WRITE '(' STRING ')' ';' •

    error           reduce using rule 44 (output)
    NUM_INT         reduce using rule 44 (output)
    NUM_FLOAT       reduce using rule 44 (output)
    NIL_CNST        reduce using rule 44 (output)
    ID              reduce using rule 44 (output)
    RETURN_STM      reduce using rule 44 (output)
    T_INT           reduce using rule 44 (output)
    T_FLOAT         reduce using rule 44 (output)
    IF_STMT         reduce using rule 44 (output)
    ELSE_STMT       reduce using rule 44 (output)
    FOR_STMT        reduce using rule 44 (output)
    OUTPUT_WRITE    reduce using rule 44 (output)
    OUTPUT_WRITELN  reduce using rule 44 (output)
    INPUT_READ      reduce using rule 44 (output)
    '('             reduce using rule 44 (output)
    '{'             reduce using rule 44 (output)
    '}'             reduce using rule 44 (output)
    '+'             reduce using rule 44 (output)
    '-'             reduce using rule 44 (output)
    '%'             reduce using rule 44 (output)
    '?'             reduce using rule 44 (output)
    '!'             reduce using rule 44 (output)


State 490

   42 output: OUTPUT_WRITE '(' operation ')' ';' •

    error           reduce using rule 42 (output)
    NUM_INT         reduce using rule 42 (output)
    NUM_FLOAT       reduce using rule 42 (output)
    NIL_CNST        reduce using rule 42 (output)
    ID              reduce using rule 42 (output)
    RETURN_STM      reduce using rule 42 (output)
    T_INT           reduce using rule 42 (output)
    T_FLOAT         reduce using rule 42 (output)
    IF_STMT         reduce using rule 42 (output)
    ELSE_STMT       reduce using rule 42 (output)
    FOR_STMT        reduce using rule 42 (output)
    OUTPUT_WRITE    reduce using rule 42 (output)
    OUTPUT_WRITELN  reduce using rule 42 (output)
    INPUT_READ      reduce using rule 42 (output)
    '('             reduce using rule 42 (output)
    '{'             reduce using rule 42 (output)
    '}'             reduce using rule 42 (output)
    '+'             reduce using rule 42 (output)
    '-'             reduce using rule 42 (output)
    '%'             reduce using rule 42 (output)
    '?'             reduce using rule 42 (output)
    '!'             reduce using rule 42 (output)


State 491

   45 output: OUTPUT_WRITELN '(' STRING ')' ';' •

    error           reduce using rule 45 (output)
    NUM_INT         reduce using rule 45 (output)
    NUM_FLOAT       reduce using rule 45 (output)
    NIL_CNST        reduce using rule 45 (output)
    ID              reduce using rule 45 (output)
    RETURN_STM      reduce using rule 45 (output)
    T_INT           reduce using rule 45 (output)
    T_FLOAT         reduce using rule 45 (output)
    IF_STMT         reduce using rule 45 (output)
    ELSE_STMT       reduce using rule 45 (output)
    FOR_STMT        reduce using rule 45 (output)
    OUTPUT_WRITE    reduce using rule 45 (output)
    OUTPUT_WRITELN  reduce using rule 45 (output)
    INPUT_READ      reduce using rule 45 (output)
    '('             reduce using rule 45 (output)
    '{'             reduce using rule 45 (output)
    '}'             reduce using rule 45 (output)
    '+'             reduce using rule 45 (output)
    '-'             reduce using rule 45 (output)
    '%'             reduce using rule 45 (output)
    '?'             reduce using rule 45 (output)
    '!'             reduce using rule 45 (output)


State 492

   43 output: OUTPUT_WRITELN '(' operation ')' ';' •

    error           reduce using rule 43 (output)
    NUM_INT         reduce using rule 43 (output)
    NUM_FLOAT       reduce using rule 43 (output)
    NIL_CNST        reduce using rule 43 (output)
    ID              reduce using rule 43 (output)
    RETURN_STM      reduce using rule 43 (output)
    T_INT           reduce using rule 43 (output)
    T_FLOAT         reduce using rule 43 (output)
    IF_STMT         reduce using rule 43 (output)
    ELSE_STMT       reduce using rule 43 (output)
    FOR_STMT        reduce using rule 43 (output)
    OUTPUT_WRITE    reduce using rule 43 (output)
    OUTPUT_WRITELN  reduce using rule 43 (output)
    INPUT_READ      reduce using rule 43 (output)
    '('             reduce using rule 43 (output)
    '{'             reduce using rule 43 (output)
    '}'             reduce using rule 43 (output)
    '+'             reduce using rule 43 (output)
    '-'             reduce using rule 43 (output)
    '%'             reduce using rule 43 (output)
    '?'             reduce using rule 43 (output)
    '!'             reduce using rule 43 (output)


State 493

   46 input: INPUT_READ '(' expression ')' ';' •

    error           reduce using rule 46 (input)
    NUM_INT         reduce using rule 46 (input)
    NUM_FLOAT       reduce using rule 46 (input)
    NIL_CNST        reduce using rule 46 (input)
    ID              reduce using rule 46 (input)
    RETURN_STM      reduce using rule 46 (input)
    T_INT           reduce using rule 46 (input)
    T_FLOAT         reduce using rule 46 (input)
    IF_STMT         reduce using rule 46 (input)
    ELSE_STMT       reduce using rule 46 (input)
    FOR_STMT        reduce using rule 46 (input)
    OUTPUT_WRITE    reduce using rule 46 (input)
    OUTPUT_WRITELN  reduce using rule 46 (input)
    INPUT_READ      reduce using rule 46 (input)
    '('             reduce using rule 46 (input)
    '{'             reduce using rule 46 (input)
    '}'             reduce using rule 46 (input)
    '+'             reduce using rule 46 (input)
    '-'             reduce using rule 46 (input)
    '%'             reduce using rule 46 (input)
    '?'             reduce using rule 46 (input)
    '!'             reduce using rule 46 (input)


State 494

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')' •

    ')'  reduce using rule 49 (func_calling)


State 495

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')' •

    ')'         reduce using rule 49 (func_calling)
    AND         reduce using rule 49 (func_calling)
    OR          reduce using rule 49 (func_calling)
    GREATER     reduce using rule 49 (func_calling)
    GREATER_EQ  reduce using rule 49 (func_calling)
    LESS        reduce using rule 49 (func_calling)
    LESS_EQ     reduce using rule 49 (func_calling)
    EQUAL       reduce using rule 49 (func_calling)
    NOT_EQ      reduce using rule 49 (func_calling)
    '+'         reduce using rule 49 (func_calling)
    '-'         reduce using rule 49 (func_calling)
    '*'         reduce using rule 49 (func_calling)
    '/'         reduce using rule 49 (func_calling)
    FILTER      reduce using rule 49 (func_calling)
    MAP         reduce using rule 49 (func_calling)
    ':'         reduce using rule 49 (func_calling)


State 496

   49 func_calling: ID '(' $@3 calling_parameters • $@4 ')'

    ')'  reduce using rule 48 ($@4)

    $@4  go to state 504


State 497

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')' •

    ';'         reduce using rule 49 (func_calling)
    AND         reduce using rule 49 (func_calling)
    OR          reduce using rule 49 (func_calling)
    GREATER     reduce using rule 49 (func_calling)
    GREATER_EQ  reduce using rule 49 (func_calling)
    LESS        reduce using rule 49 (func_calling)
    LESS_EQ     reduce using rule 49 (func_calling)
    EQUAL       reduce using rule 49 (func_calling)
    NOT_EQ      reduce using rule 49 (func_calling)


State 498

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')' •

    ';'         reduce using rule 49 (func_calling)
    AND         reduce using rule 49 (func_calling)
    OR          reduce using rule 49 (func_calling)
    GREATER     reduce using rule 49 (func_calling)
    GREATER_EQ  reduce using rule 49 (func_calling)
    LESS        reduce using rule 49 (func_calling)
    LESS_EQ     reduce using rule 49 (func_calling)
    EQUAL       reduce using rule 49 (func_calling)
    NOT_EQ      reduce using rule 49 (func_calling)
    '+'         reduce using rule 49 (func_calling)
    '-'         reduce using rule 49 (func_calling)
    '*'         reduce using rule 49 (func_calling)
    '/'         reduce using rule 49 (func_calling)


State 499

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')' •

    ')'         reduce using rule 49 (func_calling)
    ','         reduce using rule 49 (func_calling)
    AND         reduce using rule 49 (func_calling)
    OR          reduce using rule 49 (func_calling)
    GREATER     reduce using rule 49 (func_calling)
    GREATER_EQ  reduce using rule 49 (func_calling)
    LESS        reduce using rule 49 (func_calling)
    LESS_EQ     reduce using rule 49 (func_calling)
    EQUAL       reduce using rule 49 (func_calling)
    NOT_EQ      reduce using rule 49 (func_calling)
    '+'         reduce using rule 49 (func_calling)
    '-'         reduce using rule 49 (func_calling)
    '*'         reduce using rule 49 (func_calling)
    '/'         reduce using rule 49 (func_calling)
    FILTER      reduce using rule 49 (func_calling)
    MAP         reduce using rule 49 (func_calling)
    ':'         reduce using rule 49 (func_calling)


State 500

   49 func_calling: ID '(' $@3 calling_parameters • $@4 ')'

    ')'  reduce using rule 48 ($@4)

    $@4  go to state 505


State 501

   49 func_calling: ID '(' $@3 calling_parameters $@4 • ')'

    ')'  shift, and go to state 506


State 502

   49 func_calling: ID '(' $@3 calling_parameters $@4 • ')'

    ')'  shift, and go to state 507


State 503

   35 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT • command

    error           shift, and go to state 248
    NUM_INT         shift, and go to state 28
    NUM_FLOAT       shift, and go to state 29
    NIL_CNST        shift, and go to state 30
    ID              shift, and go to state 31
    RETURN_STM      shift, and go to state 249
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 250
    FOR_STMT        shift, and go to state 251
    OUTPUT_WRITE    shift, and go to state 252
    OUTPUT_WRITELN  shift, and go to state 253
    INPUT_READ      shift, and go to state 254
    '('             shift, and go to state 38
    '+'             shift, and go to state 39
    '-'             shift, and go to state 40
    '%'             shift, and go to state 41
    '?'             shift, and go to state 42
    '!'             shift, and go to state 43

    '{'  reduce using rule 29 ($@2)

    var_declaration   go to state 255
    unq_declaration   go to state 256
    command           go to state 508
    $@2               go to state 257
    init_variable     go to state 258
    conditional_stmt  go to state 259
    return_stmt       go to state 260
    iteration         go to state 261
    init_stmt         go to state 262
    output            go to state 263
    input             go to state 264
    func_calling      go to state 56
    expression        go to state 57
    const             go to state 58
    number            go to state 59
    type              go to state 156
    type_lst          go to state 11
    type_number       go to state 12
    operation         go to state 265
    single_operation  go to state 61
    arith_binary      go to state 62
    arith_single      go to state 63
    lst_single        go to state 64
    lst_binary        go to state 65


State 504

   49 func_calling: ID '(' $@3 calling_parameters $@4 • ')'

    ')'  shift, and go to state 509


State 505

   49 func_calling: ID '(' $@3 calling_parameters $@4 • ')'

    ')'  shift, and go to state 510


State 506

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')' •

    ')'         reduce using rule 49 (func_calling)
    AND         reduce using rule 49 (func_calling)
    OR          reduce using rule 49 (func_calling)
    GREATER     reduce using rule 49 (func_calling)
    GREATER_EQ  reduce using rule 49 (func_calling)
    LESS        reduce using rule 49 (func_calling)
    LESS_EQ     reduce using rule 49 (func_calling)
    EQUAL       reduce using rule 49 (func_calling)
    NOT_EQ      reduce using rule 49 (func_calling)


State 507

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')' •

    ')'         reduce using rule 49 (func_calling)
    ','         reduce using rule 49 (func_calling)
    AND         reduce using rule 49 (func_calling)
    OR          reduce using rule 49 (func_calling)
    GREATER     reduce using rule 49 (func_calling)
    GREATER_EQ  reduce using rule 49 (func_calling)
    LESS        reduce using rule 49 (func_calling)
    LESS_EQ     reduce using rule 49 (func_calling)
    EQUAL       reduce using rule 49 (func_calling)
    NOT_EQ      reduce using rule 49 (func_calling)


State 508

   35 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT command •

    error           reduce using rule 35 (conditional_stmt)
    NUM_INT         reduce using rule 35 (conditional_stmt)
    NUM_FLOAT       reduce using rule 35 (conditional_stmt)
    NIL_CNST        reduce using rule 35 (conditional_stmt)
    ID              reduce using rule 35 (conditional_stmt)
    RETURN_STM      reduce using rule 35 (conditional_stmt)
    T_INT           reduce using rule 35 (conditional_stmt)
    T_FLOAT         reduce using rule 35 (conditional_stmt)
    IF_STMT         reduce using rule 35 (conditional_stmt)
    ELSE_STMT       reduce using rule 35 (conditional_stmt)
    FOR_STMT        reduce using rule 35 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 35 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 35 (conditional_stmt)
    INPUT_READ      reduce using rule 35 (conditional_stmt)
    '('             reduce using rule 35 (conditional_stmt)
    '{'             reduce using rule 35 (conditional_stmt)
    '}'             reduce using rule 35 (conditional_stmt)
    '+'             reduce using rule 35 (conditional_stmt)
    '-'             reduce using rule 35 (conditional_stmt)
    '%'             reduce using rule 35 (conditional_stmt)
    '?'             reduce using rule 35 (conditional_stmt)
    '!'             reduce using rule 35 (conditional_stmt)


State 509

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')' •

    ')'         reduce using rule 49 (func_calling)
    AND         reduce using rule 49 (func_calling)
    OR          reduce using rule 49 (func_calling)
    GREATER     reduce using rule 49 (func_calling)
    GREATER_EQ  reduce using rule 49 (func_calling)
    LESS        reduce using rule 49 (func_calling)
    LESS_EQ     reduce using rule 49 (func_calling)
    EQUAL       reduce using rule 49 (func_calling)
    NOT_EQ      reduce using rule 49 (func_calling)
    '+'         reduce using rule 49 (func_calling)
    '-'         reduce using rule 49 (func_calling)
    '*'         reduce using rule 49 (func_calling)
    '/'         reduce using rule 49 (func_calling)


State 510

   49 func_calling: ID '(' $@3 calling_parameters $@4 ')' •

    ')'         reduce using rule 49 (func_calling)
    ','         reduce using rule 49 (func_calling)
    AND         reduce using rule 49 (func_calling)
    OR          reduce using rule 49 (func_calling)
    GREATER     reduce using rule 49 (func_calling)
    GREATER_EQ  reduce using rule 49 (func_calling)
    LESS        reduce using rule 49 (func_calling)
    LESS_EQ     reduce using rule 49 (func_calling)
    EQUAL       reduce using rule 49 (func_calling)
    NOT_EQ      reduce using rule 49 (func_calling)
    '+'         reduce using rule 49 (func_calling)
    '-'         reduce using rule 49 (func_calling)
    '*'         reduce using rule 49 (func_calling)
    '/'         reduce using rule 49 (func_calling)
