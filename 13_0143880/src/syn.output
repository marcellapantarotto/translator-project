Grammar

    0 $accept: program $end

    1 program: lst_declarations
    2        | %empty

    3 lst_declarations: declaration lst_declarations
    4                 | declaration

    5 declaration: func_declaration
    6            | var_declaration
    7            | error

    8 $@1: %empty

    9 func_declaration: unq_declaration $@1 '(' parameters ')' '{' block_commands '}'

   10 $@2: %empty

   11 $@3: %empty

   12 func_calling: ID '(' $@2 calling_parameters $@3 ')'

   13 var_declaration: unq_declaration ';'

   14 unq_declaration: type ID

   15 type: type_lst
   16     | type_number

   17 type_lst: type_number T_LIST

   18 type_number: T_INT
   19            | T_FLOAT

   20 parameters: lst_parameters
   21           | %empty

   22 $@4: %empty

   23 lst_parameters: unq_declaration ',' lst_parameters $@4

   24 $@5: %empty

   25 lst_parameters: unq_declaration $@5

   26 calling_parameters: lst_calling_parameters
   27                   | %empty

   28 lst_calling_parameters: operation ',' lst_calling_parameters
   29                       | operation

   30 block_commands: command block_commands
   31               | command

   32 command: var_declaration
   33        | init_variable
   34        | conditional_stmt
   35        | return_stmt
   36        | iteration
   37        | output
   38        | input

   39 $@6: %empty

   40 command: $@6 '{' block_commands '}'
   41        | operation ';'
   42        | error ';'
   43        | error

   44 init_variable: init_stmt ';'

   45 init_stmt: iden '=' operation

   46 conditional_stmt: IF_STMT '(' operation ')' command
   47                 | IF_STMT '(' operation ')' command ELSE_STMT command

   48 return_stmt: RETURN_STM operation ';'

   49 iteration: FOR_STMT '(' loop_condition ')' command

   50 loop_condition: update_stmt ';' stop_stmt ';' update_stmt

   51 update_stmt: init_stmt
   52            | %empty

   53 stop_stmt: operation
   54          | %empty

   55 output: OUTPUT_WRITE '(' operation ')' ';'
   56       | OUTPUT_WRITELN '(' operation ')' ';'
   57       | OUTPUT_WRITE '(' STRING ')' ';'
   58       | OUTPUT_WRITELN '(' STRING ')' ';'

   59 input: INPUT_READ '(' iden ')' ';'

   60 iden: ID

   61 operation: lst_binary
   62          | operation GREATER operation
   63          | operation GREATER_EQ operation
   64          | operation LESS operation
   65          | operation LESS_EQ operation
   66          | operation EQUAL operation
   67          | operation NOT_EQ operation
   68          | operation AND operation
   69          | operation OR operation

   70 lst_binary: lst_binary FILTER lst_binary
   71           | lst_binary MAP lst_binary
   72           | lst_binary ':' lst_binary
   73           | arith_binary

   74 arith_binary: arith_binary '+' term
   75             | arith_binary '-' term
   76             | term

   77 term: term '*' expression
   78     | term '/' expression
   79     | expression

   80 expression: func_calling
   81           | single_operation
   82           | const
   83           | iden
   84           | '(' operation ')'

   85 const: number
   86      | NIL_CNST

   87 number: NUM_INT
   88       | NUM_FLOAT

   89 single_operation: arith_single
   90                 | lst_single
   91                 | '!' expression

   92 arith_single: '+' expression
   93             | '-' expression

   94 lst_single: '%' expression
   95           | '?' expression


Terminals, with rules where they appear

    $end (0) 0
    '!' <token> (33) 91
    '%' <token> (37) 94
    '(' <token> (40) 9 12 46 47 49 55 56 57 58 59 84
    ')' <token> (41) 9 12 46 47 49 55 56 57 58 59 84
    '*' <token> (42) 77
    '+' <token> (43) 74 92
    ',' <token> (44) 23 28
    '-' <token> (45) 75 93
    '/' <token> (47) 78
    ':' <token> (58) 72
    ';' <token> (59) 13 41 42 44 48 50 55 56 57 58 59
    '=' <token> (61) 45
    '?' <token> (63) 95
    '{' <token> (123) 9 40
    '}' <token> (125) 9 40
    error (256) 7 42 43
    NUM_INT <token> (258) 87
    NUM_FLOAT <token> (259) 88
    STRING <token> (260) 57 58
    NIL_CNST <token> (261) 86
    ID <token> (262) 12 14 60
    RETURN_STM <token> (263) 48
    T_INT <token> (264) 18
    T_FLOAT <token> (265) 19
    T_LIST <token> (266) 17
    IF_STMT <token> (267) 46 47
    ELSE_STMT <token> (268) 47
    FOR_STMT <token> (269) 49
    OUTPUT_WRITE <token> (270) 55 57
    OUTPUT_WRITELN <token> (271) 56 58
    INPUT_READ <token> (272) 59
    AND <token> (273) 68
    OR <token> (274) 69
    GREATER <token> (275) 62
    GREATER_EQ <token> (276) 63
    LESS <token> (277) 64
    LESS_EQ <token> (278) 65
    EQUAL <token> (279) 66
    NOT_EQ <token> (280) 67
    FILTER <token> (281) 70
    MAP <token> (282) 71


Nonterminals, with rules where they appear

    $accept (43)
        on left: 0
    program <node> (44)
        on left: 1 2
        on right: 0
    lst_declarations <node> (45)
        on left: 3 4
        on right: 1 3
    declaration <node> (46)
        on left: 5 6 7
        on right: 3 4
    func_declaration <node> (47)
        on left: 9
        on right: 5
    $@1 (48)
        on left: 8
        on right: 9
    func_calling <node> (49)
        on left: 12
        on right: 80
    $@2 (50)
        on left: 10
        on right: 12
    $@3 (51)
        on left: 11
        on right: 12
    var_declaration <node> (52)
        on left: 13
        on right: 6 32
    unq_declaration <node> (53)
        on left: 14
        on right: 9 13 23 25
    type <node> (54)
        on left: 15 16
        on right: 14
    type_lst <node> (55)
        on left: 17
        on right: 15
    type_number <node> (56)
        on left: 18 19
        on right: 16 17
    parameters <node> (57)
        on left: 20 21
        on right: 9
    lst_parameters <node> (58)
        on left: 23 25
        on right: 20 23
    $@4 (59)
        on left: 22
        on right: 23
    $@5 (60)
        on left: 24
        on right: 25
    calling_parameters <node> (61)
        on left: 26 27
        on right: 12
    lst_calling_parameters <node> (62)
        on left: 28 29
        on right: 26 28
    block_commands <node> (63)
        on left: 30 31
        on right: 9 30 40
    command <node> (64)
        on left: 32 33 34 35 36 37 38 40 41 42 43
        on right: 30 31 46 47 49
    $@6 (65)
        on left: 39
        on right: 40
    init_variable <node> (66)
        on left: 44
        on right: 33
    init_stmt <node> (67)
        on left: 45
        on right: 44 51
    conditional_stmt <node> (68)
        on left: 46 47
        on right: 34
    return_stmt <node> (69)
        on left: 48
        on right: 35
    iteration <node> (70)
        on left: 49
        on right: 36
    loop_condition <node> (71)
        on left: 50
        on right: 49
    update_stmt <node> (72)
        on left: 51 52
        on right: 50
    stop_stmt <node> (73)
        on left: 53 54
        on right: 50
    output <node> (74)
        on left: 55 56 57 58
        on right: 37
    input <node> (75)
        on left: 59
        on right: 38
    iden <node> (76)
        on left: 60
        on right: 45 59 83
    operation <node> (77)
        on left: 61 62 63 64 65 66 67 68 69
        on right: 28 29 41 45 46 47 48 53 55 56 62 63 64 65 66 67 68 69 84
    lst_binary <node> (78)
        on left: 70 71 72 73
        on right: 61 70 71 72
    arith_binary <node> (79)
        on left: 74 75 76
        on right: 73 74 75
    term <node> (80)
        on left: 77 78 79
        on right: 74 75 76 77 78
    expression <node> (81)
        on left: 80 81 82 83 84
        on right: 77 78 79 91 92 93 94 95
    const <node> (82)
        on left: 85 86
        on right: 82
    number <node> (83)
        on left: 87 88
        on right: 85
    single_operation <node> (84)
        on left: 89 90 91
        on right: 81
    arith_single <node> (85)
        on left: 92 93
        on right: 89
    lst_single <node> (86)
        on left: 94 95
        on right: 90


State 0

    0 $accept: • program $end

    error    shift, and go to state 1
    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    $end  reduce using rule 2 (program)

    program           go to state 4
    lst_declarations  go to state 5
    declaration       go to state 6
    func_declaration  go to state 7
    var_declaration   go to state 8
    unq_declaration   go to state 9
    type              go to state 10
    type_lst          go to state 11
    type_number       go to state 12


State 1

    7 declaration: error •

    $end     reduce using rule 7 (declaration)
    error    reduce using rule 7 (declaration)
    T_INT    reduce using rule 7 (declaration)
    T_FLOAT  reduce using rule 7 (declaration)


State 2

   18 type_number: T_INT •

    ID      reduce using rule 18 (type_number)
    T_LIST  reduce using rule 18 (type_number)


State 3

   19 type_number: T_FLOAT •

    ID      reduce using rule 19 (type_number)
    T_LIST  reduce using rule 19 (type_number)


State 4

    0 $accept: program • $end

    $end  shift, and go to state 13


State 5

    1 program: lst_declarations •

    $end  reduce using rule 1 (program)


State 6

    3 lst_declarations: declaration • lst_declarations
    4                 | declaration •

    error    shift, and go to state 1
    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    $end  reduce using rule 4 (lst_declarations)

    lst_declarations  go to state 14
    declaration       go to state 6
    func_declaration  go to state 7
    var_declaration   go to state 8
    unq_declaration   go to state 9
    type              go to state 10
    type_lst          go to state 11
    type_number       go to state 12


State 7

    5 declaration: func_declaration •

    $end     reduce using rule 5 (declaration)
    error    reduce using rule 5 (declaration)
    T_INT    reduce using rule 5 (declaration)
    T_FLOAT  reduce using rule 5 (declaration)


State 8

    6 declaration: var_declaration •

    $end     reduce using rule 6 (declaration)
    error    reduce using rule 6 (declaration)
    T_INT    reduce using rule 6 (declaration)
    T_FLOAT  reduce using rule 6 (declaration)


State 9

    9 func_declaration: unq_declaration • $@1 '(' parameters ')' '{' block_commands '}'
   13 var_declaration: unq_declaration • ';'

    ';'  shift, and go to state 15

    '('  reduce using rule 8 ($@1)

    $@1  go to state 16


State 10

   14 unq_declaration: type • ID

    ID  shift, and go to state 17


State 11

   15 type: type_lst •

    ID  reduce using rule 15 (type)


State 12

   16 type: type_number •
   17 type_lst: type_number • T_LIST

    T_LIST  shift, and go to state 18

    ID  reduce using rule 16 (type)


State 13

    0 $accept: program $end •

    $default  accept


State 14

    3 lst_declarations: declaration lst_declarations •

    $end  reduce using rule 3 (lst_declarations)


State 15

   13 var_declaration: unq_declaration ';' •

    $end     reduce using rule 13 (var_declaration)
    error    reduce using rule 13 (var_declaration)
    T_INT    reduce using rule 13 (var_declaration)
    T_FLOAT  reduce using rule 13 (var_declaration)


State 16

    9 func_declaration: unq_declaration $@1 • '(' parameters ')' '{' block_commands '}'

    '('  shift, and go to state 19


State 17

   14 unq_declaration: type ID •

    '('  reduce using rule 14 (unq_declaration)
    ';'  reduce using rule 14 (unq_declaration)


State 18

   17 type_lst: type_number T_LIST •

    ID  reduce using rule 17 (type_lst)


State 19

    9 func_declaration: unq_declaration $@1 '(' • parameters ')' '{' block_commands '}'

    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    ')'  reduce using rule 21 (parameters)

    unq_declaration  go to state 20
    type             go to state 166
    type_lst         go to state 11
    type_number      go to state 12
    parameters       go to state 21
    lst_parameters   go to state 22


State 20

   23 lst_parameters: unq_declaration • ',' lst_parameters $@4
   25               | unq_declaration • $@5

    ','  shift, and go to state 23

    ')'  reduce using rule 24 ($@5)

    $@5  go to state 24


State 21

    9 func_declaration: unq_declaration $@1 '(' parameters • ')' '{' block_commands '}'

    ')'  shift, and go to state 25


State 22

   20 parameters: lst_parameters •

    ')'  reduce using rule 20 (parameters)


State 23

   23 lst_parameters: unq_declaration ',' • lst_parameters $@4

    T_INT    shift, and go to state 2
    T_FLOAT  shift, and go to state 3

    unq_declaration  go to state 20
    type             go to state 166
    type_lst         go to state 11
    type_number      go to state 12
    lst_parameters   go to state 26


State 24

   25 lst_parameters: unq_declaration $@5 •

    ')'  reduce using rule 25 (lst_parameters)


State 25

    9 func_declaration: unq_declaration $@1 '(' parameters ')' • '{' block_commands '}'

    '{'  shift, and go to state 27


State 26

   23 lst_parameters: unq_declaration ',' lst_parameters • $@4

    ')'  reduce using rule 22 ($@4)

    $@4  go to state 28


State 27

    9 func_declaration: unq_declaration $@1 '(' parameters ')' '{' • block_commands '}'

    error           shift, and go to state 29
    NUM_INT         shift, and go to state 30
    NUM_FLOAT       shift, and go to state 31
    NIL_CNST        shift, and go to state 32
    ID              shift, and go to state 33
    RETURN_STM      shift, and go to state 34
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 35
    FOR_STMT        shift, and go to state 36
    OUTPUT_WRITE    shift, and go to state 37
    OUTPUT_WRITELN  shift, and go to state 38
    INPUT_READ      shift, and go to state 39
    '('             shift, and go to state 40
    '+'             shift, and go to state 41
    '-'             shift, and go to state 42
    '%'             shift, and go to state 43
    '?'             shift, and go to state 44
    '!'             shift, and go to state 45

    '{'  reduce using rule 39 ($@6)

    func_calling      go to state 46
    var_declaration   go to state 47
    unq_declaration   go to state 48
    type              go to state 167
    type_lst          go to state 11
    type_number       go to state 12
    block_commands    go to state 49
    command           go to state 50
    $@6               go to state 51
    init_variable     go to state 52
    init_stmt         go to state 53
    conditional_stmt  go to state 54
    return_stmt       go to state 55
    iteration         go to state 56
    output            go to state 57
    input             go to state 58
    iden              go to state 59
    operation         go to state 60
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 28

   23 lst_parameters: unq_declaration ',' lst_parameters $@4 •

    ')'  reduce using rule 23 (lst_parameters)


State 29

   42 command: error • ';'
   43        | error •

    ';'  shift, and go to state 70

    error           reduce using rule 43 (command)
    NUM_INT         reduce using rule 43 (command)
    NUM_FLOAT       reduce using rule 43 (command)
    NIL_CNST        reduce using rule 43 (command)
    ID              reduce using rule 43 (command)
    RETURN_STM      reduce using rule 43 (command)
    T_INT           reduce using rule 43 (command)
    T_FLOAT         reduce using rule 43 (command)
    IF_STMT         reduce using rule 43 (command)
    FOR_STMT        reduce using rule 43 (command)
    OUTPUT_WRITE    reduce using rule 43 (command)
    OUTPUT_WRITELN  reduce using rule 43 (command)
    INPUT_READ      reduce using rule 43 (command)
    '('             reduce using rule 43 (command)
    '{'             reduce using rule 43 (command)
    '}'             reduce using rule 43 (command)
    '+'             reduce using rule 43 (command)
    '-'             reduce using rule 43 (command)
    '%'             reduce using rule 43 (command)
    '?'             reduce using rule 43 (command)
    '!'             reduce using rule 43 (command)


State 30

   87 number: NUM_INT •

    ';'         reduce using rule 87 (number)
    AND         reduce using rule 87 (number)
    OR          reduce using rule 87 (number)
    GREATER     reduce using rule 87 (number)
    GREATER_EQ  reduce using rule 87 (number)
    LESS        reduce using rule 87 (number)
    LESS_EQ     reduce using rule 87 (number)
    EQUAL       reduce using rule 87 (number)
    NOT_EQ      reduce using rule 87 (number)
    '+'         reduce using rule 87 (number)
    '-'         reduce using rule 87 (number)
    '*'         reduce using rule 87 (number)
    '/'         reduce using rule 87 (number)
    FILTER      reduce using rule 87 (number)
    MAP         reduce using rule 87 (number)
    ':'         reduce using rule 87 (number)


State 31

   88 number: NUM_FLOAT •

    ';'         reduce using rule 88 (number)
    AND         reduce using rule 88 (number)
    OR          reduce using rule 88 (number)
    GREATER     reduce using rule 88 (number)
    GREATER_EQ  reduce using rule 88 (number)
    LESS        reduce using rule 88 (number)
    LESS_EQ     reduce using rule 88 (number)
    EQUAL       reduce using rule 88 (number)
    NOT_EQ      reduce using rule 88 (number)
    '+'         reduce using rule 88 (number)
    '-'         reduce using rule 88 (number)
    '*'         reduce using rule 88 (number)
    '/'         reduce using rule 88 (number)
    FILTER      reduce using rule 88 (number)
    MAP         reduce using rule 88 (number)
    ':'         reduce using rule 88 (number)


State 32

   86 const: NIL_CNST •

    ';'         reduce using rule 86 (const)
    AND         reduce using rule 86 (const)
    OR          reduce using rule 86 (const)
    GREATER     reduce using rule 86 (const)
    GREATER_EQ  reduce using rule 86 (const)
    LESS        reduce using rule 86 (const)
    LESS_EQ     reduce using rule 86 (const)
    EQUAL       reduce using rule 86 (const)
    NOT_EQ      reduce using rule 86 (const)
    '+'         reduce using rule 86 (const)
    '-'         reduce using rule 86 (const)
    '*'         reduce using rule 86 (const)
    '/'         reduce using rule 86 (const)
    FILTER      reduce using rule 86 (const)
    MAP         reduce using rule 86 (const)
    ':'         reduce using rule 86 (const)


State 33

   12 func_calling: ID • '(' $@2 calling_parameters $@3 ')'
   60 iden: ID •

    '('  shift, and go to state 71

    ';'         reduce using rule 60 (iden)
    AND         reduce using rule 60 (iden)
    OR          reduce using rule 60 (iden)
    GREATER     reduce using rule 60 (iden)
    GREATER_EQ  reduce using rule 60 (iden)
    LESS        reduce using rule 60 (iden)
    LESS_EQ     reduce using rule 60 (iden)
    EQUAL       reduce using rule 60 (iden)
    NOT_EQ      reduce using rule 60 (iden)
    '+'         reduce using rule 60 (iden)
    '-'         reduce using rule 60 (iden)
    '*'         reduce using rule 60 (iden)
    '/'         reduce using rule 60 (iden)
    FILTER      reduce using rule 60 (iden)
    MAP         reduce using rule 60 (iden)
    ':'         reduce using rule 60 (iden)
    '='         reduce using rule 60 (iden)


State 34

   48 return_stmt: RETURN_STM • operation ';'

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    operation         go to state 73
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 35

   46 conditional_stmt: IF_STMT • '(' operation ')' command
   47                 | IF_STMT • '(' operation ')' command ELSE_STMT command

    '('  shift, and go to state 74


State 36

   49 iteration: FOR_STMT • '(' loop_condition ')' command

    '('  shift, and go to state 75


State 37

   55 output: OUTPUT_WRITE • '(' operation ')' ';'
   57       | OUTPUT_WRITE • '(' STRING ')' ';'

    '('  shift, and go to state 76


State 38

   56 output: OUTPUT_WRITELN • '(' operation ')' ';'
   58       | OUTPUT_WRITELN • '(' STRING ')' ';'

    '('  shift, and go to state 77


State 39

   59 input: INPUT_READ • '(' iden ')' ';'

    '('  shift, and go to state 78


State 40

   84 expression: '(' • operation ')'

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    operation         go to state 79
    lst_binary        go to state 181
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 41

   92 arith_single: '+' • expression

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    expression        go to state 80
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 42

   93 arith_single: '-' • expression

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    expression        go to state 81
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 43

   94 lst_single: '%' • expression

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    expression        go to state 82
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 44

   95 lst_single: '?' • expression

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    expression        go to state 83
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 45

   91 single_operation: '!' • expression

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    expression        go to state 84
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 46

   80 expression: func_calling •

    ';'         reduce using rule 80 (expression)
    AND         reduce using rule 80 (expression)
    OR          reduce using rule 80 (expression)
    GREATER     reduce using rule 80 (expression)
    GREATER_EQ  reduce using rule 80 (expression)
    LESS        reduce using rule 80 (expression)
    LESS_EQ     reduce using rule 80 (expression)
    EQUAL       reduce using rule 80 (expression)
    NOT_EQ      reduce using rule 80 (expression)
    '+'         reduce using rule 80 (expression)
    '-'         reduce using rule 80 (expression)
    '*'         reduce using rule 80 (expression)
    '/'         reduce using rule 80 (expression)
    FILTER      reduce using rule 80 (expression)
    MAP         reduce using rule 80 (expression)
    ':'         reduce using rule 80 (expression)


State 47

   32 command: var_declaration •

    error           reduce using rule 32 (command)
    NUM_INT         reduce using rule 32 (command)
    NUM_FLOAT       reduce using rule 32 (command)
    NIL_CNST        reduce using rule 32 (command)
    ID              reduce using rule 32 (command)
    RETURN_STM      reduce using rule 32 (command)
    T_INT           reduce using rule 32 (command)
    T_FLOAT         reduce using rule 32 (command)
    IF_STMT         reduce using rule 32 (command)
    FOR_STMT        reduce using rule 32 (command)
    OUTPUT_WRITE    reduce using rule 32 (command)
    OUTPUT_WRITELN  reduce using rule 32 (command)
    INPUT_READ      reduce using rule 32 (command)
    '('             reduce using rule 32 (command)
    '{'             reduce using rule 32 (command)
    '}'             reduce using rule 32 (command)
    '+'             reduce using rule 32 (command)
    '-'             reduce using rule 32 (command)
    '%'             reduce using rule 32 (command)
    '?'             reduce using rule 32 (command)
    '!'             reduce using rule 32 (command)


State 48

   13 var_declaration: unq_declaration • ';'

    ';'  shift, and go to state 190


State 49

    9 func_declaration: unq_declaration $@1 '(' parameters ')' '{' block_commands • '}'

    '}'  shift, and go to state 85


State 50

   30 block_commands: command • block_commands
   31               | command •

    error           shift, and go to state 29
    NUM_INT         shift, and go to state 30
    NUM_FLOAT       shift, and go to state 31
    NIL_CNST        shift, and go to state 32
    ID              shift, and go to state 33
    RETURN_STM      shift, and go to state 34
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 35
    FOR_STMT        shift, and go to state 36
    OUTPUT_WRITE    shift, and go to state 37
    OUTPUT_WRITELN  shift, and go to state 38
    INPUT_READ      shift, and go to state 39
    '('             shift, and go to state 40
    '+'             shift, and go to state 41
    '-'             shift, and go to state 42
    '%'             shift, and go to state 43
    '?'             shift, and go to state 44
    '!'             shift, and go to state 45

    '{'  reduce using rule 39 ($@6)
    '}'  reduce using rule 31 (block_commands)

    func_calling      go to state 46
    var_declaration   go to state 47
    unq_declaration   go to state 48
    type              go to state 167
    type_lst          go to state 11
    type_number       go to state 12
    block_commands    go to state 86
    command           go to state 50
    $@6               go to state 51
    init_variable     go to state 52
    init_stmt         go to state 53
    conditional_stmt  go to state 54
    return_stmt       go to state 55
    iteration         go to state 56
    output            go to state 57
    input             go to state 58
    iden              go to state 59
    operation         go to state 60
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 51

   40 command: $@6 • '{' block_commands '}'

    '{'  shift, and go to state 87


State 52

   33 command: init_variable •

    error           reduce using rule 33 (command)
    NUM_INT         reduce using rule 33 (command)
    NUM_FLOAT       reduce using rule 33 (command)
    NIL_CNST        reduce using rule 33 (command)
    ID              reduce using rule 33 (command)
    RETURN_STM      reduce using rule 33 (command)
    T_INT           reduce using rule 33 (command)
    T_FLOAT         reduce using rule 33 (command)
    IF_STMT         reduce using rule 33 (command)
    FOR_STMT        reduce using rule 33 (command)
    OUTPUT_WRITE    reduce using rule 33 (command)
    OUTPUT_WRITELN  reduce using rule 33 (command)
    INPUT_READ      reduce using rule 33 (command)
    '('             reduce using rule 33 (command)
    '{'             reduce using rule 33 (command)
    '}'             reduce using rule 33 (command)
    '+'             reduce using rule 33 (command)
    '-'             reduce using rule 33 (command)
    '%'             reduce using rule 33 (command)
    '?'             reduce using rule 33 (command)
    '!'             reduce using rule 33 (command)


State 53

   44 init_variable: init_stmt • ';'

    ';'  shift, and go to state 88


State 54

   34 command: conditional_stmt •

    error           reduce using rule 34 (command)
    NUM_INT         reduce using rule 34 (command)
    NUM_FLOAT       reduce using rule 34 (command)
    NIL_CNST        reduce using rule 34 (command)
    ID              reduce using rule 34 (command)
    RETURN_STM      reduce using rule 34 (command)
    T_INT           reduce using rule 34 (command)
    T_FLOAT         reduce using rule 34 (command)
    IF_STMT         reduce using rule 34 (command)
    FOR_STMT        reduce using rule 34 (command)
    OUTPUT_WRITE    reduce using rule 34 (command)
    OUTPUT_WRITELN  reduce using rule 34 (command)
    INPUT_READ      reduce using rule 34 (command)
    '('             reduce using rule 34 (command)
    '{'             reduce using rule 34 (command)
    '}'             reduce using rule 34 (command)
    '+'             reduce using rule 34 (command)
    '-'             reduce using rule 34 (command)
    '%'             reduce using rule 34 (command)
    '?'             reduce using rule 34 (command)
    '!'             reduce using rule 34 (command)


State 55

   35 command: return_stmt •

    error           reduce using rule 35 (command)
    NUM_INT         reduce using rule 35 (command)
    NUM_FLOAT       reduce using rule 35 (command)
    NIL_CNST        reduce using rule 35 (command)
    ID              reduce using rule 35 (command)
    RETURN_STM      reduce using rule 35 (command)
    T_INT           reduce using rule 35 (command)
    T_FLOAT         reduce using rule 35 (command)
    IF_STMT         reduce using rule 35 (command)
    FOR_STMT        reduce using rule 35 (command)
    OUTPUT_WRITE    reduce using rule 35 (command)
    OUTPUT_WRITELN  reduce using rule 35 (command)
    INPUT_READ      reduce using rule 35 (command)
    '('             reduce using rule 35 (command)
    '{'             reduce using rule 35 (command)
    '}'             reduce using rule 35 (command)
    '+'             reduce using rule 35 (command)
    '-'             reduce using rule 35 (command)
    '%'             reduce using rule 35 (command)
    '?'             reduce using rule 35 (command)
    '!'             reduce using rule 35 (command)


State 56

   36 command: iteration •

    error           reduce using rule 36 (command)
    NUM_INT         reduce using rule 36 (command)
    NUM_FLOAT       reduce using rule 36 (command)
    NIL_CNST        reduce using rule 36 (command)
    ID              reduce using rule 36 (command)
    RETURN_STM      reduce using rule 36 (command)
    T_INT           reduce using rule 36 (command)
    T_FLOAT         reduce using rule 36 (command)
    IF_STMT         reduce using rule 36 (command)
    FOR_STMT        reduce using rule 36 (command)
    OUTPUT_WRITE    reduce using rule 36 (command)
    OUTPUT_WRITELN  reduce using rule 36 (command)
    INPUT_READ      reduce using rule 36 (command)
    '('             reduce using rule 36 (command)
    '{'             reduce using rule 36 (command)
    '}'             reduce using rule 36 (command)
    '+'             reduce using rule 36 (command)
    '-'             reduce using rule 36 (command)
    '%'             reduce using rule 36 (command)
    '?'             reduce using rule 36 (command)
    '!'             reduce using rule 36 (command)


State 57

   37 command: output •

    error           reduce using rule 37 (command)
    NUM_INT         reduce using rule 37 (command)
    NUM_FLOAT       reduce using rule 37 (command)
    NIL_CNST        reduce using rule 37 (command)
    ID              reduce using rule 37 (command)
    RETURN_STM      reduce using rule 37 (command)
    T_INT           reduce using rule 37 (command)
    T_FLOAT         reduce using rule 37 (command)
    IF_STMT         reduce using rule 37 (command)
    FOR_STMT        reduce using rule 37 (command)
    OUTPUT_WRITE    reduce using rule 37 (command)
    OUTPUT_WRITELN  reduce using rule 37 (command)
    INPUT_READ      reduce using rule 37 (command)
    '('             reduce using rule 37 (command)
    '{'             reduce using rule 37 (command)
    '}'             reduce using rule 37 (command)
    '+'             reduce using rule 37 (command)
    '-'             reduce using rule 37 (command)
    '%'             reduce using rule 37 (command)
    '?'             reduce using rule 37 (command)
    '!'             reduce using rule 37 (command)


State 58

   38 command: input •

    error           reduce using rule 38 (command)
    NUM_INT         reduce using rule 38 (command)
    NUM_FLOAT       reduce using rule 38 (command)
    NIL_CNST        reduce using rule 38 (command)
    ID              reduce using rule 38 (command)
    RETURN_STM      reduce using rule 38 (command)
    T_INT           reduce using rule 38 (command)
    T_FLOAT         reduce using rule 38 (command)
    IF_STMT         reduce using rule 38 (command)
    FOR_STMT        reduce using rule 38 (command)
    OUTPUT_WRITE    reduce using rule 38 (command)
    OUTPUT_WRITELN  reduce using rule 38 (command)
    INPUT_READ      reduce using rule 38 (command)
    '('             reduce using rule 38 (command)
    '{'             reduce using rule 38 (command)
    '}'             reduce using rule 38 (command)
    '+'             reduce using rule 38 (command)
    '-'             reduce using rule 38 (command)
    '%'             reduce using rule 38 (command)
    '?'             reduce using rule 38 (command)
    '!'             reduce using rule 38 (command)


State 59

   45 init_stmt: iden • '=' operation
   83 expression: iden •

    '='  shift, and go to state 89

    ';'         reduce using rule 83 (expression)
    AND         reduce using rule 83 (expression)
    OR          reduce using rule 83 (expression)
    GREATER     reduce using rule 83 (expression)
    GREATER_EQ  reduce using rule 83 (expression)
    LESS        reduce using rule 83 (expression)
    LESS_EQ     reduce using rule 83 (expression)
    EQUAL       reduce using rule 83 (expression)
    NOT_EQ      reduce using rule 83 (expression)
    '+'         reduce using rule 83 (expression)
    '-'         reduce using rule 83 (expression)
    '*'         reduce using rule 83 (expression)
    '/'         reduce using rule 83 (expression)
    FILTER      reduce using rule 83 (expression)
    MAP         reduce using rule 83 (expression)
    ':'         reduce using rule 83 (expression)


State 60

   41 command: operation • ';'
   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ';'         shift, and go to state 90
    AND         shift, and go to state 91
    OR          shift, and go to state 92
    GREATER     shift, and go to state 93
    GREATER_EQ  shift, and go to state 94
    LESS        shift, and go to state 95
    LESS_EQ     shift, and go to state 96
    EQUAL       shift, and go to state 97
    NOT_EQ      shift, and go to state 98


State 61

   61 operation: lst_binary •
   70 lst_binary: lst_binary • FILTER lst_binary
   71           | lst_binary • MAP lst_binary
   72           | lst_binary • ':' lst_binary

    FILTER  shift, and go to state 99
    MAP     shift, and go to state 100
    ':'     shift, and go to state 101

    ';'         reduce using rule 61 (operation)
    AND         reduce using rule 61 (operation)
    OR          reduce using rule 61 (operation)
    GREATER     reduce using rule 61 (operation)
    GREATER_EQ  reduce using rule 61 (operation)
    LESS        reduce using rule 61 (operation)
    LESS_EQ     reduce using rule 61 (operation)
    EQUAL       reduce using rule 61 (operation)
    NOT_EQ      reduce using rule 61 (operation)


State 62

   73 lst_binary: arith_binary •
   74 arith_binary: arith_binary • '+' term
   75             | arith_binary • '-' term

    '+'  shift, and go to state 102
    '-'  shift, and go to state 103

    ';'         reduce using rule 73 (lst_binary)
    AND         reduce using rule 73 (lst_binary)
    OR          reduce using rule 73 (lst_binary)
    GREATER     reduce using rule 73 (lst_binary)
    GREATER_EQ  reduce using rule 73 (lst_binary)
    LESS        reduce using rule 73 (lst_binary)
    LESS_EQ     reduce using rule 73 (lst_binary)
    EQUAL       reduce using rule 73 (lst_binary)
    NOT_EQ      reduce using rule 73 (lst_binary)
    FILTER      reduce using rule 73 (lst_binary)
    MAP         reduce using rule 73 (lst_binary)
    ':'         reduce using rule 73 (lst_binary)


State 63

   76 arith_binary: term •
   77 term: term • '*' expression
   78     | term • '/' expression

    '*'  shift, and go to state 104
    '/'  shift, and go to state 105

    ';'         reduce using rule 76 (arith_binary)
    AND         reduce using rule 76 (arith_binary)
    OR          reduce using rule 76 (arith_binary)
    GREATER     reduce using rule 76 (arith_binary)
    GREATER_EQ  reduce using rule 76 (arith_binary)
    LESS        reduce using rule 76 (arith_binary)
    LESS_EQ     reduce using rule 76 (arith_binary)
    EQUAL       reduce using rule 76 (arith_binary)
    NOT_EQ      reduce using rule 76 (arith_binary)
    '+'         reduce using rule 76 (arith_binary)
    '-'         reduce using rule 76 (arith_binary)
    FILTER      reduce using rule 76 (arith_binary)
    MAP         reduce using rule 76 (arith_binary)
    ':'         reduce using rule 76 (arith_binary)


State 64

   79 term: expression •

    ';'         reduce using rule 79 (term)
    AND         reduce using rule 79 (term)
    OR          reduce using rule 79 (term)
    GREATER     reduce using rule 79 (term)
    GREATER_EQ  reduce using rule 79 (term)
    LESS        reduce using rule 79 (term)
    LESS_EQ     reduce using rule 79 (term)
    EQUAL       reduce using rule 79 (term)
    NOT_EQ      reduce using rule 79 (term)
    '+'         reduce using rule 79 (term)
    '-'         reduce using rule 79 (term)
    '*'         reduce using rule 79 (term)
    '/'         reduce using rule 79 (term)
    FILTER      reduce using rule 79 (term)
    MAP         reduce using rule 79 (term)
    ':'         reduce using rule 79 (term)


State 65

   82 expression: const •

    ';'         reduce using rule 82 (expression)
    AND         reduce using rule 82 (expression)
    OR          reduce using rule 82 (expression)
    GREATER     reduce using rule 82 (expression)
    GREATER_EQ  reduce using rule 82 (expression)
    LESS        reduce using rule 82 (expression)
    LESS_EQ     reduce using rule 82 (expression)
    EQUAL       reduce using rule 82 (expression)
    NOT_EQ      reduce using rule 82 (expression)
    '+'         reduce using rule 82 (expression)
    '-'         reduce using rule 82 (expression)
    '*'         reduce using rule 82 (expression)
    '/'         reduce using rule 82 (expression)
    FILTER      reduce using rule 82 (expression)
    MAP         reduce using rule 82 (expression)
    ':'         reduce using rule 82 (expression)


State 66

   85 const: number •

    ';'         reduce using rule 85 (const)
    AND         reduce using rule 85 (const)
    OR          reduce using rule 85 (const)
    GREATER     reduce using rule 85 (const)
    GREATER_EQ  reduce using rule 85 (const)
    LESS        reduce using rule 85 (const)
    LESS_EQ     reduce using rule 85 (const)
    EQUAL       reduce using rule 85 (const)
    NOT_EQ      reduce using rule 85 (const)
    '+'         reduce using rule 85 (const)
    '-'         reduce using rule 85 (const)
    '*'         reduce using rule 85 (const)
    '/'         reduce using rule 85 (const)
    FILTER      reduce using rule 85 (const)
    MAP         reduce using rule 85 (const)
    ':'         reduce using rule 85 (const)


State 67

   81 expression: single_operation •

    ';'         reduce using rule 81 (expression)
    AND         reduce using rule 81 (expression)
    OR          reduce using rule 81 (expression)
    GREATER     reduce using rule 81 (expression)
    GREATER_EQ  reduce using rule 81 (expression)
    LESS        reduce using rule 81 (expression)
    LESS_EQ     reduce using rule 81 (expression)
    EQUAL       reduce using rule 81 (expression)
    NOT_EQ      reduce using rule 81 (expression)
    '+'         reduce using rule 81 (expression)
    '-'         reduce using rule 81 (expression)
    '*'         reduce using rule 81 (expression)
    '/'         reduce using rule 81 (expression)
    FILTER      reduce using rule 81 (expression)
    MAP         reduce using rule 81 (expression)
    ':'         reduce using rule 81 (expression)


State 68

   89 single_operation: arith_single •

    ';'         reduce using rule 89 (single_operation)
    AND         reduce using rule 89 (single_operation)
    OR          reduce using rule 89 (single_operation)
    GREATER     reduce using rule 89 (single_operation)
    GREATER_EQ  reduce using rule 89 (single_operation)
    LESS        reduce using rule 89 (single_operation)
    LESS_EQ     reduce using rule 89 (single_operation)
    EQUAL       reduce using rule 89 (single_operation)
    NOT_EQ      reduce using rule 89 (single_operation)
    '+'         reduce using rule 89 (single_operation)
    '-'         reduce using rule 89 (single_operation)
    '*'         reduce using rule 89 (single_operation)
    '/'         reduce using rule 89 (single_operation)
    FILTER      reduce using rule 89 (single_operation)
    MAP         reduce using rule 89 (single_operation)
    ':'         reduce using rule 89 (single_operation)


State 69

   90 single_operation: lst_single •

    ';'         reduce using rule 90 (single_operation)
    AND         reduce using rule 90 (single_operation)
    OR          reduce using rule 90 (single_operation)
    GREATER     reduce using rule 90 (single_operation)
    GREATER_EQ  reduce using rule 90 (single_operation)
    LESS        reduce using rule 90 (single_operation)
    LESS_EQ     reduce using rule 90 (single_operation)
    EQUAL       reduce using rule 90 (single_operation)
    NOT_EQ      reduce using rule 90 (single_operation)
    '+'         reduce using rule 90 (single_operation)
    '-'         reduce using rule 90 (single_operation)
    '*'         reduce using rule 90 (single_operation)
    '/'         reduce using rule 90 (single_operation)
    FILTER      reduce using rule 90 (single_operation)
    MAP         reduce using rule 90 (single_operation)
    ':'         reduce using rule 90 (single_operation)


State 70

   42 command: error ';' •

    error           reduce using rule 42 (command)
    NUM_INT         reduce using rule 42 (command)
    NUM_FLOAT       reduce using rule 42 (command)
    NIL_CNST        reduce using rule 42 (command)
    ID              reduce using rule 42 (command)
    RETURN_STM      reduce using rule 42 (command)
    T_INT           reduce using rule 42 (command)
    T_FLOAT         reduce using rule 42 (command)
    IF_STMT         reduce using rule 42 (command)
    FOR_STMT        reduce using rule 42 (command)
    OUTPUT_WRITE    reduce using rule 42 (command)
    OUTPUT_WRITELN  reduce using rule 42 (command)
    INPUT_READ      reduce using rule 42 (command)
    '('             reduce using rule 42 (command)
    '{'             reduce using rule 42 (command)
    '}'             reduce using rule 42 (command)
    '+'             reduce using rule 42 (command)
    '-'             reduce using rule 42 (command)
    '%'             reduce using rule 42 (command)
    '?'             reduce using rule 42 (command)
    '!'             reduce using rule 42 (command)


State 71

   12 func_calling: ID '(' • $@2 calling_parameters $@3 ')'

    NUM_INT    reduce using rule 10 ($@2)
    NUM_FLOAT  reduce using rule 10 ($@2)
    NIL_CNST   reduce using rule 10 ($@2)
    ID         reduce using rule 10 ($@2)
    '('        reduce using rule 10 ($@2)
    ')'        reduce using rule 10 ($@2)
    '+'        reduce using rule 10 ($@2)
    '-'        reduce using rule 10 ($@2)
    '%'        reduce using rule 10 ($@2)
    '?'        reduce using rule 10 ($@2)
    '!'        reduce using rule 10 ($@2)

    $@2  go to state 106


State 72

   83 expression: iden •

    ';'         reduce using rule 83 (expression)
    AND         reduce using rule 83 (expression)
    OR          reduce using rule 83 (expression)
    GREATER     reduce using rule 83 (expression)
    GREATER_EQ  reduce using rule 83 (expression)
    LESS        reduce using rule 83 (expression)
    LESS_EQ     reduce using rule 83 (expression)
    EQUAL       reduce using rule 83 (expression)
    NOT_EQ      reduce using rule 83 (expression)
    '+'         reduce using rule 83 (expression)
    '-'         reduce using rule 83 (expression)
    '*'         reduce using rule 83 (expression)
    '/'         reduce using rule 83 (expression)
    FILTER      reduce using rule 83 (expression)
    MAP         reduce using rule 83 (expression)
    ':'         reduce using rule 83 (expression)


State 73

   48 return_stmt: RETURN_STM operation • ';'
   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ';'         shift, and go to state 107
    AND         shift, and go to state 91
    OR          shift, and go to state 92
    GREATER     shift, and go to state 93
    GREATER_EQ  shift, and go to state 94
    LESS        shift, and go to state 95
    LESS_EQ     shift, and go to state 96
    EQUAL       shift, and go to state 97
    NOT_EQ      shift, and go to state 98


State 74

   46 conditional_stmt: IF_STMT '(' • operation ')' command
   47                 | IF_STMT '(' • operation ')' command ELSE_STMT command

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    operation         go to state 108
    lst_binary        go to state 181
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 75

   49 iteration: FOR_STMT '(' • loop_condition ')' command

    ID  shift, and go to state 109

    ';'  reduce using rule 52 (update_stmt)

    init_stmt       go to state 110
    loop_condition  go to state 111
    update_stmt     go to state 112
    iden            go to state 113


State 76

   55 output: OUTPUT_WRITE '(' • operation ')' ';'
   57       | OUTPUT_WRITE '(' • STRING ')' ';'

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    STRING     shift, and go to state 114
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    operation         go to state 115
    lst_binary        go to state 181
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 77

   56 output: OUTPUT_WRITELN '(' • operation ')' ';'
   58       | OUTPUT_WRITELN '(' • STRING ')' ';'

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    STRING     shift, and go to state 116
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    operation         go to state 117
    lst_binary        go to state 181
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 78

   59 input: INPUT_READ '(' • iden ')' ';'

    ID  shift, and go to state 191

    iden  go to state 118


State 79

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation
   84 expression: '(' operation • ')'

    ')'         shift, and go to state 119
    AND         shift, and go to state 192
    OR          shift, and go to state 193
    GREATER     shift, and go to state 194
    GREATER_EQ  shift, and go to state 195
    LESS        shift, and go to state 196
    LESS_EQ     shift, and go to state 197
    EQUAL       shift, and go to state 198
    NOT_EQ      shift, and go to state 199


State 80

   92 arith_single: '+' expression •

    ';'         reduce using rule 92 (arith_single)
    AND         reduce using rule 92 (arith_single)
    OR          reduce using rule 92 (arith_single)
    GREATER     reduce using rule 92 (arith_single)
    GREATER_EQ  reduce using rule 92 (arith_single)
    LESS        reduce using rule 92 (arith_single)
    LESS_EQ     reduce using rule 92 (arith_single)
    EQUAL       reduce using rule 92 (arith_single)
    NOT_EQ      reduce using rule 92 (arith_single)
    '+'         reduce using rule 92 (arith_single)
    '-'         reduce using rule 92 (arith_single)
    '*'         reduce using rule 92 (arith_single)
    '/'         reduce using rule 92 (arith_single)
    FILTER      reduce using rule 92 (arith_single)
    MAP         reduce using rule 92 (arith_single)
    ':'         reduce using rule 92 (arith_single)


State 81

   93 arith_single: '-' expression •

    ';'         reduce using rule 93 (arith_single)
    AND         reduce using rule 93 (arith_single)
    OR          reduce using rule 93 (arith_single)
    GREATER     reduce using rule 93 (arith_single)
    GREATER_EQ  reduce using rule 93 (arith_single)
    LESS        reduce using rule 93 (arith_single)
    LESS_EQ     reduce using rule 93 (arith_single)
    EQUAL       reduce using rule 93 (arith_single)
    NOT_EQ      reduce using rule 93 (arith_single)
    '+'         reduce using rule 93 (arith_single)
    '-'         reduce using rule 93 (arith_single)
    '*'         reduce using rule 93 (arith_single)
    '/'         reduce using rule 93 (arith_single)
    FILTER      reduce using rule 93 (arith_single)
    MAP         reduce using rule 93 (arith_single)
    ':'         reduce using rule 93 (arith_single)


State 82

   94 lst_single: '%' expression •

    ';'         reduce using rule 94 (lst_single)
    AND         reduce using rule 94 (lst_single)
    OR          reduce using rule 94 (lst_single)
    GREATER     reduce using rule 94 (lst_single)
    GREATER_EQ  reduce using rule 94 (lst_single)
    LESS        reduce using rule 94 (lst_single)
    LESS_EQ     reduce using rule 94 (lst_single)
    EQUAL       reduce using rule 94 (lst_single)
    NOT_EQ      reduce using rule 94 (lst_single)
    '+'         reduce using rule 94 (lst_single)
    '-'         reduce using rule 94 (lst_single)
    '*'         reduce using rule 94 (lst_single)
    '/'         reduce using rule 94 (lst_single)
    FILTER      reduce using rule 94 (lst_single)
    MAP         reduce using rule 94 (lst_single)
    ':'         reduce using rule 94 (lst_single)


State 83

   95 lst_single: '?' expression •

    ';'         reduce using rule 95 (lst_single)
    AND         reduce using rule 95 (lst_single)
    OR          reduce using rule 95 (lst_single)
    GREATER     reduce using rule 95 (lst_single)
    GREATER_EQ  reduce using rule 95 (lst_single)
    LESS        reduce using rule 95 (lst_single)
    LESS_EQ     reduce using rule 95 (lst_single)
    EQUAL       reduce using rule 95 (lst_single)
    NOT_EQ      reduce using rule 95 (lst_single)
    '+'         reduce using rule 95 (lst_single)
    '-'         reduce using rule 95 (lst_single)
    '*'         reduce using rule 95 (lst_single)
    '/'         reduce using rule 95 (lst_single)
    FILTER      reduce using rule 95 (lst_single)
    MAP         reduce using rule 95 (lst_single)
    ':'         reduce using rule 95 (lst_single)


State 84

   91 single_operation: '!' expression •

    ';'         reduce using rule 91 (single_operation)
    AND         reduce using rule 91 (single_operation)
    OR          reduce using rule 91 (single_operation)
    GREATER     reduce using rule 91 (single_operation)
    GREATER_EQ  reduce using rule 91 (single_operation)
    LESS        reduce using rule 91 (single_operation)
    LESS_EQ     reduce using rule 91 (single_operation)
    EQUAL       reduce using rule 91 (single_operation)
    NOT_EQ      reduce using rule 91 (single_operation)
    '+'         reduce using rule 91 (single_operation)
    '-'         reduce using rule 91 (single_operation)
    '*'         reduce using rule 91 (single_operation)
    '/'         reduce using rule 91 (single_operation)
    FILTER      reduce using rule 91 (single_operation)
    MAP         reduce using rule 91 (single_operation)
    ':'         reduce using rule 91 (single_operation)


State 85

    9 func_declaration: unq_declaration $@1 '(' parameters ')' '{' block_commands '}' •

    $end     reduce using rule 9 (func_declaration)
    error    reduce using rule 9 (func_declaration)
    T_INT    reduce using rule 9 (func_declaration)
    T_FLOAT  reduce using rule 9 (func_declaration)


State 86

   30 block_commands: command block_commands •

    '}'  reduce using rule 30 (block_commands)


State 87

   40 command: $@6 '{' • block_commands '}'

    error           shift, and go to state 29
    NUM_INT         shift, and go to state 30
    NUM_FLOAT       shift, and go to state 31
    NIL_CNST        shift, and go to state 32
    ID              shift, and go to state 33
    RETURN_STM      shift, and go to state 34
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 35
    FOR_STMT        shift, and go to state 36
    OUTPUT_WRITE    shift, and go to state 37
    OUTPUT_WRITELN  shift, and go to state 38
    INPUT_READ      shift, and go to state 39
    '('             shift, and go to state 40
    '+'             shift, and go to state 41
    '-'             shift, and go to state 42
    '%'             shift, and go to state 43
    '?'             shift, and go to state 44
    '!'             shift, and go to state 45

    '{'  reduce using rule 39 ($@6)

    func_calling      go to state 46
    var_declaration   go to state 47
    unq_declaration   go to state 48
    type              go to state 167
    type_lst          go to state 11
    type_number       go to state 12
    block_commands    go to state 120
    command           go to state 50
    $@6               go to state 51
    init_variable     go to state 52
    init_stmt         go to state 53
    conditional_stmt  go to state 54
    return_stmt       go to state 55
    iteration         go to state 56
    output            go to state 57
    input             go to state 58
    iden              go to state 59
    operation         go to state 60
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 88

   44 init_variable: init_stmt ';' •

    error           reduce using rule 44 (init_variable)
    NUM_INT         reduce using rule 44 (init_variable)
    NUM_FLOAT       reduce using rule 44 (init_variable)
    NIL_CNST        reduce using rule 44 (init_variable)
    ID              reduce using rule 44 (init_variable)
    RETURN_STM      reduce using rule 44 (init_variable)
    T_INT           reduce using rule 44 (init_variable)
    T_FLOAT         reduce using rule 44 (init_variable)
    IF_STMT         reduce using rule 44 (init_variable)
    FOR_STMT        reduce using rule 44 (init_variable)
    OUTPUT_WRITE    reduce using rule 44 (init_variable)
    OUTPUT_WRITELN  reduce using rule 44 (init_variable)
    INPUT_READ      reduce using rule 44 (init_variable)
    '('             reduce using rule 44 (init_variable)
    '{'             reduce using rule 44 (init_variable)
    '}'             reduce using rule 44 (init_variable)
    '+'             reduce using rule 44 (init_variable)
    '-'             reduce using rule 44 (init_variable)
    '%'             reduce using rule 44 (init_variable)
    '?'             reduce using rule 44 (init_variable)
    '!'             reduce using rule 44 (init_variable)


State 89

   45 init_stmt: iden '=' • operation

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    operation         go to state 121
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 90

   41 command: operation ';' •

    error           reduce using rule 41 (command)
    NUM_INT         reduce using rule 41 (command)
    NUM_FLOAT       reduce using rule 41 (command)
    NIL_CNST        reduce using rule 41 (command)
    ID              reduce using rule 41 (command)
    RETURN_STM      reduce using rule 41 (command)
    T_INT           reduce using rule 41 (command)
    T_FLOAT         reduce using rule 41 (command)
    IF_STMT         reduce using rule 41 (command)
    FOR_STMT        reduce using rule 41 (command)
    OUTPUT_WRITE    reduce using rule 41 (command)
    OUTPUT_WRITELN  reduce using rule 41 (command)
    INPUT_READ      reduce using rule 41 (command)
    '('             reduce using rule 41 (command)
    '{'             reduce using rule 41 (command)
    '}'             reduce using rule 41 (command)
    '+'             reduce using rule 41 (command)
    '-'             reduce using rule 41 (command)
    '%'             reduce using rule 41 (command)
    '?'             reduce using rule 41 (command)
    '!'             reduce using rule 41 (command)


State 91

   68 operation: operation AND • operation

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    operation         go to state 122
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 92

   69 operation: operation OR • operation

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    operation         go to state 123
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 93

   62 operation: operation GREATER • operation

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    operation         go to state 124
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 94

   63 operation: operation GREATER_EQ • operation

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    operation         go to state 125
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 95

   64 operation: operation LESS • operation

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    operation         go to state 126
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 96

   65 operation: operation LESS_EQ • operation

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    operation         go to state 127
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 97

   66 operation: operation EQUAL • operation

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    operation         go to state 128
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 98

   67 operation: operation NOT_EQ • operation

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    operation         go to state 129
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 99

   70 lst_binary: lst_binary FILTER • lst_binary

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    lst_binary        go to state 130
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 100

   71 lst_binary: lst_binary MAP • lst_binary

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    lst_binary        go to state 131
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 101

   72 lst_binary: lst_binary ':' • lst_binary

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    lst_binary        go to state 132
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 102

   74 arith_binary: arith_binary '+' • term

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    term              go to state 133
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 103

   75 arith_binary: arith_binary '-' • term

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    term              go to state 134
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 104

   77 term: term '*' • expression

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    expression        go to state 135
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 105

   78 term: term '/' • expression

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    expression        go to state 136
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 106

   12 func_calling: ID '(' $@2 • calling_parameters $@3 ')'

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    ')'  reduce using rule 27 (calling_parameters)

    func_calling            go to state 210
    calling_parameters      go to state 137
    lst_calling_parameters  go to state 138
    iden                    go to state 211
    operation               go to state 139
    lst_binary              go to state 212
    arith_binary            go to state 213
    term                    go to state 214
    expression              go to state 215
    const                   go to state 216
    number                  go to state 217
    single_operation        go to state 218
    arith_single            go to state 219
    lst_single              go to state 220


State 107

   48 return_stmt: RETURN_STM operation ';' •

    error           reduce using rule 48 (return_stmt)
    NUM_INT         reduce using rule 48 (return_stmt)
    NUM_FLOAT       reduce using rule 48 (return_stmt)
    NIL_CNST        reduce using rule 48 (return_stmt)
    ID              reduce using rule 48 (return_stmt)
    RETURN_STM      reduce using rule 48 (return_stmt)
    T_INT           reduce using rule 48 (return_stmt)
    T_FLOAT         reduce using rule 48 (return_stmt)
    IF_STMT         reduce using rule 48 (return_stmt)
    FOR_STMT        reduce using rule 48 (return_stmt)
    OUTPUT_WRITE    reduce using rule 48 (return_stmt)
    OUTPUT_WRITELN  reduce using rule 48 (return_stmt)
    INPUT_READ      reduce using rule 48 (return_stmt)
    '('             reduce using rule 48 (return_stmt)
    '{'             reduce using rule 48 (return_stmt)
    '}'             reduce using rule 48 (return_stmt)
    '+'             reduce using rule 48 (return_stmt)
    '-'             reduce using rule 48 (return_stmt)
    '%'             reduce using rule 48 (return_stmt)
    '?'             reduce using rule 48 (return_stmt)
    '!'             reduce using rule 48 (return_stmt)


State 108

   46 conditional_stmt: IF_STMT '(' operation • ')' command
   47                 | IF_STMT '(' operation • ')' command ELSE_STMT command
   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ')'         shift, and go to state 140
    AND         shift, and go to state 192
    OR          shift, and go to state 193
    GREATER     shift, and go to state 194
    GREATER_EQ  shift, and go to state 195
    LESS        shift, and go to state 196
    LESS_EQ     shift, and go to state 197
    EQUAL       shift, and go to state 198
    NOT_EQ      shift, and go to state 199


State 109

   60 iden: ID •

    '='  reduce using rule 60 (iden)


State 110

   51 update_stmt: init_stmt •

    ';'  reduce using rule 51 (update_stmt)


State 111

   49 iteration: FOR_STMT '(' loop_condition • ')' command

    ')'  shift, and go to state 141


State 112

   50 loop_condition: update_stmt • ';' stop_stmt ';' update_stmt

    ';'  shift, and go to state 142


State 113

   45 init_stmt: iden • '=' operation

    '='  shift, and go to state 89


State 114

   57 output: OUTPUT_WRITE '(' STRING • ')' ';'

    ')'  shift, and go to state 143


State 115

   55 output: OUTPUT_WRITE '(' operation • ')' ';'
   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ')'         shift, and go to state 144
    AND         shift, and go to state 192
    OR          shift, and go to state 193
    GREATER     shift, and go to state 194
    GREATER_EQ  shift, and go to state 195
    LESS        shift, and go to state 196
    LESS_EQ     shift, and go to state 197
    EQUAL       shift, and go to state 198
    NOT_EQ      shift, and go to state 199


State 116

   58 output: OUTPUT_WRITELN '(' STRING • ')' ';'

    ')'  shift, and go to state 145


State 117

   56 output: OUTPUT_WRITELN '(' operation • ')' ';'
   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ')'         shift, and go to state 146
    AND         shift, and go to state 192
    OR          shift, and go to state 193
    GREATER     shift, and go to state 194
    GREATER_EQ  shift, and go to state 195
    LESS        shift, and go to state 196
    LESS_EQ     shift, and go to state 197
    EQUAL       shift, and go to state 198
    NOT_EQ      shift, and go to state 199


State 118

   59 input: INPUT_READ '(' iden • ')' ';'

    ')'  shift, and go to state 147


State 119

   84 expression: '(' operation ')' •

    ';'         reduce using rule 84 (expression)
    AND         reduce using rule 84 (expression)
    OR          reduce using rule 84 (expression)
    GREATER     reduce using rule 84 (expression)
    GREATER_EQ  reduce using rule 84 (expression)
    LESS        reduce using rule 84 (expression)
    LESS_EQ     reduce using rule 84 (expression)
    EQUAL       reduce using rule 84 (expression)
    NOT_EQ      reduce using rule 84 (expression)
    '+'         reduce using rule 84 (expression)
    '-'         reduce using rule 84 (expression)
    '*'         reduce using rule 84 (expression)
    '/'         reduce using rule 84 (expression)
    FILTER      reduce using rule 84 (expression)
    MAP         reduce using rule 84 (expression)
    ':'         reduce using rule 84 (expression)


State 120

   40 command: $@6 '{' block_commands • '}'

    '}'  shift, and go to state 148


State 121

   45 init_stmt: iden '=' operation •
   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    AND         shift, and go to state 91
    OR          shift, and go to state 92
    GREATER     shift, and go to state 93
    GREATER_EQ  shift, and go to state 94
    LESS        shift, and go to state 95
    LESS_EQ     shift, and go to state 96
    EQUAL       shift, and go to state 97
    NOT_EQ      shift, and go to state 98

    ';'  reduce using rule 45 (init_stmt)


State 122

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   68          | operation AND operation •
   69          | operation • OR operation

    GREATER     shift, and go to state 93
    GREATER_EQ  shift, and go to state 94
    LESS        shift, and go to state 95
    LESS_EQ     shift, and go to state 96
    EQUAL       shift, and go to state 97
    NOT_EQ      shift, and go to state 98

    ';'  reduce using rule 68 (operation)
    AND  reduce using rule 68 (operation)
    OR   reduce using rule 68 (operation)


State 123

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation
   69          | operation OR operation •

    GREATER     shift, and go to state 93
    GREATER_EQ  shift, and go to state 94
    LESS        shift, and go to state 95
    LESS_EQ     shift, and go to state 96
    EQUAL       shift, and go to state 97
    NOT_EQ      shift, and go to state 98

    ';'  reduce using rule 69 (operation)
    AND  reduce using rule 69 (operation)
    OR   reduce using rule 69 (operation)


State 124

   62 operation: operation • GREATER operation
   62          | operation GREATER operation •
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ';'         reduce using rule 62 (operation)
    AND         reduce using rule 62 (operation)
    OR          reduce using rule 62 (operation)
    GREATER     reduce using rule 62 (operation)
    GREATER_EQ  reduce using rule 62 (operation)
    LESS        reduce using rule 62 (operation)
    LESS_EQ     reduce using rule 62 (operation)
    EQUAL       reduce using rule 62 (operation)
    NOT_EQ      reduce using rule 62 (operation)


State 125

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   63          | operation GREATER_EQ operation •
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ';'         reduce using rule 63 (operation)
    AND         reduce using rule 63 (operation)
    OR          reduce using rule 63 (operation)
    GREATER     reduce using rule 63 (operation)
    GREATER_EQ  reduce using rule 63 (operation)
    LESS        reduce using rule 63 (operation)
    LESS_EQ     reduce using rule 63 (operation)
    EQUAL       reduce using rule 63 (operation)
    NOT_EQ      reduce using rule 63 (operation)


State 126

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   64          | operation LESS operation •
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ';'         reduce using rule 64 (operation)
    AND         reduce using rule 64 (operation)
    OR          reduce using rule 64 (operation)
    GREATER     reduce using rule 64 (operation)
    GREATER_EQ  reduce using rule 64 (operation)
    LESS        reduce using rule 64 (operation)
    LESS_EQ     reduce using rule 64 (operation)
    EQUAL       reduce using rule 64 (operation)
    NOT_EQ      reduce using rule 64 (operation)


State 127

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   65          | operation LESS_EQ operation •
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ';'         reduce using rule 65 (operation)
    AND         reduce using rule 65 (operation)
    OR          reduce using rule 65 (operation)
    GREATER     reduce using rule 65 (operation)
    GREATER_EQ  reduce using rule 65 (operation)
    LESS        reduce using rule 65 (operation)
    LESS_EQ     reduce using rule 65 (operation)
    EQUAL       reduce using rule 65 (operation)
    NOT_EQ      reduce using rule 65 (operation)


State 128

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   66          | operation EQUAL operation •
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    GREATER     shift, and go to state 93
    GREATER_EQ  shift, and go to state 94
    LESS        shift, and go to state 95
    LESS_EQ     shift, and go to state 96

    ';'     reduce using rule 66 (operation)
    AND     reduce using rule 66 (operation)
    OR      reduce using rule 66 (operation)
    EQUAL   reduce using rule 66 (operation)
    NOT_EQ  reduce using rule 66 (operation)


State 129

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   67          | operation NOT_EQ operation •
   68          | operation • AND operation
   69          | operation • OR operation

    GREATER     shift, and go to state 93
    GREATER_EQ  shift, and go to state 94
    LESS        shift, and go to state 95
    LESS_EQ     shift, and go to state 96

    ';'     reduce using rule 67 (operation)
    AND     reduce using rule 67 (operation)
    OR      reduce using rule 67 (operation)
    EQUAL   reduce using rule 67 (operation)
    NOT_EQ  reduce using rule 67 (operation)


State 130

   70 lst_binary: lst_binary • FILTER lst_binary
   70           | lst_binary FILTER lst_binary •
   71           | lst_binary • MAP lst_binary
   72           | lst_binary • ':' lst_binary

    FILTER  shift, and go to state 99
    MAP     shift, and go to state 100
    ':'     shift, and go to state 101

    ';'         reduce using rule 70 (lst_binary)
    AND         reduce using rule 70 (lst_binary)
    OR          reduce using rule 70 (lst_binary)
    GREATER     reduce using rule 70 (lst_binary)
    GREATER_EQ  reduce using rule 70 (lst_binary)
    LESS        reduce using rule 70 (lst_binary)
    LESS_EQ     reduce using rule 70 (lst_binary)
    EQUAL       reduce using rule 70 (lst_binary)
    NOT_EQ      reduce using rule 70 (lst_binary)


State 131

   70 lst_binary: lst_binary • FILTER lst_binary
   71           | lst_binary • MAP lst_binary
   71           | lst_binary MAP lst_binary •
   72           | lst_binary • ':' lst_binary

    FILTER  shift, and go to state 99
    MAP     shift, and go to state 100
    ':'     shift, and go to state 101

    ';'         reduce using rule 71 (lst_binary)
    AND         reduce using rule 71 (lst_binary)
    OR          reduce using rule 71 (lst_binary)
    GREATER     reduce using rule 71 (lst_binary)
    GREATER_EQ  reduce using rule 71 (lst_binary)
    LESS        reduce using rule 71 (lst_binary)
    LESS_EQ     reduce using rule 71 (lst_binary)
    EQUAL       reduce using rule 71 (lst_binary)
    NOT_EQ      reduce using rule 71 (lst_binary)


State 132

   70 lst_binary: lst_binary • FILTER lst_binary
   71           | lst_binary • MAP lst_binary
   72           | lst_binary • ':' lst_binary
   72           | lst_binary ':' lst_binary •

    FILTER  shift, and go to state 99
    MAP     shift, and go to state 100
    ':'     shift, and go to state 101

    ';'         reduce using rule 72 (lst_binary)
    AND         reduce using rule 72 (lst_binary)
    OR          reduce using rule 72 (lst_binary)
    GREATER     reduce using rule 72 (lst_binary)
    GREATER_EQ  reduce using rule 72 (lst_binary)
    LESS        reduce using rule 72 (lst_binary)
    LESS_EQ     reduce using rule 72 (lst_binary)
    EQUAL       reduce using rule 72 (lst_binary)
    NOT_EQ      reduce using rule 72 (lst_binary)


State 133

   74 arith_binary: arith_binary '+' term •
   77 term: term • '*' expression
   78     | term • '/' expression

    '*'  shift, and go to state 104
    '/'  shift, and go to state 105

    ';'         reduce using rule 74 (arith_binary)
    AND         reduce using rule 74 (arith_binary)
    OR          reduce using rule 74 (arith_binary)
    GREATER     reduce using rule 74 (arith_binary)
    GREATER_EQ  reduce using rule 74 (arith_binary)
    LESS        reduce using rule 74 (arith_binary)
    LESS_EQ     reduce using rule 74 (arith_binary)
    EQUAL       reduce using rule 74 (arith_binary)
    NOT_EQ      reduce using rule 74 (arith_binary)
    '+'         reduce using rule 74 (arith_binary)
    '-'         reduce using rule 74 (arith_binary)
    FILTER      reduce using rule 74 (arith_binary)
    MAP         reduce using rule 74 (arith_binary)
    ':'         reduce using rule 74 (arith_binary)


State 134

   75 arith_binary: arith_binary '-' term •
   77 term: term • '*' expression
   78     | term • '/' expression

    '*'  shift, and go to state 104
    '/'  shift, and go to state 105

    ';'         reduce using rule 75 (arith_binary)
    AND         reduce using rule 75 (arith_binary)
    OR          reduce using rule 75 (arith_binary)
    GREATER     reduce using rule 75 (arith_binary)
    GREATER_EQ  reduce using rule 75 (arith_binary)
    LESS        reduce using rule 75 (arith_binary)
    LESS_EQ     reduce using rule 75 (arith_binary)
    EQUAL       reduce using rule 75 (arith_binary)
    NOT_EQ      reduce using rule 75 (arith_binary)
    '+'         reduce using rule 75 (arith_binary)
    '-'         reduce using rule 75 (arith_binary)
    FILTER      reduce using rule 75 (arith_binary)
    MAP         reduce using rule 75 (arith_binary)
    ':'         reduce using rule 75 (arith_binary)


State 135

   77 term: term '*' expression •

    ';'         reduce using rule 77 (term)
    AND         reduce using rule 77 (term)
    OR          reduce using rule 77 (term)
    GREATER     reduce using rule 77 (term)
    GREATER_EQ  reduce using rule 77 (term)
    LESS        reduce using rule 77 (term)
    LESS_EQ     reduce using rule 77 (term)
    EQUAL       reduce using rule 77 (term)
    NOT_EQ      reduce using rule 77 (term)
    '+'         reduce using rule 77 (term)
    '-'         reduce using rule 77 (term)
    '*'         reduce using rule 77 (term)
    '/'         reduce using rule 77 (term)
    FILTER      reduce using rule 77 (term)
    MAP         reduce using rule 77 (term)
    ':'         reduce using rule 77 (term)


State 136

   78 term: term '/' expression •

    ';'         reduce using rule 78 (term)
    AND         reduce using rule 78 (term)
    OR          reduce using rule 78 (term)
    GREATER     reduce using rule 78 (term)
    GREATER_EQ  reduce using rule 78 (term)
    LESS        reduce using rule 78 (term)
    LESS_EQ     reduce using rule 78 (term)
    EQUAL       reduce using rule 78 (term)
    NOT_EQ      reduce using rule 78 (term)
    '+'         reduce using rule 78 (term)
    '-'         reduce using rule 78 (term)
    '*'         reduce using rule 78 (term)
    '/'         reduce using rule 78 (term)
    FILTER      reduce using rule 78 (term)
    MAP         reduce using rule 78 (term)
    ':'         reduce using rule 78 (term)


State 137

   12 func_calling: ID '(' $@2 calling_parameters • $@3 ')'

    ')'  reduce using rule 11 ($@3)

    $@3  go to state 149


State 138

   26 calling_parameters: lst_calling_parameters •

    ')'  reduce using rule 26 (calling_parameters)


State 139

   28 lst_calling_parameters: operation • ',' lst_calling_parameters
   29                       | operation •
   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ','         shift, and go to state 150
    AND         shift, and go to state 221
    OR          shift, and go to state 222
    GREATER     shift, and go to state 223
    GREATER_EQ  shift, and go to state 224
    LESS        shift, and go to state 225
    LESS_EQ     shift, and go to state 226
    EQUAL       shift, and go to state 227
    NOT_EQ      shift, and go to state 228

    ')'  reduce using rule 29 (lst_calling_parameters)


State 140

   46 conditional_stmt: IF_STMT '(' operation ')' • command
   47                 | IF_STMT '(' operation ')' • command ELSE_STMT command

    error           shift, and go to state 229
    NUM_INT         shift, and go to state 30
    NUM_FLOAT       shift, and go to state 31
    NIL_CNST        shift, and go to state 32
    ID              shift, and go to state 33
    RETURN_STM      shift, and go to state 230
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 231
    FOR_STMT        shift, and go to state 232
    OUTPUT_WRITE    shift, and go to state 233
    OUTPUT_WRITELN  shift, and go to state 234
    INPUT_READ      shift, and go to state 235
    '('             shift, and go to state 40
    '+'             shift, and go to state 41
    '-'             shift, and go to state 42
    '%'             shift, and go to state 43
    '?'             shift, and go to state 44
    '!'             shift, and go to state 45

    '{'  reduce using rule 39 ($@6)

    func_calling      go to state 46
    var_declaration   go to state 236
    unq_declaration   go to state 237
    type              go to state 167
    type_lst          go to state 11
    type_number       go to state 12
    command           go to state 151
    $@6               go to state 238
    init_variable     go to state 239
    init_stmt         go to state 240
    conditional_stmt  go to state 241
    return_stmt       go to state 242
    iteration         go to state 243
    output            go to state 244
    input             go to state 245
    iden              go to state 59
    operation         go to state 246
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 141

   49 iteration: FOR_STMT '(' loop_condition ')' • command

    error           shift, and go to state 29
    NUM_INT         shift, and go to state 30
    NUM_FLOAT       shift, and go to state 31
    NIL_CNST        shift, and go to state 32
    ID              shift, and go to state 33
    RETURN_STM      shift, and go to state 34
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 35
    FOR_STMT        shift, and go to state 36
    OUTPUT_WRITE    shift, and go to state 37
    OUTPUT_WRITELN  shift, and go to state 38
    INPUT_READ      shift, and go to state 39
    '('             shift, and go to state 40
    '+'             shift, and go to state 41
    '-'             shift, and go to state 42
    '%'             shift, and go to state 43
    '?'             shift, and go to state 44
    '!'             shift, and go to state 45

    '{'  reduce using rule 39 ($@6)

    func_calling      go to state 46
    var_declaration   go to state 47
    unq_declaration   go to state 48
    type              go to state 167
    type_lst          go to state 11
    type_number       go to state 12
    command           go to state 152
    $@6               go to state 51
    init_variable     go to state 52
    init_stmt         go to state 53
    conditional_stmt  go to state 54
    return_stmt       go to state 55
    iteration         go to state 56
    output            go to state 57
    input             go to state 58
    iden              go to state 59
    operation         go to state 60
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 142

   50 loop_condition: update_stmt ';' • stop_stmt ';' update_stmt

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    ';'  reduce using rule 54 (stop_stmt)

    func_calling      go to state 46
    stop_stmt         go to state 153
    iden              go to state 72
    operation         go to state 154
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 143

   57 output: OUTPUT_WRITE '(' STRING ')' • ';'

    ';'  shift, and go to state 155


State 144

   55 output: OUTPUT_WRITE '(' operation ')' • ';'

    ';'  shift, and go to state 156


State 145

   58 output: OUTPUT_WRITELN '(' STRING ')' • ';'

    ';'  shift, and go to state 157


State 146

   56 output: OUTPUT_WRITELN '(' operation ')' • ';'

    ';'  shift, and go to state 158


State 147

   59 input: INPUT_READ '(' iden ')' • ';'

    ';'  shift, and go to state 159


State 148

   40 command: $@6 '{' block_commands '}' •

    error           reduce using rule 40 (command)
    NUM_INT         reduce using rule 40 (command)
    NUM_FLOAT       reduce using rule 40 (command)
    NIL_CNST        reduce using rule 40 (command)
    ID              reduce using rule 40 (command)
    RETURN_STM      reduce using rule 40 (command)
    T_INT           reduce using rule 40 (command)
    T_FLOAT         reduce using rule 40 (command)
    IF_STMT         reduce using rule 40 (command)
    FOR_STMT        reduce using rule 40 (command)
    OUTPUT_WRITE    reduce using rule 40 (command)
    OUTPUT_WRITELN  reduce using rule 40 (command)
    INPUT_READ      reduce using rule 40 (command)
    '('             reduce using rule 40 (command)
    '{'             reduce using rule 40 (command)
    '}'             reduce using rule 40 (command)
    '+'             reduce using rule 40 (command)
    '-'             reduce using rule 40 (command)
    '%'             reduce using rule 40 (command)
    '?'             reduce using rule 40 (command)
    '!'             reduce using rule 40 (command)


State 149

   12 func_calling: ID '(' $@2 calling_parameters $@3 • ')'

    ')'  shift, and go to state 160


State 150

   28 lst_calling_parameters: operation ',' • lst_calling_parameters

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling            go to state 210
    lst_calling_parameters  go to state 161
    iden                    go to state 211
    operation               go to state 139
    lst_binary              go to state 212
    arith_binary            go to state 213
    term                    go to state 214
    expression              go to state 215
    const                   go to state 216
    number                  go to state 217
    single_operation        go to state 218
    arith_single            go to state 219
    lst_single              go to state 220


State 151

   46 conditional_stmt: IF_STMT '(' operation ')' command •
   47                 | IF_STMT '(' operation ')' command • ELSE_STMT command

    ELSE_STMT  shift, and go to state 162

    error           reduce using rule 46 (conditional_stmt)
    NUM_INT         reduce using rule 46 (conditional_stmt)
    NUM_FLOAT       reduce using rule 46 (conditional_stmt)
    NIL_CNST        reduce using rule 46 (conditional_stmt)
    ID              reduce using rule 46 (conditional_stmt)
    RETURN_STM      reduce using rule 46 (conditional_stmt)
    T_INT           reduce using rule 46 (conditional_stmt)
    T_FLOAT         reduce using rule 46 (conditional_stmt)
    IF_STMT         reduce using rule 46 (conditional_stmt)
    FOR_STMT        reduce using rule 46 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 46 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 46 (conditional_stmt)
    INPUT_READ      reduce using rule 46 (conditional_stmt)
    '('             reduce using rule 46 (conditional_stmt)
    '{'             reduce using rule 46 (conditional_stmt)
    '}'             reduce using rule 46 (conditional_stmt)
    '+'             reduce using rule 46 (conditional_stmt)
    '-'             reduce using rule 46 (conditional_stmt)
    '%'             reduce using rule 46 (conditional_stmt)
    '?'             reduce using rule 46 (conditional_stmt)
    '!'             reduce using rule 46 (conditional_stmt)


State 152

   49 iteration: FOR_STMT '(' loop_condition ')' command •

    error           reduce using rule 49 (iteration)
    NUM_INT         reduce using rule 49 (iteration)
    NUM_FLOAT       reduce using rule 49 (iteration)
    NIL_CNST        reduce using rule 49 (iteration)
    ID              reduce using rule 49 (iteration)
    RETURN_STM      reduce using rule 49 (iteration)
    T_INT           reduce using rule 49 (iteration)
    T_FLOAT         reduce using rule 49 (iteration)
    IF_STMT         reduce using rule 49 (iteration)
    FOR_STMT        reduce using rule 49 (iteration)
    OUTPUT_WRITE    reduce using rule 49 (iteration)
    OUTPUT_WRITELN  reduce using rule 49 (iteration)
    INPUT_READ      reduce using rule 49 (iteration)
    '('             reduce using rule 49 (iteration)
    '{'             reduce using rule 49 (iteration)
    '}'             reduce using rule 49 (iteration)
    '+'             reduce using rule 49 (iteration)
    '-'             reduce using rule 49 (iteration)
    '%'             reduce using rule 49 (iteration)
    '?'             reduce using rule 49 (iteration)
    '!'             reduce using rule 49 (iteration)


State 153

   50 loop_condition: update_stmt ';' stop_stmt • ';' update_stmt

    ';'  shift, and go to state 163


State 154

   53 stop_stmt: operation •
   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    AND         shift, and go to state 91
    OR          shift, and go to state 92
    GREATER     shift, and go to state 93
    GREATER_EQ  shift, and go to state 94
    LESS        shift, and go to state 95
    LESS_EQ     shift, and go to state 96
    EQUAL       shift, and go to state 97
    NOT_EQ      shift, and go to state 98

    ';'  reduce using rule 53 (stop_stmt)


State 155

   57 output: OUTPUT_WRITE '(' STRING ')' ';' •

    error           reduce using rule 57 (output)
    NUM_INT         reduce using rule 57 (output)
    NUM_FLOAT       reduce using rule 57 (output)
    NIL_CNST        reduce using rule 57 (output)
    ID              reduce using rule 57 (output)
    RETURN_STM      reduce using rule 57 (output)
    T_INT           reduce using rule 57 (output)
    T_FLOAT         reduce using rule 57 (output)
    IF_STMT         reduce using rule 57 (output)
    FOR_STMT        reduce using rule 57 (output)
    OUTPUT_WRITE    reduce using rule 57 (output)
    OUTPUT_WRITELN  reduce using rule 57 (output)
    INPUT_READ      reduce using rule 57 (output)
    '('             reduce using rule 57 (output)
    '{'             reduce using rule 57 (output)
    '}'             reduce using rule 57 (output)
    '+'             reduce using rule 57 (output)
    '-'             reduce using rule 57 (output)
    '%'             reduce using rule 57 (output)
    '?'             reduce using rule 57 (output)
    '!'             reduce using rule 57 (output)


State 156

   55 output: OUTPUT_WRITE '(' operation ')' ';' •

    error           reduce using rule 55 (output)
    NUM_INT         reduce using rule 55 (output)
    NUM_FLOAT       reduce using rule 55 (output)
    NIL_CNST        reduce using rule 55 (output)
    ID              reduce using rule 55 (output)
    RETURN_STM      reduce using rule 55 (output)
    T_INT           reduce using rule 55 (output)
    T_FLOAT         reduce using rule 55 (output)
    IF_STMT         reduce using rule 55 (output)
    FOR_STMT        reduce using rule 55 (output)
    OUTPUT_WRITE    reduce using rule 55 (output)
    OUTPUT_WRITELN  reduce using rule 55 (output)
    INPUT_READ      reduce using rule 55 (output)
    '('             reduce using rule 55 (output)
    '{'             reduce using rule 55 (output)
    '}'             reduce using rule 55 (output)
    '+'             reduce using rule 55 (output)
    '-'             reduce using rule 55 (output)
    '%'             reduce using rule 55 (output)
    '?'             reduce using rule 55 (output)
    '!'             reduce using rule 55 (output)


State 157

   58 output: OUTPUT_WRITELN '(' STRING ')' ';' •

    error           reduce using rule 58 (output)
    NUM_INT         reduce using rule 58 (output)
    NUM_FLOAT       reduce using rule 58 (output)
    NIL_CNST        reduce using rule 58 (output)
    ID              reduce using rule 58 (output)
    RETURN_STM      reduce using rule 58 (output)
    T_INT           reduce using rule 58 (output)
    T_FLOAT         reduce using rule 58 (output)
    IF_STMT         reduce using rule 58 (output)
    FOR_STMT        reduce using rule 58 (output)
    OUTPUT_WRITE    reduce using rule 58 (output)
    OUTPUT_WRITELN  reduce using rule 58 (output)
    INPUT_READ      reduce using rule 58 (output)
    '('             reduce using rule 58 (output)
    '{'             reduce using rule 58 (output)
    '}'             reduce using rule 58 (output)
    '+'             reduce using rule 58 (output)
    '-'             reduce using rule 58 (output)
    '%'             reduce using rule 58 (output)
    '?'             reduce using rule 58 (output)
    '!'             reduce using rule 58 (output)


State 158

   56 output: OUTPUT_WRITELN '(' operation ')' ';' •

    error           reduce using rule 56 (output)
    NUM_INT         reduce using rule 56 (output)
    NUM_FLOAT       reduce using rule 56 (output)
    NIL_CNST        reduce using rule 56 (output)
    ID              reduce using rule 56 (output)
    RETURN_STM      reduce using rule 56 (output)
    T_INT           reduce using rule 56 (output)
    T_FLOAT         reduce using rule 56 (output)
    IF_STMT         reduce using rule 56 (output)
    FOR_STMT        reduce using rule 56 (output)
    OUTPUT_WRITE    reduce using rule 56 (output)
    OUTPUT_WRITELN  reduce using rule 56 (output)
    INPUT_READ      reduce using rule 56 (output)
    '('             reduce using rule 56 (output)
    '{'             reduce using rule 56 (output)
    '}'             reduce using rule 56 (output)
    '+'             reduce using rule 56 (output)
    '-'             reduce using rule 56 (output)
    '%'             reduce using rule 56 (output)
    '?'             reduce using rule 56 (output)
    '!'             reduce using rule 56 (output)


State 159

   59 input: INPUT_READ '(' iden ')' ';' •

    error           reduce using rule 59 (input)
    NUM_INT         reduce using rule 59 (input)
    NUM_FLOAT       reduce using rule 59 (input)
    NIL_CNST        reduce using rule 59 (input)
    ID              reduce using rule 59 (input)
    RETURN_STM      reduce using rule 59 (input)
    T_INT           reduce using rule 59 (input)
    T_FLOAT         reduce using rule 59 (input)
    IF_STMT         reduce using rule 59 (input)
    FOR_STMT        reduce using rule 59 (input)
    OUTPUT_WRITE    reduce using rule 59 (input)
    OUTPUT_WRITELN  reduce using rule 59 (input)
    INPUT_READ      reduce using rule 59 (input)
    '('             reduce using rule 59 (input)
    '{'             reduce using rule 59 (input)
    '}'             reduce using rule 59 (input)
    '+'             reduce using rule 59 (input)
    '-'             reduce using rule 59 (input)
    '%'             reduce using rule 59 (input)
    '?'             reduce using rule 59 (input)
    '!'             reduce using rule 59 (input)


State 160

   12 func_calling: ID '(' $@2 calling_parameters $@3 ')' •

    ';'         reduce using rule 12 (func_calling)
    AND         reduce using rule 12 (func_calling)
    OR          reduce using rule 12 (func_calling)
    GREATER     reduce using rule 12 (func_calling)
    GREATER_EQ  reduce using rule 12 (func_calling)
    LESS        reduce using rule 12 (func_calling)
    LESS_EQ     reduce using rule 12 (func_calling)
    EQUAL       reduce using rule 12 (func_calling)
    NOT_EQ      reduce using rule 12 (func_calling)
    '+'         reduce using rule 12 (func_calling)
    '-'         reduce using rule 12 (func_calling)
    '*'         reduce using rule 12 (func_calling)
    '/'         reduce using rule 12 (func_calling)
    FILTER      reduce using rule 12 (func_calling)
    MAP         reduce using rule 12 (func_calling)
    ':'         reduce using rule 12 (func_calling)


State 161

   28 lst_calling_parameters: operation ',' lst_calling_parameters •

    ')'  reduce using rule 28 (lst_calling_parameters)


State 162

   47 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT • command

    error           shift, and go to state 29
    NUM_INT         shift, and go to state 30
    NUM_FLOAT       shift, and go to state 31
    NIL_CNST        shift, and go to state 32
    ID              shift, and go to state 33
    RETURN_STM      shift, and go to state 34
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 35
    FOR_STMT        shift, and go to state 36
    OUTPUT_WRITE    shift, and go to state 37
    OUTPUT_WRITELN  shift, and go to state 38
    INPUT_READ      shift, and go to state 39
    '('             shift, and go to state 40
    '+'             shift, and go to state 41
    '-'             shift, and go to state 42
    '%'             shift, and go to state 43
    '?'             shift, and go to state 44
    '!'             shift, and go to state 45

    '{'  reduce using rule 39 ($@6)

    func_calling      go to state 46
    var_declaration   go to state 47
    unq_declaration   go to state 48
    type              go to state 167
    type_lst          go to state 11
    type_number       go to state 12
    command           go to state 164
    $@6               go to state 51
    init_variable     go to state 52
    init_stmt         go to state 53
    conditional_stmt  go to state 54
    return_stmt       go to state 55
    iteration         go to state 56
    output            go to state 57
    input             go to state 58
    iden              go to state 59
    operation         go to state 60
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 163

   50 loop_condition: update_stmt ';' stop_stmt ';' • update_stmt

    ID  shift, and go to state 109

    ')'  reduce using rule 52 (update_stmt)

    init_stmt    go to state 247
    update_stmt  go to state 165
    iden         go to state 248


State 164

   47 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT command •

    error           reduce using rule 47 (conditional_stmt)
    NUM_INT         reduce using rule 47 (conditional_stmt)
    NUM_FLOAT       reduce using rule 47 (conditional_stmt)
    NIL_CNST        reduce using rule 47 (conditional_stmt)
    ID              reduce using rule 47 (conditional_stmt)
    RETURN_STM      reduce using rule 47 (conditional_stmt)
    T_INT           reduce using rule 47 (conditional_stmt)
    T_FLOAT         reduce using rule 47 (conditional_stmt)
    IF_STMT         reduce using rule 47 (conditional_stmt)
    FOR_STMT        reduce using rule 47 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 47 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 47 (conditional_stmt)
    INPUT_READ      reduce using rule 47 (conditional_stmt)
    '('             reduce using rule 47 (conditional_stmt)
    '{'             reduce using rule 47 (conditional_stmt)
    '}'             reduce using rule 47 (conditional_stmt)
    '+'             reduce using rule 47 (conditional_stmt)
    '-'             reduce using rule 47 (conditional_stmt)
    '%'             reduce using rule 47 (conditional_stmt)
    '?'             reduce using rule 47 (conditional_stmt)
    '!'             reduce using rule 47 (conditional_stmt)


State 165

   50 loop_condition: update_stmt ';' stop_stmt ';' update_stmt •

    ')'  reduce using rule 50 (loop_condition)


State 166

   14 unq_declaration: type • ID

    ID  shift, and go to state 249


State 167

   14 unq_declaration: type • ID

    ID  shift, and go to state 250


State 168

   12 func_calling: ID • '(' $@2 calling_parameters $@3 ')'
   60 iden: ID •

    '('  shift, and go to state 71

    ';'         reduce using rule 60 (iden)
    AND         reduce using rule 60 (iden)
    OR          reduce using rule 60 (iden)
    GREATER     reduce using rule 60 (iden)
    GREATER_EQ  reduce using rule 60 (iden)
    LESS        reduce using rule 60 (iden)
    LESS_EQ     reduce using rule 60 (iden)
    EQUAL       reduce using rule 60 (iden)
    NOT_EQ      reduce using rule 60 (iden)
    '+'         reduce using rule 60 (iden)
    '-'         reduce using rule 60 (iden)
    '*'         reduce using rule 60 (iden)
    '/'         reduce using rule 60 (iden)
    FILTER      reduce using rule 60 (iden)
    MAP         reduce using rule 60 (iden)
    ':'         reduce using rule 60 (iden)


State 169

   87 number: NUM_INT •

    ')'         reduce using rule 87 (number)
    AND         reduce using rule 87 (number)
    OR          reduce using rule 87 (number)
    GREATER     reduce using rule 87 (number)
    GREATER_EQ  reduce using rule 87 (number)
    LESS        reduce using rule 87 (number)
    LESS_EQ     reduce using rule 87 (number)
    EQUAL       reduce using rule 87 (number)
    NOT_EQ      reduce using rule 87 (number)
    '+'         reduce using rule 87 (number)
    '-'         reduce using rule 87 (number)
    '*'         reduce using rule 87 (number)
    '/'         reduce using rule 87 (number)
    FILTER      reduce using rule 87 (number)
    MAP         reduce using rule 87 (number)
    ':'         reduce using rule 87 (number)


State 170

   88 number: NUM_FLOAT •

    ')'         reduce using rule 88 (number)
    AND         reduce using rule 88 (number)
    OR          reduce using rule 88 (number)
    GREATER     reduce using rule 88 (number)
    GREATER_EQ  reduce using rule 88 (number)
    LESS        reduce using rule 88 (number)
    LESS_EQ     reduce using rule 88 (number)
    EQUAL       reduce using rule 88 (number)
    NOT_EQ      reduce using rule 88 (number)
    '+'         reduce using rule 88 (number)
    '-'         reduce using rule 88 (number)
    '*'         reduce using rule 88 (number)
    '/'         reduce using rule 88 (number)
    FILTER      reduce using rule 88 (number)
    MAP         reduce using rule 88 (number)
    ':'         reduce using rule 88 (number)


State 171

   86 const: NIL_CNST •

    ')'         reduce using rule 86 (const)
    AND         reduce using rule 86 (const)
    OR          reduce using rule 86 (const)
    GREATER     reduce using rule 86 (const)
    GREATER_EQ  reduce using rule 86 (const)
    LESS        reduce using rule 86 (const)
    LESS_EQ     reduce using rule 86 (const)
    EQUAL       reduce using rule 86 (const)
    NOT_EQ      reduce using rule 86 (const)
    '+'         reduce using rule 86 (const)
    '-'         reduce using rule 86 (const)
    '*'         reduce using rule 86 (const)
    '/'         reduce using rule 86 (const)
    FILTER      reduce using rule 86 (const)
    MAP         reduce using rule 86 (const)
    ':'         reduce using rule 86 (const)


State 172

   12 func_calling: ID • '(' $@2 calling_parameters $@3 ')'
   60 iden: ID •

    '('  shift, and go to state 251

    ')'         reduce using rule 60 (iden)
    AND         reduce using rule 60 (iden)
    OR          reduce using rule 60 (iden)
    GREATER     reduce using rule 60 (iden)
    GREATER_EQ  reduce using rule 60 (iden)
    LESS        reduce using rule 60 (iden)
    LESS_EQ     reduce using rule 60 (iden)
    EQUAL       reduce using rule 60 (iden)
    NOT_EQ      reduce using rule 60 (iden)
    '+'         reduce using rule 60 (iden)
    '-'         reduce using rule 60 (iden)
    '*'         reduce using rule 60 (iden)
    '/'         reduce using rule 60 (iden)
    FILTER      reduce using rule 60 (iden)
    MAP         reduce using rule 60 (iden)
    ':'         reduce using rule 60 (iden)


State 173

   84 expression: '(' • operation ')'

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    operation         go to state 252
    lst_binary        go to state 181
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 174

   92 arith_single: '+' • expression

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    expression        go to state 253
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 175

   93 arith_single: '-' • expression

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    expression        go to state 254
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 176

   94 lst_single: '%' • expression

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    expression        go to state 255
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 177

   95 lst_single: '?' • expression

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    expression        go to state 256
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 178

   91 single_operation: '!' • expression

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    expression        go to state 257
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 179

   80 expression: func_calling •

    ')'         reduce using rule 80 (expression)
    AND         reduce using rule 80 (expression)
    OR          reduce using rule 80 (expression)
    GREATER     reduce using rule 80 (expression)
    GREATER_EQ  reduce using rule 80 (expression)
    LESS        reduce using rule 80 (expression)
    LESS_EQ     reduce using rule 80 (expression)
    EQUAL       reduce using rule 80 (expression)
    NOT_EQ      reduce using rule 80 (expression)
    '+'         reduce using rule 80 (expression)
    '-'         reduce using rule 80 (expression)
    '*'         reduce using rule 80 (expression)
    '/'         reduce using rule 80 (expression)
    FILTER      reduce using rule 80 (expression)
    MAP         reduce using rule 80 (expression)
    ':'         reduce using rule 80 (expression)


State 180

   83 expression: iden •

    ')'         reduce using rule 83 (expression)
    AND         reduce using rule 83 (expression)
    OR          reduce using rule 83 (expression)
    GREATER     reduce using rule 83 (expression)
    GREATER_EQ  reduce using rule 83 (expression)
    LESS        reduce using rule 83 (expression)
    LESS_EQ     reduce using rule 83 (expression)
    EQUAL       reduce using rule 83 (expression)
    NOT_EQ      reduce using rule 83 (expression)
    '+'         reduce using rule 83 (expression)
    '-'         reduce using rule 83 (expression)
    '*'         reduce using rule 83 (expression)
    '/'         reduce using rule 83 (expression)
    FILTER      reduce using rule 83 (expression)
    MAP         reduce using rule 83 (expression)
    ':'         reduce using rule 83 (expression)


State 181

   61 operation: lst_binary •
   70 lst_binary: lst_binary • FILTER lst_binary
   71           | lst_binary • MAP lst_binary
   72           | lst_binary • ':' lst_binary

    FILTER  shift, and go to state 258
    MAP     shift, and go to state 259
    ':'     shift, and go to state 260

    ')'         reduce using rule 61 (operation)
    AND         reduce using rule 61 (operation)
    OR          reduce using rule 61 (operation)
    GREATER     reduce using rule 61 (operation)
    GREATER_EQ  reduce using rule 61 (operation)
    LESS        reduce using rule 61 (operation)
    LESS_EQ     reduce using rule 61 (operation)
    EQUAL       reduce using rule 61 (operation)
    NOT_EQ      reduce using rule 61 (operation)


State 182

   73 lst_binary: arith_binary •
   74 arith_binary: arith_binary • '+' term
   75             | arith_binary • '-' term

    '+'  shift, and go to state 261
    '-'  shift, and go to state 262

    ')'         reduce using rule 73 (lst_binary)
    AND         reduce using rule 73 (lst_binary)
    OR          reduce using rule 73 (lst_binary)
    GREATER     reduce using rule 73 (lst_binary)
    GREATER_EQ  reduce using rule 73 (lst_binary)
    LESS        reduce using rule 73 (lst_binary)
    LESS_EQ     reduce using rule 73 (lst_binary)
    EQUAL       reduce using rule 73 (lst_binary)
    NOT_EQ      reduce using rule 73 (lst_binary)
    FILTER      reduce using rule 73 (lst_binary)
    MAP         reduce using rule 73 (lst_binary)
    ':'         reduce using rule 73 (lst_binary)


State 183

   76 arith_binary: term •
   77 term: term • '*' expression
   78     | term • '/' expression

    '*'  shift, and go to state 263
    '/'  shift, and go to state 264

    ')'         reduce using rule 76 (arith_binary)
    AND         reduce using rule 76 (arith_binary)
    OR          reduce using rule 76 (arith_binary)
    GREATER     reduce using rule 76 (arith_binary)
    GREATER_EQ  reduce using rule 76 (arith_binary)
    LESS        reduce using rule 76 (arith_binary)
    LESS_EQ     reduce using rule 76 (arith_binary)
    EQUAL       reduce using rule 76 (arith_binary)
    NOT_EQ      reduce using rule 76 (arith_binary)
    '+'         reduce using rule 76 (arith_binary)
    '-'         reduce using rule 76 (arith_binary)
    FILTER      reduce using rule 76 (arith_binary)
    MAP         reduce using rule 76 (arith_binary)
    ':'         reduce using rule 76 (arith_binary)


State 184

   79 term: expression •

    ')'         reduce using rule 79 (term)
    AND         reduce using rule 79 (term)
    OR          reduce using rule 79 (term)
    GREATER     reduce using rule 79 (term)
    GREATER_EQ  reduce using rule 79 (term)
    LESS        reduce using rule 79 (term)
    LESS_EQ     reduce using rule 79 (term)
    EQUAL       reduce using rule 79 (term)
    NOT_EQ      reduce using rule 79 (term)
    '+'         reduce using rule 79 (term)
    '-'         reduce using rule 79 (term)
    '*'         reduce using rule 79 (term)
    '/'         reduce using rule 79 (term)
    FILTER      reduce using rule 79 (term)
    MAP         reduce using rule 79 (term)
    ':'         reduce using rule 79 (term)


State 185

   82 expression: const •

    ')'         reduce using rule 82 (expression)
    AND         reduce using rule 82 (expression)
    OR          reduce using rule 82 (expression)
    GREATER     reduce using rule 82 (expression)
    GREATER_EQ  reduce using rule 82 (expression)
    LESS        reduce using rule 82 (expression)
    LESS_EQ     reduce using rule 82 (expression)
    EQUAL       reduce using rule 82 (expression)
    NOT_EQ      reduce using rule 82 (expression)
    '+'         reduce using rule 82 (expression)
    '-'         reduce using rule 82 (expression)
    '*'         reduce using rule 82 (expression)
    '/'         reduce using rule 82 (expression)
    FILTER      reduce using rule 82 (expression)
    MAP         reduce using rule 82 (expression)
    ':'         reduce using rule 82 (expression)


State 186

   85 const: number •

    ')'         reduce using rule 85 (const)
    AND         reduce using rule 85 (const)
    OR          reduce using rule 85 (const)
    GREATER     reduce using rule 85 (const)
    GREATER_EQ  reduce using rule 85 (const)
    LESS        reduce using rule 85 (const)
    LESS_EQ     reduce using rule 85 (const)
    EQUAL       reduce using rule 85 (const)
    NOT_EQ      reduce using rule 85 (const)
    '+'         reduce using rule 85 (const)
    '-'         reduce using rule 85 (const)
    '*'         reduce using rule 85 (const)
    '/'         reduce using rule 85 (const)
    FILTER      reduce using rule 85 (const)
    MAP         reduce using rule 85 (const)
    ':'         reduce using rule 85 (const)


State 187

   81 expression: single_operation •

    ')'         reduce using rule 81 (expression)
    AND         reduce using rule 81 (expression)
    OR          reduce using rule 81 (expression)
    GREATER     reduce using rule 81 (expression)
    GREATER_EQ  reduce using rule 81 (expression)
    LESS        reduce using rule 81 (expression)
    LESS_EQ     reduce using rule 81 (expression)
    EQUAL       reduce using rule 81 (expression)
    NOT_EQ      reduce using rule 81 (expression)
    '+'         reduce using rule 81 (expression)
    '-'         reduce using rule 81 (expression)
    '*'         reduce using rule 81 (expression)
    '/'         reduce using rule 81 (expression)
    FILTER      reduce using rule 81 (expression)
    MAP         reduce using rule 81 (expression)
    ':'         reduce using rule 81 (expression)


State 188

   89 single_operation: arith_single •

    ')'         reduce using rule 89 (single_operation)
    AND         reduce using rule 89 (single_operation)
    OR          reduce using rule 89 (single_operation)
    GREATER     reduce using rule 89 (single_operation)
    GREATER_EQ  reduce using rule 89 (single_operation)
    LESS        reduce using rule 89 (single_operation)
    LESS_EQ     reduce using rule 89 (single_operation)
    EQUAL       reduce using rule 89 (single_operation)
    NOT_EQ      reduce using rule 89 (single_operation)
    '+'         reduce using rule 89 (single_operation)
    '-'         reduce using rule 89 (single_operation)
    '*'         reduce using rule 89 (single_operation)
    '/'         reduce using rule 89 (single_operation)
    FILTER      reduce using rule 89 (single_operation)
    MAP         reduce using rule 89 (single_operation)
    ':'         reduce using rule 89 (single_operation)


State 189

   90 single_operation: lst_single •

    ')'         reduce using rule 90 (single_operation)
    AND         reduce using rule 90 (single_operation)
    OR          reduce using rule 90 (single_operation)
    GREATER     reduce using rule 90 (single_operation)
    GREATER_EQ  reduce using rule 90 (single_operation)
    LESS        reduce using rule 90 (single_operation)
    LESS_EQ     reduce using rule 90 (single_operation)
    EQUAL       reduce using rule 90 (single_operation)
    NOT_EQ      reduce using rule 90 (single_operation)
    '+'         reduce using rule 90 (single_operation)
    '-'         reduce using rule 90 (single_operation)
    '*'         reduce using rule 90 (single_operation)
    '/'         reduce using rule 90 (single_operation)
    FILTER      reduce using rule 90 (single_operation)
    MAP         reduce using rule 90 (single_operation)
    ':'         reduce using rule 90 (single_operation)


State 190

   13 var_declaration: unq_declaration ';' •

    error           reduce using rule 13 (var_declaration)
    NUM_INT         reduce using rule 13 (var_declaration)
    NUM_FLOAT       reduce using rule 13 (var_declaration)
    NIL_CNST        reduce using rule 13 (var_declaration)
    ID              reduce using rule 13 (var_declaration)
    RETURN_STM      reduce using rule 13 (var_declaration)
    T_INT           reduce using rule 13 (var_declaration)
    T_FLOAT         reduce using rule 13 (var_declaration)
    IF_STMT         reduce using rule 13 (var_declaration)
    FOR_STMT        reduce using rule 13 (var_declaration)
    OUTPUT_WRITE    reduce using rule 13 (var_declaration)
    OUTPUT_WRITELN  reduce using rule 13 (var_declaration)
    INPUT_READ      reduce using rule 13 (var_declaration)
    '('             reduce using rule 13 (var_declaration)
    '{'             reduce using rule 13 (var_declaration)
    '}'             reduce using rule 13 (var_declaration)
    '+'             reduce using rule 13 (var_declaration)
    '-'             reduce using rule 13 (var_declaration)
    '%'             reduce using rule 13 (var_declaration)
    '?'             reduce using rule 13 (var_declaration)
    '!'             reduce using rule 13 (var_declaration)


State 191

   60 iden: ID •

    ')'  reduce using rule 60 (iden)


State 192

   68 operation: operation AND • operation

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    operation         go to state 265
    lst_binary        go to state 181
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 193

   69 operation: operation OR • operation

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    operation         go to state 266
    lst_binary        go to state 181
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 194

   62 operation: operation GREATER • operation

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    operation         go to state 267
    lst_binary        go to state 181
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 195

   63 operation: operation GREATER_EQ • operation

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    operation         go to state 268
    lst_binary        go to state 181
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 196

   64 operation: operation LESS • operation

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    operation         go to state 269
    lst_binary        go to state 181
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 197

   65 operation: operation LESS_EQ • operation

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    operation         go to state 270
    lst_binary        go to state 181
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 198

   66 operation: operation EQUAL • operation

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    operation         go to state 271
    lst_binary        go to state 181
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 199

   67 operation: operation NOT_EQ • operation

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    operation         go to state 272
    lst_binary        go to state 181
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 200

   87 number: NUM_INT •

    ')'         reduce using rule 87 (number)
    ','         reduce using rule 87 (number)
    AND         reduce using rule 87 (number)
    OR          reduce using rule 87 (number)
    GREATER     reduce using rule 87 (number)
    GREATER_EQ  reduce using rule 87 (number)
    LESS        reduce using rule 87 (number)
    LESS_EQ     reduce using rule 87 (number)
    EQUAL       reduce using rule 87 (number)
    NOT_EQ      reduce using rule 87 (number)
    '+'         reduce using rule 87 (number)
    '-'         reduce using rule 87 (number)
    '*'         reduce using rule 87 (number)
    '/'         reduce using rule 87 (number)
    FILTER      reduce using rule 87 (number)
    MAP         reduce using rule 87 (number)
    ':'         reduce using rule 87 (number)


State 201

   88 number: NUM_FLOAT •

    ')'         reduce using rule 88 (number)
    ','         reduce using rule 88 (number)
    AND         reduce using rule 88 (number)
    OR          reduce using rule 88 (number)
    GREATER     reduce using rule 88 (number)
    GREATER_EQ  reduce using rule 88 (number)
    LESS        reduce using rule 88 (number)
    LESS_EQ     reduce using rule 88 (number)
    EQUAL       reduce using rule 88 (number)
    NOT_EQ      reduce using rule 88 (number)
    '+'         reduce using rule 88 (number)
    '-'         reduce using rule 88 (number)
    '*'         reduce using rule 88 (number)
    '/'         reduce using rule 88 (number)
    FILTER      reduce using rule 88 (number)
    MAP         reduce using rule 88 (number)
    ':'         reduce using rule 88 (number)


State 202

   86 const: NIL_CNST •

    ')'         reduce using rule 86 (const)
    ','         reduce using rule 86 (const)
    AND         reduce using rule 86 (const)
    OR          reduce using rule 86 (const)
    GREATER     reduce using rule 86 (const)
    GREATER_EQ  reduce using rule 86 (const)
    LESS        reduce using rule 86 (const)
    LESS_EQ     reduce using rule 86 (const)
    EQUAL       reduce using rule 86 (const)
    NOT_EQ      reduce using rule 86 (const)
    '+'         reduce using rule 86 (const)
    '-'         reduce using rule 86 (const)
    '*'         reduce using rule 86 (const)
    '/'         reduce using rule 86 (const)
    FILTER      reduce using rule 86 (const)
    MAP         reduce using rule 86 (const)
    ':'         reduce using rule 86 (const)


State 203

   12 func_calling: ID • '(' $@2 calling_parameters $@3 ')'
   60 iden: ID •

    '('  shift, and go to state 273

    ')'         reduce using rule 60 (iden)
    ','         reduce using rule 60 (iden)
    AND         reduce using rule 60 (iden)
    OR          reduce using rule 60 (iden)
    GREATER     reduce using rule 60 (iden)
    GREATER_EQ  reduce using rule 60 (iden)
    LESS        reduce using rule 60 (iden)
    LESS_EQ     reduce using rule 60 (iden)
    EQUAL       reduce using rule 60 (iden)
    NOT_EQ      reduce using rule 60 (iden)
    '+'         reduce using rule 60 (iden)
    '-'         reduce using rule 60 (iden)
    '*'         reduce using rule 60 (iden)
    '/'         reduce using rule 60 (iden)
    FILTER      reduce using rule 60 (iden)
    MAP         reduce using rule 60 (iden)
    ':'         reduce using rule 60 (iden)


State 204

   84 expression: '(' • operation ')'

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    operation         go to state 274
    lst_binary        go to state 181
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 205

   92 arith_single: '+' • expression

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling      go to state 210
    iden              go to state 211
    expression        go to state 275
    const             go to state 216
    number            go to state 217
    single_operation  go to state 218
    arith_single      go to state 219
    lst_single        go to state 220


State 206

   93 arith_single: '-' • expression

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling      go to state 210
    iden              go to state 211
    expression        go to state 276
    const             go to state 216
    number            go to state 217
    single_operation  go to state 218
    arith_single      go to state 219
    lst_single        go to state 220


State 207

   94 lst_single: '%' • expression

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling      go to state 210
    iden              go to state 211
    expression        go to state 277
    const             go to state 216
    number            go to state 217
    single_operation  go to state 218
    arith_single      go to state 219
    lst_single        go to state 220


State 208

   95 lst_single: '?' • expression

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling      go to state 210
    iden              go to state 211
    expression        go to state 278
    const             go to state 216
    number            go to state 217
    single_operation  go to state 218
    arith_single      go to state 219
    lst_single        go to state 220


State 209

   91 single_operation: '!' • expression

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling      go to state 210
    iden              go to state 211
    expression        go to state 279
    const             go to state 216
    number            go to state 217
    single_operation  go to state 218
    arith_single      go to state 219
    lst_single        go to state 220


State 210

   80 expression: func_calling •

    ')'         reduce using rule 80 (expression)
    ','         reduce using rule 80 (expression)
    AND         reduce using rule 80 (expression)
    OR          reduce using rule 80 (expression)
    GREATER     reduce using rule 80 (expression)
    GREATER_EQ  reduce using rule 80 (expression)
    LESS        reduce using rule 80 (expression)
    LESS_EQ     reduce using rule 80 (expression)
    EQUAL       reduce using rule 80 (expression)
    NOT_EQ      reduce using rule 80 (expression)
    '+'         reduce using rule 80 (expression)
    '-'         reduce using rule 80 (expression)
    '*'         reduce using rule 80 (expression)
    '/'         reduce using rule 80 (expression)
    FILTER      reduce using rule 80 (expression)
    MAP         reduce using rule 80 (expression)
    ':'         reduce using rule 80 (expression)


State 211

   83 expression: iden •

    ')'         reduce using rule 83 (expression)
    ','         reduce using rule 83 (expression)
    AND         reduce using rule 83 (expression)
    OR          reduce using rule 83 (expression)
    GREATER     reduce using rule 83 (expression)
    GREATER_EQ  reduce using rule 83 (expression)
    LESS        reduce using rule 83 (expression)
    LESS_EQ     reduce using rule 83 (expression)
    EQUAL       reduce using rule 83 (expression)
    NOT_EQ      reduce using rule 83 (expression)
    '+'         reduce using rule 83 (expression)
    '-'         reduce using rule 83 (expression)
    '*'         reduce using rule 83 (expression)
    '/'         reduce using rule 83 (expression)
    FILTER      reduce using rule 83 (expression)
    MAP         reduce using rule 83 (expression)
    ':'         reduce using rule 83 (expression)


State 212

   61 operation: lst_binary •
   70 lst_binary: lst_binary • FILTER lst_binary
   71           | lst_binary • MAP lst_binary
   72           | lst_binary • ':' lst_binary

    FILTER  shift, and go to state 280
    MAP     shift, and go to state 281
    ':'     shift, and go to state 282

    ')'         reduce using rule 61 (operation)
    ','         reduce using rule 61 (operation)
    AND         reduce using rule 61 (operation)
    OR          reduce using rule 61 (operation)
    GREATER     reduce using rule 61 (operation)
    GREATER_EQ  reduce using rule 61 (operation)
    LESS        reduce using rule 61 (operation)
    LESS_EQ     reduce using rule 61 (operation)
    EQUAL       reduce using rule 61 (operation)
    NOT_EQ      reduce using rule 61 (operation)


State 213

   73 lst_binary: arith_binary •
   74 arith_binary: arith_binary • '+' term
   75             | arith_binary • '-' term

    '+'  shift, and go to state 283
    '-'  shift, and go to state 284

    ')'         reduce using rule 73 (lst_binary)
    ','         reduce using rule 73 (lst_binary)
    AND         reduce using rule 73 (lst_binary)
    OR          reduce using rule 73 (lst_binary)
    GREATER     reduce using rule 73 (lst_binary)
    GREATER_EQ  reduce using rule 73 (lst_binary)
    LESS        reduce using rule 73 (lst_binary)
    LESS_EQ     reduce using rule 73 (lst_binary)
    EQUAL       reduce using rule 73 (lst_binary)
    NOT_EQ      reduce using rule 73 (lst_binary)
    FILTER      reduce using rule 73 (lst_binary)
    MAP         reduce using rule 73 (lst_binary)
    ':'         reduce using rule 73 (lst_binary)


State 214

   76 arith_binary: term •
   77 term: term • '*' expression
   78     | term • '/' expression

    '*'  shift, and go to state 285
    '/'  shift, and go to state 286

    ')'         reduce using rule 76 (arith_binary)
    ','         reduce using rule 76 (arith_binary)
    AND         reduce using rule 76 (arith_binary)
    OR          reduce using rule 76 (arith_binary)
    GREATER     reduce using rule 76 (arith_binary)
    GREATER_EQ  reduce using rule 76 (arith_binary)
    LESS        reduce using rule 76 (arith_binary)
    LESS_EQ     reduce using rule 76 (arith_binary)
    EQUAL       reduce using rule 76 (arith_binary)
    NOT_EQ      reduce using rule 76 (arith_binary)
    '+'         reduce using rule 76 (arith_binary)
    '-'         reduce using rule 76 (arith_binary)
    FILTER      reduce using rule 76 (arith_binary)
    MAP         reduce using rule 76 (arith_binary)
    ':'         reduce using rule 76 (arith_binary)


State 215

   79 term: expression •

    ')'         reduce using rule 79 (term)
    ','         reduce using rule 79 (term)
    AND         reduce using rule 79 (term)
    OR          reduce using rule 79 (term)
    GREATER     reduce using rule 79 (term)
    GREATER_EQ  reduce using rule 79 (term)
    LESS        reduce using rule 79 (term)
    LESS_EQ     reduce using rule 79 (term)
    EQUAL       reduce using rule 79 (term)
    NOT_EQ      reduce using rule 79 (term)
    '+'         reduce using rule 79 (term)
    '-'         reduce using rule 79 (term)
    '*'         reduce using rule 79 (term)
    '/'         reduce using rule 79 (term)
    FILTER      reduce using rule 79 (term)
    MAP         reduce using rule 79 (term)
    ':'         reduce using rule 79 (term)


State 216

   82 expression: const •

    ')'         reduce using rule 82 (expression)
    ','         reduce using rule 82 (expression)
    AND         reduce using rule 82 (expression)
    OR          reduce using rule 82 (expression)
    GREATER     reduce using rule 82 (expression)
    GREATER_EQ  reduce using rule 82 (expression)
    LESS        reduce using rule 82 (expression)
    LESS_EQ     reduce using rule 82 (expression)
    EQUAL       reduce using rule 82 (expression)
    NOT_EQ      reduce using rule 82 (expression)
    '+'         reduce using rule 82 (expression)
    '-'         reduce using rule 82 (expression)
    '*'         reduce using rule 82 (expression)
    '/'         reduce using rule 82 (expression)
    FILTER      reduce using rule 82 (expression)
    MAP         reduce using rule 82 (expression)
    ':'         reduce using rule 82 (expression)


State 217

   85 const: number •

    ')'         reduce using rule 85 (const)
    ','         reduce using rule 85 (const)
    AND         reduce using rule 85 (const)
    OR          reduce using rule 85 (const)
    GREATER     reduce using rule 85 (const)
    GREATER_EQ  reduce using rule 85 (const)
    LESS        reduce using rule 85 (const)
    LESS_EQ     reduce using rule 85 (const)
    EQUAL       reduce using rule 85 (const)
    NOT_EQ      reduce using rule 85 (const)
    '+'         reduce using rule 85 (const)
    '-'         reduce using rule 85 (const)
    '*'         reduce using rule 85 (const)
    '/'         reduce using rule 85 (const)
    FILTER      reduce using rule 85 (const)
    MAP         reduce using rule 85 (const)
    ':'         reduce using rule 85 (const)


State 218

   81 expression: single_operation •

    ')'         reduce using rule 81 (expression)
    ','         reduce using rule 81 (expression)
    AND         reduce using rule 81 (expression)
    OR          reduce using rule 81 (expression)
    GREATER     reduce using rule 81 (expression)
    GREATER_EQ  reduce using rule 81 (expression)
    LESS        reduce using rule 81 (expression)
    LESS_EQ     reduce using rule 81 (expression)
    EQUAL       reduce using rule 81 (expression)
    NOT_EQ      reduce using rule 81 (expression)
    '+'         reduce using rule 81 (expression)
    '-'         reduce using rule 81 (expression)
    '*'         reduce using rule 81 (expression)
    '/'         reduce using rule 81 (expression)
    FILTER      reduce using rule 81 (expression)
    MAP         reduce using rule 81 (expression)
    ':'         reduce using rule 81 (expression)


State 219

   89 single_operation: arith_single •

    ')'         reduce using rule 89 (single_operation)
    ','         reduce using rule 89 (single_operation)
    AND         reduce using rule 89 (single_operation)
    OR          reduce using rule 89 (single_operation)
    GREATER     reduce using rule 89 (single_operation)
    GREATER_EQ  reduce using rule 89 (single_operation)
    LESS        reduce using rule 89 (single_operation)
    LESS_EQ     reduce using rule 89 (single_operation)
    EQUAL       reduce using rule 89 (single_operation)
    NOT_EQ      reduce using rule 89 (single_operation)
    '+'         reduce using rule 89 (single_operation)
    '-'         reduce using rule 89 (single_operation)
    '*'         reduce using rule 89 (single_operation)
    '/'         reduce using rule 89 (single_operation)
    FILTER      reduce using rule 89 (single_operation)
    MAP         reduce using rule 89 (single_operation)
    ':'         reduce using rule 89 (single_operation)


State 220

   90 single_operation: lst_single •

    ')'         reduce using rule 90 (single_operation)
    ','         reduce using rule 90 (single_operation)
    AND         reduce using rule 90 (single_operation)
    OR          reduce using rule 90 (single_operation)
    GREATER     reduce using rule 90 (single_operation)
    GREATER_EQ  reduce using rule 90 (single_operation)
    LESS        reduce using rule 90 (single_operation)
    LESS_EQ     reduce using rule 90 (single_operation)
    EQUAL       reduce using rule 90 (single_operation)
    NOT_EQ      reduce using rule 90 (single_operation)
    '+'         reduce using rule 90 (single_operation)
    '-'         reduce using rule 90 (single_operation)
    '*'         reduce using rule 90 (single_operation)
    '/'         reduce using rule 90 (single_operation)
    FILTER      reduce using rule 90 (single_operation)
    MAP         reduce using rule 90 (single_operation)
    ':'         reduce using rule 90 (single_operation)


State 221

   68 operation: operation AND • operation

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling      go to state 210
    iden              go to state 211
    operation         go to state 287
    lst_binary        go to state 212
    arith_binary      go to state 213
    term              go to state 214
    expression        go to state 215
    const             go to state 216
    number            go to state 217
    single_operation  go to state 218
    arith_single      go to state 219
    lst_single        go to state 220


State 222

   69 operation: operation OR • operation

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling      go to state 210
    iden              go to state 211
    operation         go to state 288
    lst_binary        go to state 212
    arith_binary      go to state 213
    term              go to state 214
    expression        go to state 215
    const             go to state 216
    number            go to state 217
    single_operation  go to state 218
    arith_single      go to state 219
    lst_single        go to state 220


State 223

   62 operation: operation GREATER • operation

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling      go to state 210
    iden              go to state 211
    operation         go to state 289
    lst_binary        go to state 212
    arith_binary      go to state 213
    term              go to state 214
    expression        go to state 215
    const             go to state 216
    number            go to state 217
    single_operation  go to state 218
    arith_single      go to state 219
    lst_single        go to state 220


State 224

   63 operation: operation GREATER_EQ • operation

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling      go to state 210
    iden              go to state 211
    operation         go to state 290
    lst_binary        go to state 212
    arith_binary      go to state 213
    term              go to state 214
    expression        go to state 215
    const             go to state 216
    number            go to state 217
    single_operation  go to state 218
    arith_single      go to state 219
    lst_single        go to state 220


State 225

   64 operation: operation LESS • operation

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling      go to state 210
    iden              go to state 211
    operation         go to state 291
    lst_binary        go to state 212
    arith_binary      go to state 213
    term              go to state 214
    expression        go to state 215
    const             go to state 216
    number            go to state 217
    single_operation  go to state 218
    arith_single      go to state 219
    lst_single        go to state 220


State 226

   65 operation: operation LESS_EQ • operation

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling      go to state 210
    iden              go to state 211
    operation         go to state 292
    lst_binary        go to state 212
    arith_binary      go to state 213
    term              go to state 214
    expression        go to state 215
    const             go to state 216
    number            go to state 217
    single_operation  go to state 218
    arith_single      go to state 219
    lst_single        go to state 220


State 227

   66 operation: operation EQUAL • operation

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling      go to state 210
    iden              go to state 211
    operation         go to state 293
    lst_binary        go to state 212
    arith_binary      go to state 213
    term              go to state 214
    expression        go to state 215
    const             go to state 216
    number            go to state 217
    single_operation  go to state 218
    arith_single      go to state 219
    lst_single        go to state 220


State 228

   67 operation: operation NOT_EQ • operation

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling      go to state 210
    iden              go to state 211
    operation         go to state 294
    lst_binary        go to state 212
    arith_binary      go to state 213
    term              go to state 214
    expression        go to state 215
    const             go to state 216
    number            go to state 217
    single_operation  go to state 218
    arith_single      go to state 219
    lst_single        go to state 220


State 229

   42 command: error • ';'
   43        | error •

    ';'  shift, and go to state 295

    error           reduce using rule 43 (command)
    NUM_INT         reduce using rule 43 (command)
    NUM_FLOAT       reduce using rule 43 (command)
    NIL_CNST        reduce using rule 43 (command)
    ID              reduce using rule 43 (command)
    RETURN_STM      reduce using rule 43 (command)
    T_INT           reduce using rule 43 (command)
    T_FLOAT         reduce using rule 43 (command)
    IF_STMT         reduce using rule 43 (command)
    ELSE_STMT       reduce using rule 43 (command)
    FOR_STMT        reduce using rule 43 (command)
    OUTPUT_WRITE    reduce using rule 43 (command)
    OUTPUT_WRITELN  reduce using rule 43 (command)
    INPUT_READ      reduce using rule 43 (command)
    '('             reduce using rule 43 (command)
    '{'             reduce using rule 43 (command)
    '}'             reduce using rule 43 (command)
    '+'             reduce using rule 43 (command)
    '-'             reduce using rule 43 (command)
    '%'             reduce using rule 43 (command)
    '?'             reduce using rule 43 (command)
    '!'             reduce using rule 43 (command)


State 230

   48 return_stmt: RETURN_STM • operation ';'

    NUM_INT    shift, and go to state 30
    NUM_FLOAT  shift, and go to state 31
    NIL_CNST   shift, and go to state 32
    ID         shift, and go to state 168
    '('        shift, and go to state 40
    '+'        shift, and go to state 41
    '-'        shift, and go to state 42
    '%'        shift, and go to state 43
    '?'        shift, and go to state 44
    '!'        shift, and go to state 45

    func_calling      go to state 46
    iden              go to state 72
    operation         go to state 296
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 231

   46 conditional_stmt: IF_STMT • '(' operation ')' command
   47                 | IF_STMT • '(' operation ')' command ELSE_STMT command

    '('  shift, and go to state 297


State 232

   49 iteration: FOR_STMT • '(' loop_condition ')' command

    '('  shift, and go to state 298


State 233

   55 output: OUTPUT_WRITE • '(' operation ')' ';'
   57       | OUTPUT_WRITE • '(' STRING ')' ';'

    '('  shift, and go to state 299


State 234

   56 output: OUTPUT_WRITELN • '(' operation ')' ';'
   58       | OUTPUT_WRITELN • '(' STRING ')' ';'

    '('  shift, and go to state 300


State 235

   59 input: INPUT_READ • '(' iden ')' ';'

    '('  shift, and go to state 301


State 236

   32 command: var_declaration •

    error           reduce using rule 32 (command)
    NUM_INT         reduce using rule 32 (command)
    NUM_FLOAT       reduce using rule 32 (command)
    NIL_CNST        reduce using rule 32 (command)
    ID              reduce using rule 32 (command)
    RETURN_STM      reduce using rule 32 (command)
    T_INT           reduce using rule 32 (command)
    T_FLOAT         reduce using rule 32 (command)
    IF_STMT         reduce using rule 32 (command)
    ELSE_STMT       reduce using rule 32 (command)
    FOR_STMT        reduce using rule 32 (command)
    OUTPUT_WRITE    reduce using rule 32 (command)
    OUTPUT_WRITELN  reduce using rule 32 (command)
    INPUT_READ      reduce using rule 32 (command)
    '('             reduce using rule 32 (command)
    '{'             reduce using rule 32 (command)
    '}'             reduce using rule 32 (command)
    '+'             reduce using rule 32 (command)
    '-'             reduce using rule 32 (command)
    '%'             reduce using rule 32 (command)
    '?'             reduce using rule 32 (command)
    '!'             reduce using rule 32 (command)


State 237

   13 var_declaration: unq_declaration • ';'

    ';'  shift, and go to state 302


State 238

   40 command: $@6 • '{' block_commands '}'

    '{'  shift, and go to state 303


State 239

   33 command: init_variable •

    error           reduce using rule 33 (command)
    NUM_INT         reduce using rule 33 (command)
    NUM_FLOAT       reduce using rule 33 (command)
    NIL_CNST        reduce using rule 33 (command)
    ID              reduce using rule 33 (command)
    RETURN_STM      reduce using rule 33 (command)
    T_INT           reduce using rule 33 (command)
    T_FLOAT         reduce using rule 33 (command)
    IF_STMT         reduce using rule 33 (command)
    ELSE_STMT       reduce using rule 33 (command)
    FOR_STMT        reduce using rule 33 (command)
    OUTPUT_WRITE    reduce using rule 33 (command)
    OUTPUT_WRITELN  reduce using rule 33 (command)
    INPUT_READ      reduce using rule 33 (command)
    '('             reduce using rule 33 (command)
    '{'             reduce using rule 33 (command)
    '}'             reduce using rule 33 (command)
    '+'             reduce using rule 33 (command)
    '-'             reduce using rule 33 (command)
    '%'             reduce using rule 33 (command)
    '?'             reduce using rule 33 (command)
    '!'             reduce using rule 33 (command)


State 240

   44 init_variable: init_stmt • ';'

    ';'  shift, and go to state 304


State 241

   34 command: conditional_stmt •

    error           reduce using rule 34 (command)
    NUM_INT         reduce using rule 34 (command)
    NUM_FLOAT       reduce using rule 34 (command)
    NIL_CNST        reduce using rule 34 (command)
    ID              reduce using rule 34 (command)
    RETURN_STM      reduce using rule 34 (command)
    T_INT           reduce using rule 34 (command)
    T_FLOAT         reduce using rule 34 (command)
    IF_STMT         reduce using rule 34 (command)
    ELSE_STMT       reduce using rule 34 (command)
    FOR_STMT        reduce using rule 34 (command)
    OUTPUT_WRITE    reduce using rule 34 (command)
    OUTPUT_WRITELN  reduce using rule 34 (command)
    INPUT_READ      reduce using rule 34 (command)
    '('             reduce using rule 34 (command)
    '{'             reduce using rule 34 (command)
    '}'             reduce using rule 34 (command)
    '+'             reduce using rule 34 (command)
    '-'             reduce using rule 34 (command)
    '%'             reduce using rule 34 (command)
    '?'             reduce using rule 34 (command)
    '!'             reduce using rule 34 (command)


State 242

   35 command: return_stmt •

    error           reduce using rule 35 (command)
    NUM_INT         reduce using rule 35 (command)
    NUM_FLOAT       reduce using rule 35 (command)
    NIL_CNST        reduce using rule 35 (command)
    ID              reduce using rule 35 (command)
    RETURN_STM      reduce using rule 35 (command)
    T_INT           reduce using rule 35 (command)
    T_FLOAT         reduce using rule 35 (command)
    IF_STMT         reduce using rule 35 (command)
    ELSE_STMT       reduce using rule 35 (command)
    FOR_STMT        reduce using rule 35 (command)
    OUTPUT_WRITE    reduce using rule 35 (command)
    OUTPUT_WRITELN  reduce using rule 35 (command)
    INPUT_READ      reduce using rule 35 (command)
    '('             reduce using rule 35 (command)
    '{'             reduce using rule 35 (command)
    '}'             reduce using rule 35 (command)
    '+'             reduce using rule 35 (command)
    '-'             reduce using rule 35 (command)
    '%'             reduce using rule 35 (command)
    '?'             reduce using rule 35 (command)
    '!'             reduce using rule 35 (command)


State 243

   36 command: iteration •

    error           reduce using rule 36 (command)
    NUM_INT         reduce using rule 36 (command)
    NUM_FLOAT       reduce using rule 36 (command)
    NIL_CNST        reduce using rule 36 (command)
    ID              reduce using rule 36 (command)
    RETURN_STM      reduce using rule 36 (command)
    T_INT           reduce using rule 36 (command)
    T_FLOAT         reduce using rule 36 (command)
    IF_STMT         reduce using rule 36 (command)
    ELSE_STMT       reduce using rule 36 (command)
    FOR_STMT        reduce using rule 36 (command)
    OUTPUT_WRITE    reduce using rule 36 (command)
    OUTPUT_WRITELN  reduce using rule 36 (command)
    INPUT_READ      reduce using rule 36 (command)
    '('             reduce using rule 36 (command)
    '{'             reduce using rule 36 (command)
    '}'             reduce using rule 36 (command)
    '+'             reduce using rule 36 (command)
    '-'             reduce using rule 36 (command)
    '%'             reduce using rule 36 (command)
    '?'             reduce using rule 36 (command)
    '!'             reduce using rule 36 (command)


State 244

   37 command: output •

    error           reduce using rule 37 (command)
    NUM_INT         reduce using rule 37 (command)
    NUM_FLOAT       reduce using rule 37 (command)
    NIL_CNST        reduce using rule 37 (command)
    ID              reduce using rule 37 (command)
    RETURN_STM      reduce using rule 37 (command)
    T_INT           reduce using rule 37 (command)
    T_FLOAT         reduce using rule 37 (command)
    IF_STMT         reduce using rule 37 (command)
    ELSE_STMT       reduce using rule 37 (command)
    FOR_STMT        reduce using rule 37 (command)
    OUTPUT_WRITE    reduce using rule 37 (command)
    OUTPUT_WRITELN  reduce using rule 37 (command)
    INPUT_READ      reduce using rule 37 (command)
    '('             reduce using rule 37 (command)
    '{'             reduce using rule 37 (command)
    '}'             reduce using rule 37 (command)
    '+'             reduce using rule 37 (command)
    '-'             reduce using rule 37 (command)
    '%'             reduce using rule 37 (command)
    '?'             reduce using rule 37 (command)
    '!'             reduce using rule 37 (command)


State 245

   38 command: input •

    error           reduce using rule 38 (command)
    NUM_INT         reduce using rule 38 (command)
    NUM_FLOAT       reduce using rule 38 (command)
    NIL_CNST        reduce using rule 38 (command)
    ID              reduce using rule 38 (command)
    RETURN_STM      reduce using rule 38 (command)
    T_INT           reduce using rule 38 (command)
    T_FLOAT         reduce using rule 38 (command)
    IF_STMT         reduce using rule 38 (command)
    ELSE_STMT       reduce using rule 38 (command)
    FOR_STMT        reduce using rule 38 (command)
    OUTPUT_WRITE    reduce using rule 38 (command)
    OUTPUT_WRITELN  reduce using rule 38 (command)
    INPUT_READ      reduce using rule 38 (command)
    '('             reduce using rule 38 (command)
    '{'             reduce using rule 38 (command)
    '}'             reduce using rule 38 (command)
    '+'             reduce using rule 38 (command)
    '-'             reduce using rule 38 (command)
    '%'             reduce using rule 38 (command)
    '?'             reduce using rule 38 (command)
    '!'             reduce using rule 38 (command)


State 246

   41 command: operation • ';'
   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ';'         shift, and go to state 305
    AND         shift, and go to state 91
    OR          shift, and go to state 92
    GREATER     shift, and go to state 93
    GREATER_EQ  shift, and go to state 94
    LESS        shift, and go to state 95
    LESS_EQ     shift, and go to state 96
    EQUAL       shift, and go to state 97
    NOT_EQ      shift, and go to state 98


State 247

   51 update_stmt: init_stmt •

    ')'  reduce using rule 51 (update_stmt)


State 248

   45 init_stmt: iden • '=' operation

    '='  shift, and go to state 306


State 249

   14 unq_declaration: type ID •

    ')'  reduce using rule 14 (unq_declaration)
    ','  reduce using rule 14 (unq_declaration)


State 250

   14 unq_declaration: type ID •

    ';'  reduce using rule 14 (unq_declaration)


State 251

   12 func_calling: ID '(' • $@2 calling_parameters $@3 ')'

    NUM_INT    reduce using rule 10 ($@2)
    NUM_FLOAT  reduce using rule 10 ($@2)
    NIL_CNST   reduce using rule 10 ($@2)
    ID         reduce using rule 10 ($@2)
    '('        reduce using rule 10 ($@2)
    ')'        reduce using rule 10 ($@2)
    '+'        reduce using rule 10 ($@2)
    '-'        reduce using rule 10 ($@2)
    '%'        reduce using rule 10 ($@2)
    '?'        reduce using rule 10 ($@2)
    '!'        reduce using rule 10 ($@2)

    $@2  go to state 307


State 252

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation
   84 expression: '(' operation • ')'

    ')'         shift, and go to state 308
    AND         shift, and go to state 192
    OR          shift, and go to state 193
    GREATER     shift, and go to state 194
    GREATER_EQ  shift, and go to state 195
    LESS        shift, and go to state 196
    LESS_EQ     shift, and go to state 197
    EQUAL       shift, and go to state 198
    NOT_EQ      shift, and go to state 199


State 253

   92 arith_single: '+' expression •

    ')'         reduce using rule 92 (arith_single)
    AND         reduce using rule 92 (arith_single)
    OR          reduce using rule 92 (arith_single)
    GREATER     reduce using rule 92 (arith_single)
    GREATER_EQ  reduce using rule 92 (arith_single)
    LESS        reduce using rule 92 (arith_single)
    LESS_EQ     reduce using rule 92 (arith_single)
    EQUAL       reduce using rule 92 (arith_single)
    NOT_EQ      reduce using rule 92 (arith_single)
    '+'         reduce using rule 92 (arith_single)
    '-'         reduce using rule 92 (arith_single)
    '*'         reduce using rule 92 (arith_single)
    '/'         reduce using rule 92 (arith_single)
    FILTER      reduce using rule 92 (arith_single)
    MAP         reduce using rule 92 (arith_single)
    ':'         reduce using rule 92 (arith_single)


State 254

   93 arith_single: '-' expression •

    ')'         reduce using rule 93 (arith_single)
    AND         reduce using rule 93 (arith_single)
    OR          reduce using rule 93 (arith_single)
    GREATER     reduce using rule 93 (arith_single)
    GREATER_EQ  reduce using rule 93 (arith_single)
    LESS        reduce using rule 93 (arith_single)
    LESS_EQ     reduce using rule 93 (arith_single)
    EQUAL       reduce using rule 93 (arith_single)
    NOT_EQ      reduce using rule 93 (arith_single)
    '+'         reduce using rule 93 (arith_single)
    '-'         reduce using rule 93 (arith_single)
    '*'         reduce using rule 93 (arith_single)
    '/'         reduce using rule 93 (arith_single)
    FILTER      reduce using rule 93 (arith_single)
    MAP         reduce using rule 93 (arith_single)
    ':'         reduce using rule 93 (arith_single)


State 255

   94 lst_single: '%' expression •

    ')'         reduce using rule 94 (lst_single)
    AND         reduce using rule 94 (lst_single)
    OR          reduce using rule 94 (lst_single)
    GREATER     reduce using rule 94 (lst_single)
    GREATER_EQ  reduce using rule 94 (lst_single)
    LESS        reduce using rule 94 (lst_single)
    LESS_EQ     reduce using rule 94 (lst_single)
    EQUAL       reduce using rule 94 (lst_single)
    NOT_EQ      reduce using rule 94 (lst_single)
    '+'         reduce using rule 94 (lst_single)
    '-'         reduce using rule 94 (lst_single)
    '*'         reduce using rule 94 (lst_single)
    '/'         reduce using rule 94 (lst_single)
    FILTER      reduce using rule 94 (lst_single)
    MAP         reduce using rule 94 (lst_single)
    ':'         reduce using rule 94 (lst_single)


State 256

   95 lst_single: '?' expression •

    ')'         reduce using rule 95 (lst_single)
    AND         reduce using rule 95 (lst_single)
    OR          reduce using rule 95 (lst_single)
    GREATER     reduce using rule 95 (lst_single)
    GREATER_EQ  reduce using rule 95 (lst_single)
    LESS        reduce using rule 95 (lst_single)
    LESS_EQ     reduce using rule 95 (lst_single)
    EQUAL       reduce using rule 95 (lst_single)
    NOT_EQ      reduce using rule 95 (lst_single)
    '+'         reduce using rule 95 (lst_single)
    '-'         reduce using rule 95 (lst_single)
    '*'         reduce using rule 95 (lst_single)
    '/'         reduce using rule 95 (lst_single)
    FILTER      reduce using rule 95 (lst_single)
    MAP         reduce using rule 95 (lst_single)
    ':'         reduce using rule 95 (lst_single)


State 257

   91 single_operation: '!' expression •

    ')'         reduce using rule 91 (single_operation)
    AND         reduce using rule 91 (single_operation)
    OR          reduce using rule 91 (single_operation)
    GREATER     reduce using rule 91 (single_operation)
    GREATER_EQ  reduce using rule 91 (single_operation)
    LESS        reduce using rule 91 (single_operation)
    LESS_EQ     reduce using rule 91 (single_operation)
    EQUAL       reduce using rule 91 (single_operation)
    NOT_EQ      reduce using rule 91 (single_operation)
    '+'         reduce using rule 91 (single_operation)
    '-'         reduce using rule 91 (single_operation)
    '*'         reduce using rule 91 (single_operation)
    '/'         reduce using rule 91 (single_operation)
    FILTER      reduce using rule 91 (single_operation)
    MAP         reduce using rule 91 (single_operation)
    ':'         reduce using rule 91 (single_operation)


State 258

   70 lst_binary: lst_binary FILTER • lst_binary

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    lst_binary        go to state 309
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 259

   71 lst_binary: lst_binary MAP • lst_binary

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    lst_binary        go to state 310
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 260

   72 lst_binary: lst_binary ':' • lst_binary

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    lst_binary        go to state 311
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 261

   74 arith_binary: arith_binary '+' • term

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    term              go to state 312
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 262

   75 arith_binary: arith_binary '-' • term

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    term              go to state 313
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 263

   77 term: term '*' • expression

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    expression        go to state 314
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 264

   78 term: term '/' • expression

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    expression        go to state 315
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 265

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   68          | operation AND operation •
   69          | operation • OR operation

    GREATER     shift, and go to state 194
    GREATER_EQ  shift, and go to state 195
    LESS        shift, and go to state 196
    LESS_EQ     shift, and go to state 197
    EQUAL       shift, and go to state 198
    NOT_EQ      shift, and go to state 199

    ')'  reduce using rule 68 (operation)
    AND  reduce using rule 68 (operation)
    OR   reduce using rule 68 (operation)


State 266

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation
   69          | operation OR operation •

    GREATER     shift, and go to state 194
    GREATER_EQ  shift, and go to state 195
    LESS        shift, and go to state 196
    LESS_EQ     shift, and go to state 197
    EQUAL       shift, and go to state 198
    NOT_EQ      shift, and go to state 199

    ')'  reduce using rule 69 (operation)
    AND  reduce using rule 69 (operation)
    OR   reduce using rule 69 (operation)


State 267

   62 operation: operation • GREATER operation
   62          | operation GREATER operation •
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ')'         reduce using rule 62 (operation)
    AND         reduce using rule 62 (operation)
    OR          reduce using rule 62 (operation)
    GREATER     reduce using rule 62 (operation)
    GREATER_EQ  reduce using rule 62 (operation)
    LESS        reduce using rule 62 (operation)
    LESS_EQ     reduce using rule 62 (operation)
    EQUAL       reduce using rule 62 (operation)
    NOT_EQ      reduce using rule 62 (operation)


State 268

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   63          | operation GREATER_EQ operation •
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ')'         reduce using rule 63 (operation)
    AND         reduce using rule 63 (operation)
    OR          reduce using rule 63 (operation)
    GREATER     reduce using rule 63 (operation)
    GREATER_EQ  reduce using rule 63 (operation)
    LESS        reduce using rule 63 (operation)
    LESS_EQ     reduce using rule 63 (operation)
    EQUAL       reduce using rule 63 (operation)
    NOT_EQ      reduce using rule 63 (operation)


State 269

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   64          | operation LESS operation •
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ')'         reduce using rule 64 (operation)
    AND         reduce using rule 64 (operation)
    OR          reduce using rule 64 (operation)
    GREATER     reduce using rule 64 (operation)
    GREATER_EQ  reduce using rule 64 (operation)
    LESS        reduce using rule 64 (operation)
    LESS_EQ     reduce using rule 64 (operation)
    EQUAL       reduce using rule 64 (operation)
    NOT_EQ      reduce using rule 64 (operation)


State 270

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   65          | operation LESS_EQ operation •
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ')'         reduce using rule 65 (operation)
    AND         reduce using rule 65 (operation)
    OR          reduce using rule 65 (operation)
    GREATER     reduce using rule 65 (operation)
    GREATER_EQ  reduce using rule 65 (operation)
    LESS        reduce using rule 65 (operation)
    LESS_EQ     reduce using rule 65 (operation)
    EQUAL       reduce using rule 65 (operation)
    NOT_EQ      reduce using rule 65 (operation)


State 271

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   66          | operation EQUAL operation •
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    GREATER     shift, and go to state 194
    GREATER_EQ  shift, and go to state 195
    LESS        shift, and go to state 196
    LESS_EQ     shift, and go to state 197

    ')'     reduce using rule 66 (operation)
    AND     reduce using rule 66 (operation)
    OR      reduce using rule 66 (operation)
    EQUAL   reduce using rule 66 (operation)
    NOT_EQ  reduce using rule 66 (operation)


State 272

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   67          | operation NOT_EQ operation •
   68          | operation • AND operation
   69          | operation • OR operation

    GREATER     shift, and go to state 194
    GREATER_EQ  shift, and go to state 195
    LESS        shift, and go to state 196
    LESS_EQ     shift, and go to state 197

    ')'     reduce using rule 67 (operation)
    AND     reduce using rule 67 (operation)
    OR      reduce using rule 67 (operation)
    EQUAL   reduce using rule 67 (operation)
    NOT_EQ  reduce using rule 67 (operation)


State 273

   12 func_calling: ID '(' • $@2 calling_parameters $@3 ')'

    NUM_INT    reduce using rule 10 ($@2)
    NUM_FLOAT  reduce using rule 10 ($@2)
    NIL_CNST   reduce using rule 10 ($@2)
    ID         reduce using rule 10 ($@2)
    '('        reduce using rule 10 ($@2)
    ')'        reduce using rule 10 ($@2)
    '+'        reduce using rule 10 ($@2)
    '-'        reduce using rule 10 ($@2)
    '%'        reduce using rule 10 ($@2)
    '?'        reduce using rule 10 ($@2)
    '!'        reduce using rule 10 ($@2)

    $@2  go to state 316


State 274

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation
   84 expression: '(' operation • ')'

    ')'         shift, and go to state 317
    AND         shift, and go to state 192
    OR          shift, and go to state 193
    GREATER     shift, and go to state 194
    GREATER_EQ  shift, and go to state 195
    LESS        shift, and go to state 196
    LESS_EQ     shift, and go to state 197
    EQUAL       shift, and go to state 198
    NOT_EQ      shift, and go to state 199


State 275

   92 arith_single: '+' expression •

    ')'         reduce using rule 92 (arith_single)
    ','         reduce using rule 92 (arith_single)
    AND         reduce using rule 92 (arith_single)
    OR          reduce using rule 92 (arith_single)
    GREATER     reduce using rule 92 (arith_single)
    GREATER_EQ  reduce using rule 92 (arith_single)
    LESS        reduce using rule 92 (arith_single)
    LESS_EQ     reduce using rule 92 (arith_single)
    EQUAL       reduce using rule 92 (arith_single)
    NOT_EQ      reduce using rule 92 (arith_single)
    '+'         reduce using rule 92 (arith_single)
    '-'         reduce using rule 92 (arith_single)
    '*'         reduce using rule 92 (arith_single)
    '/'         reduce using rule 92 (arith_single)
    FILTER      reduce using rule 92 (arith_single)
    MAP         reduce using rule 92 (arith_single)
    ':'         reduce using rule 92 (arith_single)


State 276

   93 arith_single: '-' expression •

    ')'         reduce using rule 93 (arith_single)
    ','         reduce using rule 93 (arith_single)
    AND         reduce using rule 93 (arith_single)
    OR          reduce using rule 93 (arith_single)
    GREATER     reduce using rule 93 (arith_single)
    GREATER_EQ  reduce using rule 93 (arith_single)
    LESS        reduce using rule 93 (arith_single)
    LESS_EQ     reduce using rule 93 (arith_single)
    EQUAL       reduce using rule 93 (arith_single)
    NOT_EQ      reduce using rule 93 (arith_single)
    '+'         reduce using rule 93 (arith_single)
    '-'         reduce using rule 93 (arith_single)
    '*'         reduce using rule 93 (arith_single)
    '/'         reduce using rule 93 (arith_single)
    FILTER      reduce using rule 93 (arith_single)
    MAP         reduce using rule 93 (arith_single)
    ':'         reduce using rule 93 (arith_single)


State 277

   94 lst_single: '%' expression •

    ')'         reduce using rule 94 (lst_single)
    ','         reduce using rule 94 (lst_single)
    AND         reduce using rule 94 (lst_single)
    OR          reduce using rule 94 (lst_single)
    GREATER     reduce using rule 94 (lst_single)
    GREATER_EQ  reduce using rule 94 (lst_single)
    LESS        reduce using rule 94 (lst_single)
    LESS_EQ     reduce using rule 94 (lst_single)
    EQUAL       reduce using rule 94 (lst_single)
    NOT_EQ      reduce using rule 94 (lst_single)
    '+'         reduce using rule 94 (lst_single)
    '-'         reduce using rule 94 (lst_single)
    '*'         reduce using rule 94 (lst_single)
    '/'         reduce using rule 94 (lst_single)
    FILTER      reduce using rule 94 (lst_single)
    MAP         reduce using rule 94 (lst_single)
    ':'         reduce using rule 94 (lst_single)


State 278

   95 lst_single: '?' expression •

    ')'         reduce using rule 95 (lst_single)
    ','         reduce using rule 95 (lst_single)
    AND         reduce using rule 95 (lst_single)
    OR          reduce using rule 95 (lst_single)
    GREATER     reduce using rule 95 (lst_single)
    GREATER_EQ  reduce using rule 95 (lst_single)
    LESS        reduce using rule 95 (lst_single)
    LESS_EQ     reduce using rule 95 (lst_single)
    EQUAL       reduce using rule 95 (lst_single)
    NOT_EQ      reduce using rule 95 (lst_single)
    '+'         reduce using rule 95 (lst_single)
    '-'         reduce using rule 95 (lst_single)
    '*'         reduce using rule 95 (lst_single)
    '/'         reduce using rule 95 (lst_single)
    FILTER      reduce using rule 95 (lst_single)
    MAP         reduce using rule 95 (lst_single)
    ':'         reduce using rule 95 (lst_single)


State 279

   91 single_operation: '!' expression •

    ')'         reduce using rule 91 (single_operation)
    ','         reduce using rule 91 (single_operation)
    AND         reduce using rule 91 (single_operation)
    OR          reduce using rule 91 (single_operation)
    GREATER     reduce using rule 91 (single_operation)
    GREATER_EQ  reduce using rule 91 (single_operation)
    LESS        reduce using rule 91 (single_operation)
    LESS_EQ     reduce using rule 91 (single_operation)
    EQUAL       reduce using rule 91 (single_operation)
    NOT_EQ      reduce using rule 91 (single_operation)
    '+'         reduce using rule 91 (single_operation)
    '-'         reduce using rule 91 (single_operation)
    '*'         reduce using rule 91 (single_operation)
    '/'         reduce using rule 91 (single_operation)
    FILTER      reduce using rule 91 (single_operation)
    MAP         reduce using rule 91 (single_operation)
    ':'         reduce using rule 91 (single_operation)


State 280

   70 lst_binary: lst_binary FILTER • lst_binary

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling      go to state 210
    iden              go to state 211
    lst_binary        go to state 318
    arith_binary      go to state 213
    term              go to state 214
    expression        go to state 215
    const             go to state 216
    number            go to state 217
    single_operation  go to state 218
    arith_single      go to state 219
    lst_single        go to state 220


State 281

   71 lst_binary: lst_binary MAP • lst_binary

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling      go to state 210
    iden              go to state 211
    lst_binary        go to state 319
    arith_binary      go to state 213
    term              go to state 214
    expression        go to state 215
    const             go to state 216
    number            go to state 217
    single_operation  go to state 218
    arith_single      go to state 219
    lst_single        go to state 220


State 282

   72 lst_binary: lst_binary ':' • lst_binary

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling      go to state 210
    iden              go to state 211
    lst_binary        go to state 320
    arith_binary      go to state 213
    term              go to state 214
    expression        go to state 215
    const             go to state 216
    number            go to state 217
    single_operation  go to state 218
    arith_single      go to state 219
    lst_single        go to state 220


State 283

   74 arith_binary: arith_binary '+' • term

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling      go to state 210
    iden              go to state 211
    term              go to state 321
    expression        go to state 215
    const             go to state 216
    number            go to state 217
    single_operation  go to state 218
    arith_single      go to state 219
    lst_single        go to state 220


State 284

   75 arith_binary: arith_binary '-' • term

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling      go to state 210
    iden              go to state 211
    term              go to state 322
    expression        go to state 215
    const             go to state 216
    number            go to state 217
    single_operation  go to state 218
    arith_single      go to state 219
    lst_single        go to state 220


State 285

   77 term: term '*' • expression

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling      go to state 210
    iden              go to state 211
    expression        go to state 323
    const             go to state 216
    number            go to state 217
    single_operation  go to state 218
    arith_single      go to state 219
    lst_single        go to state 220


State 286

   78 term: term '/' • expression

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    func_calling      go to state 210
    iden              go to state 211
    expression        go to state 324
    const             go to state 216
    number            go to state 217
    single_operation  go to state 218
    arith_single      go to state 219
    lst_single        go to state 220


State 287

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   68          | operation AND operation •
   69          | operation • OR operation

    GREATER     shift, and go to state 223
    GREATER_EQ  shift, and go to state 224
    LESS        shift, and go to state 225
    LESS_EQ     shift, and go to state 226
    EQUAL       shift, and go to state 227
    NOT_EQ      shift, and go to state 228

    ')'  reduce using rule 68 (operation)
    ','  reduce using rule 68 (operation)
    AND  reduce using rule 68 (operation)
    OR   reduce using rule 68 (operation)


State 288

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation
   69          | operation OR operation •

    GREATER     shift, and go to state 223
    GREATER_EQ  shift, and go to state 224
    LESS        shift, and go to state 225
    LESS_EQ     shift, and go to state 226
    EQUAL       shift, and go to state 227
    NOT_EQ      shift, and go to state 228

    ')'  reduce using rule 69 (operation)
    ','  reduce using rule 69 (operation)
    AND  reduce using rule 69 (operation)
    OR   reduce using rule 69 (operation)


State 289

   62 operation: operation • GREATER operation
   62          | operation GREATER operation •
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ')'         reduce using rule 62 (operation)
    ','         reduce using rule 62 (operation)
    AND         reduce using rule 62 (operation)
    OR          reduce using rule 62 (operation)
    GREATER     reduce using rule 62 (operation)
    GREATER_EQ  reduce using rule 62 (operation)
    LESS        reduce using rule 62 (operation)
    LESS_EQ     reduce using rule 62 (operation)
    EQUAL       reduce using rule 62 (operation)
    NOT_EQ      reduce using rule 62 (operation)


State 290

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   63          | operation GREATER_EQ operation •
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ')'         reduce using rule 63 (operation)
    ','         reduce using rule 63 (operation)
    AND         reduce using rule 63 (operation)
    OR          reduce using rule 63 (operation)
    GREATER     reduce using rule 63 (operation)
    GREATER_EQ  reduce using rule 63 (operation)
    LESS        reduce using rule 63 (operation)
    LESS_EQ     reduce using rule 63 (operation)
    EQUAL       reduce using rule 63 (operation)
    NOT_EQ      reduce using rule 63 (operation)


State 291

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   64          | operation LESS operation •
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ')'         reduce using rule 64 (operation)
    ','         reduce using rule 64 (operation)
    AND         reduce using rule 64 (operation)
    OR          reduce using rule 64 (operation)
    GREATER     reduce using rule 64 (operation)
    GREATER_EQ  reduce using rule 64 (operation)
    LESS        reduce using rule 64 (operation)
    LESS_EQ     reduce using rule 64 (operation)
    EQUAL       reduce using rule 64 (operation)
    NOT_EQ      reduce using rule 64 (operation)


State 292

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   65          | operation LESS_EQ operation •
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ')'         reduce using rule 65 (operation)
    ','         reduce using rule 65 (operation)
    AND         reduce using rule 65 (operation)
    OR          reduce using rule 65 (operation)
    GREATER     reduce using rule 65 (operation)
    GREATER_EQ  reduce using rule 65 (operation)
    LESS        reduce using rule 65 (operation)
    LESS_EQ     reduce using rule 65 (operation)
    EQUAL       reduce using rule 65 (operation)
    NOT_EQ      reduce using rule 65 (operation)


State 293

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   66          | operation EQUAL operation •
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    GREATER     shift, and go to state 223
    GREATER_EQ  shift, and go to state 224
    LESS        shift, and go to state 225
    LESS_EQ     shift, and go to state 226

    ')'     reduce using rule 66 (operation)
    ','     reduce using rule 66 (operation)
    AND     reduce using rule 66 (operation)
    OR      reduce using rule 66 (operation)
    EQUAL   reduce using rule 66 (operation)
    NOT_EQ  reduce using rule 66 (operation)


State 294

   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   67          | operation NOT_EQ operation •
   68          | operation • AND operation
   69          | operation • OR operation

    GREATER     shift, and go to state 223
    GREATER_EQ  shift, and go to state 224
    LESS        shift, and go to state 225
    LESS_EQ     shift, and go to state 226

    ')'     reduce using rule 67 (operation)
    ','     reduce using rule 67 (operation)
    AND     reduce using rule 67 (operation)
    OR      reduce using rule 67 (operation)
    EQUAL   reduce using rule 67 (operation)
    NOT_EQ  reduce using rule 67 (operation)


State 295

   42 command: error ';' •

    error           reduce using rule 42 (command)
    NUM_INT         reduce using rule 42 (command)
    NUM_FLOAT       reduce using rule 42 (command)
    NIL_CNST        reduce using rule 42 (command)
    ID              reduce using rule 42 (command)
    RETURN_STM      reduce using rule 42 (command)
    T_INT           reduce using rule 42 (command)
    T_FLOAT         reduce using rule 42 (command)
    IF_STMT         reduce using rule 42 (command)
    ELSE_STMT       reduce using rule 42 (command)
    FOR_STMT        reduce using rule 42 (command)
    OUTPUT_WRITE    reduce using rule 42 (command)
    OUTPUT_WRITELN  reduce using rule 42 (command)
    INPUT_READ      reduce using rule 42 (command)
    '('             reduce using rule 42 (command)
    '{'             reduce using rule 42 (command)
    '}'             reduce using rule 42 (command)
    '+'             reduce using rule 42 (command)
    '-'             reduce using rule 42 (command)
    '%'             reduce using rule 42 (command)
    '?'             reduce using rule 42 (command)
    '!'             reduce using rule 42 (command)


State 296

   48 return_stmt: RETURN_STM operation • ';'
   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ';'         shift, and go to state 325
    AND         shift, and go to state 91
    OR          shift, and go to state 92
    GREATER     shift, and go to state 93
    GREATER_EQ  shift, and go to state 94
    LESS        shift, and go to state 95
    LESS_EQ     shift, and go to state 96
    EQUAL       shift, and go to state 97
    NOT_EQ      shift, and go to state 98


State 297

   46 conditional_stmt: IF_STMT '(' • operation ')' command
   47                 | IF_STMT '(' • operation ')' command ELSE_STMT command

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    operation         go to state 326
    lst_binary        go to state 181
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 298

   49 iteration: FOR_STMT '(' • loop_condition ')' command

    ID  shift, and go to state 109

    ';'  reduce using rule 52 (update_stmt)

    init_stmt       go to state 110
    loop_condition  go to state 327
    update_stmt     go to state 112
    iden            go to state 113


State 299

   55 output: OUTPUT_WRITE '(' • operation ')' ';'
   57       | OUTPUT_WRITE '(' • STRING ')' ';'

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    STRING     shift, and go to state 328
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    operation         go to state 329
    lst_binary        go to state 181
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 300

   56 output: OUTPUT_WRITELN '(' • operation ')' ';'
   58       | OUTPUT_WRITELN '(' • STRING ')' ';'

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    STRING     shift, and go to state 330
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    operation         go to state 331
    lst_binary        go to state 181
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 301

   59 input: INPUT_READ '(' • iden ')' ';'

    ID  shift, and go to state 191

    iden  go to state 332


State 302

   13 var_declaration: unq_declaration ';' •

    error           reduce using rule 13 (var_declaration)
    NUM_INT         reduce using rule 13 (var_declaration)
    NUM_FLOAT       reduce using rule 13 (var_declaration)
    NIL_CNST        reduce using rule 13 (var_declaration)
    ID              reduce using rule 13 (var_declaration)
    RETURN_STM      reduce using rule 13 (var_declaration)
    T_INT           reduce using rule 13 (var_declaration)
    T_FLOAT         reduce using rule 13 (var_declaration)
    IF_STMT         reduce using rule 13 (var_declaration)
    ELSE_STMT       reduce using rule 13 (var_declaration)
    FOR_STMT        reduce using rule 13 (var_declaration)
    OUTPUT_WRITE    reduce using rule 13 (var_declaration)
    OUTPUT_WRITELN  reduce using rule 13 (var_declaration)
    INPUT_READ      reduce using rule 13 (var_declaration)
    '('             reduce using rule 13 (var_declaration)
    '{'             reduce using rule 13 (var_declaration)
    '}'             reduce using rule 13 (var_declaration)
    '+'             reduce using rule 13 (var_declaration)
    '-'             reduce using rule 13 (var_declaration)
    '%'             reduce using rule 13 (var_declaration)
    '?'             reduce using rule 13 (var_declaration)
    '!'             reduce using rule 13 (var_declaration)


State 303

   40 command: $@6 '{' • block_commands '}'

    error           shift, and go to state 29
    NUM_INT         shift, and go to state 30
    NUM_FLOAT       shift, and go to state 31
    NIL_CNST        shift, and go to state 32
    ID              shift, and go to state 33
    RETURN_STM      shift, and go to state 34
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 35
    FOR_STMT        shift, and go to state 36
    OUTPUT_WRITE    shift, and go to state 37
    OUTPUT_WRITELN  shift, and go to state 38
    INPUT_READ      shift, and go to state 39
    '('             shift, and go to state 40
    '+'             shift, and go to state 41
    '-'             shift, and go to state 42
    '%'             shift, and go to state 43
    '?'             shift, and go to state 44
    '!'             shift, and go to state 45

    '{'  reduce using rule 39 ($@6)

    func_calling      go to state 46
    var_declaration   go to state 47
    unq_declaration   go to state 48
    type              go to state 167
    type_lst          go to state 11
    type_number       go to state 12
    block_commands    go to state 333
    command           go to state 50
    $@6               go to state 51
    init_variable     go to state 52
    init_stmt         go to state 53
    conditional_stmt  go to state 54
    return_stmt       go to state 55
    iteration         go to state 56
    output            go to state 57
    input             go to state 58
    iden              go to state 59
    operation         go to state 60
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 304

   44 init_variable: init_stmt ';' •

    error           reduce using rule 44 (init_variable)
    NUM_INT         reduce using rule 44 (init_variable)
    NUM_FLOAT       reduce using rule 44 (init_variable)
    NIL_CNST        reduce using rule 44 (init_variable)
    ID              reduce using rule 44 (init_variable)
    RETURN_STM      reduce using rule 44 (init_variable)
    T_INT           reduce using rule 44 (init_variable)
    T_FLOAT         reduce using rule 44 (init_variable)
    IF_STMT         reduce using rule 44 (init_variable)
    ELSE_STMT       reduce using rule 44 (init_variable)
    FOR_STMT        reduce using rule 44 (init_variable)
    OUTPUT_WRITE    reduce using rule 44 (init_variable)
    OUTPUT_WRITELN  reduce using rule 44 (init_variable)
    INPUT_READ      reduce using rule 44 (init_variable)
    '('             reduce using rule 44 (init_variable)
    '{'             reduce using rule 44 (init_variable)
    '}'             reduce using rule 44 (init_variable)
    '+'             reduce using rule 44 (init_variable)
    '-'             reduce using rule 44 (init_variable)
    '%'             reduce using rule 44 (init_variable)
    '?'             reduce using rule 44 (init_variable)
    '!'             reduce using rule 44 (init_variable)


State 305

   41 command: operation ';' •

    error           reduce using rule 41 (command)
    NUM_INT         reduce using rule 41 (command)
    NUM_FLOAT       reduce using rule 41 (command)
    NIL_CNST        reduce using rule 41 (command)
    ID              reduce using rule 41 (command)
    RETURN_STM      reduce using rule 41 (command)
    T_INT           reduce using rule 41 (command)
    T_FLOAT         reduce using rule 41 (command)
    IF_STMT         reduce using rule 41 (command)
    ELSE_STMT       reduce using rule 41 (command)
    FOR_STMT        reduce using rule 41 (command)
    OUTPUT_WRITE    reduce using rule 41 (command)
    OUTPUT_WRITELN  reduce using rule 41 (command)
    INPUT_READ      reduce using rule 41 (command)
    '('             reduce using rule 41 (command)
    '{'             reduce using rule 41 (command)
    '}'             reduce using rule 41 (command)
    '+'             reduce using rule 41 (command)
    '-'             reduce using rule 41 (command)
    '%'             reduce using rule 41 (command)
    '?'             reduce using rule 41 (command)
    '!'             reduce using rule 41 (command)


State 306

   45 init_stmt: iden '=' • operation

    NUM_INT    shift, and go to state 169
    NUM_FLOAT  shift, and go to state 170
    NIL_CNST   shift, and go to state 171
    ID         shift, and go to state 172
    '('        shift, and go to state 173
    '+'        shift, and go to state 174
    '-'        shift, and go to state 175
    '%'        shift, and go to state 176
    '?'        shift, and go to state 177
    '!'        shift, and go to state 178

    func_calling      go to state 179
    iden              go to state 180
    operation         go to state 334
    lst_binary        go to state 181
    arith_binary      go to state 182
    term              go to state 183
    expression        go to state 184
    const             go to state 185
    number            go to state 186
    single_operation  go to state 187
    arith_single      go to state 188
    lst_single        go to state 189


State 307

   12 func_calling: ID '(' $@2 • calling_parameters $@3 ')'

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    ')'  reduce using rule 27 (calling_parameters)

    func_calling            go to state 210
    calling_parameters      go to state 335
    lst_calling_parameters  go to state 138
    iden                    go to state 211
    operation               go to state 139
    lst_binary              go to state 212
    arith_binary            go to state 213
    term                    go to state 214
    expression              go to state 215
    const                   go to state 216
    number                  go to state 217
    single_operation        go to state 218
    arith_single            go to state 219
    lst_single              go to state 220


State 308

   84 expression: '(' operation ')' •

    ')'         reduce using rule 84 (expression)
    AND         reduce using rule 84 (expression)
    OR          reduce using rule 84 (expression)
    GREATER     reduce using rule 84 (expression)
    GREATER_EQ  reduce using rule 84 (expression)
    LESS        reduce using rule 84 (expression)
    LESS_EQ     reduce using rule 84 (expression)
    EQUAL       reduce using rule 84 (expression)
    NOT_EQ      reduce using rule 84 (expression)
    '+'         reduce using rule 84 (expression)
    '-'         reduce using rule 84 (expression)
    '*'         reduce using rule 84 (expression)
    '/'         reduce using rule 84 (expression)
    FILTER      reduce using rule 84 (expression)
    MAP         reduce using rule 84 (expression)
    ':'         reduce using rule 84 (expression)


State 309

   70 lst_binary: lst_binary • FILTER lst_binary
   70           | lst_binary FILTER lst_binary •
   71           | lst_binary • MAP lst_binary
   72           | lst_binary • ':' lst_binary

    FILTER  shift, and go to state 258
    MAP     shift, and go to state 259
    ':'     shift, and go to state 260

    ')'         reduce using rule 70 (lst_binary)
    AND         reduce using rule 70 (lst_binary)
    OR          reduce using rule 70 (lst_binary)
    GREATER     reduce using rule 70 (lst_binary)
    GREATER_EQ  reduce using rule 70 (lst_binary)
    LESS        reduce using rule 70 (lst_binary)
    LESS_EQ     reduce using rule 70 (lst_binary)
    EQUAL       reduce using rule 70 (lst_binary)
    NOT_EQ      reduce using rule 70 (lst_binary)


State 310

   70 lst_binary: lst_binary • FILTER lst_binary
   71           | lst_binary • MAP lst_binary
   71           | lst_binary MAP lst_binary •
   72           | lst_binary • ':' lst_binary

    FILTER  shift, and go to state 258
    MAP     shift, and go to state 259
    ':'     shift, and go to state 260

    ')'         reduce using rule 71 (lst_binary)
    AND         reduce using rule 71 (lst_binary)
    OR          reduce using rule 71 (lst_binary)
    GREATER     reduce using rule 71 (lst_binary)
    GREATER_EQ  reduce using rule 71 (lst_binary)
    LESS        reduce using rule 71 (lst_binary)
    LESS_EQ     reduce using rule 71 (lst_binary)
    EQUAL       reduce using rule 71 (lst_binary)
    NOT_EQ      reduce using rule 71 (lst_binary)


State 311

   70 lst_binary: lst_binary • FILTER lst_binary
   71           | lst_binary • MAP lst_binary
   72           | lst_binary • ':' lst_binary
   72           | lst_binary ':' lst_binary •

    FILTER  shift, and go to state 258
    MAP     shift, and go to state 259
    ':'     shift, and go to state 260

    ')'         reduce using rule 72 (lst_binary)
    AND         reduce using rule 72 (lst_binary)
    OR          reduce using rule 72 (lst_binary)
    GREATER     reduce using rule 72 (lst_binary)
    GREATER_EQ  reduce using rule 72 (lst_binary)
    LESS        reduce using rule 72 (lst_binary)
    LESS_EQ     reduce using rule 72 (lst_binary)
    EQUAL       reduce using rule 72 (lst_binary)
    NOT_EQ      reduce using rule 72 (lst_binary)


State 312

   74 arith_binary: arith_binary '+' term •
   77 term: term • '*' expression
   78     | term • '/' expression

    '*'  shift, and go to state 263
    '/'  shift, and go to state 264

    ')'         reduce using rule 74 (arith_binary)
    AND         reduce using rule 74 (arith_binary)
    OR          reduce using rule 74 (arith_binary)
    GREATER     reduce using rule 74 (arith_binary)
    GREATER_EQ  reduce using rule 74 (arith_binary)
    LESS        reduce using rule 74 (arith_binary)
    LESS_EQ     reduce using rule 74 (arith_binary)
    EQUAL       reduce using rule 74 (arith_binary)
    NOT_EQ      reduce using rule 74 (arith_binary)
    '+'         reduce using rule 74 (arith_binary)
    '-'         reduce using rule 74 (arith_binary)
    FILTER      reduce using rule 74 (arith_binary)
    MAP         reduce using rule 74 (arith_binary)
    ':'         reduce using rule 74 (arith_binary)


State 313

   75 arith_binary: arith_binary '-' term •
   77 term: term • '*' expression
   78     | term • '/' expression

    '*'  shift, and go to state 263
    '/'  shift, and go to state 264

    ')'         reduce using rule 75 (arith_binary)
    AND         reduce using rule 75 (arith_binary)
    OR          reduce using rule 75 (arith_binary)
    GREATER     reduce using rule 75 (arith_binary)
    GREATER_EQ  reduce using rule 75 (arith_binary)
    LESS        reduce using rule 75 (arith_binary)
    LESS_EQ     reduce using rule 75 (arith_binary)
    EQUAL       reduce using rule 75 (arith_binary)
    NOT_EQ      reduce using rule 75 (arith_binary)
    '+'         reduce using rule 75 (arith_binary)
    '-'         reduce using rule 75 (arith_binary)
    FILTER      reduce using rule 75 (arith_binary)
    MAP         reduce using rule 75 (arith_binary)
    ':'         reduce using rule 75 (arith_binary)


State 314

   77 term: term '*' expression •

    ')'         reduce using rule 77 (term)
    AND         reduce using rule 77 (term)
    OR          reduce using rule 77 (term)
    GREATER     reduce using rule 77 (term)
    GREATER_EQ  reduce using rule 77 (term)
    LESS        reduce using rule 77 (term)
    LESS_EQ     reduce using rule 77 (term)
    EQUAL       reduce using rule 77 (term)
    NOT_EQ      reduce using rule 77 (term)
    '+'         reduce using rule 77 (term)
    '-'         reduce using rule 77 (term)
    '*'         reduce using rule 77 (term)
    '/'         reduce using rule 77 (term)
    FILTER      reduce using rule 77 (term)
    MAP         reduce using rule 77 (term)
    ':'         reduce using rule 77 (term)


State 315

   78 term: term '/' expression •

    ')'         reduce using rule 78 (term)
    AND         reduce using rule 78 (term)
    OR          reduce using rule 78 (term)
    GREATER     reduce using rule 78 (term)
    GREATER_EQ  reduce using rule 78 (term)
    LESS        reduce using rule 78 (term)
    LESS_EQ     reduce using rule 78 (term)
    EQUAL       reduce using rule 78 (term)
    NOT_EQ      reduce using rule 78 (term)
    '+'         reduce using rule 78 (term)
    '-'         reduce using rule 78 (term)
    '*'         reduce using rule 78 (term)
    '/'         reduce using rule 78 (term)
    FILTER      reduce using rule 78 (term)
    MAP         reduce using rule 78 (term)
    ':'         reduce using rule 78 (term)


State 316

   12 func_calling: ID '(' $@2 • calling_parameters $@3 ')'

    NUM_INT    shift, and go to state 200
    NUM_FLOAT  shift, and go to state 201
    NIL_CNST   shift, and go to state 202
    ID         shift, and go to state 203
    '('        shift, and go to state 204
    '+'        shift, and go to state 205
    '-'        shift, and go to state 206
    '%'        shift, and go to state 207
    '?'        shift, and go to state 208
    '!'        shift, and go to state 209

    ')'  reduce using rule 27 (calling_parameters)

    func_calling            go to state 210
    calling_parameters      go to state 336
    lst_calling_parameters  go to state 138
    iden                    go to state 211
    operation               go to state 139
    lst_binary              go to state 212
    arith_binary            go to state 213
    term                    go to state 214
    expression              go to state 215
    const                   go to state 216
    number                  go to state 217
    single_operation        go to state 218
    arith_single            go to state 219
    lst_single              go to state 220


State 317

   84 expression: '(' operation ')' •

    ')'         reduce using rule 84 (expression)
    ','         reduce using rule 84 (expression)
    AND         reduce using rule 84 (expression)
    OR          reduce using rule 84 (expression)
    GREATER     reduce using rule 84 (expression)
    GREATER_EQ  reduce using rule 84 (expression)
    LESS        reduce using rule 84 (expression)
    LESS_EQ     reduce using rule 84 (expression)
    EQUAL       reduce using rule 84 (expression)
    NOT_EQ      reduce using rule 84 (expression)
    '+'         reduce using rule 84 (expression)
    '-'         reduce using rule 84 (expression)
    '*'         reduce using rule 84 (expression)
    '/'         reduce using rule 84 (expression)
    FILTER      reduce using rule 84 (expression)
    MAP         reduce using rule 84 (expression)
    ':'         reduce using rule 84 (expression)


State 318

   70 lst_binary: lst_binary • FILTER lst_binary
   70           | lst_binary FILTER lst_binary •
   71           | lst_binary • MAP lst_binary
   72           | lst_binary • ':' lst_binary

    FILTER  shift, and go to state 280
    MAP     shift, and go to state 281
    ':'     shift, and go to state 282

    ')'         reduce using rule 70 (lst_binary)
    ','         reduce using rule 70 (lst_binary)
    AND         reduce using rule 70 (lst_binary)
    OR          reduce using rule 70 (lst_binary)
    GREATER     reduce using rule 70 (lst_binary)
    GREATER_EQ  reduce using rule 70 (lst_binary)
    LESS        reduce using rule 70 (lst_binary)
    LESS_EQ     reduce using rule 70 (lst_binary)
    EQUAL       reduce using rule 70 (lst_binary)
    NOT_EQ      reduce using rule 70 (lst_binary)


State 319

   70 lst_binary: lst_binary • FILTER lst_binary
   71           | lst_binary • MAP lst_binary
   71           | lst_binary MAP lst_binary •
   72           | lst_binary • ':' lst_binary

    FILTER  shift, and go to state 280
    MAP     shift, and go to state 281
    ':'     shift, and go to state 282

    ')'         reduce using rule 71 (lst_binary)
    ','         reduce using rule 71 (lst_binary)
    AND         reduce using rule 71 (lst_binary)
    OR          reduce using rule 71 (lst_binary)
    GREATER     reduce using rule 71 (lst_binary)
    GREATER_EQ  reduce using rule 71 (lst_binary)
    LESS        reduce using rule 71 (lst_binary)
    LESS_EQ     reduce using rule 71 (lst_binary)
    EQUAL       reduce using rule 71 (lst_binary)
    NOT_EQ      reduce using rule 71 (lst_binary)


State 320

   70 lst_binary: lst_binary • FILTER lst_binary
   71           | lst_binary • MAP lst_binary
   72           | lst_binary • ':' lst_binary
   72           | lst_binary ':' lst_binary •

    FILTER  shift, and go to state 280
    MAP     shift, and go to state 281
    ':'     shift, and go to state 282

    ')'         reduce using rule 72 (lst_binary)
    ','         reduce using rule 72 (lst_binary)
    AND         reduce using rule 72 (lst_binary)
    OR          reduce using rule 72 (lst_binary)
    GREATER     reduce using rule 72 (lst_binary)
    GREATER_EQ  reduce using rule 72 (lst_binary)
    LESS        reduce using rule 72 (lst_binary)
    LESS_EQ     reduce using rule 72 (lst_binary)
    EQUAL       reduce using rule 72 (lst_binary)
    NOT_EQ      reduce using rule 72 (lst_binary)


State 321

   74 arith_binary: arith_binary '+' term •
   77 term: term • '*' expression
   78     | term • '/' expression

    '*'  shift, and go to state 285
    '/'  shift, and go to state 286

    ')'         reduce using rule 74 (arith_binary)
    ','         reduce using rule 74 (arith_binary)
    AND         reduce using rule 74 (arith_binary)
    OR          reduce using rule 74 (arith_binary)
    GREATER     reduce using rule 74 (arith_binary)
    GREATER_EQ  reduce using rule 74 (arith_binary)
    LESS        reduce using rule 74 (arith_binary)
    LESS_EQ     reduce using rule 74 (arith_binary)
    EQUAL       reduce using rule 74 (arith_binary)
    NOT_EQ      reduce using rule 74 (arith_binary)
    '+'         reduce using rule 74 (arith_binary)
    '-'         reduce using rule 74 (arith_binary)
    FILTER      reduce using rule 74 (arith_binary)
    MAP         reduce using rule 74 (arith_binary)
    ':'         reduce using rule 74 (arith_binary)


State 322

   75 arith_binary: arith_binary '-' term •
   77 term: term • '*' expression
   78     | term • '/' expression

    '*'  shift, and go to state 285
    '/'  shift, and go to state 286

    ')'         reduce using rule 75 (arith_binary)
    ','         reduce using rule 75 (arith_binary)
    AND         reduce using rule 75 (arith_binary)
    OR          reduce using rule 75 (arith_binary)
    GREATER     reduce using rule 75 (arith_binary)
    GREATER_EQ  reduce using rule 75 (arith_binary)
    LESS        reduce using rule 75 (arith_binary)
    LESS_EQ     reduce using rule 75 (arith_binary)
    EQUAL       reduce using rule 75 (arith_binary)
    NOT_EQ      reduce using rule 75 (arith_binary)
    '+'         reduce using rule 75 (arith_binary)
    '-'         reduce using rule 75 (arith_binary)
    FILTER      reduce using rule 75 (arith_binary)
    MAP         reduce using rule 75 (arith_binary)
    ':'         reduce using rule 75 (arith_binary)


State 323

   77 term: term '*' expression •

    ')'         reduce using rule 77 (term)
    ','         reduce using rule 77 (term)
    AND         reduce using rule 77 (term)
    OR          reduce using rule 77 (term)
    GREATER     reduce using rule 77 (term)
    GREATER_EQ  reduce using rule 77 (term)
    LESS        reduce using rule 77 (term)
    LESS_EQ     reduce using rule 77 (term)
    EQUAL       reduce using rule 77 (term)
    NOT_EQ      reduce using rule 77 (term)
    '+'         reduce using rule 77 (term)
    '-'         reduce using rule 77 (term)
    '*'         reduce using rule 77 (term)
    '/'         reduce using rule 77 (term)
    FILTER      reduce using rule 77 (term)
    MAP         reduce using rule 77 (term)
    ':'         reduce using rule 77 (term)


State 324

   78 term: term '/' expression •

    ')'         reduce using rule 78 (term)
    ','         reduce using rule 78 (term)
    AND         reduce using rule 78 (term)
    OR          reduce using rule 78 (term)
    GREATER     reduce using rule 78 (term)
    GREATER_EQ  reduce using rule 78 (term)
    LESS        reduce using rule 78 (term)
    LESS_EQ     reduce using rule 78 (term)
    EQUAL       reduce using rule 78 (term)
    NOT_EQ      reduce using rule 78 (term)
    '+'         reduce using rule 78 (term)
    '-'         reduce using rule 78 (term)
    '*'         reduce using rule 78 (term)
    '/'         reduce using rule 78 (term)
    FILTER      reduce using rule 78 (term)
    MAP         reduce using rule 78 (term)
    ':'         reduce using rule 78 (term)


State 325

   48 return_stmt: RETURN_STM operation ';' •

    error           reduce using rule 48 (return_stmt)
    NUM_INT         reduce using rule 48 (return_stmt)
    NUM_FLOAT       reduce using rule 48 (return_stmt)
    NIL_CNST        reduce using rule 48 (return_stmt)
    ID              reduce using rule 48 (return_stmt)
    RETURN_STM      reduce using rule 48 (return_stmt)
    T_INT           reduce using rule 48 (return_stmt)
    T_FLOAT         reduce using rule 48 (return_stmt)
    IF_STMT         reduce using rule 48 (return_stmt)
    ELSE_STMT       reduce using rule 48 (return_stmt)
    FOR_STMT        reduce using rule 48 (return_stmt)
    OUTPUT_WRITE    reduce using rule 48 (return_stmt)
    OUTPUT_WRITELN  reduce using rule 48 (return_stmt)
    INPUT_READ      reduce using rule 48 (return_stmt)
    '('             reduce using rule 48 (return_stmt)
    '{'             reduce using rule 48 (return_stmt)
    '}'             reduce using rule 48 (return_stmt)
    '+'             reduce using rule 48 (return_stmt)
    '-'             reduce using rule 48 (return_stmt)
    '%'             reduce using rule 48 (return_stmt)
    '?'             reduce using rule 48 (return_stmt)
    '!'             reduce using rule 48 (return_stmt)


State 326

   46 conditional_stmt: IF_STMT '(' operation • ')' command
   47                 | IF_STMT '(' operation • ')' command ELSE_STMT command
   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ')'         shift, and go to state 337
    AND         shift, and go to state 192
    OR          shift, and go to state 193
    GREATER     shift, and go to state 194
    GREATER_EQ  shift, and go to state 195
    LESS        shift, and go to state 196
    LESS_EQ     shift, and go to state 197
    EQUAL       shift, and go to state 198
    NOT_EQ      shift, and go to state 199


State 327

   49 iteration: FOR_STMT '(' loop_condition • ')' command

    ')'  shift, and go to state 338


State 328

   57 output: OUTPUT_WRITE '(' STRING • ')' ';'

    ')'  shift, and go to state 339


State 329

   55 output: OUTPUT_WRITE '(' operation • ')' ';'
   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ')'         shift, and go to state 340
    AND         shift, and go to state 192
    OR          shift, and go to state 193
    GREATER     shift, and go to state 194
    GREATER_EQ  shift, and go to state 195
    LESS        shift, and go to state 196
    LESS_EQ     shift, and go to state 197
    EQUAL       shift, and go to state 198
    NOT_EQ      shift, and go to state 199


State 330

   58 output: OUTPUT_WRITELN '(' STRING • ')' ';'

    ')'  shift, and go to state 341


State 331

   56 output: OUTPUT_WRITELN '(' operation • ')' ';'
   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    ')'         shift, and go to state 342
    AND         shift, and go to state 192
    OR          shift, and go to state 193
    GREATER     shift, and go to state 194
    GREATER_EQ  shift, and go to state 195
    LESS        shift, and go to state 196
    LESS_EQ     shift, and go to state 197
    EQUAL       shift, and go to state 198
    NOT_EQ      shift, and go to state 199


State 332

   59 input: INPUT_READ '(' iden • ')' ';'

    ')'  shift, and go to state 343


State 333

   40 command: $@6 '{' block_commands • '}'

    '}'  shift, and go to state 344


State 334

   45 init_stmt: iden '=' operation •
   62 operation: operation • GREATER operation
   63          | operation • GREATER_EQ operation
   64          | operation • LESS operation
   65          | operation • LESS_EQ operation
   66          | operation • EQUAL operation
   67          | operation • NOT_EQ operation
   68          | operation • AND operation
   69          | operation • OR operation

    AND         shift, and go to state 192
    OR          shift, and go to state 193
    GREATER     shift, and go to state 194
    GREATER_EQ  shift, and go to state 195
    LESS        shift, and go to state 196
    LESS_EQ     shift, and go to state 197
    EQUAL       shift, and go to state 198
    NOT_EQ      shift, and go to state 199

    ')'  reduce using rule 45 (init_stmt)


State 335

   12 func_calling: ID '(' $@2 calling_parameters • $@3 ')'

    ')'  reduce using rule 11 ($@3)

    $@3  go to state 345


State 336

   12 func_calling: ID '(' $@2 calling_parameters • $@3 ')'

    ')'  reduce using rule 11 ($@3)

    $@3  go to state 346


State 337

   46 conditional_stmt: IF_STMT '(' operation ')' • command
   47                 | IF_STMT '(' operation ')' • command ELSE_STMT command

    error           shift, and go to state 229
    NUM_INT         shift, and go to state 30
    NUM_FLOAT       shift, and go to state 31
    NIL_CNST        shift, and go to state 32
    ID              shift, and go to state 33
    RETURN_STM      shift, and go to state 230
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 231
    FOR_STMT        shift, and go to state 232
    OUTPUT_WRITE    shift, and go to state 233
    OUTPUT_WRITELN  shift, and go to state 234
    INPUT_READ      shift, and go to state 235
    '('             shift, and go to state 40
    '+'             shift, and go to state 41
    '-'             shift, and go to state 42
    '%'             shift, and go to state 43
    '?'             shift, and go to state 44
    '!'             shift, and go to state 45

    '{'  reduce using rule 39 ($@6)

    func_calling      go to state 46
    var_declaration   go to state 236
    unq_declaration   go to state 237
    type              go to state 167
    type_lst          go to state 11
    type_number       go to state 12
    command           go to state 347
    $@6               go to state 238
    init_variable     go to state 239
    init_stmt         go to state 240
    conditional_stmt  go to state 241
    return_stmt       go to state 242
    iteration         go to state 243
    output            go to state 244
    input             go to state 245
    iden              go to state 59
    operation         go to state 246
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 338

   49 iteration: FOR_STMT '(' loop_condition ')' • command

    error           shift, and go to state 229
    NUM_INT         shift, and go to state 30
    NUM_FLOAT       shift, and go to state 31
    NIL_CNST        shift, and go to state 32
    ID              shift, and go to state 33
    RETURN_STM      shift, and go to state 230
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 231
    FOR_STMT        shift, and go to state 232
    OUTPUT_WRITE    shift, and go to state 233
    OUTPUT_WRITELN  shift, and go to state 234
    INPUT_READ      shift, and go to state 235
    '('             shift, and go to state 40
    '+'             shift, and go to state 41
    '-'             shift, and go to state 42
    '%'             shift, and go to state 43
    '?'             shift, and go to state 44
    '!'             shift, and go to state 45

    '{'  reduce using rule 39 ($@6)

    func_calling      go to state 46
    var_declaration   go to state 236
    unq_declaration   go to state 237
    type              go to state 167
    type_lst          go to state 11
    type_number       go to state 12
    command           go to state 348
    $@6               go to state 238
    init_variable     go to state 239
    init_stmt         go to state 240
    conditional_stmt  go to state 241
    return_stmt       go to state 242
    iteration         go to state 243
    output            go to state 244
    input             go to state 245
    iden              go to state 59
    operation         go to state 246
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 339

   57 output: OUTPUT_WRITE '(' STRING ')' • ';'

    ';'  shift, and go to state 349


State 340

   55 output: OUTPUT_WRITE '(' operation ')' • ';'

    ';'  shift, and go to state 350


State 341

   58 output: OUTPUT_WRITELN '(' STRING ')' • ';'

    ';'  shift, and go to state 351


State 342

   56 output: OUTPUT_WRITELN '(' operation ')' • ';'

    ';'  shift, and go to state 352


State 343

   59 input: INPUT_READ '(' iden ')' • ';'

    ';'  shift, and go to state 353


State 344

   40 command: $@6 '{' block_commands '}' •

    error           reduce using rule 40 (command)
    NUM_INT         reduce using rule 40 (command)
    NUM_FLOAT       reduce using rule 40 (command)
    NIL_CNST        reduce using rule 40 (command)
    ID              reduce using rule 40 (command)
    RETURN_STM      reduce using rule 40 (command)
    T_INT           reduce using rule 40 (command)
    T_FLOAT         reduce using rule 40 (command)
    IF_STMT         reduce using rule 40 (command)
    ELSE_STMT       reduce using rule 40 (command)
    FOR_STMT        reduce using rule 40 (command)
    OUTPUT_WRITE    reduce using rule 40 (command)
    OUTPUT_WRITELN  reduce using rule 40 (command)
    INPUT_READ      reduce using rule 40 (command)
    '('             reduce using rule 40 (command)
    '{'             reduce using rule 40 (command)
    '}'             reduce using rule 40 (command)
    '+'             reduce using rule 40 (command)
    '-'             reduce using rule 40 (command)
    '%'             reduce using rule 40 (command)
    '?'             reduce using rule 40 (command)
    '!'             reduce using rule 40 (command)


State 345

   12 func_calling: ID '(' $@2 calling_parameters $@3 • ')'

    ')'  shift, and go to state 354


State 346

   12 func_calling: ID '(' $@2 calling_parameters $@3 • ')'

    ')'  shift, and go to state 355


State 347

   46 conditional_stmt: IF_STMT '(' operation ')' command •
   47                 | IF_STMT '(' operation ')' command • ELSE_STMT command

    ELSE_STMT  shift, and go to state 356

    error           reduce using rule 46 (conditional_stmt)
    NUM_INT         reduce using rule 46 (conditional_stmt)
    NUM_FLOAT       reduce using rule 46 (conditional_stmt)
    NIL_CNST        reduce using rule 46 (conditional_stmt)
    ID              reduce using rule 46 (conditional_stmt)
    RETURN_STM      reduce using rule 46 (conditional_stmt)
    T_INT           reduce using rule 46 (conditional_stmt)
    T_FLOAT         reduce using rule 46 (conditional_stmt)
    IF_STMT         reduce using rule 46 (conditional_stmt)
    FOR_STMT        reduce using rule 46 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 46 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 46 (conditional_stmt)
    INPUT_READ      reduce using rule 46 (conditional_stmt)
    '('             reduce using rule 46 (conditional_stmt)
    '{'             reduce using rule 46 (conditional_stmt)
    '}'             reduce using rule 46 (conditional_stmt)
    '+'             reduce using rule 46 (conditional_stmt)
    '-'             reduce using rule 46 (conditional_stmt)
    '%'             reduce using rule 46 (conditional_stmt)
    '?'             reduce using rule 46 (conditional_stmt)
    '!'             reduce using rule 46 (conditional_stmt)


State 348

   49 iteration: FOR_STMT '(' loop_condition ')' command •

    error           reduce using rule 49 (iteration)
    NUM_INT         reduce using rule 49 (iteration)
    NUM_FLOAT       reduce using rule 49 (iteration)
    NIL_CNST        reduce using rule 49 (iteration)
    ID              reduce using rule 49 (iteration)
    RETURN_STM      reduce using rule 49 (iteration)
    T_INT           reduce using rule 49 (iteration)
    T_FLOAT         reduce using rule 49 (iteration)
    IF_STMT         reduce using rule 49 (iteration)
    ELSE_STMT       reduce using rule 49 (iteration)
    FOR_STMT        reduce using rule 49 (iteration)
    OUTPUT_WRITE    reduce using rule 49 (iteration)
    OUTPUT_WRITELN  reduce using rule 49 (iteration)
    INPUT_READ      reduce using rule 49 (iteration)
    '('             reduce using rule 49 (iteration)
    '{'             reduce using rule 49 (iteration)
    '}'             reduce using rule 49 (iteration)
    '+'             reduce using rule 49 (iteration)
    '-'             reduce using rule 49 (iteration)
    '%'             reduce using rule 49 (iteration)
    '?'             reduce using rule 49 (iteration)
    '!'             reduce using rule 49 (iteration)


State 349

   57 output: OUTPUT_WRITE '(' STRING ')' ';' •

    error           reduce using rule 57 (output)
    NUM_INT         reduce using rule 57 (output)
    NUM_FLOAT       reduce using rule 57 (output)
    NIL_CNST        reduce using rule 57 (output)
    ID              reduce using rule 57 (output)
    RETURN_STM      reduce using rule 57 (output)
    T_INT           reduce using rule 57 (output)
    T_FLOAT         reduce using rule 57 (output)
    IF_STMT         reduce using rule 57 (output)
    ELSE_STMT       reduce using rule 57 (output)
    FOR_STMT        reduce using rule 57 (output)
    OUTPUT_WRITE    reduce using rule 57 (output)
    OUTPUT_WRITELN  reduce using rule 57 (output)
    INPUT_READ      reduce using rule 57 (output)
    '('             reduce using rule 57 (output)
    '{'             reduce using rule 57 (output)
    '}'             reduce using rule 57 (output)
    '+'             reduce using rule 57 (output)
    '-'             reduce using rule 57 (output)
    '%'             reduce using rule 57 (output)
    '?'             reduce using rule 57 (output)
    '!'             reduce using rule 57 (output)


State 350

   55 output: OUTPUT_WRITE '(' operation ')' ';' •

    error           reduce using rule 55 (output)
    NUM_INT         reduce using rule 55 (output)
    NUM_FLOAT       reduce using rule 55 (output)
    NIL_CNST        reduce using rule 55 (output)
    ID              reduce using rule 55 (output)
    RETURN_STM      reduce using rule 55 (output)
    T_INT           reduce using rule 55 (output)
    T_FLOAT         reduce using rule 55 (output)
    IF_STMT         reduce using rule 55 (output)
    ELSE_STMT       reduce using rule 55 (output)
    FOR_STMT        reduce using rule 55 (output)
    OUTPUT_WRITE    reduce using rule 55 (output)
    OUTPUT_WRITELN  reduce using rule 55 (output)
    INPUT_READ      reduce using rule 55 (output)
    '('             reduce using rule 55 (output)
    '{'             reduce using rule 55 (output)
    '}'             reduce using rule 55 (output)
    '+'             reduce using rule 55 (output)
    '-'             reduce using rule 55 (output)
    '%'             reduce using rule 55 (output)
    '?'             reduce using rule 55 (output)
    '!'             reduce using rule 55 (output)


State 351

   58 output: OUTPUT_WRITELN '(' STRING ')' ';' •

    error           reduce using rule 58 (output)
    NUM_INT         reduce using rule 58 (output)
    NUM_FLOAT       reduce using rule 58 (output)
    NIL_CNST        reduce using rule 58 (output)
    ID              reduce using rule 58 (output)
    RETURN_STM      reduce using rule 58 (output)
    T_INT           reduce using rule 58 (output)
    T_FLOAT         reduce using rule 58 (output)
    IF_STMT         reduce using rule 58 (output)
    ELSE_STMT       reduce using rule 58 (output)
    FOR_STMT        reduce using rule 58 (output)
    OUTPUT_WRITE    reduce using rule 58 (output)
    OUTPUT_WRITELN  reduce using rule 58 (output)
    INPUT_READ      reduce using rule 58 (output)
    '('             reduce using rule 58 (output)
    '{'             reduce using rule 58 (output)
    '}'             reduce using rule 58 (output)
    '+'             reduce using rule 58 (output)
    '-'             reduce using rule 58 (output)
    '%'             reduce using rule 58 (output)
    '?'             reduce using rule 58 (output)
    '!'             reduce using rule 58 (output)


State 352

   56 output: OUTPUT_WRITELN '(' operation ')' ';' •

    error           reduce using rule 56 (output)
    NUM_INT         reduce using rule 56 (output)
    NUM_FLOAT       reduce using rule 56 (output)
    NIL_CNST        reduce using rule 56 (output)
    ID              reduce using rule 56 (output)
    RETURN_STM      reduce using rule 56 (output)
    T_INT           reduce using rule 56 (output)
    T_FLOAT         reduce using rule 56 (output)
    IF_STMT         reduce using rule 56 (output)
    ELSE_STMT       reduce using rule 56 (output)
    FOR_STMT        reduce using rule 56 (output)
    OUTPUT_WRITE    reduce using rule 56 (output)
    OUTPUT_WRITELN  reduce using rule 56 (output)
    INPUT_READ      reduce using rule 56 (output)
    '('             reduce using rule 56 (output)
    '{'             reduce using rule 56 (output)
    '}'             reduce using rule 56 (output)
    '+'             reduce using rule 56 (output)
    '-'             reduce using rule 56 (output)
    '%'             reduce using rule 56 (output)
    '?'             reduce using rule 56 (output)
    '!'             reduce using rule 56 (output)


State 353

   59 input: INPUT_READ '(' iden ')' ';' •

    error           reduce using rule 59 (input)
    NUM_INT         reduce using rule 59 (input)
    NUM_FLOAT       reduce using rule 59 (input)
    NIL_CNST        reduce using rule 59 (input)
    ID              reduce using rule 59 (input)
    RETURN_STM      reduce using rule 59 (input)
    T_INT           reduce using rule 59 (input)
    T_FLOAT         reduce using rule 59 (input)
    IF_STMT         reduce using rule 59 (input)
    ELSE_STMT       reduce using rule 59 (input)
    FOR_STMT        reduce using rule 59 (input)
    OUTPUT_WRITE    reduce using rule 59 (input)
    OUTPUT_WRITELN  reduce using rule 59 (input)
    INPUT_READ      reduce using rule 59 (input)
    '('             reduce using rule 59 (input)
    '{'             reduce using rule 59 (input)
    '}'             reduce using rule 59 (input)
    '+'             reduce using rule 59 (input)
    '-'             reduce using rule 59 (input)
    '%'             reduce using rule 59 (input)
    '?'             reduce using rule 59 (input)
    '!'             reduce using rule 59 (input)


State 354

   12 func_calling: ID '(' $@2 calling_parameters $@3 ')' •

    ')'         reduce using rule 12 (func_calling)
    AND         reduce using rule 12 (func_calling)
    OR          reduce using rule 12 (func_calling)
    GREATER     reduce using rule 12 (func_calling)
    GREATER_EQ  reduce using rule 12 (func_calling)
    LESS        reduce using rule 12 (func_calling)
    LESS_EQ     reduce using rule 12 (func_calling)
    EQUAL       reduce using rule 12 (func_calling)
    NOT_EQ      reduce using rule 12 (func_calling)
    '+'         reduce using rule 12 (func_calling)
    '-'         reduce using rule 12 (func_calling)
    '*'         reduce using rule 12 (func_calling)
    '/'         reduce using rule 12 (func_calling)
    FILTER      reduce using rule 12 (func_calling)
    MAP         reduce using rule 12 (func_calling)
    ':'         reduce using rule 12 (func_calling)


State 355

   12 func_calling: ID '(' $@2 calling_parameters $@3 ')' •

    ')'         reduce using rule 12 (func_calling)
    ','         reduce using rule 12 (func_calling)
    AND         reduce using rule 12 (func_calling)
    OR          reduce using rule 12 (func_calling)
    GREATER     reduce using rule 12 (func_calling)
    GREATER_EQ  reduce using rule 12 (func_calling)
    LESS        reduce using rule 12 (func_calling)
    LESS_EQ     reduce using rule 12 (func_calling)
    EQUAL       reduce using rule 12 (func_calling)
    NOT_EQ      reduce using rule 12 (func_calling)
    '+'         reduce using rule 12 (func_calling)
    '-'         reduce using rule 12 (func_calling)
    '*'         reduce using rule 12 (func_calling)
    '/'         reduce using rule 12 (func_calling)
    FILTER      reduce using rule 12 (func_calling)
    MAP         reduce using rule 12 (func_calling)
    ':'         reduce using rule 12 (func_calling)


State 356

   47 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT • command

    error           shift, and go to state 229
    NUM_INT         shift, and go to state 30
    NUM_FLOAT       shift, and go to state 31
    NIL_CNST        shift, and go to state 32
    ID              shift, and go to state 33
    RETURN_STM      shift, and go to state 230
    T_INT           shift, and go to state 2
    T_FLOAT         shift, and go to state 3
    IF_STMT         shift, and go to state 231
    FOR_STMT        shift, and go to state 232
    OUTPUT_WRITE    shift, and go to state 233
    OUTPUT_WRITELN  shift, and go to state 234
    INPUT_READ      shift, and go to state 235
    '('             shift, and go to state 40
    '+'             shift, and go to state 41
    '-'             shift, and go to state 42
    '%'             shift, and go to state 43
    '?'             shift, and go to state 44
    '!'             shift, and go to state 45

    '{'  reduce using rule 39 ($@6)

    func_calling      go to state 46
    var_declaration   go to state 236
    unq_declaration   go to state 237
    type              go to state 167
    type_lst          go to state 11
    type_number       go to state 12
    command           go to state 357
    $@6               go to state 238
    init_variable     go to state 239
    init_stmt         go to state 240
    conditional_stmt  go to state 241
    return_stmt       go to state 242
    iteration         go to state 243
    output            go to state 244
    input             go to state 245
    iden              go to state 59
    operation         go to state 246
    lst_binary        go to state 61
    arith_binary      go to state 62
    term              go to state 63
    expression        go to state 64
    const             go to state 65
    number            go to state 66
    single_operation  go to state 67
    arith_single      go to state 68
    lst_single        go to state 69


State 357

   47 conditional_stmt: IF_STMT '(' operation ')' command ELSE_STMT command •

    error           reduce using rule 47 (conditional_stmt)
    NUM_INT         reduce using rule 47 (conditional_stmt)
    NUM_FLOAT       reduce using rule 47 (conditional_stmt)
    NIL_CNST        reduce using rule 47 (conditional_stmt)
    ID              reduce using rule 47 (conditional_stmt)
    RETURN_STM      reduce using rule 47 (conditional_stmt)
    T_INT           reduce using rule 47 (conditional_stmt)
    T_FLOAT         reduce using rule 47 (conditional_stmt)
    IF_STMT         reduce using rule 47 (conditional_stmt)
    ELSE_STMT       reduce using rule 47 (conditional_stmt)
    FOR_STMT        reduce using rule 47 (conditional_stmt)
    OUTPUT_WRITE    reduce using rule 47 (conditional_stmt)
    OUTPUT_WRITELN  reduce using rule 47 (conditional_stmt)
    INPUT_READ      reduce using rule 47 (conditional_stmt)
    '('             reduce using rule 47 (conditional_stmt)
    '{'             reduce using rule 47 (conditional_stmt)
    '}'             reduce using rule 47 (conditional_stmt)
    '+'             reduce using rule 47 (conditional_stmt)
    '-'             reduce using rule 47 (conditional_stmt)
    '%'             reduce using rule 47 (conditional_stmt)
    '?'             reduce using rule 47 (conditional_stmt)
    '!'             reduce using rule 47 (conditional_stmt)
